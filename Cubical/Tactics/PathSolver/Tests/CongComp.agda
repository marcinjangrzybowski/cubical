{-# OPTIONS --safe #-} 
module Cubical.Tactics.PathSolver.Tests.CongComp where


open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Function

import Agda.Builtin.Reflection as R

open import Cubical.Data.Nat
open import Cubical.Data.Bool
open import Cubical.Data.List


open import Cubical.Reflection.Base  renaming (v to ùíó)
open import Cubical.Tactics.PathSolver.Error
open import Cubical.Tactics.PathSolver.CongComp

open import Cubical.Tactics.PathSolver.QuoteCubical
open import Cubical.Tactics.PathSolver.CuTerm
open import Cubical.Tactics.PathSolver.CongComp





module _ (dim : ‚Ñï) (b : Bool) where

  macro
   testAppCong : R.Term ‚Üí R.Term ‚Üí R.TC Unit
   testAppCong t hole = do
    cu ‚Üê (extractCuTerm dim t)
    let cu' = appCongs dim cu 

    te ‚Üê ppCT dim 100 cu
    te' ‚Üê ppCT dim 100 cu'
    if b then (R.unify (toTerm dim cu') hole) else (R.typeError $
        te ++‚Çë [ "\n \n" ]‚Çë ++‚Çë [ toTerm dim cu ]‚Çë ++ [ "\n\n" ]‚Çë
         ++ te'
         ++‚Çë [ "\n \n" ]‚Çë ++‚Çë [ toTerm dim cu' ]‚Çë)

   testAppFill : R.Term ‚Üí R.Term ‚Üí R.TC Unit
   testAppFill t hole = do
    cu ‚Üê (extractCuTerm dim t)
    let cu' = fillCongs 15 dim cu 

    te ‚Üê ppCT dim 100 cu
    te' ‚Üê ppCTn false (suc dim) 100 cu'
    if b then (R.unify (toTerm (suc dim) cu') hole) else (R.typeError $
        te ++‚Çë [ "\n \n" ]‚Çë ++‚Çë [ toTerm dim cu ]‚Çë ++ [ "\n\n" ]‚Çë
         ++ te'
         ++‚Çë [ "\n \n" ]‚Çë ++‚Çë [ toTerm (suc dim) cu' ]‚Çë
         )


 


   


private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì
    x y z w v : A


 
module cong-test {x : A}
            {B C : Type ‚Ñì}
            (f f' : A ‚Üí B)
          (g : B ‚Üí B ‚Üí C)
          (p p' : Path A x y) (q q' : y ‚â° z)   (r : z ‚â° w) where

-- --   cong1 : I ‚Üí I ‚Üí B
-- --   cong1 i j = cong-‚àô f p q i j

-- --   -- cong1-test : Unit
-- --   -- cong1-test = {!testAppCong (suc (suc zero))
-- --   --        (Œª (i j : I) ‚Üí cong-‚àô f p q i j) !}

-- --   -- cong2-test : Unit
-- --   -- cong2-test = {!extractCuTermTest (suc zero)
-- --   --        (Œª (i : I) ‚Üí cong‚ÇÇ g (cong f (p ‚àô' q)) (cong f' (p' ‚àô q')) i) !}


-- -- --    cong1-test' : cong-‚àô f p q ‚â°
-- -- --                      getCuTerm (suc (suc zero))
-- -- --                        (Œª (i j : I) ‚Üí cong-‚àô f p q i j)
-- -- --    cong1-test' = refl

  zzz = congP (Œª _ ‚Üí cong f) (doubleCompPath-filler p q r)

  zzz' = cong‚ÇÇ g (cong f (p ‚àô' q)) (cong f' (p' ‚àô q'))

-- --   -- cong2-test' : Unit
-- --   -- cong2-test' = {! testAppCong (suc zero) false
-- --   --                    (Œª (i : I) ‚Üí zzz' i)!}


  _ : Cube
                   zzz (testAppCong (suc (suc zero)) true
                     (Œª (i j : I) ‚Üí zzz i j))
                   refl (testAppFill (suc zero) true
                     (Œª (j : I) ‚Üí zzz i1 j))
                   refl refl
  _ =  testAppFill (suc (suc zero)) true
                     (Œª (i j : I) ‚Üí zzz i j)

  zzz'-test : (cong‚ÇÇ g (cong f p) (cong f' refl)
                 ‚àô‚àô cong‚ÇÇ g (cong f q) (cong f' p')
                 ‚àô‚àô cong‚ÇÇ g (cong f refl) (cong f' q')) ‚â° (testAppCong (suc zero) true
                     (Œª (i : I) ‚Üí zzz' i))

  zzz'-test  = refl

-- --   zzz'-fillTest : --I ‚Üí I ‚Üí C
-- --     zzz' ‚â° (testAppCong (suc zero) true
-- --                      (Œª (i : I) ‚Üí zzz' i))
                         
-- --   zzz'-fillTest = testAppFill (suc zero) true
-- --                      (Œª (i : I) ‚Üí zzz' i)

-- --   zzz2 = cong f (p ‚àô (q ‚àô r))

-- --   zzz2-fillTest : zzz2 ‚â° (testAppCong (suc zero) true
-- --                      (Œª (i : I) ‚Üí zzz2 i))
-- --   zzz2-fillTest = 
-- --        testAppFill (suc zero) true
-- --                      (Œª (i : I) ‚Üí zzz2 i)

module dcpf-test {B : Type ‚Ñì} {x : A} (q : y ‚â° z) (p : Path A x y)  (r : z ‚â° w) (f : A ‚Üí A ‚Üí B) where

  codim1 : I ‚Üí I ‚Üí B 
  codim1 i j = f (hcomp
        h
       (q (i ‚àß j)))
       (hcomp
        h
       (q (i ‚àß j)))
    where
    h : _
    h = (Œª k ‚Üí Œª { (i = i0) ‚Üí p (~ k)
                ; (j = i0) ‚Üí p (~ k)
                ; (i = i1)(j = i1) ‚Üí r k
          })

  codim1-test' : Unit
  codim1-test' = testAppCong (suc (suc zero)) false
                     (Œª (i j : I) ‚Üí codim1 i j)
