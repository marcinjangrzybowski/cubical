{-# OPTIONS --safe -v testMarkVert:3 -v tactic:3 #-} 
-- -v 3 
module Cubical.Tactics.PathSolver.Path where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.Path
open import Cubical.Foundations.Interpolate

open import Cubical.Relation.Nullary

open import Cubical.Data.Bool hiding (_‚â§_)
open import Cubical.Data.Empty
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.List as L
open import Cubical.Data.Nat as ‚Ñï
open import Cubical.Data.Nat.Order.Recursive

open import Cubical.Data.Sigma.Base


open import Cubical.Reflection.Base renaming (v to ùíó)
open import Cubical.Reflection.Sugar
open import Agda.Builtin.Nat using () renaming (_==_ to _=‚Ñï_ ; _<_ to _<‚Ñï_)

import Agda.Builtin.Reflection as R

open import Cubical.Tactics.PathSolver.Reflection
-- open import Cubical.Tactics.Reflection 
open import Agda.Builtin.String
-- open import Agda.Builtin.Char
open import Cubical.Tactics.Reflection.Utilities
open import Cubical.Tactics.Reflection.Error
open import Cubical.Tactics.Reflection.Dimensions
open import Cubical.Tactics.Reflection.QuoteCubical



_‚àôf0_ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
         ‚àÄ {x‚ÇÄ y‚ÇÄ y‚ÇÅ z : A}
         ‚Üí {p‚ÇÄ : x‚ÇÄ ‚â° y‚ÇÄ} {q‚ÇÄ : y‚ÇÄ ‚â° z} {q‚ÇÅ : y‚ÇÅ ‚â° z}
         ‚Üí {r : x‚ÇÄ ‚â° y‚ÇÅ} {y‚â° : y‚ÇÄ ‚â° y‚ÇÅ}
         ‚Üí Square p‚ÇÄ (Œª _ ‚Üí y‚ÇÅ)  r y‚â°
         ‚Üí Square q‚ÇÄ q‚ÇÅ y‚â° (Œª _ ‚Üí z)

         ‚Üí Square (p‚ÇÄ ‚àô' q‚ÇÄ) q‚ÇÅ r Œª _ ‚Üí z
(u ‚àôf0 v) j i =
  hcomp (Œª k ‚Üí primPOr (~ i) (i ‚à® j) (Œª _ ‚Üí u j (~ k)) Œª _ ‚Üí v j i)
        (v j i)

_‚àôf1_ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
         ‚àÄ {x‚ÇÅ y‚ÇÄ y‚ÇÅ z : A}
         ‚Üí {p‚ÇÅ : x‚ÇÅ ‚â° y‚ÇÅ} {q‚ÇÄ : y‚ÇÄ ‚â° z} {q‚ÇÅ : y‚ÇÅ ‚â° z}
         ‚Üí {r : y‚ÇÄ ‚â° x‚ÇÅ} {y‚â° : y‚ÇÄ ‚â° y‚ÇÅ}
         ‚Üí Square (Œª _ ‚Üí y‚ÇÄ) p‚ÇÅ r y‚â°
         ‚Üí Square q‚ÇÄ q‚ÇÅ y‚â° (Œª _ ‚Üí z)

         ‚Üí Square q‚ÇÄ (p‚ÇÅ ‚àô' q‚ÇÅ) r Œª _ ‚Üí z
(u ‚àôf1 v) j i =
    hcomp (Œª k ‚Üí primPOr (~ i) (i ‚à® (~ j)) (Œª _ ‚Üí u j (~ k)) Œª _ ‚Üí v j i)
        (v j i)


_‚àô‚àô‚ñ†_‚àô‚àô‚ñ†_ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
         ‚àÄ {x x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : A}
         ‚Üí {p‚ÇÄ : x‚ÇÄ ‚â° x‚ÇÅ} {p‚ÇÅ : x‚ÇÅ ‚â° x‚ÇÇ} {p‚ÇÇ : x‚ÇÇ ‚â° x‚ÇÉ}
           {q‚ÇÄ : x‚ÇÄ ‚â° x} {q‚ÇÅ : x‚ÇÅ ‚â° x} {q‚ÇÇ : x‚ÇÇ ‚â° x} {q‚ÇÉ : x‚ÇÉ ‚â° x}
         ‚Üí Square q‚ÇÄ q‚ÇÅ p‚ÇÄ refl  
         ‚Üí Square q‚ÇÅ q‚ÇÇ p‚ÇÅ refl
         ‚Üí Square q‚ÇÇ q‚ÇÉ p‚ÇÇ refl
         ‚Üí Square q‚ÇÄ q‚ÇÉ (p‚ÇÄ ‚àô‚àô p‚ÇÅ ‚àô‚àô p‚ÇÇ) refl 
_‚àô‚àô‚ñ†_‚àô‚àô‚ñ†_ {x = x} s‚ÇÄ s‚ÇÅ s‚ÇÇ j i = 
  hcomp (Œª k ‚Üí Œª where
     (j = i0) ‚Üí s‚ÇÄ (~ k) i 
     (j = i1) ‚Üí s‚ÇÇ k i 
     (i = i1) ‚Üí x 
             ) (s‚ÇÅ j i)

‚ó™‚Üí‚â° : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x y : A} {p p' : x ‚â° y} ‚Üí
           Square p' refl p refl ‚Üí p ‚â° p' 
‚ó™‚Üí‚â° s i j = 
   hcomp (Œª k ‚Üí Œª where
     (j = i0) ‚Üí s i0 (i ‚àß ~ k)
     (i = i1) ‚Üí s i0 (j ‚à® ~ k)
     (i = i0) ‚Üí s j i ; (j = i1) ‚Üí s j i) (s j i)

‚ó™‚Üí‚ó™‚Üí‚â° : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x y : A} {p‚ÇÄ p‚ÇÅ p : x ‚â° y}
         ‚Üí Square p refl p‚ÇÄ refl
         ‚Üí Square p refl p‚ÇÅ refl
         ‚Üí p‚ÇÄ ‚â° p‚ÇÅ 
‚ó™‚Üí‚ó™‚Üí‚â° {y = y} {p = p} s‚ÇÄ s‚ÇÅ i j =
   hcomp
    (Œª k ‚Üí primPOr (~ i ‚à® ~ j ‚à® j) i (Œª _ ‚Üí  s‚ÇÄ j (~ k))
         Œª _ ‚Üí s‚ÇÅ j (~ k)) y

comp‚Çã‚ÇÄ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
    {a a‚ÇÄ‚ÇÄ : A} {a‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ ‚â° a}
  {a‚ÇÅ‚ÇÄ : A} {a‚ÇÅ‚Çã : a‚ÇÅ‚ÇÄ ‚â° a} 
  {a‚Çã‚ÇÄ a‚Çã‚ÇÄ' : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ} 
  ‚Üí Square a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ refl
  ‚Üí a‚Çã‚ÇÄ' ‚â° a‚Çã‚ÇÄ
  ‚Üí Square a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ' refl
comp‚Çã‚ÇÄ s p i j =
  hcomp (Œª k ‚Üí primPOr (~ j) (j ‚à® i ‚à® ~ i) (Œª _ ‚Üí p (~ k) i) Œª _ ‚Üí s i j)  (s i j)

‚ó™mkSq : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
    {a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ : A} {a‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ}
  {a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ : A} {a‚ÇÅ‚Çã p‚ÇÅ‚ÇÄ : a‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ} 
  {a‚Çã‚ÇÄ : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ} {a‚Çã‚ÇÅ p‚ÇÄ‚ÇÅ : a‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ}
  ‚Üí {p : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ}
  ‚Üí Square p p‚ÇÄ‚ÇÅ a‚ÇÄ‚Çã refl
  ‚Üí Square p‚ÇÅ‚ÇÄ refl a‚ÇÅ‚Çã refl
  ‚Üí Square p p‚ÇÅ‚ÇÄ a‚Çã‚ÇÄ refl
  ‚Üí Square  p‚ÇÄ‚ÇÅ refl a‚Çã‚ÇÅ refl
  ‚Üí Square a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ a‚Çã‚ÇÅ  
‚ó™mkSq {a‚ÇÅ‚ÇÅ = a‚ÇÅ‚ÇÅ} s‚ÇÄ‚Çã s‚ÇÅ‚Çã s‚Çã‚ÇÄ s‚Çã‚ÇÅ i j =
  hcomp (Œª k ‚Üí Œª where
     (i = i0) ‚Üí s‚ÇÄ‚Çã j (~ k)
     (i = i1) ‚Üí s‚ÇÅ‚Çã j (~ k)
     (j = i0) ‚Üí s‚Çã‚ÇÄ i (~ k)
     (j = i1) ‚Üí s‚Çã‚ÇÅ i (~ k))
    a‚ÇÅ‚ÇÅ


data Sequence (n : ‚Ñï) : Type where
 ùìø : ‚àÄ k ‚Üí {k ‚â§ n} ‚Üí Sequence n
 ùìπ : ‚àÄ k ‚Üí ‚àÄ {k‚â§n sk‚â§n} ‚Üí ùìø k {k‚â§n} ‚â° ùìø (suc k) {sk‚â§n} 


record NPath {‚Ñì} n (A : Type ‚Ñì) : Type ‚Ñì where
 field
  ùë£ : ‚àÄ k ‚Üí {k ‚â§ n} ‚Üí A
  ùëù : ‚àÄ k ‚Üí ‚àÄ {k‚â§n sk‚â§n} ‚Üí ùë£ k {k‚â§n} ‚â° ùë£ (suc k) {sk‚â§n}

 ùë£‚ÇÄ : A
 ùë£‚ÇÄ = ùë£ 0
 
 ùë£‚ÇÅ : {1 ‚â§ n} ‚Üí A
 ùë£‚ÇÅ {k‚â§} = ùë£ 1 {k‚â§}

 ùë£‚ÇÇ : {2 ‚â§ n} ‚Üí A
 ùë£‚ÇÇ {k‚â§} = ùë£ 2 {k‚â§}

 ùë£‚ÇÉ : {3 ‚â§ n} ‚Üí A
 ùë£‚ÇÉ {k‚â§} = ùë£ 3 {k‚â§}

 ùë£‚ÇÑ : {4 ‚â§ n} ‚Üí A
 ùë£‚ÇÑ {k‚â§} = ùë£ 4 {k‚â§}

 ùë£‚ÇÖ : {5 ‚â§ n} ‚Üí A
 ùë£‚ÇÖ {k‚â§} = ùë£ 5 {k‚â§}


 ùë£‚ÇÜ : {6 ‚â§ n} ‚Üí A
 ùë£‚ÇÜ {k‚â§} = ùë£ 6 {k‚â§}


 ùëù‚ÇÄ : ‚àÄ {k‚â§n sk‚â§n} ‚Üí ùë£ 0 {k‚â§n} ‚â° ùë£ 1 {sk‚â§n} 
 ùëù‚ÇÄ {k‚â§n} {sk‚â§n} = ùëù zero {k‚â§n} {sk‚â§n}

 ùëù‚ÇÅ : ‚àÄ {k‚â§n sk‚â§n} ‚Üí ùë£ 1 {k‚â§n} ‚â° ùë£ 2 {sk‚â§n} 
 ùëù‚ÇÅ {k‚â§n} {sk‚â§n} = ùëù (suc zero) {k‚â§n} {sk‚â§n}

 ùëù‚ÇÇ : ‚àÄ {k‚â§n sk‚â§n} ‚Üí ùë£ 2 {k‚â§n} ‚â° ùë£ 3 {sk‚â§n} 
 ùëù‚ÇÇ {k‚â§n} {sk‚â§n} = ùëù (suc (suc zero)) {k‚â§n} {sk‚â§n}

 ùëù‚ÇÉ : ‚àÄ {k‚â§n sk‚â§n} ‚Üí ùë£ 3 {k‚â§n} ‚â° ùë£ 4 {sk‚â§n} 
 ùëù‚ÇÉ {k‚â§n} {sk‚â§n} = ùëù (suc (suc (suc zero))) {k‚â§n} {sk‚â§n}

 ùëù‚ÇÑ : ‚àÄ {k‚â§n sk‚â§n} ‚Üí ùë£ 4 {k‚â§n} ‚â° ùë£ 5 {sk‚â§n} 
 ùëù‚ÇÑ {k‚â§n} {sk‚â§n} = ùëù (suc (suc (suc (suc zero)))) {k‚â§n} {sk‚â§n}

 ùëù‚ÇÖ : ‚àÄ {k‚â§n sk‚â§n} ‚Üí ùë£ 5 {k‚â§n} ‚â° ùë£ 6 {sk‚â§n} 
 ùëù‚ÇÖ {k‚â§n} {sk‚â§n} = ùëù (suc (suc (suc (suc (suc zero))))) {k‚â§n} {sk‚â§n}


module _ {‚Ñì} n (A : Type ‚Ñì) where

 fromNPath : (Sequence n ‚Üí A) ‚Üí NPath n A
 fromNPath x .NPath.ùë£ k {k‚â§n} = x (ùìø k {k‚â§n})
 fromNPath x .NPath.ùëù k {k‚â§n} {k‚â§n'} i = x (ùìπ k {k‚â§n} {k‚â§n'} i)

 toNPath : NPath n A ‚Üí (Sequence n ‚Üí A) 
 toNPath x (ùìø k {k‚â§n}) = x .NPath.ùë£ k {k‚â§n}
 toNPath x (ùìπ k {k‚â§n} {k‚â§n'} i) = x .NPath.ùëù k {k‚â§n} {k‚â§n'} i

 IsoFunSequenceNPath : Iso (NPath n A) (Sequence n ‚Üí A)
 IsoFunSequenceNPath .Iso.fun = toNPath
 IsoFunSequenceNPath .Iso.inv = fromNPath
 IsoFunSequenceNPath .Iso.rightInv b i a@(ùìø k) = b a
 IsoFunSequenceNPath .Iso.rightInv b i a@(ùìπ k i‚ÇÅ) = b a
 IsoFunSequenceNPath .Iso.leftInv a i .NPath.ùë£ = a .NPath.ùë£
 IsoFunSequenceNPath .Iso.leftInv a i .NPath.ùëù = a .NPath.ùëù



coh‚ÇÉhelper : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
               {x‚ÇÄ x‚ÇÅ : A} ‚Üí {p p‚ÇÄ‚ÇÄ p‚ÇÄ‚ÇÅ p‚ÇÅ‚ÇÄ p‚ÇÅ‚ÇÅ : x‚ÇÄ ‚â° x‚ÇÅ} ‚Üí 
               {s‚ÇÄ‚ÇÄ : Square refl p‚ÇÄ‚ÇÄ refl p}
               {s‚ÇÄ‚ÇÅ : Square refl p‚ÇÄ‚ÇÅ refl p}
               {s‚ÇÅ‚ÇÄ : Square refl p‚ÇÅ‚ÇÄ refl p}
               {s‚ÇÅ‚ÇÅ : Square refl p‚ÇÅ‚ÇÅ refl p}
               ‚Üí
               Cube _ _ _ _ (Œª _ _ ‚Üí x‚ÇÄ) (Œª _ _ ‚Üí x‚ÇÅ)
coh‚ÇÉhelper {x‚ÇÄ = x‚ÇÄ} {p = p} {s‚ÇÄ‚ÇÄ = s‚ÇÄ‚ÇÄ} {s‚ÇÄ‚ÇÅ} {s‚ÇÅ‚ÇÄ} {s‚ÇÅ‚ÇÅ} i j k =
   hcomp
      (Œª z ‚Üí Œª {
        (k = i0) ‚Üí x‚ÇÄ
       ;(k = i1) ‚Üí p z
       ;(i = i0)(j = i0) ‚Üí s‚ÇÄ‚ÇÄ z k
       ;(i = i1)(j = i0) ‚Üí s‚ÇÅ‚ÇÄ z k
       ;(i = i0)(j = i1) ‚Üí s‚ÇÄ‚ÇÅ z k
       ;(i = i1)(j = i1) ‚Üí s‚ÇÅ‚ÇÅ z k
      }) x‚ÇÄ


comp-coh-helper : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
               {x‚ÇÄ x‚ÇÅ : A} ‚Üí {p p‚ÇÄ p‚ÇÅ p‚ÇÇ : x‚ÇÄ ‚â° x‚ÇÅ} ‚Üí 
               {s‚ÇÄ : Square refl p‚ÇÄ refl p}
               {s‚ÇÅ : Square refl p‚ÇÅ refl p}
               {s‚ÇÇ : Square refl p‚ÇÇ refl p}
               
               ‚Üí
               Cube ((cong sym (‚ó™‚Üí‚ó™‚Üí‚â° (Œª i i‚ÇÅ ‚Üí s‚ÇÄ (~ i‚ÇÅ) (~ i)) (Œª i i‚ÇÅ ‚Üí s‚ÇÅ (~ i‚ÇÅ) (~ i))))
                    ‚àô (cong sym (‚ó™‚Üí‚ó™‚Üí‚â° (Œª i i‚ÇÅ ‚Üí s‚ÇÅ (~ i‚ÇÅ) (~ i)) (Œª i i‚ÇÅ ‚Üí s‚ÇÇ (~ i‚ÇÅ) (~ i))))) 
                   (cong sym (‚ó™‚Üí‚ó™‚Üí‚â° (Œª i i‚ÇÅ ‚Üí s‚ÇÄ (~ i‚ÇÅ) (~ i)) (Œª i i‚ÇÅ ‚Üí s‚ÇÇ (~ i‚ÇÅ) (~ i))))
                  (refl {x = p‚ÇÄ}) (refl {x = p‚ÇÇ}) (Œª _ _ ‚Üí x‚ÇÄ) (Œª _ _ ‚Üí x‚ÇÅ)
comp-coh-helper {x‚ÇÄ = x‚ÇÄ} {x‚ÇÅ} {p = p} {p‚ÇÄ} {p‚ÇÅ} {p‚ÇÇ} {s‚ÇÄ = s‚ÇÄ} {s‚ÇÅ} {s‚ÇÇ} =
  Œª k i j  ‚Üí 
   hcomp
     (Œª z ‚Üí Œª {
        (j = i0) ‚Üí x‚ÇÄ
      ;(j = i1) ‚Üí p (~ k ‚à® z ‚à® ~ i)
      ;(i = i0) ‚Üí p‚ÇÄ j
      ;(i = i1) ‚Üí hcomp (Œª k' ‚Üí Œª {(z = i0) ‚Üí s‚ÇÅ (k' ‚àß ~ k)  j
                         ;(z = i1) ‚Üí s‚ÇÇ k' j
                         ;(j = i0) ‚Üí x‚ÇÄ
                         ;(j = i1) ‚Üí p (k' ‚àß (~ k ‚à® z))
                         }) x‚ÇÄ
      ;(k = i1) ‚Üí hcomp
           (Œª k ‚Üí Œª {(i = i0) ‚Üí s‚ÇÄ k j
                    ;(i = i1)(z = i0) ‚Üí x‚ÇÄ
                    ;(i = i1)(z = i1) ‚Üí s‚ÇÇ k j 
                    ;(j = i0) ‚Üí x‚ÇÄ
                    ;(j = i1) ‚Üí p (k ‚àß (z ‚à® (~ i)))
                    }) x‚ÇÄ

       }) (hcomp (Œª k' ‚Üí Œª {(i = i0) ‚Üí s‚ÇÄ k' j
                      ;(i = i1) ‚Üí s‚ÇÅ (k' ‚àß ~ k) j
                      ;(j = i0) ‚Üí x‚ÇÄ
                      ;(j = i1) ‚Üí p (k' ‚àß (~ k ‚à® ~ i))
                       }) x‚ÇÄ)
