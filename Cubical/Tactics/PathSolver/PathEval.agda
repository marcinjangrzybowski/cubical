{-# OPTIONS --safe -v testMarkVert:3 -v tactic:3 #-} 
-- -v 3 
module Cubical.Tactics.PathSolver.PathEval where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function

open import Cubical.Relation.Nullary

open import Cubical.Data.Bool
open import Cubical.Data.Empty
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.List as L
open import Cubical.Data.Nat as ‚Ñï

open import Cubical.Data.Sigma.Base


open import Cubical.Reflection.Base renaming (v to ùíó)
open import Agda.Builtin.Nat using () renaming (_==_ to _=‚Ñï_ ; _<_ to _<‚Ñï_)

import Agda.Builtin.Reflection as R

open import Cubical.Tactics.PathSolver.Reflection
-- open import Cubical.Tactics.Reflection 
open import Agda.Builtin.String
-- open import Agda.Builtin.Char
open import Cubical.Tactics.Reflection.Utilities
open import Cubical.Tactics.PathSolver.Error
open import Cubical.Tactics.PathSolver.Dimensions
open import Cubical.Tactics.PathSolver.QuoteCubical


-- -- absorbStep : R.Term ‚Üí R.Term ‚Üí
-- --   R.TC ((Maybe (R.Term √ó R.Term)) √ó
-- --        (R.Term √ó Maybe R.Term)
-- --        √ó Maybe R.Term) 
-- -- absorbStep = {!!} 

-- -- absorb : R.Term ‚Üí List R.Term ‚Üí R.TC ((List (R.Term √ó Maybe Bool)) √ó List R.Term)
-- -- absorb y [] = pure $ [ ({!!} , just true) ] , [ y ] 
-- -- absorb y (x ‚à∑ xs) = do
-- --   preT , (atT , atT1) , postT ‚Üê absorbStep x y
-- --   (xs' , zs')  ‚Üê Mb.rec (pure $ (L.map ((_, nothing) ‚àòS liftVars) xs) , xs) (Œª y' ‚Üí absorb y' xs) postT
-- --   pure ((maybeToList (map-Maybe ((_, just true) ‚àòS fst) preT) ++
-- --                (atT , caseMaybe (just false) nothing atT1) ‚à∑ xs' ,
-- --          maybeToList (map-Maybe snd preT) ++ maybeToList atT1 ++ zs') )
-- --   -- pure {!!}


data ASTMarkers : Type where
 PathWrap' FillWrap' CompWrap' : ASTMarkers

PathWrap FillWrap CompWrap : ASTMarkers
PathWrap = PathWrap'
FillWrap = FillWrap'
CompWrap = CompWrap'

WTerm = R.Term
CTerm = R.Term


pattern fw[1,_] x = R.def (quote FillWrap) (R.lit (R.name (quote true)) v‚à∑ v[ x ])   
pattern fw[0,_] x = R.def (quote FillWrap) (R.lit (R.name (quote false)) v‚à∑ v[ x ])   



-- pattern pw[] = R.def (quote PathWrap) []   

pattern pw[_] x = R.def (quote PathWrap) (x v‚à∑ [])   
pattern pwd args = R.def (quote PathWrap) args

-- pattern pw xs = R.def (quote PathWrap) xs

-- pattern _‚à∑pw_ x xs = R.def (quote PathWrap) (x v‚à∑ xs)  


pattern cwd args = R.def (quote CompWrap) args

pattern cw[] = R.def (quote CompWrap) []   
pattern cw[_] x = R.def (quote CompWrap) (x v‚à∑ [])   
pattern cw xs = R.def (quote CompWrap) xs
pattern _‚à∑cw_ x xs = R.def (quote CompWrap) (x v‚à∑ xs)  




--                                  -- just - merged
--                                  -- nothing - cons



-- -- module WrapPaths where

-- --  wp : ‚Ñï ‚Üí R.Term ‚Üí R.Term
-- --  wp = {!!}

-- -- record WTerm : Type where
-- --  constructor wterm
-- --  field
-- --   term : R.Term 

-- -- open WTerm

-- -- _‚àô‚ñ†_

_‚àôf0_ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
         ‚àÄ {x‚ÇÄ y‚ÇÄ y‚ÇÅ z : A}
         ‚Üí {p‚ÇÄ : x‚ÇÄ ‚â° y‚ÇÄ} {q‚ÇÄ : y‚ÇÄ ‚â° z} {q‚ÇÅ : y‚ÇÅ ‚â° z}
         ‚Üí {r : x‚ÇÄ ‚â° y‚ÇÅ} {y‚â° : y‚ÇÄ ‚â° y‚ÇÅ}
         ‚Üí Square p‚ÇÄ (Œª _ ‚Üí y‚ÇÅ)  r y‚â°
         ‚Üí Square q‚ÇÄ q‚ÇÅ y‚â° (Œª _ ‚Üí z)

         ‚Üí Square (p‚ÇÄ ‚àô' q‚ÇÄ) q‚ÇÅ r Œª _ ‚Üí z
(u ‚àôf0 v) j i =
  hcomp (Œª k ‚Üí primPOr (~ i) (i ‚à® j) (Œª _ ‚Üí u j (~ k)) Œª _ ‚Üí v j i)
        (v j i)

_‚àôf1_ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
         ‚àÄ {x‚ÇÅ y‚ÇÄ y‚ÇÅ z : A}
         ‚Üí {p‚ÇÅ : x‚ÇÅ ‚â° y‚ÇÅ} {q‚ÇÄ : y‚ÇÄ ‚â° z} {q‚ÇÅ : y‚ÇÅ ‚â° z}
         ‚Üí {r : y‚ÇÄ ‚â° x‚ÇÅ} {y‚â° : y‚ÇÄ ‚â° y‚ÇÅ}
         ‚Üí Square (Œª _ ‚Üí y‚ÇÄ) p‚ÇÅ r y‚â°
         ‚Üí Square q‚ÇÄ q‚ÇÅ y‚â° (Œª _ ‚Üí z)

         ‚Üí Square q‚ÇÄ (p‚ÇÅ ‚àô' q‚ÇÅ) r Œª _ ‚Üí z
(u ‚àôf1 v) j i =
    hcomp (Œª k ‚Üí primPOr (~ i) (i ‚à® (~ j)) (Œª _ ‚Üí u j (~ k)) Œª _ ‚Üí v j i)
        (v j i)



-- _‚àô‚ñ†_ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
--          ‚àÄ {x y z : A}
--          ‚Üí {p : x ‚â° y} {q : y ‚â° z} {r : y ‚â° z} {s : x ‚â° z}
--          ‚Üí Square s r p (Œª _ ‚Üí z) 
--          ‚Üí Square r refl q refl

--          ‚Üí Square s (Œª _ ‚Üí z)  (p ‚àô q) (Œª _ ‚Üí z)
-- (u ‚àô‚ñ† v) j i = 
--     hcomp (Œª k ‚Üí primPOr j (i ‚à® (~ j)) (Œª _ ‚Üí v k i) Œª _ ‚Üí u j i)
--         (u j i)

_‚àô‚àô‚ñ†_‚àô‚àô‚ñ†_ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
         ‚àÄ {x x‚ÇÄ x‚ÇÅ x‚ÇÇ x‚ÇÉ : A}
         ‚Üí {p‚ÇÄ : x‚ÇÄ ‚â° x‚ÇÅ} {p‚ÇÅ : x‚ÇÅ ‚â° x‚ÇÇ} {p‚ÇÇ : x‚ÇÇ ‚â° x‚ÇÉ}
           {q‚ÇÄ : x‚ÇÄ ‚â° x} {q‚ÇÅ : x‚ÇÅ ‚â° x} {q‚ÇÇ : x‚ÇÇ ‚â° x} {q‚ÇÉ : x‚ÇÉ ‚â° x}
         ‚Üí Square q‚ÇÄ q‚ÇÅ p‚ÇÄ refl  
         ‚Üí Square q‚ÇÅ q‚ÇÇ p‚ÇÅ refl
         ‚Üí Square q‚ÇÇ q‚ÇÉ p‚ÇÇ refl
         ‚Üí Square q‚ÇÄ q‚ÇÉ (p‚ÇÄ ‚àô‚àô p‚ÇÅ ‚àô‚àô p‚ÇÇ) refl 
_‚àô‚àô‚ñ†_‚àô‚àô‚ñ†_ {x = x} s‚ÇÄ s‚ÇÅ s‚ÇÇ j i = 
  hcomp (Œª k ‚Üí Œª where
     (j = i0) ‚Üí s‚ÇÄ (~ k) i 
     (j = i1) ‚Üí s‚ÇÇ k i 
     (i = i1) ‚Üí x 
             ) (s‚ÇÅ j i)

‚ó™‚Üí‚â° : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x y : A} {p p' : x ‚â° y} ‚Üí
           Square p' refl p refl ‚Üí p ‚â° p' 
‚ó™‚Üí‚â° s i j = 
   hcomp (Œª k ‚Üí Œª where
     (j = i0) ‚Üí s i0 (i ‚àß ~ k)
     (i = i1) ‚Üí s i0 (j ‚à® ~ k)
     (i = i0) ‚Üí s j i ; (j = i1) ‚Üí s j i) (s j i)

‚ó™‚Üí‚ó™‚Üí‚â° : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {x y : A} {p‚ÇÄ p‚ÇÅ p : x ‚â° y}
         ‚Üí Square p refl p‚ÇÄ refl
         ‚Üí Square p refl p‚ÇÅ refl
         ‚Üí p‚ÇÄ ‚â° p‚ÇÅ 
‚ó™‚Üí‚ó™‚Üí‚â° {y = y} {p = p} s‚ÇÄ s‚ÇÅ i j =
   hcomp
    (Œª k ‚Üí primPOr (~ i ‚à® ~ j ‚à® j) i (Œª _ ‚Üí  s‚ÇÄ j (~ k))
         Œª _ ‚Üí s‚ÇÅ j (~ k)) y

comp‚Çã‚ÇÄ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
    {a a‚ÇÄ‚ÇÄ : A} {a‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ ‚â° a}
  {a‚ÇÅ‚ÇÄ : A} {a‚ÇÅ‚Çã : a‚ÇÅ‚ÇÄ ‚â° a} 
  {a‚Çã‚ÇÄ a‚Çã‚ÇÄ' : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ} 
  ‚Üí Square a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ refl
  ‚Üí a‚Çã‚ÇÄ' ‚â° a‚Çã‚ÇÄ
  ‚Üí Square a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ' refl
comp‚Çã‚ÇÄ s p i j =
  hcomp (Œª k ‚Üí primPOr (~ j) (j ‚à® i ‚à® ~ i) (Œª _ ‚Üí p (~ k) i) Œª _ ‚Üí s i j)  (s i j)

-- comp‚Çã‚ÇÄ' : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
--     {a a‚ÇÄ‚ÇÄ : A} {a‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ ‚â° a}
--   {a‚ÇÅ‚ÇÄ : A} {a‚ÇÅ‚Çã : a‚ÇÅ‚ÇÄ ‚â° a} 
--   {a‚Çã‚ÇÄ a‚Çã‚ÇÄ' : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ} 
--   ‚Üí Square a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ refl
--   ‚Üí a‚Çã‚ÇÄ ‚â° a‚Çã‚ÇÄ'
--   ‚Üí Square a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ' refl
-- comp‚Çã‚ÇÄ' s p i j =
--   hcomp (Œª k ‚Üí primPOr (~ j) (j ‚à® i ‚à® ~ i) (Œª _ ‚Üí p k i) Œª _ ‚Üí s i j)  (s i j)

‚ó™mkSq : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí
    {a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ : A} {a‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ}
  {a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ : A} {a‚ÇÅ‚Çã p‚ÇÅ‚ÇÄ : a‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ} 
  {a‚Çã‚ÇÄ : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ} {a‚Çã‚ÇÅ p‚ÇÄ‚ÇÅ : a‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ}
  ‚Üí {p : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ}
  ‚Üí Square p p‚ÇÄ‚ÇÅ a‚ÇÄ‚Çã refl
  ‚Üí Square p‚ÇÅ‚ÇÄ refl a‚ÇÅ‚Çã refl
  ‚Üí Square p p‚ÇÅ‚ÇÄ a‚Çã‚ÇÄ refl
  ‚Üí Square  p‚ÇÄ‚ÇÅ refl a‚Çã‚ÇÅ refl
  ‚Üí Square a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ a‚Çã‚ÇÅ  
‚ó™mkSq {a‚ÇÅ‚ÇÅ = a‚ÇÅ‚ÇÅ} s‚ÇÄ‚Çã s‚ÇÅ‚Çã s‚Çã‚ÇÄ s‚Çã‚ÇÅ i j =
  hcomp (Œª k ‚Üí Œª where
     (i = i0) ‚Üí s‚ÇÄ‚Çã j (~ k)
     (i = i1) ‚Üí s‚ÇÅ‚Çã j (~ k)
     (j = i0) ‚Üí s‚Çã‚ÇÄ i (~ k)
     (j = i1) ‚Üí s‚Çã‚ÇÅ i (~ k))
    a‚ÇÅ‚ÇÅ

intervalTest : ‚Ñï ‚Üí R.Term ‚Üí Bool
intervalTest _ (R.def (quote _‚à®_) _) = true
intervalTest _ (R.def (quote _‚àß_) _) = true
intervalTest _ (R.def (quote ~_) _) = true
intervalTest n (R.var k []) = n =‚Ñï k
intervalTest _ _ = false

wrapPaths : R.Term ‚Üí WTerm
wrapPaths = atVarOrConM' f h g
 where
  f : ‚Ñï ‚Üí ‚Ñï ‚Üí List (R.Arg R.Term) ‚Üí Maybe R.Term
  f n v args =  
     if any? (L.map (intervalTest n ‚àòS unArg) args)
     then  just pw[ (R.var (v + n) args) ]
     else nothing

  h : ‚Ñï ‚Üí R.Name ‚Üí List (R.Arg R.Term) ‚Üí Maybe R.Term
  h n nm args =
     if any? (L.map (intervalTest n ‚àòS unArg) args)
     then  just pw[ (R.con nm args) ]
     else nothing

  g : ‚Ñï ‚Üí R.Name ‚Üí List (R.Arg R.Term) ‚Üí Maybe R.Term
  g n nm args =
     if any? (L.map (intervalTest n ‚àòS unArg) args)
     then  just pw[ (R.def nm args) ]
     else nothing

wrapFills : R.Term ‚Üí WTerm
wrapFills = atVarOrConM' f h g
 where
  f : ‚Ñï ‚Üí ‚Ñï ‚Üí List (R.Arg R.Term) ‚Üí Maybe R.Term
  f n v args =  
     if any? (L.map (intervalTest n ‚àòS unArg) args)
     then  just fw[1, pw[ (R.var (v + n) args) ] ]
     else nothing

  h : ‚Ñï ‚Üí R.Name ‚Üí List (R.Arg R.Term) ‚Üí Maybe R.Term
  h n nm args =
     if any? (L.map (intervalTest n ‚àòS unArg) args)
     then  just fw[1, pw[ (R.con nm args) ] ]
     else nothing


  g : ‚Ñï ‚Üí R.Name ‚Üí List (R.Arg R.Term) ‚Üí Maybe R.Term
  g n nm args =
     if any? (L.map (intervalTest n ‚àòS unArg) args)
     then  just fw[1, pw[ (R.def nm args) ] ]
     else nothing



dropPathWraps : CTerm ‚Üí R.Term
dropPathWraps = atVarOrDefM {{_}} {{RawMonadIdentityM}}
  (Œª _ v _ argsM ‚Üí R.var v argsM)
  Œª _ d _ argsM ‚Üí w (R.def d argsM)

 where
  w : R.Term ‚Üí R.Term
  w pw[ x ] = x
  w x = x


absorb : ‚Ñï ‚Üí WTerm ‚Üí CTerm ‚Üí R.TC CTerm


absorbStep : ‚Ñï ‚Üí WTerm ‚Üí WTerm ‚Üí R.TC (Maybe CTerm)
absorbStep n (cwd _) _ = R.typeError [ "cwd in absorbStep" ]‚Çë
absorbStep n _ (cwd _) = R.typeError [ "cwd in absorbStep" ]‚Çë
absorbStep zero pw[ x ] pw[ y ] = do
  -- R.debugPrint "testMarkVert" 3 $ "-----" ‚à∑nl x ‚à∑nl "** \n" ‚à∑nl [ y ]‚Çë 
  (if_then (just fw[0, y ]) else nothing) <$> unifyTest (suc zero) x (invVar zero y)
absorbStep (suc _) pw[ x ] pw[ y ] =
 R.typeError [ "absorbStep: todo - paths under abstraction" ]‚Çë  
absorbStep n x pw[ y ] = pure nothing
absorbStep n pw[ x ] y = pure nothing
absorbStep n (pwd _) _ = R.typeError [ "pwd1 in absorbStep!" ]‚Çë
absorbStep n _ (pwd _) = R.typeError [ "pwd2 in absorbStep!" ]‚Çë
absorbStep n x y = just <$> h x y
 where

 hs : R.Sort ‚Üí R.Sort ‚Üí R.TC R.Sort
 h : WTerm ‚Üí WTerm ‚Üí R.TC CTerm
 
 ha : List (R.Arg R.Term) ‚Üí List (R.Arg R.Term) ‚Üí R.TC (List (R.Arg R.Term))
 ha [] [] = pure []
 ha (R.arg ax x ‚à∑ xs) (R.arg _ x' ‚à∑ xs')  =
   ‚¶á ‚¶á R.arg ‚¶á ax ‚¶à (absorb n x x') ‚¶à  ‚à∑ ha xs xs' ‚¶à
 ha _ _ = R.typeError [ "absorbStep: ha-failed" ]‚Çë

 h (R.var x args) (R.var _ args') = R.var x <$> ha args args'
 h (R.con c args) (R.con _ args') = R.con c <$> ha args args'
 h (R.def f args) (R.def _ args') = R.def f <$> ha args args'
 h (R.lam v (R.abs ai t)) (R.lam v' (R.abs _ t')) =
    ‚¶á R.lam ‚¶á v ‚¶à ‚¶á R.abs ‚¶á ai ‚¶à (absorb (suc n) t t') ‚¶à  ‚¶à
 h (R.pat-lam cs args) (R.pat-lam cs' args') = R.typeError [ "absorbStep: todo - patLamb" ]‚Çë
 h (R.pi (R.arg ai a) (R.abs bi b)) (R.pi (R.arg ai' a') (R.abs bi' b')) =
     ‚¶á R.pi ‚¶á R.arg ‚¶á ai ‚¶à (absorb n a a') ‚¶à ‚¶á R.abs ‚¶á bi ‚¶à (absorb (suc n) b b') ‚¶à  ‚¶à
 h (R.agda-sort s) (R.agda-sort s') = R.agda-sort <$> hs s s'
 h (R.lit l) (R.lit l') = pure (R.lit l) 
 h (R.meta x x‚ÇÇ) (R.meta x' x‚ÇÇ') = R.typeError [ "absorbStep: todo - meta" ]‚Çë
 h R.unknown R.unknown = ‚¶á R.unknown ‚¶à
 h t t' = R.typeError
   $ "absorbStep: h-failed" ‚à∑nl t ‚à∑nl "---" ‚à∑nl [ t' ]‚Çë

 hs (R.set t) (R.set t') = R.set <$> absorb n t t'
 hs (R.lit n) (R.lit _) = pure (R.lit n)
 hs (R.prop t) (R.prop t') = R.prop <$> absorb n t t'
 hs (R.propLit n) (R.propLit n') = pure (R.propLit n)
 hs (R.inf n) (R.inf n') = pure (R.inf n)
 hs R.unknown R.unknown = pure (R.unknown)
 hs _ _ = R.typeError [ "absorbStep: hs-failed" ]‚Çë

absorbStep' : ‚Ñï ‚Üí WTerm ‚Üí WTerm ‚Üí R.TC (Maybe CTerm)
absorbStep' n x y = 
  w (hasVar zero x) (hasVar zero y)

 where
  w : Bool ‚Üí Bool ‚Üí R.TC (Maybe CTerm)
  w true true = absorbStep n x y
  w true false = pure $ just (wrapFills (dropPathWraps x))
  w false false = pure (just x)
  w false true = pure (just y)
  
absorb _ _ cw[] = R.typeError [ "cw[] in absorb!" ]‚Çë
absorb _ _ (cw[ y ]) = R.typeError [ "cw[_] in absorb!" ]‚Çë
absorb n x (y ‚à∑cw ys) =
 absorbStep' n x y >>=
  Mb.rec (pure (cw (fw[1, x ] v‚à∑ y v‚à∑ ys))) (pure ‚àòS _‚à∑cw ys)
absorb n x y = absorbStep' n x y >>=
  Mb.rec (pure (fw[1, x ] ‚à∑cw v[ y ]))
          pure


cTermEnd : CTerm ‚Üí R.TC (Maybe WTerm)
cTermEnd = fixMb ‚àòS
  atVarOrDefM (Œª _ v _ argM ‚Üí R.var v <$> argM)
     (Œª n def _ argsM ‚Üí ((R.def def) <$> argsM) >>= reduceComps n) ‚àòS evFills

 where
  evFills : CTerm ‚Üí CTerm
  evFills =
   atVarOrM
    (Œª _ _ _ ‚Üí nothing )
    Œª _ nm args ‚Üí atD (R.def nm args)

   where
    atD : R.Term ‚Üí Maybe R.Term
    atD fw[1, x ] = just x
    atD fw[0, x ] = just (replaceVarWithCon (Œª { zero ‚Üí just (quote i1) ; _ ‚Üí nothing }) x)
    atD _ = nothing

  reduceComps : ‚Ñï ‚Üí R.Term ‚Üí R.TC R.Term
  reduceComps _ cw[] = R.typeError [ "cTermEnd : reduceComps : unexpected cw[]" ]‚Çë
  reduceComps n cw[ p ] = pure p --if (hasVar n p) then  else {!!}
  reduceComps n t@(p ‚à∑cw ps@((R.arg _ ps0) ‚à∑ _)) =
   if (hasVar n p) then pure t  else
    (pure (if length ps =‚Ñï 1 then ps0 else cw ps))
  reduceComps _ x = pure x
  
  fixMb : R.TC WTerm ‚Üí R.TC (Maybe WTerm)
  fixMb x = x >>= Œª x ‚Üí pure $ if (hasVar 0 x) then just x else nothing
  





-- fillStepCT : R.Term ‚Üí (Maybe CTerm) ‚Üí R.TC (Maybe CTerm)
-- fillStepCT x =
--   Mb.rec
--     (if (hasVar zero x) then pure (just (wrapFills x)) else pure nothing)
--     (if (hasVar zero x) then (Œª xs' ‚Üí just <$> (absorb 0 (wrapPaths x) xs')) else pure ‚àòS just )




-- foldCT : List R.Term ‚Üí R.TC (Maybe CTerm)
-- foldCT [] = pure nothing
-- foldCT (x ‚à∑ xs) = (foldCT xs) >>= 
--   fillStepCT x
--    >>= Mb.rec (pure nothing) (cTermEnd)


-- fillFoldCT' : Maybe CTerm ‚Üí List R.Term ‚Üí  R.TC (Maybe CTerm √ó List (Maybe CTerm))
-- fillFoldCT' nothing [] = pure (nothing , [] )
-- fillFoldCT' mbct [] = R.typeError [ "iimposible fillFOldCT'" ]‚Çë
-- fillFoldCT' mbct (x ‚à∑ xs) = do
--   (mbct' , xs') ‚Üê fillFoldCT' mbct xs
   
--   mbct'' ‚Üê fillStepCT x mbct'
--   -- R.debugPrint "testMarkVert" 3 $ Mb.rec [ "nothing" ]‚Çë [_]‚Çë mbct''
--   ‚¶á (Mb.rec (pure nothing) cTermEnd mbct'') , pure (mbct'' ‚à∑ xs') ‚¶à

-- fillFoldCT : List R.Term ‚Üí R.TC (List (Maybe CTerm))
-- fillFoldCT = (snd <$>_) ‚àòS fillFoldCT' nothing


data FillWrapEval : Type where
 -- offsetFW
 headFW dropFW : FillWrapEval    

dropFillWraps : FillWrapEval -> CTerm ‚Üí R.Term
dropFillWraps fwe = atVarOrDefM {{_}} {{RawMonadIdentityM}}
  (Œª _ v _ argsM ‚Üí R.var v argsM)
  Œª _ d _ argsM ‚Üí w fwe (R.def d argsM)

 where

  lift0Dim = remapVars Œª { zero ‚Üí suc zero ; n ‚Üí n }

  w : FillWrapEval ‚Üí R.Term ‚Üí R.Term
  -- w offsetFW fw[1, x ] = lift0Dim x 
  -- w offsetFW fw[0, x ] = invVar 1 (lift0Dim x)
  w headFW fw[1, x ] = replaceVarWithTerm
    (Œª { zero ‚Üí just (R.def (quote _‚à®_) (ùíó 1 v‚à∑ v[ ùíó 0 ]))
       ; _ ‚Üí nothing }) x 
  w headFW fw[0, x ] = replaceVarWithTerm
    (Œª { zero ‚Üí just (R.def (quote _‚à®_) ((R.def (quote ~_) v[ ùíó 1 ]) v‚à∑ v[ ùíó 0 ])) ; _ ‚Üí nothing }) x 
  w dropFW fw[1, x ] = x 
  w dropFW fw[0, x ] = x
  w _ x = x


transpose : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí A ‚Üí List (List A) ‚Üí List (List A)
transpose default [] = [ [] ]
transpose default xss@(xs ‚à∑ _) =
  L.map (Œª (k , ys) ‚Üí L.map (Œª ys ‚Üí lookupAlways default ys k) xss ) (zipWithIndex xs)

-- -- cTermLength : CTerm ‚Üí ‚Ñï
-- -- cTermLength t = snd $ runIdentity $ (unwrap (atVarOrDefM f g t) zero)
-- --   where
-- --     f : ‚Ñï ‚Üí ‚Ñï ‚Üí List (R.Arg R.Term)
-- --       ‚Üí ([ State‚ÇÄT ‚Ñï RMT IdentityF ] List (R.Arg R.Term))
-- --       ‚Üí ([ State‚ÇÄT ‚Ñï RMT IdentityF ] R.Term)
-- --     f _ v _ argsM = R.var v <$> argsM

-- --     g : ‚Ñï ‚Üí R.Name ‚Üí List (R.Arg R.Term)
-- --       ‚Üí ([ State‚ÇÄT ‚Ñï RMT IdentityF ] List (R.Arg R.Term))
-- --       ‚Üí ([ State‚ÇÄT ‚Ñï RMT IdentityF ] R.Term)
-- --     g _ (quote CompWrap) _ argsM = argsM >>=
-- --       (Œª args' ‚Üí (modify (max (length args'))) >>
-- --          pure (R.def (quote CompWrap) args'))
-- --     g _ nm _ argsM = R.def nm <$> argsM


-- offsetPa : ‚Ñï ‚Üí List (R.Arg R.Term) ‚Üí List (R.Arg R.Term) 
-- offsetPa n xs =
--  let lst = fromMaybe (varg (R.lit (R.string "fatal in PathEval - offsetPa")))
--            (lookup xs (pred‚Ñï (length xs)))
--      lst' = R.arg (argInfo lst)
--        ((replaceVarWithCon (Œª { zero ‚Üí just (quote i1) ; _ ‚Üí nothing }) (unArg lst)))
--  in xs ++ repeat (n ‚à∏ length xs ) lst'

-- offsetPa' : ‚Ñï ‚Üí List (R.Arg R.Term) ‚Üí List (R.Arg R.Term) 
-- offsetPa' n xs =
--  let hd = fromMaybe (varg (R.lit (R.string "fatal in PathEval - offsetPa'")))
--            (lookup xs zero)
--      hd' = R.arg (argInfo hd)
--             ((replaceVarWithCon (Œª { zero ‚Üí just (quote i0) ; _ ‚Üí nothing }) (unArg hd)))
--  in repeat (n ‚à∏ length xs ) hd' ++ xs 


-- flatten : CTerm ‚Üí List R.Term
-- flatten = atVarOrConOrDefMmp
--   (Œª _ v _ _ args' ‚Üí R.var v <$> (h args'))
--   (Œª _ c _ _ args' ‚Üí R.con c <$> (h args'))
--   df ‚àòS dropPathWraps

--  where
--  h : List (List (R.Arg R.Term)) ‚Üí List (List (R.Arg R.Term))
--  h xs =
--   let maxL = foldr (max ‚àòS length) 1 xs
--       xs' = L.map (offsetPa maxL) xs
--   in transpose ((varg (R.lit (R.string "fatal in PathEval - flatten")))) xs'

--  df : ‚Ñï ‚Üí
--         R.Name ‚Üí
--         List (R.Arg R.Term) ‚Üí
--         List (List (R.Arg R.Term)) ‚Üí
--         List (List (R.Arg R.Term)) ‚Üí List R.Term
--  df _ (quote CompWrap) _ _ args' = unArg <$> join args'
--  df _ nm _ _ args' = R.def nm <$> (h args')

-- flatten' : CTerm ‚Üí List R.Term
-- flatten' = atVarOrConOrDefMmp
--   (Œª _ v _ _ args' ‚Üí R.var v <$> (h args'))
--   (Œª _ c _ _ args' ‚Üí R.con c <$> (h args'))
--   df ‚àòS dropPathWraps

--  where
--  h : List (List (R.Arg R.Term)) ‚Üí List (List (R.Arg R.Term))
--  h xs =
--   let maxL = foldr (max ‚àòS length) 1 xs
--       xs' = L.map (offsetPa' maxL) xs
--   in transpose ((varg (R.lit (R.string "fatal in PathEval - flatten")))) xs'
  
--  df : ‚Ñï ‚Üí
--         R.Name ‚Üí
--         List (R.Arg R.Term) ‚Üí
--         List (List (R.Arg R.Term)) ‚Üí
--         List (List (R.Arg R.Term)) ‚Üí List R.Term
--  df _ (quote CompWrap) _ _ args' = unArg <$> join args'
--  df _ nm _ _ args' = R.def nm <$> (h args')

fill-flatten' : CTerm ‚Üí List R.Term
fill-flatten' = hTop ‚àòS atVarOrConOrDefMmp
  (Œª _ v _ _ args' ‚Üí R.var v <$> (h args'))
  (Œª _ c _ _ args' ‚Üí R.con c <$> (h args'))
  df ‚àòS dropPathWraps ‚àòS liftVarsFrom 1 1

 where



 fill-offsetPa' : ‚Ñï ‚Üí List (R.Arg R.Term) ‚Üí List (R.Arg R.Term) 
 fill-offsetPa' n xs =
  let hd = fromMaybe (varg (R.lit (R.string "fatal in PathEval - offsetPa'")))
            (lookup xs zero)
      hs* = mapArg (dropFillWraps headFW) hd      
      hd' = mapArg
             (replaceVarWithCon (Œª { zero ‚Üí just (quote i0) ; _ ‚Üí nothing })) hs*
  in repeat (n ‚à∏ length xs ) hd' ++
       hs* ‚à∑ L.map (mapArg (dropFillWraps dropFW)) (tail xs) 


 h : List (List (R.Arg R.Term)) ‚Üí List (List (R.Arg R.Term))
 h xs =
  let maxL = foldr (max ‚àòS length) 1 xs
      xs' = L.map (fill-offsetPa' maxL) xs
  in transpose ((varg (R.lit (R.string "fatal in PathEval - flatten")))) xs'

 hTop : List R.Term ‚Üí List R.Term
 hTop = L.map (Mb.fromMaybe ( (R.lit (R.string "imposible in fill-flatten'")) )
   ‚àòS map-Maybe (unArg) ‚àòS flip lookup zero) ‚àòS h ‚àòS [_] ‚àòS L.map varg

 df : ‚Ñï ‚Üí
        R.Name ‚Üí
        List (R.Arg R.Term) ‚Üí
        List (List (R.Arg R.Term)) ‚Üí
        List (List (R.Arg R.Term)) ‚Üí List R.Term
 df _ (quote CompWrap) _ _ args' = unArg <$> join args'
 df _ nm _ _ args' = R.def nm <$> (h args')



foldPath : List R.Term ‚Üí R.Term
foldPath [] = RexplicitRefl R.unknown
foldPath (x ‚à∑ []) = vlam "ùì≤" x
foldPath (x ‚à∑ xs@(_ ‚à∑ _)) = R‚àô' (vlam "ùì≤" x) (foldPath xs)

foldPath' : List R.Term ‚Üí Maybe R.Term
foldPath' [] = nothing
foldPath' (x ‚à∑ []) = just $ vlam "ùì≤" x
foldPath' (x ‚à∑ xs@(_ ‚à∑ _)) = just $ R‚àô' (vlam "ùì≤" x) (foldPath xs)

fillHeadTrm : R.Term ‚Üí Maybe R.Term ‚Üí R.TC R.Term
fillHeadTrm p nothing = pure (vlam "ùíã" (vlam "ùíä" p))
fillHeadTrm p (just q) = do
   p‚ÇÄ ‚Üê hasVar 0
       <$> (addNDimsToCtx 2 $ R.normalise
        (replaceVarWithCon (Œª { (suc zero) ‚Üí just (quote i0) ; _ ‚Üí nothing }) p))
   p‚ÇÅ ‚Üê  hasVar 0 <$> (addNDimsToCtx 2 $ R.normalise
        (replaceVarWithCon (Œª { (suc zero) ‚Üí just (quote i1) ; _ ‚Üí nothing }) p))
   h p‚ÇÄ p‚ÇÅ
   
 where
  h : Bool ‚Üí Bool ‚Üí R.TC R.Term
  h false false = R.typeError [ "imposible in fillHeadTrm" ]‚Çë
  h false true = pure $ R.def (quote _‚àôf1_) (vlam "ùíã" (vlam "ùíä" p) v‚à∑ v[ vlam "ùíã" q ]) 
  h true false = pure $ R.def (quote _‚àôf0_) (vlam "ùíã" (vlam "ùíä" p) v‚à∑ v[ vlam "ùíã" q ])
  h true true = pure $ vlam "ùíã" (R‚àô' (vlam "ùì≤" p) q)






-- bfs : CTerm ‚Üí R.TC R.Term
-- bfs xs =  do
--     let q = (foldPath' (tail (fill-flatten' xs)))
--     hd ‚Üê Mb.rec (R.typeError [ "imposible tfct‚â°" ]‚Çë )
--            pure (listToMaybe (fill-flatten' xs)) 
--     fillHeadTrm hd q


-- -- fillFoldCT' : Maybe CTerm ‚Üí List R.Term ‚Üí  R.TC (Maybe CTerm √ó List (Maybe CTerm))
-- -- fillFoldCT' nothing [] = pure (nothing , [] )
-- -- fillFoldCT' mbct [] = R.typeError [ "iimposible fillFOldCT'" ]‚Çë
-- -- fillFoldCT' mbct (x ‚à∑ xs) = do
-- --   (mbct' , xs') ‚Üê fillFoldCT' mbct xs
   
-- --   mbct'' ‚Üê fillStepCT x mbct'
-- --   -- R.debugPrint "testMarkVert" 3 $ Mb.rec [ "nothing" ]‚Çë [_]‚Çë mbct''
-- --   ‚¶á (Mb.rec (pure nothing) cTermEnd mbct'') , pure (mbct'' ‚à∑ xs') ‚¶à

-- -- fillFoldCT : List R.Term ‚Üí R.TC (List (Maybe CTerm))
-- -- fillFoldCT = (snd <$>_) ‚àòS fillFoldCT' nothing



-- -- fillStepCT2 : R.Term ‚Üí (Maybe CTerm) ‚Üí R.TC (Maybe CTerm)
-- -- fillStepCT2 x nothing = {!!}
-- -- fillStepCT2 x (just x‚ÇÅ) = {!!}
-- --   -- Mb.rec
-- --   --   (if (hasVar zero x) then pure (just ( (wrapFills x) )) else pure nothing)
-- --   --   (if (hasVar zero x) then (Œª xs' ‚Üí just <$> (absorb 0 (wrapPaths x) xs')) else pure ‚àòS just )


-- -- fillFold1D : Maybe CTerm ‚Üí List R.Term ‚Üí  R.TC (CTerm √ó Maybe R.Term)
-- -- fillFold1D nothing [] = pure (nothing , nothing)
-- -- fillFold1D _ [] = R.typeError [ "iimposible fillFold1D'" ]‚Çë
-- -- fillFold1D mbct (x ‚à∑ xs) = do
-- --   (mbct' , xs') ‚Üê fillFold1D mbct xs
   
-- --   mbct'' ‚Üê fillStepCT x mbct'
-- --   s ‚Üê bfs {!mbct''!}
-- --   -- R.debugPrint "testMarkVert" 3 $ Mb.rec [ "nothing" ]‚Çë [_]‚Çë mbct''
-- --   ‚¶á (Mb.rec (pure nothing) cTermEnd mbct'') , (Mb.rec {!!} {!!} xs') ‚¶à


-- -- bigFillStep : Maybe R.Term ‚Üí R.Term ‚Üí R.TC (Maybe R.Term √ó R.Term ) 
-- -- bigFillStep mbT t = do
-- --  {!!}


-- macro
--  testPathCT : R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.TC Unit
--  testPathCT t0 t1 t2 t3 h = do
--    r ‚Üê mapM (addNDimsToCtx 1 ‚àòS R.normalise ‚àòS pathApp)
--          (t0 ‚à∑ t1 ‚à∑ t2 ‚à∑ [ t3 ]) >>= foldCT
   
--    -- Mb.rec (R.typeError [ "nothing" ]‚Çë  ) (R.typeError ‚àòS [_]‚Çë ‚àòS dropPathWraps) r
--    Mb.rec (R.typeError [ "nothing" ]‚Çë  )
--      (addNDimsToCtx 1 ‚àòS R.typeError ‚àòS ((_>>= Œª t ‚Üí "\n******" ‚à∑nl [ t ]‚Çë)) ‚àòS flatten' ) r


--  testPathCT‚â° : R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.TC Unit
--  testPathCT‚â° t0 t1 t2 t3 t4 h = do
--    r ‚Üê mapM (addNDimsToCtx 1 ‚àòS R.normalise ‚àòS pathApp)  (t0 ‚à∑ t1 ‚à∑ t2 ‚à∑ t3 ‚à∑ [ t4 ]) >>= foldCT
--    let r' = Mb.rec (RexplicitRefl R.unknown) (foldPath ‚àòS flatten') r
--    -- R.typeError [ r' ]‚Çë
--    R.unify r' h

--  testFoldCT : R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.TC Unit
--  testFoldCT t0 t1 t2 t3 t4 h = do
--    r ‚Üê mapM (addNDimsToCtx 1 ‚àòS R.normalise ‚àòS pathApp)
--          (t0 ‚à∑ t1 ‚à∑ t2 ‚à∑ t3 ‚à∑ [ t4 ]) >>= fillFoldCT

--    addNDimsToCtx 2 $ R.typeError $
--      L.join (L.map (Œª r ‚Üí
--             [ "\n\n‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£‚â£\n\n"]‚Çë ++ Mb.rec ([ "nothing" ]‚Çë  )
--               ((_>>= Œª t ‚Üí "\n******" ‚à∑nl [ t ]‚Çë) ‚àòS fill-flatten' ) r ) r)



-- module _ (k : ‚Ñï) where


--  macro
--   testFillCT‚â° : R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.TC Unit
--   testFillCT‚â° t0 t1 t2 t3 t4 h = do
--     r ‚Üê mapM (addNDimsToCtx 1 ‚àòS R.normalise ‚àòS pathApp)  (t0 ‚à∑ t1 ‚à∑ t2 ‚à∑ t3 ‚à∑ [ t4 ]) >>= fillFoldCT
--     r' ‚Üê Mb.rec (pure (RexplicitRefl R.unknown)) bfs (joinM (lookup r k))
--     R.unify r' h 
--     -- R.typeError [ r' ]‚Çë


-- -- bigTestFillCT‚â° : R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.Term ‚Üí R.TC Unit
-- -- bigTestFillCT‚â° t0 t1 t2 t3 t4 h = do
-- --   r ‚Üê mapM (addNDimsToCtx 1 ‚àòS R.normalise ‚àòS pathApp)  (t0 ‚à∑ t1 ‚à∑ t2 ‚à∑ t3 ‚à∑ [ t4 ]) >>= fillFoldCT
-- --   r' ‚Üê Mb.rec (pure Rrefl) bfs (joinM (lookup r k))
-- --   R.unify r' h 
-- --   -- R.typeError [ r' ]‚Çë
