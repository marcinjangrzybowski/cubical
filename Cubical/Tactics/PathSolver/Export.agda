{-# OPTIONS --allow-exec #-} 
-- -v extractCuTermTest:4  -v checkHcomp:5 
module Cubical.Tactics.PathSolver.Export where


open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Function
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.GroupoidLaws
open import Cubical.Foundations.Path
open import Cubical.Relation.Nullary

open import Cubical.Data.Bool hiding (True ; False) renaming (true to True ; false to False)
open import Cubical.Data.Empty
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Maybe as Mb renaming (just to Just ; nothing to Nothing) 
open import Cubical.Data.List as L
open import Cubical.Data.Nat as ‚Ñï
open import Cubical.Data.Sigma
open import Cubical.Data.Nat.Order.Recursive as ‚ÑïOR

open import Cubical.Reflection.Base renaming (v to ùíó)
import Agda.Builtin.Reflection as R
import Agda.Builtin.Reflection.External as RT
open import Cubical.Tactics.PathSolver.Reflection
open import Cubical.Tactics.Reflection 
open import Agda.Builtin.String
open import Agda.Builtin.Char
open import Cubical.Tactics.Reflection.Utilities

import Cubical.Tactics.PathSolver.Base as PSB
open import Agda.Builtin.Nat using () renaming (_==_ to _=‚Ñï_ ; _<_ to _<‚Ñï_)

import Cubical.Tactics.PathSolver.QuoteCubical as QC
import Cubical.Tactics.PathSolver.Examples as E

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì
    x y z w v : A


qNormalise : A ‚Üí R.TC A
qNormalise = (R.withNormalisation True ‚àòS R.quoteTC) >=> R.unquoteTC 


tut : ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí List ‚Ñï
tut zero f = []
tut (suc k) f = f zero ‚à∑ tut k (f ‚àò suc)

utu : ‚Ñï ‚Üí List ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï)
utu max l k = L.lookupAlways k l k

tabulateUpToTC : ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí R.TC (‚Ñï ‚Üí ‚Ñï)
tabulateUpToTC max f = do
  l ‚Üê qNormalise (tut max f)
  pure $ utu max l


module Set where
 data Set (A : Type) : Type where
  fromList : List A ‚Üí Set A

 toList : Set A ‚Üí List A
 toList (fromList x) = x

module Map where
 data Map (K V : Type) : Type where
  fromList : List (K √ó V) ‚Üí Map K V


 toList : ‚àÄ {K V} ‚Üí Map K V ‚Üí List (K √ó V)
 toList (fromList xs) = xs

 mapKeys : ‚àÄ {K V} ‚Üí (K ‚Üí K) ‚Üí Map K V ‚Üí Map K V
 mapKeys x (fromList x‚ÇÅ) = fromList (L.map (map-fst x) x‚ÇÅ)

-- data IExpr = IExpr (Set.Set ( Set.Set (Int , Bool)))
--   deriving (Eq , Show , Read)

data IExpr' : Type where
 IExpr : Set.Set (Set.Set (‚Ñï √ó Bool)) ‚Üí IExpr'

reindexIExpr' : (‚Ñï ‚Üí ‚Ñï) ‚Üí IExpr' ‚Üí IExpr'
reindexIExpr' f (IExpr x) =
 IExpr (Set.fromList (L.map (Set.fromList ‚àòS L.map (map-fst f) ‚àòS Set.toList) (Set.toList x)))

-- data VarIndex = VarIndex Int | SomeDef String
--   deriving (Eq , Show, Ord , Read)

data OExpr : Type
data ClExpr' : Type
data CellExpr' : Type

data VarIndex' : Type where
 VarIndex : ‚Ñï ‚Üí VarIndex'
 SomeDef : String ‚Üí VarIndex'


SF =  (Map.Map ‚Ñï Bool)

Partial' = Map.Map SF OExpr



data ConstExpr' : Type where
 ConstExpr : String ‚Üí ConstExpr'

data OExpr where
    HComp : (Maybe String) ‚Üí Partial' ‚Üí ClExpr' ‚Üí OExpr
    Cell : CellExpr' ‚Üí OExpr
    ConstE : ConstExpr' ‚Üí OExpr
    CHole : ‚Ñï ‚Üí OExpr
    Appl : ClExpr' ‚Üí List ClExpr' ‚Üí OExpr  

data ClExpr' where 
 ClExpr : ‚Ñï ‚Üí (Map.Map (Map.Map ‚Ñï Bool) OExpr) ‚Üí ClExpr'

data CellExpr' where
 CellExpr : VarIndex' ‚Üí List IExpr' ‚Üí CellExpr'

data Visualisation' : Type where 
    Visualisation : (Maybe String) ‚Üí
      ClExpr' ‚Üí (List (String √ó (String √ó Maybe (List String)))) ‚Üí Visualisation'  



fromSubFace : PSB.SubFace ‚Üí Map.Map ‚Ñï Bool
fromSubFace x = Map.fromList (fsb x)
 where
 fsb : PSB.SubFace ‚Üí List (‚Ñï √ó Bool)
 fsb [] = []
 fsb (Nothing ‚à∑ xs) = L.map (map-fst suc) (fsb xs)
 fsb (Just x ‚à∑ xs) = (zero , x) ‚à∑ L.map (map-fst suc) (fsb xs)
  -- Mb.rec [] ([_] ‚àòS (zero ,_)) x ++ L.map (map-fst suc) (fsb xs)

toSubFace : ‚Ñï ‚Üí Map.Map ‚Ñï Bool ‚Üí PSB.SubFace 
toSubFace dim (Map.fromList x) =
  foldr (Œª (k , b) ‚Üí replaceAt k (Just b)) (repeat dim Nothing) x  


-- module permCE where



--  permCE : ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ClExpr' ‚Üí R.TC ClExpr'
--  permOE : ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï ‚Üí OExpr ‚Üí R.TC OExpr

--  permCE zero _ _ = R.typeError [ "out of fuel in permCE" ]‚Çë
--  permCE (suc fuel) prm (ClExpr dim (Map.fromList x)) = 
--    ‚¶á ClExpr ‚¶á dim ‚¶à (Map.fromList <$>
--      (mapM (Œª (sf , x) ‚Üí do
--           let sf' = (toSubFace dim sf)
--           let d = dim ‚à∏ (length (Map.toList sf))
--           let prm' = (PSB.permuteVars.intoFace
--                         (PSB.permuteVars.permute prm sf'))
--                           ‚àòS prm ‚àòS (PSB.permuteVars.fromFace sf')
--           -- let pm = PSB.permuteVars.sfPerm sf' prm 
--           ‚¶á ‚¶á (fromSubFace (PSB.permuteVars.permute prm sf')) ‚¶à
--               , (permOE fuel prm' d x) ‚¶à
--           ) x)) ‚¶à

 
--  permOE zero _ _ _ = R.typeError [ "out of fuel in permOE" ]‚Çë
--  permOE (suc fuel) prm dim (HComp x (Map.fromList x‚ÇÅ) x‚ÇÇ) =
--     ‚¶á HComp ‚¶á x ‚¶à
--        (Map.fromList <$>
--           (mapM (Œª (sf , x) ‚Üí do
--               let sf' = (toSubFace dim sf)
--               let d = dim ‚à∏ (length (Map.toList sf))
--               let pm = PSB.permuteVars.sfPerm sf' prm 
--               ‚¶á ‚¶á (fromSubFace (PSB.permuteVars.permute prm sf')) ‚¶à
--                   , (permOE fuel pm (suc d) x) ‚¶à
--               ) x‚ÇÅ))
--        (permCE (suc fuel) prm x‚ÇÇ) ‚¶à
--  permOE (suc fuel) prm dim (Cell (CellExpr x x‚ÇÅ)) =
--     ‚¶á Cell ‚¶á CellExpr (‚¶á x ‚¶à) (mapM (Œª x‚ÇÇ ‚Üí ‚¶á ((reindexIExpr' prm x‚ÇÇ)) ‚¶à) x‚ÇÅ) ‚¶à ‚¶à
--  permOE (suc fuel) prm dim (ConstE x) = R.typeError [ "todo in permOE - ConstE" ]‚Çë
--  permOE (suc fuel) prm dim (CHole x) = pure (CHole x)
--  permOE (suc fuel) prm dim (Appl x x‚ÇÅ) = R.typeError [ "todo in permOE - Appl" ]‚Çë


-- -- permOE = permCE.permOE 100

module fixCE where


 permSide : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
 permSide dim zero = pred‚Ñï dim
 permSide dim (suc k) =
   if (suc k) <‚Ñï dim then k else (suc k)


 -- fixCE : ‚Ñï ‚Üí ClExpr' ‚Üí R.TC ClExpr'
 -- fixOE : ‚Ñï ‚Üí ‚Ñï ‚Üí OExpr ‚Üí R.TC OExpr
 
 -- fixCE zero _ = R.typeError [ "out of fuel in fixCE" ]‚Çë
 -- fixCE (suc fuel) (ClExpr dim (Map.fromList x)) =
 --   ‚¶á ClExpr ‚¶á dim ‚¶à (Map.fromList <$>
 --     (mapM (Œª (sf , x) ‚Üí ‚¶á ‚¶á sf ‚¶à , (fixOE fuel (dim ‚à∏ (length (Map.toList sf))) x) ‚¶à) x)) ‚¶à

 -- fixOE zero _ _ = R.typeError [ "out of fuel in fixOE" ]‚Çë
 -- fixOE (suc fuel) dim (HComp x x‚ÇÅ x‚ÇÇ) =
 --   ‚¶á HComp ‚¶á x ‚¶à
 --       (‚¶á Map.fromList
 --         (mapM
 --           (Œª (sf , c) ‚Üí do
 --              let d = dim ‚à∏ (length (Map.toList sf))
 --              c' ‚Üê fixOE fuel (suc d) c
 --              let pm = permSide (suc d) 
 --              ‚¶á ‚¶á sf ‚¶à , (permCE.permOE 100 pm (suc d) c') ‚¶à)
 --           (Map.toList x‚ÇÅ)) ‚¶à)
 --       (fixCE (suc fuel) x‚ÇÇ) ‚¶à
 -- fixOE (suc fuel) dim (Cell x) = ‚¶á (Cell x) ‚¶à
 -- fixOE (suc fuel) dim (ConstE x) = R.typeError [ "todo in fixOE - ConstE" ]‚Çë
 -- fixOE (suc fuel) dim (CHole x) = ‚¶á (CHole x) ‚¶à
 -- fixOE (suc fuel) dim (Appl x x‚ÇÅ) = R.typeError [ "todo in fixOE - Appl" ]‚Çë


module permCE2 where



 permCE : ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ClExpr' ‚Üí R.TC ClExpr'
 permOE : ‚Ñï ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï ‚Üí OExpr ‚Üí R.TC OExpr

 permCE zero _ _ = R.typeError [ "out of fuel in permCE" ]‚Çë
 permCE (suc fuel) prm (ClExpr dim (Map.fromList x)) = 
   ‚¶á ClExpr ‚¶á dim ‚¶à (Map.fromList <$>
     (mapM (Œª (sf , x) ‚Üí do
          let sf' = (toSubFace dim sf)
          let d = dim ‚à∏ (length (Map.toList sf))
          let prm' = (PSB.permuteVars.intoFace
                        (PSB.permuteVars.permute prm sf'))
                          ‚àòS prm ‚àòS (PSB.permuteVars.fromFace sf')
          -- let pm = PSB.permuteVars.sfPerm sf' prm 
          ‚¶á qNormalise (fromSubFace (PSB.permuteVars.permute prm sf'))
              , (permOE fuel prm' d x) ‚¶à
          ) x)) ‚¶à

 
 permOE zero _ _ _ = R.typeError [ "out of fuel in permOE" ]‚Çë
 permOE (suc fuel) prm dim (HComp x (Map.fromList x‚ÇÅ) x‚ÇÇ) =
    ‚¶á HComp ‚¶á x ‚¶à
       (Map.fromList <$>
          (mapM (Œª (sf , x) ‚Üí do
              let sf' = (toSubFace dim sf)
              let d = dim ‚à∏ (length (Map.toList sf))
              pm ‚Üê tabulateUpToTC dim (PSB.permuteVars.sfPerm sf' prm ‚àòS fixCE.permSide (suc d))
              let sf* = Map.mapKeys prm sf
              ‚¶á (qNormalise sf*)
                    --(fromSubFace (PSB.permuteVars.permute prm sf'))
                    
                  , (permOE fuel pm (suc d) x) ‚¶à
              ) x‚ÇÅ))
       (permCE (suc fuel) prm x‚ÇÇ) ‚¶à
 permOE (suc fuel) prm dim (Cell (CellExpr x x‚ÇÅ)) =
    ‚¶á Cell ‚¶á CellExpr (‚¶á x ‚¶à) (mapM (Œª x‚ÇÇ ‚Üí qNormalise ((reindexIExpr' prm x‚ÇÇ)) ) x‚ÇÅ) ‚¶à ‚¶à
 permOE (suc fuel) prm dim (ConstE x) = R.typeError [ "todo in permOE - ConstE" ]‚Çë
 permOE (suc fuel) prm dim (CHole x) = pure (CHole x)
 permOE (suc fuel) prm dim (Appl x x‚ÇÅ) = R.typeError [ "todo in permOE - Appl" ]‚Çë



fixCE = permCE2.permCE 100 (idfun ‚Ñï)




-- toCellExpr

toIExpr : PSB.IExpr ‚Üí IExpr'
toIExpr = IExpr ‚àòS Set.fromList ‚àòS L.map (Set.fromList ‚àòS L.map Œª (x , y) ‚Üí y , x) 

toProperIExpr : PSB.IExpr ‚Üí R.TC IExpr'
toProperIExpr [] = R.typeError [ "not a proper IExpr i0" ]‚Çë
toProperIExpr ([] ‚à∑ []) = R.typeError [ "not a proper IExpr i1" ]‚Çë
toProperIExpr x = ‚¶á (toIExpr x) ‚¶à

toProperIExprMb : PSB.IExpr ‚Üí Maybe IExpr'
toProperIExprMb [] = Nothing
toProperIExprMb ([] ‚à∑ []) = Nothing
toProperIExprMb x = Just (toIExpr x)



toCellExpr' : ‚Ñï ‚Üí R.Term ‚Üí R.TC OExpr
toCellExpr' dim (R.var k xs) = do
    ixesMbs ‚Üê PSB.addNDimsToCtx dim $ mapM toIE xs
    let mbIexs = fromAllMaybes ixesMbs 
    Cell <$> Mb.rec (PSB.addNDimsToCtx dim $
              do c' ‚Üê R.normalise
                       (R.var k xs)
                 hlpRed c')
      (Œª iexs ‚Üí pure $ (CellExpr (VarIndex k) iexs))
      mbIexs    -- pure $ Cell (CellExpr (VarIndex k) iexs) 

 where
 -- getVarIndex : R.Term ‚Üí VarIndex'
 -- getVarIndex = {!!}

 hlpRed : R.Term ‚Üí R.TC CellExpr'
 hlpRed (R.var k' xs') = do
    iexs ‚Üê mapM ((PSB.extractIExpr >=> toProperIExpr) ‚àòS unArg) xs'
    pure (CellExpr (VarIndex k') iexs)
 hlpRed _ = R.typeError [ "todo in  toCellExpr' - 1" ]‚Çë
 
 toIE : R.Arg R.Term ‚Üí R.TC (Maybe IExpr')
 toIE (R.arg _ x') = do
    x ‚Üê R.normalise x'
    toProperIExprMb <$> PSB.extractIExpr x  
toCellExpr' dim _ = R.typeError [ "todo in  toCellExpr' - 2" ]‚Çë


toOExpr : ‚Ñï ‚Üí ‚Ñï ‚Üí PSB.CuTerm ‚Üí R.TC OExpr


toClExpr : ‚Ñï ‚Üí ‚Ñï ‚Üí PSB.CuTerm ‚Üí R.TC ClExpr'

toPartial' : ‚Ñï ‚Üí ‚Ñï ‚Üí List (PSB.SubFace √ó PSB.CuTerm) ‚Üí R.TC Partial'

toClExpr fuel dim x =
  ‚¶á ClExpr
      ‚¶á dim ‚¶à
      ‚¶á Map.fromList
           (mapM (Œª sf ‚Üí do
               x' ‚Üê  --PSB.normaliseCells (PSB.sfDim sf)
                     pure (PSB.cuEval sf x)
               ‚¶á ‚¶á (fromSubFace sf) ‚¶à ,
                            (toOExpr fuel (PSB.sfDim sf)
                              (x')) ‚¶à)
             (PSB.allSubFacesOfDim dim)) ‚¶à ‚¶à

toOExpr zero x‚ÇÅ x‚ÇÇ = R.typeError [ "out of fuel in toOExpr" ]‚Çë
toOExpr (suc x) dim (PSB.hco x‚ÇÇ x‚ÇÉ) =
  ‚¶á HComp
      ‚¶á Nothing ‚¶à
      (toPartial' x dim x‚ÇÇ)
      (toClExpr x dim x‚ÇÉ) ‚¶à
toOExpr (suc x) dim (PSB.cell x‚ÇÉ) = toCellExpr' dim x‚ÇÉ
toOExpr (suc x) dim (PSB.ùíÑong' x‚ÇÇ x‚ÇÉ) = ‚¶á CHole ‚¶á zero ‚¶à ‚¶à

toPartial' zero dim xs = R.typeError [ "out of fuel in toPartial'" ]‚Çë
toPartial' (suc fuel) dim xs =
  Map.fromList <$> mapM
    (Œª sf ‚Üí do
        oe ‚Üê Mb.rec (R.typeError [ "imposible in toPartial'" ]‚Çë)
                (pure) (PSB.pickSFfromPartial sf xs)
        ‚¶á ‚¶á (fromSubFace sf) ‚¶à ,
         toOExpr fuel (suc (PSB.sfDim sf)) oe ‚¶à)
    (PSB.withAllIncluded dim (L.map fst xs))


module _ (dim : ‚Ñï) where
 macro
  quoteAsCLExpr : R.Term ‚Üí R.Term ‚Üí R.TC Unit
  quoteAsCLExpr t h = do
    y ‚Üê QC.extractCuTerm dim t >>= qNormalise
    R.debugPrint "testMarkVert" 0 $ [ "extracted" ]‚Çë
    -- R.typeError [ "yy" ]‚Çë -- >>= fixCE
    y0 ‚Üê toClExpr 100 dim y >>= qNormalise
    R.debugPrint "testMarkVert" 0 $ [ "cl expr done" ]‚Çë
    y'preQuote ‚Üê ( fixCE y0 )
    R.debugPrint "testMarkVert" 0 $ [ "cl expr fixed" ]‚Çë
    y'preNorm ‚Üê R.withNormalisation True
      ((R.quoteTC {A = ClExpr'} y'preQuote))
    R.debugPrint "testMarkVert" 0 $ [ "cl expr quotend" ]‚Çë
    y' ‚Üê pure y'preNorm --R.normalise y'preNorm 
    R.debugPrint "testMarkVert" 0 $ [ "cl expr normalised" ]‚Çë
    -- y'' ‚Üê R.formatErrorParts [ y' ]‚Çë
    R.typeError [ y' ]‚Çë    
    -- R.unify y' h

-- printClExpr : ‚Ñï ‚Üí PSB.CuTerm ‚Üí R.TC Unit
-- printClExpr dim y0 = do
--    y ‚Üê PSB.vizOrient dim y0
--    y' ‚Üê toClExpr 100 dim y >>= ((R.quoteTC {A = ClExpr'} >=> R.normalise)) 
--    -- y'' ‚Üê R.formatErrorParts [ y' ]‚Çë
--    R.typeError [ y' ]‚Çë


-- module PentaJJ1viz {x : A} (p : x ‚â° y) (q : y ‚â° z) (~r : w ‚â° z) (r' r : z ‚â° w) (s : w ‚â° v) where


--  ex1ClExpr : ClExpr'
--  ex1ClExpr = quoteAsCLExpr (suc (suc zero)) (Œª (i j : I) ‚Üí E.PentaJJ1.P‚â°Q p q ~r r' r s i j)

-- -- macro
-- --   teeTest : R.Term ‚Üí R.TC Unit
-- --   teeTest hole = do
-- --     (exitCode , (stdOut , stdErr)) ‚Üê RT.execTC "tee" [ "/Users/marcin/agdaTeeTest.txt" ] "abcdeXX"
-- --     R.unify hole (R.lit (R.string stdOut))

-- -- saveString : String ‚Üí String ‚Üí R.TC Unit
-- -- saveString f x = do
-- --     (exitCode , (stdOut , stdErr)) ‚Üê RT.execTC "tee" [ f ] x
-- --     pure _


-- module assocJ1 {x : A} (p : x ‚â° y) (q : y ‚â° z) (r : z ‚â° w) where


--  assocExpr : ClExpr'
--  assocExpr = quoteAsCLExpr (suc (suc zero)) (Œª (i j : I) ‚Üí (cong sym (assoc (sym r) (sym q) (sym p))) i j)


-- -- module PentaJ1 {x : A} (p : x ‚â° y) (q : y ‚â° z) (r : z ‚â° w) (s : w ‚â° v) where


-- --  pLHS = -- cong (p ‚àô_) (assoc q r s) ‚àô‚àô assoc p (q ‚àô r) s ‚àô‚àô cong (_‚àô s) (assoc p q r)
-- --         assoc p q (r ‚àô s) ‚àô assoc (p ‚àô q) r s

-- --  LHSClExpr : ClExpr'
-- --  LHSClExpr = quoteAsCLExpr (suc (suc zero)) (Œª (i j : I) ‚Üí pLHS i j)

-- --  -- pentaClExpr : ClExpr'
-- --  -- pentaClExpr = quoteAsCLExpr (suc (suc (suc zero))) (Œª (i j k : I) ‚Üí
-- --  --   pentagonIdentity p q r s i j k)



-- -- -- -- module PentaJ1 {x : A} (p : x ‚â° y) (q : y ‚â° z) (r : z ‚â° w) (s : w ‚â° v) where


-- -- -- --  pLHS = assoc p q (r ‚àô s) ‚àô assoc (p ‚àô q) r s

-- -- -- --  LHSClExpr : ClExpr'
-- -- -- --  LHSClExpr = quoteAsCLExpr (suc (suc zero)) (Œª (i j : I) ‚Üí pLHS i j)



-- -- -- -- -- -- module penta-test {x : A}  (p : x ‚â° y) (q : y ‚â° z)  (r : z ‚â° w) where

-- -- -- -- -- --  -- P Q : x ‚â° v
-- -- -- -- -- --  -- P = {!p ‚àô q ‚àô r' ‚àô sym!}
-- -- -- -- -- --  -- Q = {!!}





-- -- -- -- -- --  -- 5LHSi  : _
-- -- -- -- -- --  -- 5LHSi = cong (p ‚àô_) (assoc q r s) ‚àô‚àô assoc p (q ‚àô r) s ‚àô‚àô cong (_‚àô s) (assoc p q r)



-- -- -- -- -- --  -- 5LHS : Unit
-- -- -- -- -- --  -- 5LHS = {!extractCuTermTest (suc (suc zero)) Œª (i j : I) ‚Üí (assoc q r s) i j   !}


-- -- -- -- -- --  -- _ : I ‚Üí I ‚Üí A
-- -- -- -- -- --  -- _ = {!getCuTerm (suc (suc zero))
-- -- -- -- -- --  --                     (Œª (i j : I) ‚Üí 5LHSi i j)!}

-- -- -- -- -- --  -- assocClExpr : ClExpr'
-- -- -- -- -- --  -- assocClExpr = quoteAsCLExpr (suc (suc zero)) (Œª (i j : I) ‚Üí assoc p q r i j)



-- -- -- -- -- -- -- someViz : Visualisation'
-- -- -- -- -- -- -- someViz =
-- -- -- -- -- -- --  Visualisation (just "abc")
-- -- -- -- -- -- --    (ClExpr 3 (Map.fromList (((Map.fromList (((1 , False))
-- -- -- -- -- -- --      ‚à∑ (2 , False) ‚à∑ [])) , {!!}) ‚à∑ ({!!} , {!!}) ‚à∑ (Map.fromList {!!} , {!!}) ‚à∑ [])))
-- -- -- -- -- -- --    {!!}



-- -- -- -- -- -- -- data ClExpr = ClExpr Int (Map.Map (Map.Map Int Bool) OExpr)
-- -- -- -- -- -- --   deriving (Eq , Show , Read)

-- -- -- -- -- -- -- data ConstExpr = ConstExpr String 
-- -- -- -- -- -- --   deriving (Eq , Show , Read)

-- -- -- -- -- -- -- data CellExpr = CellExpr VarIndex [IExpr]
-- -- -- -- -- -- --   deriving (Eq , Show , Read)

-- -- -- -- -- -- -- data OExpr =
-- -- -- -- -- -- --     HComp (Maybe String) Partial ClExpr
-- -- -- -- -- -- --   | Cell CellExpr
-- -- -- -- -- -- --   | ConstE ConstExpr
-- -- -- -- -- -- --   | CHole Int
-- -- -- -- -- -- --   | Appl ClExpr [ClExpr]  
-- -- -- -- -- -- --   deriving (Eq , Show , Read)


-- -- -- -- -- -- -- data Visualisation =
-- -- -- -- -- -- --     Visualisation (Maybe String) ClExpr ([ (String,(String,Maybe [String]))])  
-- -- -- -- -- -- --  deriving (Show,Read)
