{-# OPTIONS --safe #-}
module Cubical.HITs.Permutation.BaseAssoc where

open import Cubical.Data.Nat.Base as ‚Ñï hiding (_¬∑_)
open import Cubical.Data.Nat.Properties


-- open import Cubical.Data.Fin.Properties as FP
open import Cubical.Data.Empty as ‚ä•

open import Cubical.Functions.Involution

open import Cubical.Foundations.Everything
-- open import Cubical.Data.Empty as ‚ä•
-- open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_)
-- open import Cubical.Data.Nat.Order
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe
open import Cubical.Data.Unit
open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Sum as ‚äé


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Data.Nat.Order.RecursiveMoreEquiv

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.Algebra.Group

open import Cubical.Algebra.SymmetricGroup

import Cubical.Functions.Logic as L

open import Cubical.Functions.Embedding

open import Cubical.Data.List as Li

import Cubical.Data.Nat.FinGenAut2 as A

import Cubical.HITs.PropositionalTruncation as Prop

open import Cubical.HITs.GroupoidQuotients as GQ
  renaming ([_] to [_]// ; RelimProp to  RelimProp// ; Rrec to Rrec//)


open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties

-- open import Cubical.Algebra.Group.Generators

open import Cubical.Functions.FunExtEquiv

open import Cubical.HITs.SequentialColimit as SC

open import Cubical.HITs.EilenbergMacLane1 renaming (elim to elimEM)


open import Cubical.Relation.Binary

-- import Cubical.Homotopy.EilenbergMacLane.Properties as EMP

open import Cubical.Foundations.Equiv.HalfAdjoint

import Cubical.HITs.Permutation.Base as B

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì

-- infix 20 ‚åû_‚åü_‚åü

-- record AdjacentBundles (n : ‚Ñï) : Type‚ÇÄ where
--  constructor ‚åû_‚åü_‚åü
--  field
--   k‚åû' k‚åü' l‚åü' : ‚Ñï
--   k‚åû‚â§k‚åü : k‚åû' ‚â§ k‚åü'
--   k‚åü<l‚åü : k‚åü' < l‚åü' 
--   l‚åü<n : l‚åü' < n

--  k‚åû k‚åü l‚åü : Fin n
--  k‚åû = k‚åû' , ‚â§<-trans {n = n} k‚åû‚â§k‚åü (<-trans {n = n} k‚åü<l‚åü l‚åü<n)
--  k‚åü = k‚åü' , <-trans {n = n} k‚åü<l‚åü l‚åü<n
--  l‚åü = _ , l‚åü<n




record AdjacentBundles (n : ‚Ñï) : Type‚ÇÄ where
 constructor ùïíùïì
 field
  lPad l r rPad : ‚Ñï
  <n : (l + r) + ((lPad + rPad) + 2) ‚â° n

sucAB : ‚àÄ {n} ‚Üí AdjacentBundles n ‚Üí AdjacentBundles (suc n)
AdjacentBundles.lPad (sucAB x) = suc (AdjacentBundles.lPad x)
AdjacentBundles.l (sucAB x) = AdjacentBundles.l x
AdjacentBundles.r (sucAB x) = AdjacentBundles.r x
AdjacentBundles.rPad (sucAB x) = AdjacentBundles.rPad x
AdjacentBundles.<n (sucAB x) = 
   +-suc _ _ ‚àô cong suc (AdjacentBundles.<n x)

swapAB : ‚àÄ {n} ‚Üí AdjacentBundles n ‚Üí AdjacentBundles n
swapAB (ùïíùïì lPad l r rPad <n) =
  ùïíùïì lPad r l rPad (cong (_+ (lPad + rPad + 2)) (+-comm r l) ‚àô <n)

swapAB' : ‚àÄ {n} ‚Üí (x : AdjacentBundles n) ‚Üí _ ‚Üí AdjacentBundles n
swapAB' (ùïíùïì lPad l r rPad <n) p =
  ùïíùïì lPad r l rPad p

swapAB-invol : ‚àÄ {n} ‚Üí isInvolution (swapAB {n})
swapAB-invol {n} = w
 where
 open AdjacentBundles
 w : isInvolution swapAB
 lPad (w (ùïíùïì x _ _ _ _) i) = x
 l (w (ùïíùïì _ x _ _ _) i) = x
 r (w (ùïíùïì _ _ x _ _) i) = x
 rPad (w (ùïíùïì _ _ _ x _) i) = x
 <n (w x@(ùïíùïì _ _ _ _ p) i) j =
   isSet‚ÜíisSet' isSet‚Ñï
     (<n (swapAB (swapAB x))) p refl refl i j

swapAB‚âÉ : ‚àÄ {n} ‚Üí (AdjacentBundles n) ‚âÉ (AdjacentBundles n)
swapAB‚âÉ = involEquiv {f = swapAB} swapAB-invol

data ‚Ñôrm‚Çê {trunc : Bool} (n : ‚Ñï) : Type‚ÇÄ where 
  ùï°base : ‚Ñôrm‚Çê n
  
  ùï°loop : AdjacentBundles n ‚Üí ùï°base ‚â° ùï°base

  ùï°invol : ‚àÄ ab p ‚Üí ùï°loop (swapAB' ab p) ‚â° sym (ùï°loop ab)
  ùï°hex : ‚àÄ lPad rPad l c r ‚Üí ‚àÄ p p' p'' ‚Üí
     Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop (ùïíùïì lPad l c (r + rPad) p''))       
       (ùï°loop (ùïíùïì (c + lPad) l r rPad p'))
       refl
       (ùï°loop (ùïíùïì lPad l (c + r) rPad p))
  ùï°comm :
      ‚àÄ lPad rPad l r l' r' ‚Üí ‚àÄ p p' ‚Üí
     Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop (ùïíùïì lPad l r ((l' + r') + rPad) p'))       
       (ùï°loop (ùïíùïì lPad l r ((l' + r') + rPad) p'))
       (ùï°loop (ùïíùïì ((l + r) + lPad) l' r' rPad p))
       (ùï°loop (ùïíùïì ((l + r) + lPad) l' r' rPad p))

  ùï°over : ‚àÄ lPad rPad l x x' ‚Üí ‚àÄ p p' p'' ‚Üí
     Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop (ùïíùïì (l + lPad) x x' rPad p'))       
       (ùï°loop (ùïíùïì lPad x' x (l + rPad) p''))
       (ùï°loop (ùïíùïì lPad l (x' + x) rPad p))
       (ùï°loop (ùïíùïì lPad l (x' + x) rPad p))


  ùï°squash : Bool‚ÜíType trunc ‚Üí isGroupoid (‚Ñôrm‚Çê n)

suc‚Ñôrm‚Çê : {trunc : Bool} (n : ‚Ñï) ‚Üí ‚Ñôrm‚Çê {trunc} n ‚Üí ‚Ñôrm‚Çê {trunc} (suc n)
suc‚Ñôrm‚Çê n ùï°base = ùï°base
suc‚Ñôrm‚Çê n (ùï°loop x i) = ùï°loop (sucAB x) i
suc‚Ñôrm‚Çê n (ùï°invol ab p i i‚ÇÅ) =
  ùï°invol (sucAB ab) ((+-suc _ _
          ‚àô (Œª i‚ÇÇ ‚Üí suc (AdjacentBundles.<n (swapAB' ab p) i‚ÇÇ)))) i i‚ÇÅ
suc‚Ñôrm‚Çê n (ùï°hex lPad rPad l c r p p' p'' i i‚ÇÅ) = {!!}
suc‚Ñôrm‚Çê n (ùï°comm lPad rPad l r l' r' p p' i i‚ÇÅ) = {!!}
suc‚Ñôrm‚Çê n (ùï°over lPad rPad l x x' p p' p'' i i‚ÇÅ) = {!!}
suc‚Ñôrm‚Çê n (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) = {!!}

adjTrAB : {n : ‚Ñï} ‚Üí (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí AdjacentBundles n
AdjacentBundles.lPad (adjTrAB (k , _)) = k
AdjacentBundles.l (adjTrAB (_ , _)) = zero
AdjacentBundles.r (adjTrAB (_ , _)) = zero
AdjacentBundles.rPad (adjTrAB {n} (k , _)) = n ‚à∏ (suc (suc k)) 
AdjacentBundles.<n (adjTrAB {n} (k , k<)) = ‚à∏<‚â°' {k} {n} k<

to‚ÇêR : ‚àÄ n {trunc} ‚Üí B.Rùï°rec {n = n} (‚Ñôrm‚Çê {trunc} n)
B.Rùï°rec.abase (to‚ÇêR n) = ùï°base
  -- 
B.Rùï°rec.aloop (to‚ÇêR (suc n)) (suc k , k<) =
   cong (suc‚Ñôrm‚Çê n) (B.Rùï°rec.aloop (to‚ÇêR (n)) (k , k<))
B.Rùï°rec.aloop (to‚ÇêR (suc (suc n))) (zero , k<) =
  ùï°loop (ùïíùïì zero zero zero n (+-comm n 2))

B.Rùï°rec.alooop (to‚ÇêR (suc n)) (suc k , k<) (suc l , l<) = 
  cong (suc‚Ñôrm‚Çê n) (B.Rùï°rec.alooop (to‚ÇêR (n)) (k , k<) (l , l<))
B.Rùï°rec.alooop (to‚ÇêR (suc (suc n))) (zero , k<) (zero , tt) = refl
B.Rùï°rec.alooop (to‚ÇêR (suc (suc n))) (suc (suc k) , k<) (zero , tt) =
  sym (ùï°loop (adjTrAB ((suc (suc k) , k<))))
   ‚àô‚àô refl ‚àô‚àô
   ùï°loop (adjTrAB (zero , _))

B.Rùï°rec.alooop (to‚ÇêR (suc (suc (suc n)))) (suc zero , tt) (zero , tt) = 
   ùï°loop (ùïíùïì zero 1 zero n (cong suc (+-comm n 2)))

B.Rùï°rec.alooop (to‚ÇêR (suc (suc n))) (zero , tt) (suc (suc l) , l<) =
  sym (ùï°loop (adjTrAB (zero , _)))
   ‚àô‚àô refl ‚àô‚àô
   ùï°loop (adjTrAB ((suc (suc l) , l<)))


B.Rùï°rec.alooop (to‚ÇêR (suc (suc (suc n)))) (zero , k<) (suc zero , l<) =
  ùï°loop (ùïíùïì zero zero 1 n (cong suc (+-comm n 2)))


B.Rùï°rec.acomp (to‚ÇêR (suc (suc n)) {t}) (suc k , k<) (suc l , l<) = 
  congSq (suc‚Ñôrm‚Çê {t} (suc n)) (B.Rùï°rec.acomp (to‚ÇêR (suc n)) (k , k<) (l , l<))
B.Rùï°rec.acomp (to‚ÇêR (suc (suc n))) (zero , k<) (zero , tt) = refl
B.Rùï°rec.acomp (to‚ÇêR (suc (suc n))) (suc (suc k) , k<) (zero , tt) =
  ?
  -- {!!} ‚óÅ flipSquare (symP (doubleCompPath-filler
  --    (sym (ùï°loop (adjTrAB (suc (suc k) , k<))))
  --     refl
  --     (ùï°loop (adjTrAB (zero , _))))) ‚ñ∑ {!!}
  -- flipSquare ( {!(doubleCompPath-filler ? refl ?)!})

B.Rùï°rec.acomp (to‚ÇêR (suc (suc (suc n)))) (suc zero , tt) (zero , tt) = 
   {!!}

B.Rùï°rec.acomp (to‚ÇêR (suc (suc n))) (zero , tt) (suc (suc l) , l<) =
  {!!}


B.Rùï°rec.acomp (to‚ÇêR (suc (suc (suc n)))) (zero , k<) (suc zero , l<) =
  {!!}



B.Rùï°rec.ainvol (to‚ÇêR n) k = {!!}
 -- ùï°invol (adjTrAB {n} k) (AdjacentBundles.<n (adjTrAB k))
B.Rùï°rec.acomm (to‚ÇêR n) = {!!}
B.Rùï°rec.abraid (to‚ÇêR n) = {!!}
 

-- to‚Çê : {trunc : Bool} (n : ‚Ñï) ‚Üí B.‚Ñôrm {trunc} n ‚Üí ‚Ñôrm‚Çê {trunc} n
-- to‚Çê =

-- .f {!!} {!!} {!!}
-- to‚Çê n B.ùï°base = ùï°base
-- to‚Çê n (B.ùï°loop x i) = ùï°loop (adjTrAB x) i
-- to‚Çê n (B.ùï°looop k l i) = {!!}
-- to‚Çê n (B.ùï°comp k l i i‚ÇÅ) = {!!}
-- to‚Çê n (B.ùï°invol k i i‚ÇÅ) = ùï°invol (adjTrAB k) (~ i) i‚ÇÅ
-- to‚Çê n (B.ùï°comm k l x i i‚ÇÅ) = {!!}
-- to‚Çê n (B.ùï°braid k k< i i‚ÇÅ) = {!!}
-- to‚Çê n (B.ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) = {!!}
