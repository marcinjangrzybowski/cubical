{-# OPTIONS --safe #-}
module Cubical.HITs.Permutation.BaseAssoc22 where

import Cubical.Data.Nat.Base as ‚Ñï
import Cubical.Data.Nat.Properties as ‚Ñïprops


-- open import Cubical.Data.Fin.Properties as FP
open import Cubical.Data.Empty as ‚ä•

open import Cubical.Functions.Involution

open import Cubical.Foundations.Everything
-- open import Cubical.Data.Empty as ‚ä•
-- open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_)
-- open import Cubical.Data.Nat.Order
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe
open import Cubical.Data.Unit
open import Cubical.Data.Bool as ùüö
open import Cubical.Data.Sum as ‚äé


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Data.Nat.Order.RecursiveMoreEquiv

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.Algebra.Group

open import Cubical.Algebra.SymmetricGroup

import Cubical.Functions.Logic as L

open import Cubical.Functions.Embedding

open import Cubical.Data.List as Li

import Cubical.Data.Nat.FinGenAut2 as A

import Cubical.HITs.PropositionalTruncation as Prop

open import Cubical.HITs.GroupoidQuotients as GQ
  renaming ([_] to [_]// ; RelimProp to  RelimProp// ; Rrec to Rrec//)


open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties

-- open import Cubical.Algebra.Group.Generators

open import Cubical.Functions.FunExtEquiv

open import Cubical.HITs.SequentialColimit as SC

open import Cubical.HITs.EilenbergMacLane1 renaming (elim to elimEM)


open import Cubical.Relation.Binary

-- import Cubical.Homotopy.EilenbergMacLane.Properties as EMP

open import Cubical.Foundations.Equiv.HalfAdjoint

import Cubical.HITs.Permutation.Base as B

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì

infixl 6 _+_

data ‚Ñï‚Çê' {trunc : Type}  : Type where
 one : ‚Ñï‚Çê' 
 _+_ : ‚Ñï‚Çê' {trunc} ‚Üí ‚Ñï‚Çê' {trunc} ‚Üí ‚Ñï‚Çê' {trunc}
 +-assoc : ‚àÄ m n o ‚Üí m + (n + o) ‚â° (m + n) + o
 isSet‚Ñï‚Çê' : trunc ‚Üí isSet ‚Ñï‚Çê' 



-- record ‚Ñï‚Çêrec (h : HLevel) (A : Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    aOne : {0 < h} ‚Üí A
--    _a+_ : {0 < h} ‚Üí A ‚Üí A ‚Üí A
--    a-assoc : ‚àÄ x y z ‚Üí x a+ (y a+ z) ‚â° (x a+ y) a+ z
--    -- asquash : if trunc then (isSet A) else Unit*

--  -- f : ‚àÄ {trunc} ‚Üí {_ : if trunc then (isSet A) else Unit*} ‚Üí
--  --       ‚Ñï‚Çê' {if trunc then Unit else ‚ä•} ‚Üí A
--  -- f one = aOne
--  -- f {trunc} {squashA} (x + x‚ÇÅ) = f {trunc} {squashA} x a+ f {trunc} {squashA}x‚ÇÅ
--  -- f {trunc} {squashA} (+-assoc x x‚ÇÅ x‚ÇÇ i) =
--  --   a-assoc
--  --    (f {trunc} {squashA} x)
--  --    (f {trunc} {squashA} x‚ÇÅ)
--  --    (f {trunc} {squashA} x‚ÇÇ) i
--  -- f {true} {squashA} (isSet‚Ñï‚Çê' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
--  --   squashA _ _ (cong (f {true} {squashA}) x‚ÇÉ) (cong f y) i i‚ÇÅ


record ‚Ñï‚Çêrec (A : Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   aOne : A
   _a+_ : A ‚Üí A ‚Üí A
   a-assoc : ‚àÄ x y z ‚Üí x a+ (y a+ z) ‚â° (x a+ y) a+ z
   -- asquash : if trunc then (isSet A) else Unit*

 f : ‚àÄ {trunc} ‚Üí {_ : if trunc then (isSet A) else Unit*} ‚Üí
       ‚Ñï‚Çê' {if trunc then Unit else ‚ä•} ‚Üí A
 f one = aOne
 f {trunc} {squashA} (x + x‚ÇÅ) = f {trunc} {squashA} x a+ f {trunc} {squashA}x‚ÇÅ
 f {trunc} {squashA} (+-assoc x x‚ÇÅ x‚ÇÇ i) =
   a-assoc
    (f {trunc} {squashA} x)
    (f {trunc} {squashA} x‚ÇÅ)
    (f {trunc} {squashA} x‚ÇÇ) i
 f {true} {squashA} (isSet‚Ñï‚Çê' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
   squashA _ _ (cong (f {true} {squashA}) x‚ÇÉ) (cong f y) i i‚ÇÅ

‚Ñï‚Çê = ‚Ñï‚Çê' {Unit}

isSet‚Ñï‚Çê = isSet‚Ñï‚Çê' tt


record ‚Ñï‚Çêelim (A : ‚Ñï‚Çê ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   aOne : A one
   _a+_ : ‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n + m)
   a-assoc : ‚àÄ {n m o} (x : A n) (y : A m) (z : A o)
                 ‚Üí PathP (Œª i ‚Üí A (+-assoc n m o i))
                   (x a+ (y a+ z))
                   ((x a+ y) a+ z)
   asquash : ‚àÄ x ‚Üí (isSet (A x))

 f : ‚àÄ x ‚Üí A x
 f one = aOne
 f (x + x‚ÇÅ) = f x a+ f x‚ÇÅ
 f (+-assoc x x‚ÇÅ x‚ÇÇ i) = a-assoc (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 f (isSet‚Ñï‚Çê' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
    isOfHLevel‚ÜíisOfHLevelDep 2 (asquash)
      _ _
     (cong f x‚ÇÉ) (cong f y)
     (isSet‚Ñï‚Çê' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y) i i‚ÇÅ

record ‚Ñï‚ÇêelimProp (A : ‚Ñï‚Çê ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   aOne : A one
   _a+_ : ‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n + m)

   asquash : ‚àÄ x ‚Üí (isProp (A x))

 w : ‚Ñï‚Çêelim A
 ‚Ñï‚Çêelim.aOne w = aOne
 ‚Ñï‚Çêelim._a+_ w = _a+_
 ‚Ñï‚Çêelim.a-assoc w x y z = isProp‚ÜíPathP (Œª i ‚Üí asquash (+-assoc _ _ _ i)) _ _
 ‚Ñï‚Çêelim.asquash w = isProp‚ÜíisSet ‚àò asquash 

 f : ‚àÄ x ‚Üí A x
 f = ‚Ñï‚Çêelim.f w

+-sym-one : (m : ‚Ñï‚Çê') ‚Üí one + m ‚â° m + one
+-sym-one = ‚Ñï‚ÇêelimProp.f w
 where
 w : ‚Ñï‚ÇêelimProp (Œª z ‚Üí one + z ‚â° z + one)
 ‚Ñï‚ÇêelimProp.aOne w = refl
 ‚Ñï‚ÇêelimProp._a+_ w {n = n} {m = m} q p = +-assoc _ _ _ ‚àô
  cong (_+ m) q ‚àô
   sym (+-assoc _ _ _)
    ‚àô cong (n +_) p ‚àô +-assoc _ _ _
 ‚Ñï‚ÇêelimProp.asquash w _ = isSet‚Ñï‚Çê _ _
 
+-sym : ‚àÄ (n : ‚Ñï‚Çê) m ‚Üí n + m ‚â° m + n
+-sym = ‚Ñï‚ÇêelimProp.f w
 where
 w : ‚Ñï‚ÇêelimProp (Œª z ‚Üí (m : ‚Ñï‚Çê') ‚Üí z + m ‚â° m + z)
 ‚Ñï‚ÇêelimProp.aOne w = +-sym-one
 ‚Ñï‚ÇêelimProp._a+_ w {n} {m} p' q' o =
    sym (+-assoc _ _ _)
   ‚àô (p' (m + o)
   ‚àô sym (+-assoc _ _ _))
   ‚àô q' ( o + n) ‚àô sym (+-assoc _ _ _)
 ‚Ñï‚ÇêelimProp.asquash w _ = isPropŒ† (Œª _ ‚Üí isSet‚Ñï‚Çê _ _)



‚Ñï‚Üí‚Ñï‚Çê' :  ‚Ñï.‚Ñï ‚Üí ‚Ñï‚Çê
‚Ñï‚Üí‚Ñï‚Çê' ‚Ñï.zero = one
‚Ñï‚Üí‚Ñï‚Çê' (‚Ñï.suc x) = one + (‚Ñï‚Üí‚Ñï‚Çê' x)


‚Ñï‚Üí‚Ñï‚Çê :  ‚Ñï.‚Ñï ‚Üí Maybe ‚Ñï‚Çê
‚Ñï‚Üí‚Ñï‚Çê ‚Ñï.zero = nothing
‚Ñï‚Üí‚Ñï‚Çê (‚Ñï.suc x) = just (‚Ñï‚Üí‚Ñï‚Çê' x)

‚Ñï‚Çê‚Üí‚Ñï : ‚Ñï‚Çê ‚Üí ‚Ñï.‚Ñï
‚Ñï‚Çê‚Üí‚Ñï = ‚Ñï‚Çêrec.f w {true} {‚Ñïprops.isSet‚Ñï}
 where
 w : ‚Ñï‚Çêrec ‚Ñï.‚Ñï
 ‚Ñï‚Çêrec.aOne w = 1
 ‚Ñï‚Çêrec._a+_ w = ‚Ñï._+_
 ‚Ñï‚Çêrec.a-assoc w = ‚Ñïprops.+-assoc

-- Iso‚Ñï‚Ñï‚Çê : Iso ‚Ñï.‚Ñï (Maybe ‚Ñï‚Çê)
-- Iso‚Ñï‚Ñï‚Çê = w
--  where
--  w : Iso ‚Ñï.‚Ñï (Maybe ‚Ñï‚Çê)
--  Iso.fun w = ‚Ñï‚Üí‚Ñï‚Çê
--  Iso.inv w = {!!}
--  Iso.rightInv w = {!!}
--  Iso.leftInv w = {!!}

+‚Çê‚â°+ : ‚àÄ n m ‚Üí ‚Ñï‚Çê‚Üí‚Ñï (n + m) ‚â° (‚Ñï‚Çê‚Üí‚Ñï n) ‚Ñï.+ (‚Ñï‚Çê‚Üí‚Ñï m) 
+‚Çê‚â°+ = ‚Ñï‚ÇêelimProp.f w
 where
 w : ‚Ñï‚ÇêelimProp (Œª z ‚Üí (m : ‚Ñï‚Çê') ‚Üí ‚Ñï‚Çê‚Üí‚Ñï (z + m) ‚â° ‚Ñï‚Çê‚Üí‚Ñï z ‚Ñï.+ ‚Ñï‚Çê‚Üí‚Ñï m)
 ‚Ñï‚ÇêelimProp.aOne w m = refl
 ‚Ñï‚ÇêelimProp._a+_ w {n} {m} q p m' =
    (cong ‚Ñï‚Çê‚Üí‚Ñï (sym (+-assoc n m m')) ‚àô‚àô q (m + m')
      ‚àô‚àô cong ((‚Ñï‚Çê‚Üí‚Ñï n) ‚Ñï.+_) (p m'))
     ‚àô‚àô ‚Ñïprops.+-assoc (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m) (‚Ñï‚Çê‚Üí‚Ñï m') ‚àô‚àô
     (cong (‚Ñï._+ (‚Ñï‚Çê‚Üí‚Ñï m') ) (sym (q m)) ‚àô cong (‚Ñï._+ (‚Ñï‚Çê‚Üí‚Ñï m')) (q m))

 ‚Ñï‚ÇêelimProp.asquash w _ = isPropŒ† Œª _ ‚Üí ‚Ñïprops.isSet‚Ñï _ _

-- record : ?

-- Fin‚Çê : ‚Ñï‚Çê' {‚ä•} ‚Üí Type
-- Fin‚Çê one = Unit 
-- Fin‚Çê (x + x‚ÇÅ) = Fin‚Çê x ‚äé Fin‚Çê x‚ÇÅ
-- Fin‚Çê (+-assoc x x‚ÇÅ x‚ÇÇ i) =
--  ua (‚äé-assoc-‚âÉ {A = Fin‚Çê x} {B = Fin‚Çê x‚ÇÅ} {C = Fin‚Çê x‚ÇÇ}) (~ i) 

-- toTrunc : {!!}
-- toTrunc = {!!}

FinSucUnit‚äé : ‚àÄ n ‚Üí Iso (Fin (‚Ñï.suc n)) (Unit ‚äé Fin n)
FinSucUnit‚äé n = w
 where
 w : Iso (Fin (‚Ñï.suc n)) (Unit ‚äé Fin n)
 Iso.fun w (‚Ñï.zero , snd‚ÇÅ) = inl _
 Iso.fun w (‚Ñï.suc fst‚ÇÅ , snd‚ÇÅ) = inr (fst‚ÇÅ , snd‚ÇÅ)
 Iso.inv w (inl x) = ‚Ñï.zero , _
 Iso.inv w (inr x) = ‚Ñï.suc (fst x) , (snd x)
 Iso.rightInv w (inl x) = refl
 Iso.rightInv w (inr (fst‚ÇÅ , snd‚ÇÅ)) = refl
 Iso.leftInv w (‚Ñï.zero , snd‚ÇÅ) = refl
 Iso.leftInv w (‚Ñï.suc fst‚ÇÅ , snd‚ÇÅ) = refl

Fin‚äé : ‚àÄ n m ‚Üí Iso (Fin (n ‚Ñï.+ m)) (Fin n ‚äé Fin m)
Fin‚äé ‚Ñï.zero m =
 compIso (invIso ‚äé-‚ä•-Iso)
   (compIso ‚äé-swap-Iso (‚äéIso (compIso (invIso (Œ£EmptyIso _)) Œ£-swap-Iso) idIso))
Fin‚äé (‚Ñï.suc n) m =
  compIso (FinSucUnit‚äé _)
   (compIso (compIso (‚äéIso idIso (Fin‚äé n m))
    (invIso ‚äé-assoc-Iso)) (‚äéIso (invIso (FinSucUnit‚äé _)) idIso)) 

Fin‚äé‚â° : ‚àÄ n m ‚Üí  (Fin (n ‚Ñï.+ m)) ‚â° (Fin n ‚äé Fin m)
Fin‚äé‚â° n m = ua (isoToEquiv (Fin‚äé n m))


+-hlp-sing-Fin : (n m : ‚Ñï‚Çê) ‚Üí
     Fin (‚Ñï‚Çê‚Üí‚Ñï (n + m)) ‚â° (Fin (‚Ñï‚Çê‚Üí‚Ñï n) ‚äé Fin (‚Ñï‚Çê‚Üí‚Ñï m))
+-hlp-sing-Fin n m  =
  cong Fin (+‚Çê‚â°+ n m)
   ‚àô Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m)  

module _ {‚Ñì} {A : Type ‚Ñì} where

 √ó^-+-‚âÉ : ‚àÄ n m ‚Üí  (A √ó^ n √ó A √ó^ m) ‚âÉ (A √ó^ (n ‚Ñï.+ m))  
 √ó^-+-‚âÉ (‚Ñï.zero) m = isoToEquiv (iso snd (_ ,_) (Œª _ ‚Üí refl) Œª _ ‚Üí refl)
 √ó^-+-‚âÉ (‚Ñï.suc n) m = Œ£-assoc-‚âÉ ‚àô‚Çë ‚âÉ-√ó (idEquiv _) (√ó^-+-‚âÉ n m)

module _ {‚Ñì} (A : Type ‚Ñì) where

 ùëΩ' : ‚Ñï‚Çêrec (Type ‚Ñì) 
 ‚Ñï‚Çêrec.aOne ùëΩ' = A
 ‚Ñï‚Çêrec._a+_ ùëΩ' = _√ó_
 ‚Ñï‚Çêrec.a-assoc ùëΩ' _ _ _ = sym (ua Œ£-assoc-‚âÉ)

 -- module _ (isSetA : isSet A) where

 singlùëΩ : (x : ‚Ñï‚Çê) ‚Üí singl (A √ó^ (‚Ñï‚Çê‚Üí‚Ñï x))
 singlùëΩ = ‚Ñï‚Çêelim.f w
  where
  w : ‚Ñï‚Çêelim (Œª z ‚Üí singl (A √ó^ ‚Ñï‚Çê‚Üí‚Ñï z))
  ‚Ñï‚Çêelim.aOne w = _ , isoToPath (iso fst (_, _) (Œª _ ‚Üí refl) Œª _ ‚Üí refl) 
  fst ((w ‚Ñï‚Çêelim.a+ (x , x=)) (y , y=)) = x √ó y
  snd (((‚Ñï‚Çêelim._a+_ w {n} {m}) (x , x=)) (y , y=)) =
    (sym (ua (√ó^-+-‚âÉ (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m)))) ‚àô  cong‚ÇÇ _√ó_ x= y=
  ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} x y z =
   Œ£PathP (sym (ua Œ£-assoc-‚âÉ) ,
     {!!})
  -- fst (‚Ñï‚Çêelim.a-assoc w {n} {m} {o} x y z i) =
  --   sym (ua (Œ£-assoc-‚âÉ {A = fst x} {B = Œª _ ‚Üí fst y} {C = Œª _ _ ‚Üí fst z})) i
  -- snd (‚Ñï‚Çêelim.a-assoc w {n} {m} {o} x y z i) =
  --   {!!}
  ‚Ñï‚Çêelim.asquash w _ = isOfHLevelPlus {n = 0} 2 (isContrSingl _)

 ùëΩ : ‚Ñï‚Çê ‚Üí Type ‚Ñì
 ùëΩ = fst ‚àò singlùëΩ

allFalseùë© : ‚àÄ n ‚Üí ùëΩ Bool n ‚Üí hProp ‚Ñì-zero
allFalseùë© = ‚Ñï‚Çêelim.f w
 where
 w : ‚Ñï‚Çêelim (Œª z ‚Üí ùëΩ Bool z ‚Üí hProp ‚Ñì-zero)
 ‚Ñï‚Çêelim.aOne w false = L.‚ä§
 ‚Ñï‚Çêelim.aOne w true = L.‚ä•
 ‚Ñï‚Çêelim._a+_ w {n} {m} Fn Fm = Œª (x , y) ‚Üí Fn x L.‚äì Fm y
 ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fn Fm Fo i q =
   let q' = unglue (i ‚à® ~ i) q
   in L.‚äì-assoc (Fn (fst q')) (Fm (fst (snd q'))) ((Fo (snd (snd q')))) i

 ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí isSetHProp

onlyOneTrueùë© : ‚àÄ n ‚Üí ùëΩ Bool n ‚Üí hProp ‚Ñì-zero
onlyOneTrueùë© = ‚Ñï‚Çêelim.f w
 where
 w : ‚Ñï‚Çêelim (Œª z ‚Üí ùëΩ Bool z ‚Üí hProp ‚Ñì-zero)
 ‚Ñï‚Çêelim.aOne w false = L.‚ä•
 ‚Ñï‚Çêelim.aOne w true = L.‚ä§
 ‚Ñï‚Çêelim._a+_ w {n} {m} Fn Fm =
   Œª (x , y) ‚Üí (Fn x L.‚äì allFalseùë© n x) L.‚äî (Fm y L.‚äì allFalseùë© m y)
 ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fn Fm Fo i q =
   let q' = unglue (i ‚à® ~ i) q
   in {!!}
      -- funExtDep Œª {x‚ÇÄ} {x‚ÇÅ} p ‚Üí
      --   Œª i ‚Üí
      --     let q = sym (ua-ungluePath _ (symP p)) i
      --     in L.‚äì-assoc (Fn (fst q)) (Fm (fst (snd q))) ((Fo (snd (snd q)))) i

 ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí isSetHProp



 -- hFin‚Çê : (x : ‚Ñï‚Çê) ‚Üí singl (Fin (‚Ñï‚Çê‚Üí‚Ñï x))
 -- hFin‚Çê = ‚Ñï‚Çêelim.f w
 --  where
 --  w : ‚Ñï‚Çêelim (Œª z ‚Üí singl (Fin (‚Ñï‚Çê‚Üí‚Ñï z)))
 --  ‚Ñï‚Çêelim.aOne w = Unit , isoToPath (compIso (FinSucUnit‚äé ‚Ñï.zero)
 --    (compIso (‚äéIso idIso (compIso Œ£-swap-Iso (Œ£EmptyIso _)))
 --      ‚äé-‚ä•-Iso)) 
 --  fst ((w ‚Ñï‚Çêelim.a+ x) y) = fst x ‚äé fst y
 --  snd (‚Ñï‚Çêelim._a+_ w {n} {m} x y) = 
 --   Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m) ‚àô cong‚ÇÇ _‚äé_ (snd x) (snd y)
 --  fst (‚Ñï‚Çêelim.a-assoc w x y z i) =
 --    ua (‚äé-assoc-‚âÉ {A = (fst x)} {B = (fst y)} {C = (fst z)}) (~ i) 
 --  snd (‚Ñï‚Çêelim.a-assoc w {n = n} {m} {o} x y z i) =
 --    hFin‚Çê-sq-assoc {n = n} {m} {o} x y z i 
 --  ‚Ñï‚Çêelim.asquash w x = isOfHLevelPlus {n = 0} 2 (isContrSingl _)



hh : ‚àÄ n m o (x : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï n))) (y : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï m)))
      (z : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï o)))
      (x‚ÇÅ : Fin (‚Ñï‚Çê‚Üí‚Ñï (n + (m + o)))) ‚Üí
    Path ((fst x ‚äé fst y) ‚äé fst z)
    (transport
     ((Œª i ‚Üí cong (Fin ‚àò ‚Ñï‚Çê‚Üí‚Ñï) (+-assoc n m o) i) ‚àô
      Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï (n + m)) (‚Ñï‚Çê‚Üí‚Ñï o) ‚àô
      cong‚ÇÇ _‚äé_ (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m) ‚àô cong‚ÇÇ _‚äé_ (snd x) (snd y))
      (snd z))
     x‚ÇÅ)
    (transport
     ((Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï (m + o)) ‚àô
       cong‚ÇÇ _‚äé_ (snd x)
       (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï m) (‚Ñï‚Çê‚Üí‚Ñï o) ‚àô cong‚ÇÇ _‚äé_ (snd y) (snd z)))
      ‚àô (Œª i ‚Üí sym (ua
        (‚äé-assoc-‚âÉ {A = (fst x)} {B = (fst y)} {C = (fst z)})) i))
     x‚ÇÅ)
hh = {!!}


hh'L : ‚àÄ n m o ‚Üí

       Square
      (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï (m + o)))
      (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï (n + m)) (‚Ñï‚Çê‚Üí‚Ñï o))
      (cong (Fin ‚àò ‚Ñï‚Çê‚Üí‚Ñï) (+-assoc n m o))
      (cong (Fin (‚Ñï‚Çê‚Üí‚Ñï n) ‚äé_) (+-hlp-sing-Fin m o)
         ‚àô‚àô sym (ua ‚äé-assoc-‚âÉ) ‚àô‚àô
         cong (_‚äé (Fin (‚Ñï‚Çê‚Üí‚Ñï o))) (sym (+-hlp-sing-Fin n m)))
      
hh'L = {!!}

hh'R : ‚àÄ n m o (x : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï n))) (y : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï m)))
      (z : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï o)))
      ‚Üí Square
      (cong‚ÇÇ _‚äé_ (snd x)
       (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï m) (‚Ñï‚Çê‚Üí‚Ñï o) ‚àô cong‚ÇÇ _‚äé_ (snd y) (snd z)))
      (cong‚ÇÇ _‚äé_ (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m) ‚àô cong‚ÇÇ _‚äé_ (snd x) (snd y))
       (snd z))
      ((cong (Fin (‚Ñï‚Çê‚Üí‚Ñï n) ‚äé_) (+-hlp-sing-Fin m o)
         ‚àô‚àô sym (ua (‚äé-assoc-‚âÉ
                   {A = Fin (‚Ñï‚Çê‚Üí‚Ñï n)}
                   {B = Fin (‚Ñï‚Çê‚Üí‚Ñï m)}
                   {C = Fin (‚Ñï‚Çê‚Üí‚Ñï o)})) ‚àô‚àô
         cong (_‚äé (Fin (‚Ñï‚Çê‚Üí‚Ñï o))) (sym (+-hlp-sing-Fin n m))))
      (sym (ua (‚äé-assoc-‚âÉ
                   {A = fst x}
                   {B = fst y}
                   {C = fst z})))
hh'R = {!!}


hh' : ‚àÄ n m o (x : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï n))) (y : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï m)))
      (z : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï o)))
      (x‚ÇÅ : Fin (‚Ñï‚Çê‚Üí‚Ñï (n + (m + o))))
      ‚Üí Square
      (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï (m + o)) ‚àô
       cong‚ÇÇ _‚äé_ (snd x)
       (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï m) (‚Ñï‚Çê‚Üí‚Ñï o) ‚àô cong‚ÇÇ _‚äé_ (snd y) (snd z)))
      (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï (n + m)) (‚Ñï‚Çê‚Üí‚Ñï o) ‚àô
       cong‚ÇÇ _‚äé_ (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m) ‚àô cong‚ÇÇ _‚äé_ (snd x) (snd y))
       (snd z))
      (cong (Fin ‚àò ‚Ñï‚Çê‚Üí‚Ñï) (+-assoc n m o))
      (sym (ua ‚äé-assoc-‚âÉ))
hh' = {!!}

hFin‚Çê-sq-assoc :  ‚àÄ {n} {m} {o} (x : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï n)))
      (y : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï m))) (z : singl (Fin (‚Ñï‚Çê‚Üí‚Ñï o))) ‚Üí
    Square
      (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï (m + o)) ‚àô
         (cong‚ÇÇ _‚äé_ 
            (snd x)
            (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï m) (‚Ñï‚Çê‚Üí‚Ñï o) ‚àô (cong‚ÇÇ _‚äé_ (snd y) (snd z)))))
      (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï (n + m)) (‚Ñï‚Çê‚Üí‚Ñï o) ‚àô
         (cong‚ÇÇ _‚äé_ 
            (Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m) ‚àô (cong‚ÇÇ _‚äé_ (snd x) (snd y))) (snd z)))
      (cong (Fin ‚àò ‚Ñï‚Çê‚Üí‚Ñï) (+-assoc n m o))
      (sym (ua (‚äé-assoc-‚âÉ {A = (fst x)} {B = (fst y)} {C = (fst z)})))
hFin‚Çê-sq-assoc {n} {m} {o} x y z = {!!}


hFin‚Çê : (x : ‚Ñï‚Çê) ‚Üí singl (Fin (‚Ñï‚Çê‚Üí‚Ñï x))
hFin‚Çê = ‚Ñï‚Çêelim.f w
 where
 w : ‚Ñï‚Çêelim (Œª z ‚Üí singl (Fin (‚Ñï‚Çê‚Üí‚Ñï z)))
 ‚Ñï‚Çêelim.aOne w = Unit , isoToPath (compIso (FinSucUnit‚äé ‚Ñï.zero)
   (compIso (‚äéIso idIso (compIso Œ£-swap-Iso (Œ£EmptyIso _)))
     ‚äé-‚ä•-Iso)) 
 fst ((w ‚Ñï‚Çêelim.a+ x) y) = fst x ‚äé fst y
 snd (‚Ñï‚Çêelim._a+_ w {n} {m} x y) = 
  Fin‚äé‚â° (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m) ‚àô cong‚ÇÇ _‚äé_ (snd x) (snd y)
 fst (‚Ñï‚Çêelim.a-assoc w x y z i) =
   ua (‚äé-assoc-‚âÉ {A = (fst x)} {B = (fst y)} {C = (fst z)}) (~ i) 
 snd (‚Ñï‚Çêelim.a-assoc w {n = n} {m} {o} x y z i) =
   hFin‚Çê-sq-assoc {n = n} {m} {o} x y z i 
 ‚Ñï‚Çêelim.asquash w x = isOfHLevelPlus {n = 0} 2 (isContrSingl _)

Fin‚Çê : ‚Ñï‚Çê ‚Üí Type
Fin‚Çê = fst ‚àò hFin‚Çê

<F‚Çê : ‚àÄ n ‚Üí Fin‚Çê n ‚Üí Fin‚Çê n ‚Üí hProp ‚Ñì-zero
<F‚Çê = ‚Ñï‚Çêelim.f w
 where
 w : ‚Ñï‚Çêelim Œª z ‚Üí Fin‚Çê z ‚Üí Fin‚Çê z ‚Üí hProp ‚Ñì-zero
 ‚Ñï‚Çêelim.aOne w _ _ = L.‚ä•
 ‚Ñï‚Çêelim._a+_ w {n} {m} f g =
  ‚äé.rec (Œª l ‚Üí ‚äé.rec (f l) Œª _ ‚Üí L.‚ä§)
    Œª r ‚Üí ‚äé.rec (Œª _ ‚Üí L.‚ä•) (g r)
 ‚Ñï‚Çêelim.a-assoc w = {!!}
 ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí (isSet‚Üí isSetHProp)

‚â§F‚Çê : ‚àÄ n ‚Üí Fin‚Çê n ‚Üí Fin‚Çê n ‚Üí hProp ‚Ñì-zero
‚â§F‚Çê = ‚Ñï‚Çêelim.f w
 where
 w : ‚Ñï‚Çêelim Œª z ‚Üí Fin‚Çê z ‚Üí Fin‚Çê z ‚Üí hProp ‚Ñì-zero
 ‚Ñï‚Çêelim.aOne w _ _ = L.‚ä§
 ‚Ñï‚Çêelim._a+_ w {n} {m} f g =
  ‚äé.rec (Œª l ‚Üí ‚äé.rec (f l) Œª _ ‚Üí L.‚ä§)
    Œª r ‚Üí ‚äé.rec (Œª _ ‚Üí L.‚ä•) (g r)
 ‚Ñï‚Çêelim.a-assoc w = {!!}
 ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí (isSet‚Üí isSetHProp)


_<F‚Çê_ : ‚àÄ {n} ‚Üí Fin‚Çê n ‚Üí Fin‚Çê n ‚Üí hProp ‚Ñì-zero
_<F‚Çê_ {n} = <F‚Çê n

_‚â§F‚Çê_ : ‚àÄ {n} ‚Üí Fin‚Çê n ‚Üí Fin‚Çê n ‚Üí hProp ‚Ñì-zero
_‚â§F‚Çê_ {n} = ‚â§F‚Çê n


extend‚Çê : ‚Ñï‚Çê ‚Üí (k : ‚Ñï‚Çê) ‚Üí Fin‚Çê k ‚Üí ‚Ñï‚Çê
extend‚Çê l = ‚Ñï‚Çêelim.f w
 where
 w : ‚Ñï‚Çêelim (Œª z ‚Üí Fin‚Çê z ‚Üí ‚Ñï‚Çê)
 ‚Ñï‚Çêelim.aOne w _ = l
 ‚Ñï‚Çêelim._a+_ w {n} {m} f g =
   ‚äé.rec ((_+ m) ‚àò' f) ((n +_) ‚àò' g)
 ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fx Fy Fz =
  funExtDep Œª {x‚ÇÄ} {x‚ÇÅ} p ‚Üí
      let p' = (sym (ua-ungluePath _ (symP p)))
      in ww {x‚ÇÄ} {x‚ÇÅ} p' (‚äéPath.encode _ _ p')
    
  where
  ww : {x‚ÇÄ : Fin‚Çê (n + (m + o))} {x‚ÇÅ : Fin‚Çê ((n + m) + o)}
      (p : x‚ÇÄ ‚â° fst (isoToEquiv ‚äé-assoc-Iso) x‚ÇÅ) ‚Üí
      (‚äéPath.Cover x‚ÇÄ (fst (isoToEquiv ‚äé-assoc-Iso) x‚ÇÅ)) ‚Üí
         --PathP (Œª z‚ÇÅ ‚Üí Fin‚Çê (+-assoc n m o z‚ÇÅ)) x‚ÇÄ x‚ÇÅ) ‚Üí
      ‚äé.rec (Œª x‚ÇÇ ‚Üí Fx x‚ÇÇ + (m + o))
      (Œª x‚ÇÇ ‚Üí n + ‚äé.rec (Œª x‚ÇÉ ‚Üí Fy x‚ÇÉ + o) (Œª x‚ÇÉ ‚Üí m + Fz x‚ÇÉ) x‚ÇÇ) x‚ÇÄ
      ‚â°
      ‚äé.rec (Œª x‚ÇÇ ‚Üí ‚äé.rec (Œª x‚ÇÉ ‚Üí Fx x‚ÇÉ + m) (Œª x‚ÇÉ ‚Üí n + Fy x‚ÇÉ) x‚ÇÇ + o)
      (Œª x‚ÇÇ ‚Üí n + m + Fz x‚ÇÇ) x‚ÇÅ
  ww {inl x} {inl (inl x‚ÇÅ)} p p' i = +-assoc (Fx (lower p' i)) m o i
  ww {inr (inl x)} {inl (inr x‚ÇÅ)} p p' i = 
    +-assoc n (Fy (lower (‚äéPath.encode _ _ (lower p')) i)) o i
  ww {inr (inr x)} {inl (inr x‚ÇÅ)} p p' = 
   ‚ä•.rec* (‚äéPath.encode _ _ (lower p'))
  ww {inr (inl x)} {inr x‚ÇÅ} p p' =
   ‚ä•.rec* (‚äéPath.encode _ _ (lower p'))
  ww {inr (inr x)} {inr x‚ÇÅ} p p' i = 
    +-assoc n m (Fz (lower (‚äéPath.encode _ _ (lower p')) i)) i
    
 ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí isSet‚Ñï‚Çê

extend‚Çê-sub‚Çó : ‚àÄ  (n : ‚Ñï‚Çê') (o : ‚Ñï‚Çê) (k : Fin‚Çê o)
    ‚Üí Fin‚Çê (extend‚Çê (one + n) o k)
extend‚Çê-sub‚Çó n* = ‚Ñï‚Çêelim.f w
 where
 w : ‚Ñï‚Çêelim (Œª z ‚Üí (k : Fin‚Çê z) ‚Üí Fin‚Çê (extend‚Çê (one + n*) z k))
 ‚Ñï‚Çêelim.aOne w _ = inl _
 ‚Ñï‚Çêelim._a+_ w f g = ‚äé.elim (inl ‚àò f) (inr ‚àò g)
 ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fn Fm Fo = {!!}
 ‚Ñï‚Çêelim.asquash w = {!!}

extend‚Çê-sub·µ£ : ‚àÄ  (n : ‚Ñï‚Çê') (o : ‚Ñï‚Çê) (k : Fin‚Çê o)
    ‚Üí Fin‚Çê (extend‚Çê (n + one) o k)
extend‚Çê-sub·µ£ n* = ‚Ñï‚Çêelim.f w
 where
 w : ‚Ñï‚Çêelim (Œª z ‚Üí (k : Fin‚Çê z) ‚Üí Fin‚Çê (extend‚Çê (n* + one) z k))
 ‚Ñï‚Çêelim.aOne w _ = inr _
 ‚Ñï‚Çêelim._a+_ w f g = ‚äé.elim (inl ‚àò f) (inr ‚àò g)
 ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fn Fm Fo = {!!}
 ‚Ñï‚Çêelim.asquash w = {!!}


-- -- extendSubSwap : ‚àÄ m n l ‚Üí ‚àÄ o k ‚Üí 
-- --       (extend‚Çê (n + l) (extend‚Çê (one + m) o k) (extend‚Çê-sub m o k))
-- --       ‚â°      
-- --       (extend‚Çê (m + l) (extend‚Çê (one + n) o k) (extend‚Çê-sub n o k))
-- -- extendSubSwap m' n' l' = ‚Ñï‚ÇêelimProp.f w
-- --  where
-- --  w : ‚Ñï‚ÇêelimProp (Œª z ‚Üí (k : Fin‚Çê z) ‚Üí _ ‚â° _)
-- --  ‚Ñï‚ÇêelimProp.aOne w _ =
-- --    cong (_+ m') (+-sym n' l') ‚àô‚àô +-sym (l' + n') m' ‚àô‚àô +-assoc _ _ _
-- --  ‚Ñï‚ÇêelimProp._a+_ w {n} {m} f g =
-- --    ‚äé.elim (cong (_+ m) ‚àò f) (cong (n +_) ‚àò g)
-- --  ‚Ñï‚ÇêelimProp.asquash w _ = isPropŒ† Œª _ ‚Üí isSet‚Ñï‚Çê _ _

extendSubAssoc : ‚àÄ m n l ‚Üí ‚àÄ o k ‚Üí
  (extend‚Çê (n + l) (extend‚Çê (one + m) o k) (extend‚Çê-sub‚Çó m o k))
        ‚â°
  (extend‚Çê (l + m) (extend‚Çê (n + one) o k) (extend‚Çê-sub·µ£ n o k))
extendSubAssoc m' n' l' =  ‚Ñï‚ÇêelimProp.f w
 where
 w : ‚Ñï‚ÇêelimProp (Œª z ‚Üí (k : Fin‚Çê z) ‚Üí _ ‚â° _)
 ‚Ñï‚ÇêelimProp.aOne w k =
   sym (+-assoc _ _ _)
 ‚Ñï‚ÇêelimProp._a+_ w {n} {m} f g =
  ‚äé.elim (cong (_+ m) ‚àò f) (cong (n +_) ‚àò g)
 ‚Ñï‚ÇêelimProp.asquash w _ = isPropŒ† Œª _ ‚Üí isSet‚Ñï‚Çê _ _


extend‚Çê-sub‚Çó+ : ‚àÄ m n l ‚Üí
    ‚àÄ o k ‚Üí extend‚Çê (l + m) (extend‚Çê (one + n) o k) (extend‚Çê-sub‚Çó n o k)
                ‚â° extend‚Çê (l + (m + n)) o k
extend‚Çê-sub‚Çó+ m' n' l' =  ‚Ñï‚ÇêelimProp.f w
 where
 w : ‚Ñï‚ÇêelimProp (Œª z ‚Üí (k : Fin‚Çê z) ‚Üí _ ‚â° _)
 ‚Ñï‚ÇêelimProp.aOne w _ = sym (+-assoc _ _ _)
 ‚Ñï‚ÇêelimProp._a+_ w {n} {m} f g =
   ‚äé.elim (cong (_+ m) ‚àò f) (cong (n +_) ‚àò g)
 ‚Ñï‚ÇêelimProp.asquash w _ = isPropŒ† Œª _ ‚Üí isSet‚Ñï‚Çê _ _

extend‚Çê-sub·µ£+ : ‚àÄ m n l ‚Üí
    ‚àÄ o k ‚Üí extend‚Çê (n + l) (extend‚Çê (m + one) o k) (extend‚Çê-sub·µ£ m o k)
      ‚â° extend‚Çê (m + n + l) o k
extend‚Çê-sub·µ£+ m' n' l' =  ‚Ñï‚ÇêelimProp.f w
 where
 w : ‚Ñï‚ÇêelimProp (Œª z ‚Üí (k : Fin‚Çê z) ‚Üí _ ‚â° _)
 ‚Ñï‚ÇêelimProp.aOne w _ =  (+-assoc _ _ _)
 ‚Ñï‚ÇêelimProp._a+_ w {n} {m} f g =
   ‚äé.elim (cong (_+ m) ‚àò f) (cong (n +_) ‚àò g)
 ‚Ñï‚ÇêelimProp.asquash w _ = isPropŒ† Œª _ ‚Üí isSet‚Ñï‚Çê _ _

infixl 6 _ùï°+_

-- singlNode‚Çê : (n : ‚Ñï‚Çê) ‚Üí singl (Œ£ _ (fst ‚àò uncurry (_‚â§F‚Çê_ {n})))
-- singlNode‚Çê = ‚Ñï‚Çêelim.f w
--  where
--  w : ‚Ñï‚Çêelim _ 
--  ‚Ñï‚Çêelim.aOne w = Unit , isoToPath
--        (iso (Œª _ ‚Üí tt) (Œª _ ‚Üí (tt , tt) , tt*)
--         (Œª _ ‚Üí refl) Œª _ ‚Üí refl) 
--  ‚Ñï‚Çêelim._a+_ w {n} {m} (x , x=) (y , y=) =
 
--    Maybe (x ‚äé y) ,
--     {!!} ‚àô cong Maybe (cong‚ÇÇ _‚äé_ x= y=)

-- -- ‚äé.rec (Œª l ‚Üí ‚äé.rec (f l) Œª _ ‚Üí L.‚ä§)
-- --     Œª r ‚Üí ‚äé.rec (Œª _ ‚Üí L.‚ä•) (g r)

--  ‚Ñï‚Çêelim.a-assoc w = {!!}
--  ‚Ñï‚Çêelim.asquash w = {!!}


Node‚Çê : ‚Ñï‚Çê ‚Üí Type
Node‚Çê = {!!}

-- data ‚Ñôrm‚Çê {trunc : Bool} : Type‚ÇÄ  

-- ùï°base' : ‚àÄ {trunc} ‚Üí ‚Ñï‚Çê ‚Üí ‚Ñôrm‚Çê {trunc}
-- ùï°swap : ‚àÄ {trunc} n m ‚Üí ùï°base' {trunc} (n + m) ‚â° ùï°base' (m + n)


-- data ‚Ñôrm‚Çê {trunc} where 
--   ùï°base : ‚Ñï‚Çê ‚Üí ‚Ñôrm‚Çê
--   ùï°loop : ‚àÄ o k n m ‚Üí
--       ùï°base' (extend‚Çê (n + m) o k)
--     ‚â° ùï°base' (extend‚Çê (m + n) o k)
--   ùï°invol : ‚àÄ o k n m ‚Üí
--         ùï°loop o k n m
--       ‚â° sym (ùï°loop o k m n)
--   -- ùï°natSub : {!!}
  

--      -- (ùï°swap (m + n) o)
--      -- (ùï°swap (n + m) o)
--      -- (ùï°loop (one + o) (inl tt) m n) 
--      -- (ùï°loop (o + one) (inr tt) m n)
--   ùï°loop' : ‚àÄ o k ‚Üí ‚àÄ l n m ‚Üí
--      ùï°base'
--       (extend‚Çê (l + n) (extend‚Çê (one + m) o k) (extend‚Çê-sub‚Çó m o k))
--       ‚â°
--       ùï°base'
--       (extend‚Çê (m + l) (extend‚Çê (n + one) o k) (extend‚Çê-sub·µ£ n o k))

--   ùï°sq : ‚àÄ o k m n l ‚Üí
--     Square {A = ‚Ñôrm‚Çê {trunc}}
--       (ùï°loop' o k l m n )
--       (ùï°loop' o k l n m)
      
--       ({!!} ‚àô‚àô ùï°loop (extend‚Çê (l + one) o k) (extend‚Çê-sub·µ£ l o k) m n ‚àô‚àô {!!})
--       ({!!} ‚àô‚àô ùï°loop (extend‚Çê (one + l) o k) (extend‚Çê-sub‚Çó l o k) m n ‚àô‚àô {!!})

--   ùï°comm : ‚àÄ o ‚Üí ‚àÄ k m n ‚Üí ‚àÄ k' m' n'
--     ‚Üí {!!}
--     ‚Üí {!!}
--        -- Square {A = ‚Ñôrm‚Çê {trunc}}
--        --  (ùï°loop o k m n)
--        --  (ùï°loop o k m n)
--        --  (ùï°loop o k' m' n')
--        --  (ùï°loop o k' m' n')

--   ùï°loop* : ‚àÄ o k ‚Üí ‚àÄ m n l ‚Üí
--     Square
--       (ùï°loop' o k l m n)
--       (ùï°loop o k l (m + n))
--       (cong ùï°base' (extend‚Çê-sub‚Çó+ m n l o k))
--       (cong ùï°base' (extend‚Çê-sub·µ£+ m n l o k))
      
--   ùï°hex : ‚àÄ o k ‚Üí ‚àÄ l n m ‚Üí
--     Square
--        (ùï°loop' o k l n m)
--        (cong ùï°base' (extendSubAssoc m n l o k))
--        (ùï°loop (extend‚Çê (one + m) o k) (extend‚Çê-sub‚Çó m o k) l n)
--        (ùï°loop (extend‚Çê (n + one) o k) (extend‚Çê-sub·µ£ n o k) m l)
      

--   --     -- (cong ùï°base' (+-assoc _ _ _))
--   --     -- (cong ùï°base' (sym (+-assoc _ _ _)))
--   --    -- ( ùï°loop (m + one) (inr tt) n o
--   --    --    ‚àô‚àô cong ùï°base' (+-assoc _ _ _) ‚àô‚àô
--   --    --      ùï°loop (one + n) (inl tt) m o
--   --    --      ) 
--   --    --   ‚â° cong ùï°base' ((+-assoc _ _ _)) ‚àô‚àô
--   --    --       ùï°swap (m + n) o
--   --    --       ‚àô‚àô cong ùï°base' ( (+-assoc _ _ _))


-- ùï°base' = ùï°base
-- ùï°swap n m = ùï°loop one _ n m


-- -- ùï°sq1 : ‚àÄ {trunc} ‚Üí
-- --   Square {A = ‚Ñôrm‚Çê {trunc}}
-- --    (ùï°swap (one + one) one)
-- --    (ùï°swap (one + one) one)
-- --    (ùï°loop (one + one) (inl tt) one one) 
-- --    (ùï°loop (one + one) (inr tt) one one)
-- -- ùï°sq1 =
-- --  let qq = ùï°hex one one one
-- --  in ( {!qq!} ‚óÅ
-- --       {!!}
-- --        ‚ñ∑ {!!})


-- -- -- ùï°sq : ‚àÄ {trunc} m n o ‚Üí
-- -- --   Square {A = ‚Ñôrm‚Çê {trunc}}
-- -- --    (ùï°swap (m + n) o)
-- -- --    (ùï°swap (n + m) o)
-- -- --    (ùï°loop (one + o) (inl tt) m n) 
-- -- --    (ùï°loop (o + one) (inr tt) m n)
-- -- -- -- ùï°sq = {!!}

-- -- --   _ùï°+_ : ‚àÄ {n n' m m'} ‚Üí
-- -- --      (p : ùï°base {trunc} n ‚â° ùï°base n') ‚Üí
-- -- --      (q : ùï°base {trunc} m ‚â° ùï°base m') ‚Üí
-- -- --       ùï°base (n + m) ‚â° ùï°base (n' + m')
-- -- --   ùï°swap : ‚àÄ n m ‚Üí ùï°base (n + m) ‚â° ùï°base (m + n)
-- -- --   ùï°swap+ : ‚àÄ m n o ‚Üí
-- -- --      ( (refl ùï°+ ùï°swap n o) ‚àô‚àô
-- -- --         cong ùï°base (+-assoc _ _ _)
-- -- --          ‚àô‚àô (ùï°swap m o ùï°+ refl)) 
-- -- --        ‚â° cong ùï°base ((+-assoc _ _ _)) ‚àô‚àô ùï°swap (m + n) o
-- -- --            ‚àô‚àô cong ùï°base ( (+-assoc _ _ _))
-- -- --   ùï°sq : ‚àÄ m n o ‚Üí
-- -- --     Square
-- -- --      (ùï°swap (m + n) o)
-- -- --      (ùï°swap (n + m) o)
-- -- --      (ùï°swap m n ùï°+ refl)
-- -- --      (refl ùï°+ ùï°swap m n)

-- -- --   ùï°invol : ‚àÄ n m ‚Üí
-- -- --       Square (ùï°swap n m)
-- -- --              (sym (ùï°swap m n))
-- -- --              refl
-- -- --              refl
-- -- --   ùï°squash : Bool‚ÜíType trunc ‚Üí isGroupoid (‚Ñôrm‚Çê)


-- -- -- ùï°hex : ‚àÄ {trunc} m n o ‚Üí
-- -- --     Square {A = ‚Ñôrm‚Çê {trunc}}
-- -- --       ((refl ùï°+ ùï°swap n o)         ‚àô‚àô cong ùï°base (+-assoc m o n) ‚àô‚àô
-- -- --        (ùï°swap m o ùï°+ refl))
-- -- --       ((refl ùï°+ ùï°swap m o)         ‚àô‚àô cong ùï°base (+-assoc n o m) ‚àô‚àô
-- -- --        (ùï°swap n o ùï°+ refl))
-- -- --       (                                cong ùï°base (+-assoc m n o) ‚àô‚àô
-- -- --         ùï°swap m n ùï°+ refl          ‚àô‚àô
-- -- --                                        cong ùï°base (sym (+-assoc n m o)))
-- -- --       (                                cong ùï°base (sym (+-assoc o m n)) ‚àô‚àô
-- -- --         refl ùï°+ ùï°swap m n          ‚àô‚àô cong ùï°base ( (+-assoc o n m)))
-- -- -- ùï°hex m n o =
-- -- --    (ùï°swap+ _ _ _) ‚óÅ w ‚ñ∑ sym (ùï°swap+ _ _ _)
-- -- --  where
-- -- --  w : Square
-- -- --        (cong ùï°base (+-assoc m n o) ‚àô‚àô ùï°swap (m + n) o ‚àô‚àô
-- -- --          cong ùï°base (+-assoc o m n))
-- -- --        (cong ùï°base (+-assoc n m o) ‚àô‚àô ùï°swap (n + m) o ‚àô‚àô
-- -- --          cong ùï°base (+-assoc o n m))
-- -- --        (cong ùï°base (+-assoc m n o) ‚àô‚àô ùï°swap m n ùï°+ refl ‚àô‚àô
-- -- --             cong ùï°base (sym (+-assoc n m o)))
           
-- -- --        (cong ùï°base (sym (+-assoc o m n)) ‚àô‚àô refl ùï°+ ùï°swap m n ‚àô‚àô
-- -- --             cong ùï°base (+-assoc o n m))
           
-- -- --  w i j = hcomp (Œª k ‚Üí Œª {
-- -- --          (i = i0)(j = i0) ‚Üí ùï°base (+-assoc m n o (~ k))
-- -- --         ;(i = i0)(j = i1) ‚Üí ùï°base (+-assoc o m n k)
-- -- --         ;(i = i1)(j = i0) ‚Üí ùï°base (+-assoc n m o (~ k))
-- -- --         ;(i = i1)(j = i1) ‚Üí ùï°base (+-assoc o n m k)
-- -- --            }) (ùï°sq m n o i j)
 
-- -- --   -- whiskSq.sq' (Œª _ _ ‚Üí ‚Ñôrm‚Çê)
-- -- --   --   {!!}
-- -- --   --        (flipSquare (sym (ùï°swap+ _ _ _)))
-- -- --   --        (flipSquare (sym (ùï°swap+ _ _ _)))
-- -- --   --        (Œª i i‚ÇÅ ‚Üí {!!})
-- -- --   --        {!!}


-- -- -- ‚Ñôrm‚Çê‚Üí‚Ñôrm : ‚àÄ n ‚Üí B.‚Ñôrm {true} (‚Ñï.suc n) ‚Üí ‚Ñôrm‚Çê {true}
-- -- -- ‚Ñôrm‚Çê‚Üí‚Ñôrm n' = B.Rùï°rec.f (w {n = n'}) {trunc = true} {ùï°squash tt}
-- -- --  where
-- -- --  w : ‚àÄ {n} ‚Üí B.Rùï°rec {n = ‚Ñï.suc n} ‚Ñôrm‚Çê
-- -- --  B.Rùï°rec.abase (w {n}) = ùï°base (‚Ñï‚Üí‚Ñï‚Çê' n)
-- -- --  B.Rùï°rec.aloop (w {‚Ñï.suc n}) (‚Ñï.suc k , k<) =
-- -- --    refl ùï°+ (B.Rùï°rec.aloop (w {n}) (k , k<))
-- -- --  B.Rùï°rec.aloop (w {‚Ñï.suc n}) (‚Ñï.zero , k<) =
-- -- --     cong ùï°base (+-sym-one (‚Ñï‚Üí‚Ñï‚Çê' n)) ‚àô ùï°swap (‚Ñï‚Üí‚Ñï‚Çê' n) one

-- -- --  B.Rùï°rec.alooop w =
-- -- --    {!!}
-- -- --  B.Rùï°rec.acomp w = {!!}
-- -- --  B.Rùï°rec.ainvol w = {!!}
-- -- --  B.Rùï°rec.acomm w = {!!}
-- -- --  B.Rùï°rec.abraid w = {!!}


-- -- -- -- _+_‚Üî_ : {!‚àÄ n m o} ‚Üí
-- -- -- --      (p : ùï°base {trunc} n ‚â° ùï°base n') ‚Üí
-- -- -- --      (q : ùï°base {trunc} m ‚â° ùï°base m') ‚Üí
-- -- -- --       ùï°base (n + m) ‚â° ùï°base (n' + m')!}
-- -- -- -- _+_‚Üî_ = {!!}


-- -- -- --   ùï°loop : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ùï°base ‚â° ùï°base  
-- -- -- --   ùï°looop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ùï°base ‚â° ùï°base
-- -- -- --   -- ùï°comp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- --   --    Square
-- -- -- --   --      (ùï°loop k)
-- -- -- --   --      (ùï°loop l)
-- -- -- --   --      refl
-- -- -- --   --      (ùï°looop k l)

-- -- -- --   ùï°comp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- --      Square
-- -- -- --        (ùï°loop k)
-- -- -- --        (ùï°loop l)
-- -- -- --        (ùï°looop k l)
-- -- -- --        refl
         
-- -- -- --   ùï°invol : ‚àÄ k ‚Üí ùï°loop k ‚â° sym (ùï°loop k)
-- -- -- --   ùï°comm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- --      commT (fst k) (fst l) ‚Üí
-- -- -- --        Square
-- -- -- --          refl
-- -- -- --          refl
-- -- -- --        (ùï°looop k l)
-- -- -- --        (ùï°looop l k)

-- -- -- --   ùï°braid : ‚àÄ k k<  ‚Üí        
-- -- -- --          Square
-- -- -- --          (ùï°loop (suc k , k<))
-- -- -- --          (ùï°loop (k , <-weaken {n = n} k<))
-- -- -- --          (ùï°looop (k , <-weaken {n = n} k<) (suc k , k<))
-- -- -- --          (ùï°looop (k , <-weaken {n = n} k<) (suc k , k<))


-- -- -- --   ùï°squash : Bool‚ÜíType trunc ‚Üí isGroupoid (‚Ñôrm n)




-- -- -- -- -- toTrunc‚Ñô : ‚àÄ {n b} ‚Üí ‚Ñôrm {b} n ‚Üí ‚Ñôrm {true} n
-- -- -- -- -- toTrunc‚Ñô ùï°base = ùï°base
-- -- -- -- -- toTrunc‚Ñô (ùï°loop x i) = ùï°loop x i
-- -- -- -- -- toTrunc‚Ñô (ùï°looop k l i) = ùï°looop k l i
-- -- -- -- -- toTrunc‚Ñô (ùï°comp k l i i‚ÇÅ) = ùï°comp k l i i‚ÇÅ
-- -- -- -- -- toTrunc‚Ñô (ùï°invol k i i‚ÇÅ) = ùï°invol k i i‚ÇÅ
-- -- -- -- -- toTrunc‚Ñô (ùï°comm k l x i i‚ÇÅ) = ùï°comm k l x i i‚ÇÅ
-- -- -- -- -- toTrunc‚Ñô (ùï°braid k k< i i‚ÇÅ) = ùï°braid k k< i i‚ÇÅ
-- -- -- -- -- toTrunc‚Ñô (ùï°squash _ x y p q r s i i‚ÇÅ x‚ÇÖ) =
-- -- -- -- --  ùï°squash _ _ _ _ _
-- -- -- -- --   (Œª i j ‚Üí toTrunc‚Ñô (r i j)) (Œª i j ‚Üí toTrunc‚Ñô (s i j))
-- -- -- -- --   i i‚ÇÅ x‚ÇÖ

-- -- -- -- -- ùï°comp' : ‚àÄ {n b} ‚Üí (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --    Square {A = ‚Ñôrm {b} n}
-- -- -- -- --      (ùï°loop k)
-- -- -- -- --      (ùï°loop l)
-- -- -- -- --      refl
-- -- -- -- --      (ùï°looop k l)
-- -- -- -- -- ùï°comp' k l =
-- -- -- -- --    (ùï°invol k) ‚óÅ
-- -- -- -- --    (Œª i j ‚Üí (ùï°comp k l i (~ j)))
-- -- -- -- --    ‚ñ∑ sym (ùï°invol l)

-- -- -- -- -- ùï°looop-invol : ‚àÄ {b} n ‚Üí (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --     ùï°looop {b} {n = n} k l ‚â° sym (ùï°looop l k)
-- -- -- -- -- ùï°looop-invol n k l i j =
-- -- -- -- --    hcomp
-- -- -- -- --       (Œª l' ‚Üí Œª {
-- -- -- -- --         (i = i0) ‚Üí ùï°comp k l j (~ l')
-- -- -- -- --        ;(i = i1) ‚Üí ùï°comp l k (~ j) (~ l')
-- -- -- -- --        ;(j = i0) ‚Üí ùï°loop k (~ l')
-- -- -- -- --        ;(j = i1) ‚Üí ùï°loop l (~ l')
-- -- -- -- --        }) ùï°base

-- -- -- -- -- record Rùï°rec {n} (A : Type ‚Ñì) : Type ‚Ñì where
-- -- -- -- --  no-eta-equality
-- -- -- -- --  field
-- -- -- -- --    abase : A
-- -- -- -- --    aloop : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase
-- -- -- -- --    alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase
-- -- -- -- --    acomp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --       Square
-- -- -- -- --         (aloop k)
-- -- -- -- --         (aloop l)
-- -- -- -- --         (alooop k l)
-- -- -- -- --         refl

-- -- -- -- --    ainvol : ‚àÄ k ‚Üí aloop k ‚â° sym (aloop k)
-- -- -- -- --    acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --       commT (fst k) (fst l) ‚Üí
-- -- -- -- --         Square
-- -- -- -- --           refl
-- -- -- -- --           refl
-- -- -- -- --         (alooop k l)
-- -- -- -- --         (alooop l k)

-- -- -- -- --    abraid : ‚àÄ k k<  ‚Üí        
-- -- -- -- --           Square
-- -- -- -- --           (aloop (suc k , k<))
-- -- -- -- --           (aloop (k , <-weaken {n = n} k<))
-- -- -- -- --           (alooop (k , <-weaken {n = n} k<) (suc k , k<))
-- -- -- -- --           (alooop (k , <-weaken {n = n} k<) (suc k , k<))
-- -- -- -- --    -- asquash : if trunc then (isGroupoid A) else Unit*


-- -- -- -- --  f : ‚àÄ {trunc} ‚Üí {squashA : if trunc then (isGroupoid A) else Unit*} ‚Üí
-- -- -- -- --        ‚Ñôrm {trunc} n ‚Üí A
-- -- -- -- --  f ùï°base = abase
-- -- -- -- --  f (ùï°loop x i) = aloop x i
-- -- -- -- --  f (ùï°looop k l i) = alooop k l i
-- -- -- -- --  f (ùï°comp k l i i‚ÇÅ) = acomp k l i i‚ÇÅ
-- -- -- -- --  -- f (ùï°comp' k l i i‚ÇÅ) = acomp' k l i i‚ÇÅ
-- -- -- -- --  f (ùï°invol k i i‚ÇÅ) = ainvol k i i‚ÇÅ
-- -- -- -- --  f (ùï°comm k l x i i‚ÇÅ) = acomm k l x i i‚ÇÅ
-- -- -- -- --  f (ùï°braid k k< i i‚ÇÅ) = abraid k k< i i‚ÇÅ
-- -- -- -- --  f {true} {t} (ùï°squash _ _ _ _ _ r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) =   
-- -- -- -- --    t _ _ _ _
-- -- -- -- --      (Œª i j ‚Üí (f {true} {t} (r i j)))
-- -- -- -- --      (Œª i j ‚Üí (f {true} {t} (s i j)))
-- -- -- -- --      i‚ÇÄ i‚ÇÅ i‚ÇÇ



-- -- -- -- -- record Rùï°elim {n} {trunc} (A : ‚Ñôrm {trunc} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
-- -- -- -- --  no-eta-equality
-- -- -- -- --  field
-- -- -- -- --    isGroupoidA : Bool‚ÜíType trunc ‚Üí ‚àÄ x ‚Üí isGroupoid (A x)
-- -- -- -- --    abase : A ùï°base
-- -- -- -- --    aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --      PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
-- -- -- -- --    alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --      PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
-- -- -- -- --    acomp : ‚àÄ k l ‚Üí
-- -- -- -- --      SquareP (Œª j i ‚Üí A (ùï°comp k l j i))
-- -- -- -- --        (aloop k)
-- -- -- -- --        (aloop l)
-- -- -- -- --        (alooop k l)
-- -- -- -- --        refl
-- -- -- -- --    ainvol : ‚àÄ k ‚Üí
-- -- -- -- --      SquareP (Œª i j ‚Üí A (ùï°invol k i j))
-- -- -- -- --        (aloop k)
-- -- -- -- --        (symP (aloop k))
-- -- -- -- --        refl refl
-- -- -- -- --    acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ‚àÄ x ‚Üí     
-- -- -- -- --        SquareP (Œª i j ‚Üí A (ùï°comm k l x i j))
-- -- -- -- --          refl
-- -- -- -- --          refl
-- -- -- -- --        (alooop k l)
-- -- -- -- --        (alooop l k)
-- -- -- -- --    abraid : ‚àÄ k k<  ‚Üí        
-- -- -- -- --          SquareP (Œª i j ‚Üí A (ùï°braid k k< i j))
-- -- -- -- --          (aloop (suc k , k<))
-- -- -- -- --          (aloop (k , <-weaken {n = n} k<))
-- -- -- -- --          (alooop (k , <-weaken {n = n} k<) (suc k , k<))
-- -- -- -- --          (alooop (k , <-weaken {n = n} k<) (suc k , k<))
  


-- -- -- -- --  f : ‚àÄ x ‚Üí A x
-- -- -- -- --  f ùï°base = abase
-- -- -- -- --  f (ùï°loop x i) = aloop x i
-- -- -- -- --  f (ùï°looop k l i) = alooop k l i
-- -- -- -- --  f (ùï°comp k l j i) = acomp k l j i
   
-- -- -- -- --  f (ùï°invol k i j) = ainvol k i j
 
-- -- -- -- --  f (ùï°comm k l x i j) = acomm k l x i j
    
 
-- -- -- -- --  f (ùï°braid k k< i j) = abraid k k< i j
-- -- -- -- --  f (ùï°squash X x y p q r s i j k) =
-- -- -- -- --    isOfHLevel‚ÜíisOfHLevelDep 3 (isGroupoidA X)
-- -- -- -- --      _ _ _ _
-- -- -- -- --      (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k))
-- -- -- -- --      (ùï°squash X x y p q r s) i j k





-- -- -- -- -- record Rùï°elimSet {n} {trunc} (A : ‚Ñôrm {trunc} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
-- -- -- -- --  no-eta-equality
-- -- -- -- --  field
-- -- -- -- --    isSetA : ‚àÄ x ‚Üí isSet (A x)
-- -- -- -- --    abase : A ùï°base
-- -- -- -- --    aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --      PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
-- -- -- -- --    alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --      PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
-- -- -- -- --    -- (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase

-- -- -- -- --  fR : Rùï°elim (Œª z ‚Üí A z)
-- -- -- -- --  Rùï°elim.isGroupoidA fR X = isSet‚ÜíisGroupoid ‚àò isSetA
-- -- -- -- --  Rùï°elim.abase fR = abase
-- -- -- -- --  Rùï°elim.aloop fR = aloop
-- -- -- -- --  Rùï°elim.alooop fR = alooop
-- -- -- -- --  Rùï°elim.acomp fR = w
-- -- -- -- --    where
-- -- -- -- --    abstract
-- -- -- -- --     w : (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- --       SquareP (Œª j i ‚Üí A (ùï°comp k l j i)) (aloop k) (aloop l)
-- -- -- -- --       (alooop k l) refl
-- -- -- -- --     w k l = isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°comp k l j i)) _ _ _ _
-- -- -- -- --  Rùï°elim.ainvol fR = w
-- -- -- -- --   where
-- -- -- -- --   abstract
-- -- -- -- --    w : (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- --       SquareP (Œª i j ‚Üí A (ùï°invol k i j)) (aloop k) (symP (aloop k)) refl
-- -- -- -- --       refl
-- -- -- -- --    w k = isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°invol k j i)) _ _ _ _
-- -- -- -- --  Rùï°elim.acomm fR = w
-- -- -- -- --   where
-- -- -- -- --   abstract
-- -- -- -- --    w : (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) (x : commT (fst k) (fst l)) ‚Üí
-- -- -- -- --     SquareP (Œª i j ‚Üí A (ùï°comm k l x i j)) refl refl
-- -- -- -- --     (Rùï°elim.alooop fR k l) (Rùï°elim.alooop fR l k)
-- -- -- -- --    w k l x = isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°comm k l x j i)) _ _ _ _ 
-- -- -- -- --  Rùï°elim.abraid fR = w
-- -- -- -- --   where
-- -- -- -- --   abstract
-- -- -- -- --    w : (k : ‚Ñï)
-- -- -- -- --     (k< : suc (suc (suc k)) Cubical.Data.Nat.Order.Recursive.‚â§ n) ‚Üí
-- -- -- -- --     SquareP (Œª i j ‚Üí A (ùï°braid k k< i j))
-- -- -- -- --     (Rùï°elim.aloop fR (suc k , k<)) (Rùï°elim.aloop fR (k , <-weaken {n = n} k<))
-- -- -- -- --     (Rùï°elim.alooop fR (k , <-weaken {n = n} k<) (suc k , k<))
-- -- -- -- --     (Rùï°elim.alooop fR (k , <-weaken {n = n} k<) (suc k , k<))
-- -- -- -- --    w k k< = isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°braid k k< j i)) _ _ _ _


-- -- -- -- --  f : ‚àÄ x ‚Üí A x
-- -- -- -- --  f = Rùï°elim.f fR



-- -- -- -- -- record Rùï°elimSet' {n} {trunc} (A : ‚Ñôrm {trunc} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
-- -- -- -- --  no-eta-equality
-- -- -- -- --  field
-- -- -- -- --    isSetA : ‚àÄ x ‚Üí isSet (A x)
-- -- -- -- --    abase : A ùï°base
-- -- -- -- --    aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- --      PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase

-- -- -- -- --  fR : Rùï°elimSet (Œª z ‚Üí A z)
-- -- -- -- --  Rùï°elimSet.isSetA fR = isSetA
-- -- -- -- --  Rùï°elimSet.abase fR = abase
-- -- -- -- --  Rùï°elimSet.aloop fR = aloop
-- -- -- -- --  Rùï°elimSet.alooop fR  = w
-- -- -- -- --   where
-- -- -- -- --    abstract
-- -- -- -- --     w : (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- --      PathP (Œª i ‚Üí A (ùï°looop k l i)) (Rùï°elimSet.abase fR)
-- -- -- -- --      (Rùï°elimSet.abase fR)
-- -- -- -- --     w = Œª k l i ‚Üí comp (Œª j ‚Üí A (ùï°comp k l i (~ j)))
-- -- -- -- --       (Œª j ‚Üí Œª { (i = i0) ‚Üí aloop k (~ j) ; (i = i1) ‚Üí aloop l (~ j) })
-- -- -- -- --       abase

-- -- -- -- --  f : ‚àÄ x ‚Üí A x
-- -- -- -- --  f = Rùï°elimSet.f fR



-- -- -- -- -- record Rùï°elimProp {n} {trunc} (A : ‚Ñôrm {trunc} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
-- -- -- -- --  no-eta-equality
-- -- -- -- --  field
-- -- -- -- --    isPropA : ‚àÄ x ‚Üí isProp (A x)
-- -- -- -- --    abase : A ùï°base

-- -- -- -- --  fR : Rùï°elimSet (Œª z ‚Üí A z)
-- -- -- -- --  Rùï°elimSet.isSetA fR = isProp‚ÜíisSet ‚àò isPropA
-- -- -- -- --  Rùï°elimSet.abase fR = abase
-- -- -- -- --  Rùï°elimSet.aloop fR k = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _
-- -- -- -- --  Rùï°elimSet.alooop fR k l = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _

-- -- -- -- --  f : ‚àÄ x ‚Üí A x
-- -- -- -- --  f = Rùï°elimSet.f fR


-- -- -- -- -- trunc‚Ñô : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí (isGroupoid A)
-- -- -- -- --            ‚Üí (‚àÄ n ‚Üí ‚Ñôrm {false} n ‚Üí A)
-- -- -- -- --            ‚Üí ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí A
-- -- -- -- -- trunc‚Ñô isGrpA f n = w
-- -- -- -- --  where
-- -- -- -- --  f' = f n

-- -- -- -- --  w : ‚Ñôrm n ‚Üí _
-- -- -- -- --  w ùï°base = f' ùï°base
-- -- -- -- --  w (ùï°loop x i) =  f' (ùï°loop x i)
-- -- -- -- --  w (ùï°looop k l i) = f' (ùï°looop k l i)
-- -- -- -- --  w (ùï°comp k l i i‚ÇÅ) = f' (ùï°comp k l i i‚ÇÅ)
-- -- -- -- --  w (ùï°invol k i i‚ÇÅ) = f' (ùï°invol k i i‚ÇÅ)
-- -- -- -- --  w (ùï°comm k l x i i‚ÇÅ) = f' (ùï°comm k l x i i‚ÇÅ)
-- -- -- -- --  w (ùï°braid k k< i i‚ÇÅ) = f' (ùï°braid k k< i i‚ÇÅ)
-- -- -- -- --  w (ùï°squash _ _ _ _ _ r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) =   
-- -- -- -- --    isGrpA _ _ _ _
-- -- -- -- --      (Œª i j ‚Üí (w (r i j)))
-- -- -- -- --      (Œª i j ‚Üí (w (s i j)))
-- -- -- -- --      i‚ÇÄ i‚ÇÅ i‚ÇÇ

-- -- -- -- -- -- Trunc‚Ñô‚ÇÇ : ‚àÄ {‚Ñì} 
-- -- -- -- -- --            ‚Üí (A : ‚àÄ n ‚Üí ‚Ñôrm {false} n ‚Üí Type ‚Ñì)
-- -- -- -- -- --            ‚Üí (‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí isSet (A n ùï°))
-- -- -- -- -- --            ‚Üí ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí hSet ‚Ñì
-- -- -- -- -- -- Trunc‚Ñô‚ÇÇ A isSetA = trunc‚Ñô isGroupoidHSet Œª n ùï° ‚Üí A n ùï° , isSetA n ùï°

-- -- -- -- -- -- trunc‚Ñô‚ÇÇ : ‚àÄ {‚Ñì} 
-- -- -- -- -- --            ‚Üí (A : ‚àÄ n ‚Üí ‚Ñôrm {false} n ‚Üí Type ‚Ñì)
-- -- -- -- -- --            ‚Üí (isSetA : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí isSet (A n ùï°))
-- -- -- -- -- --            ‚Üí (‚àÄ n ùï° ‚Üí A n ùï°)
-- -- -- -- -- --            ‚Üí ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí ‚ü® Trunc‚Ñô‚ÇÇ A isSetA n ùï° ‚ü©
-- -- -- -- -- -- trunc‚Ñô‚ÇÇ A isSetA f n = w
-- -- -- -- -- --  where
-- -- -- -- -- --  f' = f n

-- -- -- -- -- --  w : ‚àÄ ùï° ‚Üí _
-- -- -- -- -- --  w ùï°base = f' ùï°base
-- -- -- -- -- --  w (ùï°loop x i) =  f' (ùï°loop x i)
-- -- -- -- -- --  w (ùï°looop k l i) = f' (ùï°looop k l i)
-- -- -- -- -- --  w (ùï°comp k l i i‚ÇÅ) = f' (ùï°comp k l i i‚ÇÅ)
-- -- -- -- -- --  w (ùï°invol k i i‚ÇÅ) = f' (ùï°invol k i i‚ÇÅ)
-- -- -- -- -- --  w (ùï°comm k l x i i‚ÇÅ) = f' (ùï°comm k l x i i‚ÇÅ)
-- -- -- -- -- --  w (ùï°braid k k< i i‚ÇÅ) = f' (ùï°braid k k< i i‚ÇÅ)
-- -- -- -- -- --  w (ùï°squash _ x y p q r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) = 
-- -- -- -- -- --    isOfHLevel‚ÜíisOfHLevelDep 3
-- -- -- -- -- --       (isSet‚ÜíisGroupoid ‚àò snd ‚àò Trunc‚Ñô‚ÇÇ A isSetA n)
-- -- -- -- -- --      (w x) (w y) _ _
-- -- -- -- -- --      (Œª j k ‚Üí w (r j k)) (Œª j k ‚Üí w (s j k))
-- -- -- -- -- --      (ùï°squash _ x y p q r s) i‚ÇÄ i‚ÇÅ i‚ÇÇ

-- -- -- -- -- trunc‚Ñô‚ÇÇ : ‚àÄ {‚Ñì} 
-- -- -- -- --            ‚Üí (A : ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí Type ‚Ñì)
-- -- -- -- --            ‚Üí (isGroupoidA : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí isGroupoid (A n ùï°))
-- -- -- -- --            ‚Üí (‚àÄ n ùï° ‚Üí A n (toTrunc‚Ñô {_} {false} ùï°))
-- -- -- -- --            ‚Üí ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí A n ùï°
-- -- -- -- -- trunc‚Ñô‚ÇÇ A isSetA f n = w
-- -- -- -- --  where
-- -- -- -- --  f' = f n

-- -- -- -- --  w : ‚àÄ ùï° ‚Üí A n ùï°
-- -- -- -- --  w ùï°base = f' ùï°base
-- -- -- -- --  w (ùï°loop x i) =  f' (ùï°loop x i)
-- -- -- -- --  w (ùï°looop k l i) = f' (ùï°looop k l i)
-- -- -- -- --  w (ùï°comp k l i i‚ÇÅ) = f' (ùï°comp k l i i‚ÇÅ)
-- -- -- -- --  w (ùï°invol k i i‚ÇÅ) = f' (ùï°invol k i i‚ÇÅ)
-- -- -- -- --  w (ùï°comm k l x i i‚ÇÅ) = f' (ùï°comm k l x i i‚ÇÅ)
-- -- -- -- --  w (ùï°braid k k< i i‚ÇÅ) = f' (ùï°braid k k< i i‚ÇÅ)
-- -- -- -- --  w (ùï°squash _ x y p q r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) = 
-- -- -- -- --    isOfHLevel‚ÜíisOfHLevelDep 3
-- -- -- -- --       (isSetA n)
-- -- -- -- --      (w x) (w y) _ _
-- -- -- -- --      (Œª j k ‚Üí w (r j k)) (Œª j k ‚Üí w (s j k))
-- -- -- -- --      (ùï°squash _ x y p q r s) i‚ÇÄ i‚ÇÅ i‚ÇÇ


-- -- -- -- -- module _ {‚Ñì} (A : Type ‚Ñì) where 


-- -- -- -- --  ùïçr : ‚àÄ n ‚Üí Rùï°rec {n = n} (Type ‚Ñì)
-- -- -- -- --  Rùï°rec.abase (ùïçr n) = A √ó^ n
-- -- -- -- --  Rùï°rec.aloop (ùïçr n) k = adjT√ó^‚â° {n = n} (fst k)
-- -- -- -- --  Rùï°rec.alooop (ùïçr n) = biAdjT√ó^‚â° {n = n}
-- -- -- -- --  Rùï°rec.acomp (ùïçr n) = biAdjT√ó^‚â°-comp
-- -- -- -- --  Rùï°rec.ainvol (ùïçr n) k = adjT√ó^‚â°-invol n (fst k)
-- -- -- -- --  Rùï°rec.acomm (ùïçr n) = biAdjT√ó^‚â°-comm
-- -- -- -- --  Rùï°rec.abraid (ùïçr n) = adjT√ó^‚â°-braid

-- -- -- -- --  ùïç : ‚àÄ n ‚Üí ‚Ñôrm {false} n ‚Üí Type ‚Ñì
-- -- -- -- --  ùïç n = Rùï°rec.f (ùïçr n) 

-- -- -- -- --  isOfHLevelùïçr : ‚àÄ n m ‚Üí isOfHLevel m A ‚Üí
-- -- -- -- --                    Rùï°elimProp {n = n} {false}
-- -- -- -- --                          (Œª ùï° ‚Üí isOfHLevel m (ùïç n ùï°))
-- -- -- -- --  Rùï°elimProp.isPropA (isOfHLevelùïçr n m x) _ = isPropIsOfHLevel m
-- -- -- -- --  Rùï°elimProp.abase (isOfHLevelùïçr n m x) = isOfHLevel√ó^ n m x

-- -- -- -- --  module _ (isSetA : isSet A) where

-- -- -- -- --   ùïç‚ÇÇ : ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí hSet ‚Ñì
-- -- -- -- --   ùïç‚ÇÇ = trunc‚Ñô isGroupoidHSet
-- -- -- -- --         Œª n ùï° ‚Üí ùïç n ùï° , Rùï°elimProp.f (isOfHLevelùïçr n 2 isSetA) ùï°



-- -- -- -- --   -- concatùïß‚ÇÇ : ‚àÄ n m ‚Üí {!ùïç‚ÇÇ n ‚Üí ùïç‚ÇÇ n ‚Üí ? !}
-- -- -- -- --   -- concatùïß‚ÇÇ = {!!}


-- -- -- -- -- ùîΩinSnd : ‚àÄ n ùï° ‚Üí ‚ü® ùïç‚ÇÇ Bool isSetBool n ùï° ‚ü© ‚Üí hProp ‚Ñì-zero
-- -- -- -- -- ùîΩinSnd n = Rùï°elimSet'.f {n = n} w
-- -- -- -- --  where
-- -- -- -- --  w : Rùï°elimSet' (Œª z ‚Üí ‚ü® ùïç‚ÇÇ Bool isSetBool n z ‚ü© ‚Üí hProp ‚Ñì-zero)
-- -- -- -- --  Rùï°elimSet'.isSetA w _ = isSetŒ† Œª _ ‚Üí isSetHProp
-- -- -- -- --  Rùï°elimSet'.abase w = Fin√óSnd n
-- -- -- -- --  fst (Rùï°elimSet'.aloop w (k , k<) i v) = F√óadjTP {n = n} k i v
-- -- -- -- --  snd (Rùï°elimSet'.aloop w (k , k<) i v) =
-- -- -- -- --    isProp‚ÜíPathP 
-- -- -- -- --      (Œª i ‚Üí isPropŒ† Œª v ‚Üí isPropIsProp {A = (F√óadjTP {n = n} k i v)} )
-- -- -- -- --       (snd ‚àò Fin√óSnd n) (snd ‚àò Fin√óSnd n) i v

-- -- -- -- -- -- ùîΩinSnd : ‚àÄ n ùï° ‚Üí ‚ü® ùïç‚ÇÇ Bool isSetBool n ùï° ‚ü© ‚Üí hProp ‚Ñì-zero
-- -- -- -- -- -- ùîΩinSnd n ùï°base = Fin√óSnd n
-- -- -- -- -- -- ùîΩinSnd n = {!ùîΩinSnd* n!}

-- -- -- -- -- hùîΩin : ‚àÄ n ùï° ‚Üí hSet ‚Ñì-zero
-- -- -- -- -- hùîΩin n ùï° = _ , isSetŒ£ (snd (ùïç‚ÇÇ Bool isSetBool n ùï°))
-- -- -- -- --                        (isProp‚ÜíisSet ‚àò snd ‚àò ùîΩinSnd n ùï°)

-- -- -- -- -- ùîΩin : ‚àÄ n ùï° ‚Üí Type
-- -- -- -- -- ùîΩin n = fst ‚àò hùîΩin n

-- -- -- -- -- Rsuc‚Ñôrm : ‚àÄ n {b} ‚Üí Rùï°rec {n = n} (‚Ñôrm {b} (suc n))
-- -- -- -- -- Rùï°rec.abase (Rsuc‚Ñôrm n) = ùï°base
-- -- -- -- -- Rùï°rec.aloop (Rsuc‚Ñôrm n) k = ùï°loop (suc (fst k) , (snd k))
-- -- -- -- -- Rùï°rec.alooop (Rsuc‚Ñôrm n) k l =
-- -- -- -- --   ùï°looop _ _
-- -- -- -- -- Rùï°rec.acomp (Rsuc‚Ñôrm n) k l =
-- -- -- -- --   ùï°comp _ _
-- -- -- -- -- Rùï°rec.ainvol (Rsuc‚Ñôrm n) k =
-- -- -- -- --   ùï°invol _
-- -- -- -- -- Rùï°rec.acomm (Rsuc‚Ñôrm n) k l x =
-- -- -- -- --   ùï°comm _ _ (suc-commT (fst k) (fst l) x)
-- -- -- -- -- Rùï°rec.abraid (Rsuc‚Ñôrm n) k k< =
-- -- -- -- --   ùï°braid _ _

-- -- -- -- -- suc‚Ñôrm : ‚àÄ {b} n ‚Üí ‚Ñôrm {b} n ‚Üí ‚Ñôrm {b} (suc n)
-- -- -- -- -- suc‚Ñôrm {b} n = Rùï°rec.f {n = n} (Rsuc‚Ñôrm n) {squashA = w b}
-- -- -- -- --  where
-- -- -- -- --   w : ‚àÄ b ‚Üí if b then isGroupoid (‚Ñôrm {b} (suc n)) else Unit*
-- -- -- -- --   w false = tt*
-- -- -- -- --   w true = ùï°squash _


-- -- -- -- -- ‚Ñôrm+ : ‚àÄ {b} n m ‚Üí ‚Ñôrm {b} m ‚Üí ‚Ñôrm {b} (n + m)
-- -- -- -- -- ‚Ñôrm+ zero m x = x
-- -- -- -- -- ‚Ñôrm+ (suc n) m x = suc‚Ñôrm (n + m) (‚Ñôrm+ n m x)

-- -- -- -- -- Rsuc‚Ñôrm' : ‚àÄ n {b} ‚Üí Rùï°rec {n = n} (‚Ñôrm {b} (suc n))
-- -- -- -- -- Rùï°rec.abase (Rsuc‚Ñôrm' n) = ùï°base
-- -- -- -- -- Rùï°rec.aloop (Rsuc‚Ñôrm' n) k = ùï°loop ((fst k) , (<-weaken {n = n} (snd k)))
-- -- -- -- -- Rùï°rec.alooop (Rsuc‚Ñôrm' n) k l =
-- -- -- -- --   ùï°looop _ _
-- -- -- -- -- Rùï°rec.acomp (Rsuc‚Ñôrm' n) k l =
-- -- -- -- --   ùï°comp _ _
-- -- -- -- -- Rùï°rec.ainvol (Rsuc‚Ñôrm' n) k =
-- -- -- -- --   ùï°invol _
-- -- -- -- -- Rùï°rec.acomm (Rsuc‚Ñôrm' n) k l =
-- -- -- -- --   ùï°comm _ _
-- -- -- -- -- Rùï°rec.abraid (Rsuc‚Ñôrm' n) k k< =
-- -- -- -- --   ùï°braid _ _

-- -- -- -- -- suc‚Ñôrm' : ‚àÄ {b} n ‚Üí ‚Ñôrm {b} n ‚Üí ‚Ñôrm {b} (suc n)
-- -- -- -- -- suc‚Ñôrm' {b} n = Rùï°rec.f {n = n} (Rsuc‚Ñôrm' n) {squashA = w b}
-- -- -- -- --  where
-- -- -- -- --   w : ‚àÄ b ‚Üí if b then isGroupoid (‚Ñôrm {b} (suc n)) else Unit*
-- -- -- -- --   w false = tt*
-- -- -- -- --   w true = ùï°squash _



-- -- -- -- -- ‚Ñôrm+* : ‚àÄ {b} n m ‚Üí ‚Ñôrm {b} m ‚Üí ‚Ñôrm {b} (n + m)
-- -- -- -- -- ‚Ñôrm+* zero m x = x
-- -- -- -- -- ‚Ñôrm+* (suc n) m x = suc‚Ñôrm' (n + m) (‚Ñôrm+* n m x)


-- -- -- -- -- ‚Ñôrm+' : ‚àÄ {b} n m ‚Üí ‚Ñôrm {b} n ‚Üí ‚Ñôrm {b} (n + m)
-- -- -- -- -- ‚Ñôrm+' n zero = subst ‚Ñôrm (sym (+-zero n))
-- -- -- -- -- ‚Ñôrm+' n (suc m) x = subst ‚Ñôrm (sym (+-suc _ _)) (‚Ñôrm+' (suc n) m (suc‚Ñôrm' n x))


-- -- -- -- -- ‚äï : ‚àÄ {n m} ‚Üí (‚Ñôrm {true} n ‚äé  ‚Ñôrm {true} m) ‚Üí ‚Ñôrm {true} (n + m)
-- -- -- -- -- ‚äï (inl x) = ‚Ñôrm+' _ _ x
-- -- -- -- -- ‚äï (inr x) = ‚Ñôrm+ _ _ x


-- -- -- -- -- -- record Rùï°elimCons {n} {trunc} (A : ‚Ñôrm {trunc} (suc n) ‚Üí Type ‚Ñì) : Type ‚Ñì where
-- -- -- -- -- --  no-eta-equality
-- -- -- -- -- --  field
-- -- -- -- -- --    isGroupoidA : Bool‚ÜíType trunc ‚Üí ‚àÄ x ‚Üí isGroupoid (A x)
-- -- -- -- -- --    abase : A ùï°base
-- -- -- -- -- --    acons : ‚àÄ n ‚Üí {!A !}
-- -- -- -- -- --    -- aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- -- --    --   PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
-- -- -- -- -- --    -- alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
-- -- -- -- -- --    --   PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
-- -- -- -- -- --    -- acomp : ‚àÄ k l ‚Üí
-- -- -- -- -- --    --   SquareP (Œª j i ‚Üí A (ùï°comp k l j i))
-- -- -- -- -- --    --     (aloop k)
-- -- -- -- -- --    --     (aloop l)
-- -- -- -- -- --    --     (alooop k l)
-- -- -- -- -- --    --     refl
-- -- -- -- -- --    -- ainvol : ‚àÄ k ‚Üí
-- -- -- -- -- --    --   SquareP (Œª i j ‚Üí A (ùï°invol k i j))
-- -- -- -- -- --    --     (aloop k)
-- -- -- -- -- --    --     (symP (aloop k))
-- -- -- -- -- --    --     refl refl
-- -- -- -- -- --    -- acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ‚àÄ x ‚Üí     
-- -- -- -- -- --    --     SquareP (Œª i j ‚Üí A (ùï°comm k l x i j))
-- -- -- -- -- --    --       refl
-- -- -- -- -- --    --       refl
-- -- -- -- -- --    --     (alooop k l)
-- -- -- -- -- --    --     (alooop l k)
-- -- -- -- -- --    -- abraid : ‚àÄ k k<  ‚Üí        
-- -- -- -- -- --    --       SquareP (Œª i j ‚Üí A (ùï°braid k k< i j))
-- -- -- -- -- --    --       (aloop (suc k , k<))
-- -- -- -- -- --    --       (aloop (k , <-weaken {n = n} k<))
-- -- -- -- -- --    --       (alooop (k , <-weaken {n = n} k<) (suc k , k<))
-- -- -- -- -- --    --       (alooop (k , <-weaken {n = n} k<) (suc k , k<))



-- -- -- -- -- ùïó0 : ‚àÄ n (ùï° : ‚Ñôrm n) ‚Üí ùîΩin (suc n) (suc‚Ñôrm n ùï°)
-- -- -- -- -- ùïó0 n = Rùï°elimSet'.f (w n)
-- -- -- -- --  where
-- -- -- -- --  open Rùï°elimSet'
-- -- -- -- --  w : ‚àÄ n ‚Üí Rùï°elimSet' (ùîΩin (suc n) ‚àò suc‚Ñôrm n)
-- -- -- -- --  isSetA (w n) ùï° = snd (hùîΩin (suc n) (suc‚Ñôrm n ùï°)) 
-- -- -- -- --  abase (w n) = Fin√ó0
-- -- -- -- --  aloop (w n) (k , k<) = 
-- -- -- -- --   Œ£PathPProp (snd ‚àò (Fin√óSnd (1 + n)))
-- -- -- -- --     Œª i ‚Üí true , glue-repeat-false n k i

-- -- -- -- -- ùïósuc : ‚àÄ n (ùï° : ‚Ñôrm n) ‚Üí ùîΩin n ùï° ‚Üí ùîΩin (suc n) (suc‚Ñôrm n ùï°)
-- -- -- -- -- ùïósuc n = Rùï°elimSet'.f (w n)
-- -- -- -- --  where
-- -- -- -- --  open Rùï°elimSet'
-- -- -- -- --  w : ‚àÄ n ‚Üí Rùï°elimSet' (Œª ùï° ‚Üí ùîΩin n ùï° ‚Üí ùîΩin (suc n) (suc‚Ñôrm n ùï°))
-- -- -- -- --  isSetA (w n) ùï° = isSet‚Üí (snd (hùîΩin (suc n) (suc‚Ñôrm n ùï°)))
-- -- -- -- --  abase (w n) = sucFin√ó
-- -- -- -- --  aloop (w n) k i (x , y) = (false , x) , y


-- -- -- -- -- ùïóglue01 : ‚àÄ n ‚Üí
-- -- -- -- --        PathP (Œª i ‚Üí (Fin√ó (suc (suc n))) ‚Üí
-- -- -- -- --       ùîΩin (suc (suc n)) (ùï°loop (zero , _) i))
-- -- -- -- --         (idfun _)
-- -- -- -- --         (F√óadjT {n = 2 + n} zero )
-- -- -- -- -- ùïóglue01 n i = fst (glue-F√óadjT‚âÉ (suc (suc n)) zero i)

-- -- -- -- -- ùïóglue210 : ‚àÄ n ‚Üí
-- -- -- -- --        PathP (Œª i ‚Üí (Fin√ó (suc (suc (suc n)))) ‚Üí
-- -- -- -- --       ùîΩin (suc (suc (suc n))) (ùï°looop (suc zero , _) (zero , _) i))
-- -- -- -- --         (F√óadjT {n = 3 + n} (suc zero))
-- -- -- -- --         (F√óadjT {n = 3 + n} zero)
-- -- -- -- -- ùïóglue210 n =
-- -- -- -- --    funExt Œª (xs , ys) ‚Üí
-- -- -- -- --     Œ£PathPProp (snd ‚àò Fin√óSnd (3 + n))
-- -- -- -- --      (funExt‚Åª (glueBiAdjT√ó< n) xs)

-- -- -- -- -- ùïóglue210sym : ‚àÄ n ‚Üí
-- -- -- -- --        PathP (Œª i ‚Üí (Fin√ó (suc (suc (suc n)))) ‚Üí
-- -- -- -- --       ùîΩin (suc (suc (suc n))) (ùï°looop (zero , _) (suc zero , _)  i))
        
-- -- -- -- --         (F√óadjT {n = 3 + n} zero)
-- -- -- -- --         (F√óadjT {n = 3 + n} (suc zero))
-- -- -- -- -- ùïóglue210sym n =
-- -- -- -- --    funExt Œª (xs , ys) ‚Üí
-- -- -- -- --     Œ£PathPProp (snd ‚àò Fin√óSnd (3 + n))
-- -- -- -- --       (toPathP (Œ£PathP (refl ,
-- -- -- -- --         Œ£PathP (refl ,
-- -- -- -- --         Œ£PathP (refl , transportRefl _)))))
-- -- -- -- --      -- (funExt‚Åª (glueBiAdjT√ó< n) ?)
-- -- -- -- --      -- (funExt‚Åª (glueBiAdjT√ó< n) xs)


-- -- -- -- -- ùïóglueBi< : ‚àÄ n k ‚Üí
-- -- -- -- --        PathP (Œª i ‚Üí 
-- -- -- -- --          ùîΩin (suc (suc n)) (ùï°loop (suc (suc (fst k)) , snd k) i)
-- -- -- -- --            ‚Üí
-- -- -- -- --       ùîΩin (suc (suc n)) (ùï°looop (suc (suc (fst k)) , snd k) (zero , _) i))
-- -- -- -- --         (idfun _)
-- -- -- -- --         (F√óadjT {n = 2 + n} zero)
-- -- -- -- -- fst (ùïóglueBi< n k i (xs , ys)) = glueBiAdjT√ó<SS n k i xs
-- -- -- -- -- snd (ùïóglueBi< n k i (xs , ys)) =
-- -- -- -- --   isProp‚ÜíPathP
-- -- -- -- --     (Œª i ‚Üí isPropŒ† Œª ((xs , ys) : ùîΩin (suc (suc n)) (ùï°loop (suc (suc (fst k)) , snd k) i)) ‚Üí snd
-- -- -- -- --       (ùîΩinSnd (suc (suc n))
-- -- -- -- --        (ùï°looop (suc (suc (fst k)) , snd k) (zero , tt) i)
-- -- -- -- --        (glueBiAdjT√ó<SS n k i xs)))
-- -- -- -- --      snd (snd ‚àò F√óadjT {n = 2 + n} zero) i (xs , ys)

-- -- -- -- -- ùïóglueBi<sym : ‚àÄ n k ‚Üí
-- -- -- -- --        PathP (Œª i ‚Üí 
-- -- -- -- --          ùîΩin (suc (suc n)) (ùï°loop (suc (suc (fst k)) , snd k) (~ i))
-- -- -- -- --            ‚Üí
-- -- -- -- --       ùîΩin (suc (suc n)) (ùï°looop  (zero , _) (suc (suc (fst k)) , snd k) i))

-- -- -- -- --         (F√óadjT {n = 2 + n} zero)
-- -- -- -- --          (idfun _)
-- -- -- -- -- fst (ùïóglueBi<sym n k i (xs , ys)) = glueBiAdjT√ó<SS n k (~ i) xs
-- -- -- -- -- snd (ùïóglueBi<sym n k i (xs , ys)) = 
-- -- -- -- --   isProp‚ÜíPathP
-- -- -- -- --     (Œª i ‚Üí isPropŒ† Œª ((xs , ys) : ùîΩin (suc (suc n)) (ùï°loop (suc (suc (fst k)) , snd k) (~ i))) ‚Üí snd
-- -- -- -- --       (ùîΩinSnd (suc (suc n))
-- -- -- -- --        (ùï°looop (zero , tt) (suc (suc (fst k)) , snd k) i)
-- -- -- -- --        (glueBiAdjT√ó<SS n k (~ i) xs)))
-- -- -- -- --       (snd ‚àò F√óadjT {n = 2 + n} zero) snd i (xs , ys)


-- -- -- -- -- ùïóglue01-involSS : ‚àÄ n ‚Üí
-- -- -- -- --    SquareP (Œª i j ‚Üí Fin√ó (n)
-- -- -- -- --      ‚Üí ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j))
-- -- -- -- --      (Œª i ‚Üí ùïóglue01 n i ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --      (Œª i ‚Üí ùïóglue01 n (~ i) ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --      (Œª _ ‚Üí sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --      Œª _ ‚Üí sucFin√ó ‚àò' sucFin√ó
-- -- -- -- -- ùïóglue01-involSS n =
-- -- -- -- --   isSet‚ÜíSquareP'
-- -- -- -- --    (isSet‚Üí (isSetFin√ó (2 + n)))
-- -- -- -- --    _ _ _ _

-- -- -- -- -- ùïóglue01-invol01 : ‚àÄ n ‚Üí
-- -- -- -- --    SquareP (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j))
-- -- -- -- --      (Œª j ‚Üí ùïóglue01 n j Fin√ó0)
-- -- -- -- --      (Œª j ‚Üí (ùïóglue01 n (~ j) (sucFin√ó Fin√ó0)))
-- -- -- -- --      refl
-- -- -- -- --      refl
-- -- -- -- -- ùïóglue01-invol01 n = isSet‚ÜíSquareP' (isSetFin√ó (2 + n)) _ _ _ _


-- -- -- -- -- ùïóglue01-invol10 : ‚àÄ n ‚Üí
-- -- -- -- --    SquareP (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j))
-- -- -- -- --      (Œª j ‚Üí ùïóglue01 n j (sucFin√ó Fin√ó0))
-- -- -- -- --      (Œª j ‚Üí (ùïóglue01 n (~ j) (Fin√ó0)))
-- -- -- -- --      refl
-- -- -- -- --      refl
-- -- -- -- -- ùïóglue01-invol10 n = isSet‚ÜíSquareP' (isSetFin√ó (2 + n)) _ _ _ _

-- -- -- -- -- ùïóglue01invol : ‚àÄ n ‚Üí SquareP
-- -- -- -- --     (Œª i j ‚Üí (ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j)
-- -- -- -- --        √ó ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j))
-- -- -- -- --        √ó (Fin√ó n ‚Üí ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j)))
-- -- -- -- --             (Œª j ‚Üí (ùïóglue01 n j (Fin√ó0) , ùïóglue01 n j (sucFin√ó Fin√ó0)) ,
-- -- -- -- --              ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --             (Œª j ‚Üí (ùïóglue01 n (~ j) (sucFin√ó Fin√ó0) , ùïóglue01 n (~ j) (Fin√ó0))
-- -- -- -- --                    , ùïóglue01 n (~ j) ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --                       refl
-- -- -- -- --                       refl
                      
-- -- -- -- -- ùïóglue01invol n = (congSqP‚ÇÇ (Œª _ _ ‚Üí _,_)
-- -- -- -- --          (congSqP‚ÇÇ (Œª _ _ ‚Üí _,_)
-- -- -- -- --            (ùïóglue01-invol01 n)
-- -- -- -- --            (ùïóglue01-invol10 n))
-- -- -- -- --             (ùïóglue01-involSS n))

-- -- -- -- -- ùïóglue01comp< : ‚àÄ n ‚Üí
-- -- -- -- --  SquareP
-- -- -- -- --    (Œª i j ‚Üí
-- -- -- -- --      ((ùîΩin (suc (suc (suc n))) ((ùï°comp (1 , _) (zero , _) i j))) √ó^ 3)
-- -- -- -- --       √ó (Fin√ó (n) ‚Üí
-- -- -- -- --     ùîΩin (suc (suc (suc n))) ((ùï°comp (1 , _) (zero , _) i j))))
-- -- -- -- --    (Œª j ‚Üí (ùïó0 (suc (suc n)) (ùï°loop (zero , _) j)
-- -- -- -- --         , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (sucFin√ó Fin√ó0))
-- -- -- -- --         , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (Fin√ó0)) , _) ,
-- -- -- -- --      ùïósuc (suc (suc n)) (ùï°loop (zero , _) j)
-- -- -- -- --        ‚àò' ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --    (Œª j ‚Üí (ùïóglue01 (suc n) j (sucFin√ó Fin√ó0) ,
-- -- -- -- --            ùïóglue01 (suc n) j (Fin√ó0) ,
-- -- -- -- --            ùïóglue01 (suc n) j (sucFin√ó (sucFin√ó Fin√ó0)) , _) ,
-- -- -- -- --      ùïóglue01 (suc n) j ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò'  sucFin√ó)
-- -- -- -- --    (Œª i ‚Üí (ùïóglue210 n i Fin√ó0 ,
-- -- -- -- --           ùïóglue210 n i (sucFin√ó Fin√ó0) ,
-- -- -- -- --           ùïóglue210 n i (sucFin√ó (sucFin√ó Fin√ó0)) , _) ,
-- -- -- -- --      ùïóglue210 n i ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --    refl
-- -- -- -- -- ùïóglue01comp< n =
-- -- -- -- --  isSet‚ÜíSquareP'
-- -- -- -- --   (isSet√ó (isOfHLevel√ó^ 3 2 (isSetFin√ó (3 + n)))
-- -- -- -- --           (isSet‚Üí (isSetFin√ó (3 + n)))) _ _ _ _


-- -- -- -- -- ùïóglue01comp<sym : ‚àÄ n ‚Üí
-- -- -- -- --  SquareP
-- -- -- -- --    (Œª i j ‚Üí
-- -- -- -- --      ((ùîΩin (suc (suc (suc n))) ((ùï°comp (zero , _) (1 , _) i j))) √ó^ 3)
-- -- -- -- --       √ó (Fin√ó (n) ‚Üí
-- -- -- -- --     ùîΩin (suc (suc (suc n))) ((ùï°comp  (zero , _) (1 , _) i j))))
   
-- -- -- -- --    (Œª j ‚Üí (ùïóglue01 (suc n) j (sucFin√ó Fin√ó0) ,
-- -- -- -- --            ùïóglue01 (suc n) j (Fin√ó0) ,
-- -- -- -- --            ùïóglue01 (suc n) j (sucFin√ó (sucFin√ó Fin√ó0)) , _) ,
-- -- -- -- --      ùïóglue01 (suc n) (j) ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò'  sucFin√ó)
-- -- -- -- --    (Œª j ‚Üí (ùïó0 (suc (suc n)) (ùï°loop (zero , _) j)
-- -- -- -- --         , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (sucFin√ó Fin√ó0))
-- -- -- -- --         , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (Fin√ó0)) , _) ,
      
-- -- -- -- --      ùïósuc (suc (suc n)) (ùï°loop (zero , _) j)
-- -- -- -- --        ‚àò' ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó
-- -- -- -- --        )

-- -- -- -- --    (Œª i ‚Üí (ùïóglue210sym n i Fin√ó0 ,
-- -- -- -- --           ùïóglue210sym n i (sucFin√ó Fin√ó0) ,
-- -- -- -- --           ùïóglue210sym n i (sucFin√ó (sucFin√ó Fin√ó0)) , _) ,
-- -- -- -- --            ùïóglue210sym n i ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --    refl
-- -- -- -- -- ùïóglue01comp<sym n = 
-- -- -- -- --  isSet‚ÜíSquareP'
-- -- -- -- --   (isSet√ó (isOfHLevel√ó^ 3 2 (isSetFin√ó (3 + n)))
-- -- -- -- --           (isSet‚Üí (isSetFin√ó (3 + n)))) _ _ _ _




-- -- -- -- -- -- (a : ùîΩin (suc n) (ùï°invol (l , l<) j (~ i))) ‚Üí
-- -- -- -- -- --       ùîΩin (suc (suc (suc n)))
-- -- -- -- -- --       (ùï°comm (zero , k<) (suc (suc l) , l<) x i j)

-- -- -- -- -- ùïóglue01commS : ‚àÄ n l l<
-- -- -- -- --  ‚Üí SquareP (Œª i j ‚Üí
-- -- -- -- --     let Z = ùîΩin (suc (suc (n)))
-- -- -- -- --                (ùï°comm (zero , tt) (suc (suc l) , l<) _ i j)
-- -- -- -- --     in (Z √ó Z) √ó
-- -- -- -- --      (ùîΩin (n) (ùï°invol (l , l<) j (~ i)) ‚Üí Z))
-- -- -- -- --       refl
-- -- -- -- --       refl
-- -- -- -- --       (Œª i ‚Üí (ùïóglueBi<sym (n) (l , l<) i
-- -- -- -- --            (ùïósuc (suc (n)) (ùï°loop (suc l , l<) (~ i))
-- -- -- -- --               (ùïó0 (n) (ùï°loop (l , l<) (~ i))))
-- -- -- -- --         , ùïóglueBi<sym (n) (l , l<) i
-- -- -- -- --            (ùïó0 (1 + n) (ùï°loop (suc l , l<) (~ i))))
-- -- -- -- --         ,
-- -- -- -- --          ùïóglueBi<sym (n) (l , l<) i
-- -- -- -- --          ‚àò' ùïósuc (suc (n)) (ùï°loop (suc l , l<) (~ i))
-- -- -- -- --          ‚àò' ùïósuc (n) (ùï°loop (l , l<) (~ i)))
-- -- -- -- --       Œª i ‚Üí (
-- -- -- -- --         (ùïóglueBi< (n) (l , l<) i (ùïó0 (1 + n) (ùï°loop (suc l , l<) i)))
-- -- -- -- --          ,
-- -- -- -- --          ùïóglueBi< (n) (l , l<) i
-- -- -- -- --            (ùïósuc (suc (n)) (ùï°loop (suc l , l<) (i))
-- -- -- -- --               (ùïó0 (n) (ùï°loop (l , l<) (i))))) , (ùïóglueBi< (n) (l , l<) i ‚àò'
-- -- -- -- --          ùïósuc (suc (n)) (ùï°loop (suc l , l<) i)
-- -- -- -- --          ‚àò' ùïósuc (n) (ùï°loop (l , l<) i))
-- -- -- -- -- ùïóglue01commS n l l< =
-- -- -- -- --     isSet‚ÜíSquareP'
-- -- -- -- --   (isSet√ó (isSet√ó (isSetFin√ó (2 + n)) (isSetFin√ó (2 + n)) )
-- -- -- -- --           (isSet‚Üí (isSetFin√ó (2 + n)))) _ _ _ _

-- -- -- -- -- ùïóglueBraid : ‚àÄ n ‚Üí SquareP
-- -- -- -- --   (Œª i j ‚Üí
-- -- -- -- --      let Z = ùîΩin (suc (suc (suc n))) (ùï°braid zero tt i j)
-- -- -- -- --      in (Z √ó Z √ó Z) √ó (Fin√ó (n) ‚Üí Z))
-- -- -- -- --     (Œª j ‚Üí (ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j Fin√ó0)
-- -- -- -- --          , (ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (sucFin√ó Fin√ó0))
-- -- -- -- --           , ùïó0 (2 + n) (ùï°loop (zero , _) j) ))
-- -- -- -- --       , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) ‚àò' ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó )
-- -- -- -- --     (Œª j ‚Üí (ùïóglue01 (suc n) j Fin√ó0 
-- -- -- -- --         , ùïóglue01 (suc n) j (sucFin√ó Fin√ó0)
-- -- -- -- --          , ùïóglue01 (suc n) j  (sucFin√ó (sucFin√ó Fin√ó0)) )
-- -- -- -- --       , ùïóglue01 (suc n) j ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó )
-- -- -- -- --     (Œª j ‚Üí ((ùïóglue210sym n j Fin√ó0 
-- -- -- -- --         , ùïóglue210sym n j (sucFin√ó (sucFin√ó Fin√ó0))
-- -- -- -- --          , ùïóglue210sym n j  (sucFin√ó Fin√ó0) ))
-- -- -- -- --            , ùïóglue210sym n j ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --     Œª j ‚Üí ((ùïóglue210sym n j ((sucFin√ó (sucFin√ó Fin√ó0)))
-- -- -- -- --         , ùïóglue210sym n j Fin√ó0
-- -- -- -- --          , ùïóglue210sym n j  (sucFin√ó Fin√ó0) )) ,
-- -- -- -- --            ùïóglue210sym n j ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó
-- -- -- -- -- ùïóglueBraid n =
-- -- -- -- --   isSet‚ÜíSquareP'
-- -- -- -- --   (isSet√ó (isSet√ó (isSetFin√ó (3 + n))
-- -- -- -- --       ((isSet√ó (isSetFin√ó (3 + n)) (isSetFin√ó (3 + n)) )) )
-- -- -- -- --           (isSet‚Üí (isSetFin√ó (3 + n)))) _ _ _ _



-- -- -- -- -- -- abstract
-- -- -- -- -- Œ£-swap-012-‚â°-comp-ua-glue* : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí {B : Type ‚Ñì}  ‚Üí
-- -- -- -- --       SquareP (Œª i j ‚Üí A √ó A √ó A √ó B
-- -- -- -- --         ‚Üí Œ£-swap-012-‚â°-comp-ua {A = A} {B} (Œª _ ‚Üí A √ó A √ó A √ó B) i j)
-- -- -- -- --          (((Œª i (a , x) ‚Üí
-- -- -- -- --           a , glue
-- -- -- -- --             (Œª { (i = i0) ‚Üí _
-- -- -- -- --                ; (i = i1) ‚Üí _
-- -- -- -- --                })
-- -- -- -- --                x)))
-- -- -- -- --          ((Œª i x ‚Üí
-- -- -- -- --           glue (Œª { (i = i0) ‚Üí _ ; (i = i1) ‚Üí _ }) x))
-- -- -- -- --         (Œª i x ‚Üí
-- -- -- -- --           glue
-- -- -- -- --             (Œª { (i = i0) ‚Üí _
-- -- -- -- --                ; (i = i1) ‚Üí _
-- -- -- -- --                })
-- -- -- -- --                x)
-- -- -- -- --         Œª _ x ‚Üí x

-- -- -- -- -- Œ£-swap-012-‚â°-comp-ua-glue* i j x =
-- -- -- -- --   glue
-- -- -- -- --      (Œª { (i = i1)(j = i0) ‚Üí _
-- -- -- -- --         ; (i = i0) ‚Üí fst x ,
-- -- -- -- --            glue (Œª { (j = i0) ‚Üí _
-- -- -- -- --                    ; (j = i1) ‚Üí _
-- -- -- -- --                    }) (snd x)
-- -- -- -- --         ; (j = i1) ‚Üí _ })
-- -- -- -- --      x

-- -- -- -- -- isContrŒ£‚âÉ : (A : (Type ‚Ñì)) ‚Üí isContr (Œ£ (Type ‚Ñì) Œª T ‚Üí (A ‚âÉ T))
-- -- -- -- -- isContrŒ£‚âÉ A = isOfHLevelRespectEquiv 0
-- -- -- -- --   (Œ£-cong-equiv-snd Œª _ ‚Üí univalence)
-- -- -- -- --    (isContrSingl A)


-- -- -- -- -- module _ {‚Ñì} (A : Type ‚Ñì) where 

-- -- -- -- --  -- lookùïç : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí (ùïç Bool n ùï° ‚Üí A) ‚Üí ùïç A n ùï°

-- -- -- -- --  -- open Tab√ó‚âÉ {A = A}


-- -- -- -- --  tab√ó‚âÉ : ‚àÄ n ‚Üí (Fin√ó n ‚Üí A) ‚âÉ (A √ó^ n)
-- -- -- -- --  tab√ó‚âÉ zero = isoToEquiv Tab√ó.IsoFin√ó0‚ÜíAUnit*
-- -- -- -- --  tab√ó‚âÉ (suc n) =
-- -- -- -- --    preCompEquiv (Maybe‚àòFin√ó‚âÉFin√ó‚àòsuc n) ‚àô‚Çë
-- -- -- -- --        ‚âÉMaybeFunProd ‚àô‚Çë ‚âÉ-√ó (idEquiv _) (tab√ó‚âÉ n)

-- -- -- -- --  tab√ó : ‚àÄ n ‚Üí (Fin√ó n ‚Üí A) ‚Üí (A √ó^ n)
-- -- -- -- --  tab√ó = fst ‚àò tab√ó‚âÉ


-- -- -- -- --  consùïç : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí A ‚Üí ùïç A n ùï°
-- -- -- -- --      ‚Üí ùïç A (suc n) (suc‚Ñôrm n ùï°)
-- -- -- -- --  consùïç n ùï°base = _,_
-- -- -- -- --  consùïç n (ùï°loop x i) = _,_
-- -- -- -- --  consùïç n (ùï°looop k l i) = _,_
-- -- -- -- --  consùïç n (ùï°comp k l i i‚ÇÅ) = _,_
-- -- -- -- --  consùïç n (ùï°invol k i i‚ÇÅ) = _,_
-- -- -- -- --  consùïç n (ùï°comm (k , k<) (suc l , l<) x i i‚ÇÅ) = _,_
-- -- -- -- --  consùïç n (ùï°braid k k< i i‚ÇÅ) = _,_
 
-- -- -- -- --  tabùïç : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí (ùîΩin n (toTrunc‚Ñô ùï°) ‚Üí A) ‚Üí ùïç A n ùï°
-- -- -- -- --  tabùïç n = Rùï°elim.f (w n) 
-- -- -- -- --   where
-- -- -- -- --   open Rùï°elim

-- -- -- -- --   w : ‚àÄ n ‚Üí Rùï°elim {n = n} Œª ùï° ‚Üí (ùîΩin n (toTrunc‚Ñô ùï°) ‚Üí A) ‚Üí ùïç A n ùï°
-- -- -- -- --   isGroupoidA (w n) ()
-- -- -- -- --   abase (w n) = tab√ó n
  
-- -- -- -- --   aloop (w (suc n)) (suc k , k<) i f =
-- -- -- -- --     f (ùïó0 n (ùï°loop (k , k<) i))
-- -- -- -- --       , aloop (w n) (k , k<) i (f ‚àò ùïósuc n (ùï°loop (k , k<) i))
-- -- -- -- --   aloop (w (suc (suc n))) (zero , tt) i f =
-- -- -- -- --     glueAdjT√ó (2 + n) zero i
-- -- -- -- --      (tab√ó (2 + n) (f ‚àò ùïóglue01 n i))

-- -- -- -- --   alooop (w (suc n)) (suc k , k<) (suc l , l<) i f =
-- -- -- -- --     f (ùïó0 n (ùï°looop (k , k<) (l , l<) i))
-- -- -- -- --     , alooop (w n) (k , k<) (l , l<) i
-- -- -- -- --        (f ‚àò ùïósuc n (ùï°looop (k , k<) (l , l<) i))
-- -- -- -- --   alooop (w (suc (suc n))) (zero , tt) (zero , tt) = 
-- -- -- -- --     congP {B = Œª i _ ‚Üí _ ‚Üí
-- -- -- -- --              ùïç A (suc (suc n)) (ùï°looop (zero , tt) (zero , tt) i)}
-- -- -- -- --       (Œª _ g f ‚Üí tab√ó (2 + n) (f ‚àò' g))
-- -- -- -- --       {idfun _} {idfun _}
-- -- -- -- --       (funExt Œª x ‚Üí Œ£PathPProp (snd ‚àò Fin√óSnd (suc (suc n))) refl)
-- -- -- -- --   alooop (w (suc (suc n))) (zero , tt) (suc (suc k) , k<) i f =
-- -- -- -- --     glueBiAdjT√ó<SS {A = A} n (k , k<) (~ i)
-- -- -- -- --      (aloop (w (suc (suc n))) (suc (suc k) , k<) (~ i)
-- -- -- -- --         (f ‚àò' ùïóglueBi<sym n (k , k<) i))

-- -- -- -- --   alooop (w (suc (suc (suc n)))) (zero , tt) (suc zero , tt) i f =  
-- -- -- -- --     glueBiAdjT√ó< n (~ i) (tab√ó (3 + n) (f ‚àò ùïóglue210sym n i))
  
-- -- -- -- --   alooop (w (suc (suc n))) (suc (suc k) , k<) (zero , tt) i f =
-- -- -- -- --    glueBiAdjT√ó<SS {A = A} n (k , k<) i
-- -- -- -- --      (aloop (w (suc (suc n))) (suc (suc k) , k<) i
-- -- -- -- --         (f ‚àò' ùïóglueBi< n (k , k<) i))
-- -- -- -- --   alooop (w (suc (suc (suc n)))) (suc zero , tt) (zero , tt) i f =
-- -- -- -- --     glueBiAdjT√ó< n i (tab√ó (3 + n) (f ‚àò ùïóglue210 n i))

-- -- -- -- --   acomp (w (suc n)) (suc k , k<) (suc l , l<) i j f =
-- -- -- -- --     f (ùïó0 n (ùï°comp (k , k<) (l , l<) i j))
-- -- -- -- --     , acomp (w n) (k , k<) (l , l<) i j
-- -- -- -- --        (f ‚àò ùïósuc n (ùï°comp (k , k<) (l , l<) i j))
-- -- -- -- --   acomp (w (suc (suc n))) (zero , tt) (zero , tt) i j f =
-- -- -- -- --    aloop (w (suc (suc n))) (zero , tt) j (f ‚àò'     
-- -- -- -- --      isSet‚ÜíSquareP' {A = Œª i j ‚Üí
-- -- -- -- --        ùîΩin (suc (suc n)) (ùï°loop (zero , tt) j) ‚Üí
-- -- -- -- --       ùîΩin (suc (suc n)) (ùï°comp (zero , tt) (zero , tt) i j)}
-- -- -- -- --    (isSet‚Üí (isSetFin√ó (2 + n)))
-- -- -- -- --     (Œª _ x ‚Üí x) (Œª _ x ‚Üí x)
-- -- -- -- --     (funExt Œª x ‚Üí Œ£PathPProp (snd ‚àò Fin√óSnd (suc (suc n))) refl)
-- -- -- -- --       refl i j)
  
  
-- -- -- -- --   acomp (w (suc (suc n))) (zero , tt) (suc (suc l) , l<) i j f =
-- -- -- -- --     glue-biAdjT√ó^‚â°-comp<SS {n = n} l l< tt (~ i) j
-- -- -- -- --        (f (isSet‚ÜíSquareP'
-- -- -- -- --            {A =
-- -- -- -- --              (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°comp (zero , tt) (suc (suc l) , l<) i j))}
-- -- -- -- --            (isSetFin√ó (2 + n))
-- -- -- -- --            (Œª j ‚Üí ùïóglue01 n j (sucFin√ó Fin√ó0))
-- -- -- -- --            (Œª j ‚Üí ùïó0 (suc n) (ùï°loop ((suc l) , l<) j))
-- -- -- -- --            (Œª i ‚Üí ùïóglueBi<sym n (l , l<) i (ùïó0 (suc n) (ùï°loop ((suc l) , l<) (~ i))))
-- -- -- -- --            (Œª _ ‚Üí Fin√ó0) i j)
-- -- -- -- --          , f (isSet‚ÜíSquareP'
-- -- -- -- --            {A =
-- -- -- -- --              (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°comp (zero , tt) (suc (suc l) , l<) i j))}
-- -- -- -- --            (isSetFin√ó (2 + n))

-- -- -- -- --            (Œª j ‚Üí ùïóglue01 n j (Fin√ó0))
-- -- -- -- --            (Œª j ‚Üí ùïósuc (suc n) (ùï°loop (suc l , l<) (j))
-- -- -- -- --                   (ùïó0 (n) (ùï°loop ((l) , l<) (j))))
-- -- -- -- --            (Œª i ‚Üí ùïóglueBi<sym n (l , l<) i
-- -- -- -- --                      (ùïósuc (suc n) (ùï°loop (suc l , l<) (~ i))
-- -- -- -- --                         (ùïó0 n (ùï°loop (l , l<) (~ i)))))
-- -- -- -- --            (Œª _ ‚Üí sucFin√ó Fin√ó0) i j)
-- -- -- -- --          , aloop (w n) (l , l<) ((~ i) ‚à® j)
-- -- -- -- --         (f ‚àò'
-- -- -- -- --           isSet‚ÜíSquareP'
-- -- -- -- --             {A = Œª i j ‚Üí
-- -- -- -- --               ùîΩin n (ùï°loop (l , l<) ((~ i) ‚à® j)) ‚Üí
-- -- -- -- --       ùîΩin (suc (suc n)) (ùï°comp (zero , tt) (suc (suc l) , l<) i j)}
-- -- -- -- --             (isSet‚Üí (isSetFin√ó (2 + n)))
-- -- -- -- --             (Œª j ‚Üí ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --             (Œª j ‚Üí ùïósuc (suc n) (ùï°loop (suc l , l<) j)
-- -- -- -- --                 ‚àò' ùïósuc n (ùï°loop (l , l<) j))
-- -- -- -- --             (Œª i ‚Üí ùïóglueBi<sym n (l , l<) (i) ‚àò'
-- -- -- -- --                 ùïósuc (suc n) (ùï°loop (suc l , l<) (~ i))
-- -- -- -- --                 ‚àò' ùïósuc n (ùï°loop (l , l<) (~ i)))
-- -- -- -- --             (Œª _ ‚Üí sucFin√ó ‚àò' sucFin√ó)

-- -- -- -- --             i j)
-- -- -- -- --             )

-- -- -- -- --   acomp (w (suc (suc (suc n)))) (zero , tt) (suc zero , l<) i j f =
-- -- -- -- --     let ((f0 , f1 , f2 , _) , fSSS) = ùïóglue01comp<sym n i j
-- -- -- -- --     in Œ£-swap-012-‚â°-comp-ua-glue* {A = A} {A √ó^ n} (~ i) j 
-- -- -- -- --           (f f0 , f f1 , f f2 , tab√ó n (f ‚àò' fSSS))


-- -- -- -- --   acomp (w (suc (suc n))) (suc (suc k) , k<) (zero , tt) i j f =
-- -- -- -- --    glue-biAdjT√ó^‚â°-comp<SS {n = n} k k< tt i j
-- -- -- -- --       (f (isSet‚ÜíSquareP'
-- -- -- -- --            {A =
-- -- -- -- --              (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°comp (suc (suc k) , k<) (zero , tt) i j))}
-- -- -- -- --            (isSetFin√ó (2 + n))
-- -- -- -- --            (Œª j ‚Üí ùïó0 (suc n) (ùï°loop ((suc k) , k<) j))
-- -- -- -- --            (Œª j ‚Üí ùïóglue01 n j (sucFin√ó Fin√ó0))
-- -- -- -- --            (Œª i ‚Üí ùïóglueBi< n (k , k<) i (ùïó0 (suc n) (ùï°loop ((suc k) , k<) i)))
-- -- -- -- --            (Œª _ ‚Üí Fin√ó0) i j) 
-- -- -- -- --      , f (isSet‚ÜíSquareP'
-- -- -- -- --            {A =
-- -- -- -- --              (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°comp (suc (suc k) , k<) (zero , tt) i j))}
-- -- -- -- --            (isSetFin√ó (2 + n))
-- -- -- -- --            (Œª j ‚Üí ùïósuc (suc n) (ùï°loop (suc k , k<) j)
-- -- -- -- --                   (ùïó0 (n) (ùï°loop ((k) , k<) j)))
-- -- -- -- --            (Œª j ‚Üí ùïóglue01 n j (Fin√ó0))
-- -- -- -- --            (Œª i ‚Üí ùïóglueBi< n (k , k<) i
-- -- -- -- --                      (ùïósuc (suc n) (ùï°loop (suc k , k<) i)
-- -- -- -- --                         (ùïó0 n (ùï°loop (k , k<) i))))
-- -- -- -- --            (Œª _ ‚Üí sucFin√ó Fin√ó0) i j) 
-- -- -- -- --      , aloop (w n) (k , k<) (i ‚à® j)
-- -- -- -- --         (f ‚àò'
-- -- -- -- --           isSet‚ÜíSquareP'
-- -- -- -- --             {A = Œª i j ‚Üí
-- -- -- -- --               ùîΩin n (ùï°loop (k , k<) (i ‚à® j)) ‚Üí
-- -- -- -- --       ùîΩin (suc (suc n)) (ùï°comp (suc (suc k) , k<) (zero , tt) i j)}
-- -- -- -- --             (isSet‚Üí (isSetFin√ó (2 + n)))
-- -- -- -- --             (Œª j ‚Üí ùïósuc (suc n) (ùï°loop (suc k , k<) j)
-- -- -- -- --                 ‚àò' ùïósuc n (ùï°loop (k , k<) j))
-- -- -- -- --             (Œª j ‚Üí ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó)
-- -- -- -- --             (Œª i ‚Üí ùïóglueBi< n (k , k<) i ‚àò'
-- -- -- -- --                 ùïósuc (suc n) (ùï°loop (suc k , k<) i)
-- -- -- -- --                 ‚àò' ùïósuc n (ùï°loop (k , k<) i))
-- -- -- -- --             (Œª _ ‚Üí sucFin√ó ‚àò' sucFin√ó) i j))

-- -- -- -- --   acomp (w (suc (suc (suc n)))) (suc zero , tt) (zero , tt) i j f =
-- -- -- -- --     let ((f0 , f1 , f2 , _) , fSSS) = ùïóglue01comp< n i j
-- -- -- -- --     in Œ£-swap-012-‚â°-comp-ua-glue* {A = A} {A √ó^ n} i j
-- -- -- -- --           (f f0 , f f1 , f f2 , tab√ó n (f ‚àò' fSSS))
  
  
-- -- -- -- --   ainvol (w (suc n)) (suc k , k<) i j f =
-- -- -- -- --     f (ùïó0 n (ùï°invol (k , k<) i j))
-- -- -- -- --     , ainvol (w n) (k , k<) i j
-- -- -- -- --         (f ‚àò ùïósuc n (ùï°invol (k , k<) i j))
-- -- -- -- --   ainvol (w (suc (suc n))) (zero , tt) i j f =    
-- -- -- -- --    let ((f0 , f1) , fSS) = ùïóglue01invol n i j
-- -- -- -- --    in Œ£-swap-01-‚â°-invol-ua-glue {A = A} {B = A √ó^ n} i j
-- -- -- -- --          (f f0 , f f1 , tab√ó n (f ‚àò' fSS))

-- -- -- -- --   acomm (w (suc n)) (suc k , k<) (suc (suc (suc l)) , l<) x i j f =    
-- -- -- -- --     f (ùïó0 n (ùï°comm (k , k<) (suc (suc l) , l<) x i j))
-- -- -- -- --     , acomm (w n) (k , k<) (suc (suc l) , l<) x i j
-- -- -- -- --        (f ‚àò ùïósuc n (ùï°comm (k , k<) (suc (suc l) , l<) x i j)) 
-- -- -- -- --   acomm (w (suc (suc n))) (zero , k<) (suc (suc l) , l<) x i j f =
-- -- -- -- --    let ((f0 , f1) , fSS) = ùïóglue01commS n l l< i j
-- -- -- -- --    in glue-biAdjT√ó^‚â°-comm {n = n} (l , l<)
-- -- -- -- --       i j
-- -- -- -- --       (f f0 , f f1 , ainvol (w n) (l , l<) j (~ i) (f ‚àò fSS))
   
-- -- -- -- --   abraid (w (suc n)) (suc k) k< i j f =
-- -- -- -- --       f (ùïó0 n (ùï°braid k k< i j))
-- -- -- -- --     , abraid (w n) k k< i j (f ‚àò  ùïósuc n (ùï°braid k  k< i j))
-- -- -- -- --   abraid (w (suc (suc (suc n)))) zero tt i j f =
-- -- -- -- --    let ((f0 , f1 , f2) , fSSS) = ùïóglueBraid n i j
-- -- -- -- --    in glue-adjT√ó^‚â°-braid {n = n} i j
-- -- -- -- --          (ua-gluePath (adjT√ó^‚âÉ 0 ‚àô‚Çë compEquiv (adjT√ó^‚âÉ 1) (adjT√ó^‚âÉ 0))
-- -- -- -- --            (Œª j ‚Üí f f2 , f f0 , f f1 , tab√ó n (f ‚àò' fSSS)) j)
           

-- -- -- -- --  isEquivTabùïç : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí (isEquiv (tabùïç n ùï°))
-- -- -- -- --  isEquivTabùïç n = Rùï°elimProp.f w
-- -- -- -- --   where
-- -- -- -- --   w : Rùï°elimProp (isEquiv ‚àò tabùïç n)
-- -- -- -- --   Rùï°elimProp.isPropA w _ = isPropIsEquiv _
-- -- -- -- --   Rùï°elimProp.abase w = snd (tab√ó‚âÉ n)

-- -- -- -- --  sùïç‚ÇÉ' : ‚àÄ n ‚Üí (ùï° : ‚Ñôrm {false} n) ‚Üí
-- -- -- -- --     Œ£ (Type ‚Ñì) Œª T ‚Üí ((ùîΩin n (toTrunc‚Ñô ùï°) ‚Üí A) ‚âÉ T)
-- -- -- -- --  sùïç‚ÇÉ' n ùï° = _ , (_ , isEquivTabùïç n ùï°)


-- -- -- -- --  sùïç‚ÇÉ : ‚àÄ n ‚Üí (ùï° : ‚Ñôrm {true} n) ‚Üí Œ£ (Type ‚Ñì) Œª T ‚Üí ((ùîΩin n ùï° ‚Üí A) ‚âÉ T)
-- -- -- -- --  sùïç‚ÇÉ =  trunc‚Ñô‚ÇÇ _ (Œª _ _ ‚Üí isOfHLevelPlus 3 (isContrŒ£‚âÉ _) )  sùïç‚ÇÉ'


-- -- -- -- --  ùïç‚ÇÉ : ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí Type ‚Ñì
-- -- -- -- --  ùïç‚ÇÉ n = fst ‚àò sùïç‚ÇÉ n

-- -- -- -- --  module _ (isGrpA : isGroupoid A) where

-- -- -- -- --   isGroupoidùïç‚ÇÉ : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí isGroupoid (ùïç‚ÇÉ n ùï°)
-- -- -- -- --   isGroupoidùïç‚ÇÉ n = Rùï°elimProp.f w
-- -- -- -- --    where
-- -- -- -- --    w : Rùï°elimProp _
-- -- -- -- --    Rùï°elimProp.isPropA w _ = isPropIsOfHLevel 3
-- -- -- -- --    Rùï°elimProp.abase w = isOfHLevel√ó^ n 3 isGrpA 


-- -- -- -- --   consùïç‚ÇÉ : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí A ‚Üí ùïç‚ÇÉ n ùï°
-- -- -- -- --       ‚Üí ùïç‚ÇÉ (suc n) (suc‚Ñôrm n ùï°)
-- -- -- -- --   consùïç‚ÇÉ n = Rùï°elim.f w
-- -- -- -- --    where
-- -- -- -- --    w : Rùï°elim (Œª z ‚Üí A ‚Üí ùïç‚ÇÉ n z ‚Üí ùïç‚ÇÉ (suc n) (suc‚Ñôrm n z))
-- -- -- -- --    Rùï°elim.isGroupoidA w _ ùï° =
-- -- -- -- --      isGroupoidŒ†2 Œª _ _ ‚Üí  isGroupoidùïç‚ÇÉ (suc n) (suc‚Ñôrm n ùï°)
-- -- -- -- --    Rùï°elim.abase w = _,_
-- -- -- -- --    Rùï°elim.aloop w _ _ = _,_
-- -- -- -- --    Rùï°elim.alooop w _ _ _ = _,_
-- -- -- -- --    Rùï°elim.acomp w _ _ _ _ = _,_
-- -- -- -- --    Rùï°elim.ainvol w _ _ _ = _,_
-- -- -- -- --    Rùï°elim.acomm w _ (suc l , l<) _ _ _ = _,_
-- -- -- -- --    Rùï°elim.abraid w _ _ _ _ = _,_
