{-# OPTIONS --safe #-}
module Cubical.HITs.Permutation.Base where

open import Cubical.Data.Nat.Base as ‚Ñï hiding (_¬∑_)
open import Cubical.Data.Nat.Properties


-- open import Cubical.Data.Fin.Properties as FP
open import Cubical.Data.Empty as ‚ä•

open import Cubical.Functions.Involution

open import Cubical.Foundations.Everything
-- open import Cubical.Data.Empty as ‚ä•
-- open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_)
-- open import Cubical.Data.Nat.Order
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe
open import Cubical.Data.Unit
open import Cubical.Data.Bool as ùüö
open import Cubical.Data.Sum as ‚äé


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Data.Nat.Order.RecursiveMoreEquiv

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.Algebra.Group

open import Cubical.Algebra.SymmetricGroup

import Cubical.Functions.Logic as L

open import Cubical.Functions.Embedding

open import Cubical.Data.List as Li

import Cubical.Data.Nat.FinGenAut2 as A

import Cubical.HITs.PropositionalTruncation as Prop

open import Cubical.HITs.GroupoidQuotients as GQ
  renaming ([_] to [_]// ; RelimProp to  RelimProp// ; Rrec to Rrec//)


open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties

-- open import Cubical.Algebra.Group.Generators

open import Cubical.Functions.FunExtEquiv

open import Cubical.HITs.SequentialColimit as SC

open import Cubical.HITs.EilenbergMacLane1 renaming (elim to elimEM)


open import Cubical.Relation.Binary

-- import Cubical.Homotopy.EilenbergMacLane.Properties as EMP

open import Cubical.Foundations.Equiv.HalfAdjoint

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì


data ‚Ñôrm {trunc : Bool} (n : ‚Ñï) : Type‚ÇÄ where 
  ùï°base : ‚Ñôrm n
  ùï°loop : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ùï°base ‚â° ùï°base  
  ùï°looop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ùï°base ‚â° ùï°base
  -- ùï°comp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
  --    Square
  --      (ùï°loop k)
  --      (ùï°loop l)
  --      refl
  --      (ùï°looop k l)

  ùï°comp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     Square
       (ùï°loop k)
       (ùï°loop l)
       (ùï°looop k l)
       refl
         
  ùï°invol : ‚àÄ k ‚Üí ùï°loop k ‚â° sym (ùï°loop k)
  ùï°comm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     commT (fst k) (fst l) ‚Üí
       Square
         refl
         refl
       (ùï°looop k l)
       (ùï°looop l k)

  ùï°braid : ‚àÄ k k<  ‚Üí        
         Square
         (ùï°loop (suc k , k<))
         (ùï°loop (k , <-weaken {n = n} k<))
         (ùï°looop (k , <-weaken {n = n} k<) (suc k , k<))
         (ùï°looop (k , <-weaken {n = n} k<) (suc k , k<))


  ùï°squash : Bool‚ÜíType trunc ‚Üí isGroupoid (‚Ñôrm n)




toTrunc‚Ñô : ‚àÄ {n b} ‚Üí ‚Ñôrm {b} n ‚Üí ‚Ñôrm {true} n
toTrunc‚Ñô ùï°base = ùï°base
toTrunc‚Ñô (ùï°loop x i) = ùï°loop x i
toTrunc‚Ñô (ùï°looop k l i) = ùï°looop k l i
toTrunc‚Ñô (ùï°comp k l i i‚ÇÅ) = ùï°comp k l i i‚ÇÅ
toTrunc‚Ñô (ùï°invol k i i‚ÇÅ) = ùï°invol k i i‚ÇÅ
toTrunc‚Ñô (ùï°comm k l x i i‚ÇÅ) = ùï°comm k l x i i‚ÇÅ
toTrunc‚Ñô (ùï°braid k k< i i‚ÇÅ) = ùï°braid k k< i i‚ÇÅ
toTrunc‚Ñô (ùï°squash _ x y p q r s i i‚ÇÅ x‚ÇÖ) =
 ùï°squash _ _ _ _ _
  (Œª i j ‚Üí toTrunc‚Ñô (r i j)) (Œª i j ‚Üí toTrunc‚Ñô (s i j))
  i i‚ÇÅ x‚ÇÖ

ùï°comp' : ‚àÄ {n b} ‚Üí (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
   Square {A = ‚Ñôrm {b} n}
     (ùï°loop k)
     (ùï°loop l)
     refl
     (ùï°looop k l)
ùï°comp' k l =
   (ùï°invol k) ‚óÅ
   (Œª i j ‚Üí (ùï°comp k l i (~ j)))
   ‚ñ∑ sym (ùï°invol l)

ùï°looop-invol : ‚àÄ {b} n ‚Üí (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
    ùï°looop {b} {n = n} k l ‚â° sym (ùï°looop l k)
ùï°looop-invol n k l i j =
   hcomp
      (Œª l' ‚Üí Œª {
        (i = i0) ‚Üí ùï°comp k l j (~ l')
       ;(i = i1) ‚Üí ùï°comp l k (~ j) (~ l')
       ;(j = i0) ‚Üí ùï°loop k (~ l')
       ;(j = i1) ‚Üí ùï°loop l (~ l')
       }) ùï°base

record Rùï°rec {n} (A : Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   abase : A
   aloop : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase
   alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase
   acomp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
      Square
        (aloop k)
        (aloop l)
        (alooop k l)
        refl

   ainvol : ‚àÄ k ‚Üí aloop k ‚â° sym (aloop k)
   acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
      commT (fst k) (fst l) ‚Üí
        Square
          refl
          refl
        (alooop k l)
        (alooop l k)

   abraid : ‚àÄ k k<  ‚Üí        
          Square
          (aloop (suc k , k<))
          (aloop (k , <-weaken {n = n} k<))
          (alooop (k , <-weaken {n = n} k<) (suc k , k<))
          (alooop (k , <-weaken {n = n} k<) (suc k , k<))
   -- asquash : if trunc then (isGroupoid A) else Unit*


 f : ‚àÄ {trunc} ‚Üí {squashA : if trunc then (isGroupoid A) else Unit*} ‚Üí
       ‚Ñôrm {trunc} n ‚Üí A
 f ùï°base = abase
 f (ùï°loop x i) = aloop x i
 f (ùï°looop k l i) = alooop k l i
 f (ùï°comp k l i i‚ÇÅ) = acomp k l i i‚ÇÅ
 -- f (ùï°comp' k l i i‚ÇÅ) = acomp' k l i i‚ÇÅ
 f (ùï°invol k i i‚ÇÅ) = ainvol k i i‚ÇÅ
 f (ùï°comm k l x i i‚ÇÅ) = acomm k l x i i‚ÇÅ
 f (ùï°braid k k< i i‚ÇÅ) = abraid k k< i i‚ÇÅ
 f {true} {t} (ùï°squash _ _ _ _ _ r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) =   
   t _ _ _ _
     (Œª i j ‚Üí (f {true} {t} (r i j)))
     (Œª i j ‚Üí (f {true} {t} (s i j)))
     i‚ÇÄ i‚ÇÅ i‚ÇÇ



record Rùï°elim {n} {trunc} (A : ‚Ñôrm {trunc} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   isGroupoidA : Bool‚ÜíType trunc ‚Üí ‚àÄ x ‚Üí isGroupoid (A x)
   abase : A ùï°base
   aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
   alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
   acomp : ‚àÄ k l ‚Üí
     SquareP (Œª j i ‚Üí A (ùï°comp k l j i))
       (aloop k)
       (aloop l)
       (alooop k l)
       refl
   ainvol : ‚àÄ k ‚Üí
     SquareP (Œª i j ‚Üí A (ùï°invol k i j))
       (aloop k)
       (symP (aloop k))
       refl refl
   acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ‚àÄ x ‚Üí     
       SquareP (Œª i j ‚Üí A (ùï°comm k l x i j))
         refl
         refl
       (alooop k l)
       (alooop l k)
   abraid : ‚àÄ k k<  ‚Üí        
         SquareP (Œª i j ‚Üí A (ùï°braid k k< i j))
         (aloop (suc k , k<))
         (aloop (k , <-weaken {n = n} k<))
         (alooop (k , <-weaken {n = n} k<) (suc k , k<))
         (alooop (k , <-weaken {n = n} k<) (suc k , k<))
  


 f : ‚àÄ x ‚Üí A x
 f ùï°base = abase
 f (ùï°loop x i) = aloop x i
 f (ùï°looop k l i) = alooop k l i
 f (ùï°comp k l j i) = acomp k l j i
   
 f (ùï°invol k i j) = ainvol k i j
 
 f (ùï°comm k l x i j) = acomm k l x i j
    
 
 f (ùï°braid k k< i j) = abraid k k< i j
 f (ùï°squash X x y p q r s i j k) =
   isOfHLevel‚ÜíisOfHLevelDep 3 (isGroupoidA X)
     _ _ _ _
     (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k))
     (ùï°squash X x y p q r s) i j k





record Rùï°elimSet {n} {trunc} (A : ‚Ñôrm {trunc} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   isSetA : ‚àÄ x ‚Üí isSet (A x)
   abase : A ùï°base
   aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
   alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
   -- (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase

 fR : Rùï°elim (Œª z ‚Üí A z)
 Rùï°elim.isGroupoidA fR X = isSet‚ÜíisGroupoid ‚àò isSetA
 Rùï°elim.abase fR = abase
 Rùï°elim.aloop fR = aloop
 Rùï°elim.alooop fR = alooop
 Rùï°elim.acomp fR = w
   where
   abstract
    w : (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
      SquareP (Œª j i ‚Üí A (ùï°comp k l j i)) (aloop k) (aloop l)
      (alooop k l) refl
    w k l = isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°comp k l j i)) _ _ _ _
 Rùï°elim.ainvol fR = w
  where
  abstract
   w : (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
      SquareP (Œª i j ‚Üí A (ùï°invol k i j)) (aloop k) (symP (aloop k)) refl
      refl
   w k = isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°invol k j i)) _ _ _ _
 Rùï°elim.acomm fR = w
  where
  abstract
   w : (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) (x : commT (fst k) (fst l)) ‚Üí
    SquareP (Œª i j ‚Üí A (ùï°comm k l x i j)) refl refl
    (Rùï°elim.alooop fR k l) (Rùï°elim.alooop fR l k)
   w k l x = isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°comm k l x j i)) _ _ _ _ 
 Rùï°elim.abraid fR = w
  where
  abstract
   w : (k : ‚Ñï)
    (k< : suc (suc (suc k)) Cubical.Data.Nat.Order.Recursive.‚â§ n) ‚Üí
    SquareP (Œª i j ‚Üí A (ùï°braid k k< i j))
    (Rùï°elim.aloop fR (suc k , k<)) (Rùï°elim.aloop fR (k , <-weaken {n = n} k<))
    (Rùï°elim.alooop fR (k , <-weaken {n = n} k<) (suc k , k<))
    (Rùï°elim.alooop fR (k , <-weaken {n = n} k<) (suc k , k<))
   w k k< = isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°braid k k< j i)) _ _ _ _


 f : ‚àÄ x ‚Üí A x
 f = Rùï°elim.f fR



record Rùï°elimSet' {n} {trunc} (A : ‚Ñôrm {trunc} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   isSetA : ‚àÄ x ‚Üí isSet (A x)
   abase : A ùï°base
   aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase

 fR : Rùï°elimSet (Œª z ‚Üí A z)
 Rùï°elimSet.isSetA fR = isSetA
 Rùï°elimSet.abase fR = abase
 Rùï°elimSet.aloop fR = aloop
 Rùï°elimSet.alooop fR  = w
  where
   abstract
    w : (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°looop k l i)) (Rùï°elimSet.abase fR)
     (Rùï°elimSet.abase fR)
    w = Œª k l i ‚Üí comp (Œª j ‚Üí A (ùï°comp k l i (~ j)))
      (Œª j ‚Üí Œª { (i = i0) ‚Üí aloop k (~ j) ; (i = i1) ‚Üí aloop l (~ j) })
      abase

 f : ‚àÄ x ‚Üí A x
 f = Rùï°elimSet.f fR



record Rùï°elimProp {n} {trunc} (A : ‚Ñôrm {trunc} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   isPropA : ‚àÄ x ‚Üí isProp (A x)
   abase : A ùï°base

 fR : Rùï°elimSet (Œª z ‚Üí A z)
 Rùï°elimSet.isSetA fR = isProp‚ÜíisSet ‚àò isPropA
 Rùï°elimSet.abase fR = abase
 Rùï°elimSet.aloop fR k = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _
 Rùï°elimSet.alooop fR k l = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _

 f : ‚àÄ x ‚Üí A x
 f = Rùï°elimSet.f fR


trunc‚Ñô : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí (isGroupoid A)
           ‚Üí (‚àÄ n ‚Üí ‚Ñôrm {false} n ‚Üí A)
           ‚Üí ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí A
trunc‚Ñô isGrpA f n = w
 where
 f' = f n

 w : ‚Ñôrm n ‚Üí _
 w ùï°base = f' ùï°base
 w (ùï°loop x i) =  f' (ùï°loop x i)
 w (ùï°looop k l i) = f' (ùï°looop k l i)
 w (ùï°comp k l i i‚ÇÅ) = f' (ùï°comp k l i i‚ÇÅ)
 w (ùï°invol k i i‚ÇÅ) = f' (ùï°invol k i i‚ÇÅ)
 w (ùï°comm k l x i i‚ÇÅ) = f' (ùï°comm k l x i i‚ÇÅ)
 w (ùï°braid k k< i i‚ÇÅ) = f' (ùï°braid k k< i i‚ÇÅ)
 w (ùï°squash _ _ _ _ _ r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) =   
   isGrpA _ _ _ _
     (Œª i j ‚Üí (w (r i j)))
     (Œª i j ‚Üí (w (s i j)))
     i‚ÇÄ i‚ÇÅ i‚ÇÇ

-- Trunc‚Ñô‚ÇÇ : ‚àÄ {‚Ñì} 
--            ‚Üí (A : ‚àÄ n ‚Üí ‚Ñôrm {false} n ‚Üí Type ‚Ñì)
--            ‚Üí (‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí isSet (A n ùï°))
--            ‚Üí ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí hSet ‚Ñì
-- Trunc‚Ñô‚ÇÇ A isSetA = trunc‚Ñô isGroupoidHSet Œª n ùï° ‚Üí A n ùï° , isSetA n ùï°

-- trunc‚Ñô‚ÇÇ : ‚àÄ {‚Ñì} 
--            ‚Üí (A : ‚àÄ n ‚Üí ‚Ñôrm {false} n ‚Üí Type ‚Ñì)
--            ‚Üí (isSetA : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí isSet (A n ùï°))
--            ‚Üí (‚àÄ n ùï° ‚Üí A n ùï°)
--            ‚Üí ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí ‚ü® Trunc‚Ñô‚ÇÇ A isSetA n ùï° ‚ü©
-- trunc‚Ñô‚ÇÇ A isSetA f n = w
--  where
--  f' = f n

--  w : ‚àÄ ùï° ‚Üí _
--  w ùï°base = f' ùï°base
--  w (ùï°loop x i) =  f' (ùï°loop x i)
--  w (ùï°looop k l i) = f' (ùï°looop k l i)
--  w (ùï°comp k l i i‚ÇÅ) = f' (ùï°comp k l i i‚ÇÅ)
--  w (ùï°invol k i i‚ÇÅ) = f' (ùï°invol k i i‚ÇÅ)
--  w (ùï°comm k l x i i‚ÇÅ) = f' (ùï°comm k l x i i‚ÇÅ)
--  w (ùï°braid k k< i i‚ÇÅ) = f' (ùï°braid k k< i i‚ÇÅ)
--  w (ùï°squash _ x y p q r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) = 
--    isOfHLevel‚ÜíisOfHLevelDep 3
--       (isSet‚ÜíisGroupoid ‚àò snd ‚àò Trunc‚Ñô‚ÇÇ A isSetA n)
--      (w x) (w y) _ _
--      (Œª j k ‚Üí w (r j k)) (Œª j k ‚Üí w (s j k))
--      (ùï°squash _ x y p q r s) i‚ÇÄ i‚ÇÅ i‚ÇÇ

trunc‚Ñô‚ÇÇ : ‚àÄ {‚Ñì} 
           ‚Üí (A : ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí Type ‚Ñì)
           ‚Üí (isGroupoidA : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí isGroupoid (A n ùï°))
           ‚Üí (‚àÄ n ùï° ‚Üí A n (toTrunc‚Ñô {_} {false} ùï°))
           ‚Üí ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí A n ùï°
trunc‚Ñô‚ÇÇ A isSetA f n = w
 where
 f' = f n

 w : ‚àÄ ùï° ‚Üí A n ùï°
 w ùï°base = f' ùï°base
 w (ùï°loop x i) =  f' (ùï°loop x i)
 w (ùï°looop k l i) = f' (ùï°looop k l i)
 w (ùï°comp k l i i‚ÇÅ) = f' (ùï°comp k l i i‚ÇÅ)
 w (ùï°invol k i i‚ÇÅ) = f' (ùï°invol k i i‚ÇÅ)
 w (ùï°comm k l x i i‚ÇÅ) = f' (ùï°comm k l x i i‚ÇÅ)
 w (ùï°braid k k< i i‚ÇÅ) = f' (ùï°braid k k< i i‚ÇÅ)
 w (ùï°squash _ x y p q r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) = 
   isOfHLevel‚ÜíisOfHLevelDep 3
      (isSetA n)
     (w x) (w y) _ _
     (Œª j k ‚Üí w (r j k)) (Œª j k ‚Üí w (s j k))
     (ùï°squash _ x y p q r s) i‚ÇÄ i‚ÇÅ i‚ÇÇ


module _ {‚Ñì} (A : Type ‚Ñì) where 


 ùïçr : ‚àÄ n ‚Üí Rùï°rec {n = n} (Type ‚Ñì)
 Rùï°rec.abase (ùïçr n) = A √ó^ n
 Rùï°rec.aloop (ùïçr n) k = adjT√ó^‚â° {n = n} (fst k)
 Rùï°rec.alooop (ùïçr n) = biAdjT√ó^‚â° {n = n}
 Rùï°rec.acomp (ùïçr n) = biAdjT√ó^‚â°-comp
 Rùï°rec.ainvol (ùïçr n) k = adjT√ó^‚â°-invol n (fst k)
 Rùï°rec.acomm (ùïçr n) = biAdjT√ó^‚â°-comm
 Rùï°rec.abraid (ùïçr n) = adjT√ó^‚â°-braid

 ùïç : ‚àÄ n ‚Üí ‚Ñôrm {false} n ‚Üí Type ‚Ñì
 ùïç n = Rùï°rec.f (ùïçr n) 

 isOfHLevelùïçr : ‚àÄ n m ‚Üí isOfHLevel m A ‚Üí
                   Rùï°elimProp {n = n} {false}
                         (Œª ùï° ‚Üí isOfHLevel m (ùïç n ùï°))
 Rùï°elimProp.isPropA (isOfHLevelùïçr n m x) _ = isPropIsOfHLevel m
 Rùï°elimProp.abase (isOfHLevelùïçr n m x) = isOfHLevel√ó^ n m x

 module _ (isSetA : isSet A) where

  ùïç‚ÇÇ : ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí hSet ‚Ñì
  ùïç‚ÇÇ = trunc‚Ñô isGroupoidHSet
        Œª n ùï° ‚Üí ùïç n ùï° , Rùï°elimProp.f (isOfHLevelùïçr n 2 isSetA) ùï°



  -- concatùïß‚ÇÇ : ‚àÄ n m ‚Üí {!ùïç‚ÇÇ n ‚Üí ùïç‚ÇÇ n ‚Üí ? !}
  -- concatùïß‚ÇÇ = {!!}


ùîΩinSnd : ‚àÄ n ùï° ‚Üí ‚ü® ùïç‚ÇÇ Bool isSetBool n ùï° ‚ü© ‚Üí hProp ‚Ñì-zero
ùîΩinSnd n = Rùï°elimSet'.f {n = n} w
 where
 w : Rùï°elimSet' (Œª z ‚Üí ‚ü® ùïç‚ÇÇ Bool isSetBool n z ‚ü© ‚Üí hProp ‚Ñì-zero)
 Rùï°elimSet'.isSetA w _ = isSetŒ† Œª _ ‚Üí isSetHProp
 Rùï°elimSet'.abase w = Fin√óSnd n
 fst (Rùï°elimSet'.aloop w (k , k<) i v) = F√óadjTP {n = n} k i v
 snd (Rùï°elimSet'.aloop w (k , k<) i v) =
   isProp‚ÜíPathP 
     (Œª i ‚Üí isPropŒ† Œª v ‚Üí isPropIsProp {A = (F√óadjTP {n = n} k i v)} )
      (snd ‚àò Fin√óSnd n) (snd ‚àò Fin√óSnd n) i v

-- ùîΩinSnd : ‚àÄ n ùï° ‚Üí ‚ü® ùïç‚ÇÇ Bool isSetBool n ùï° ‚ü© ‚Üí hProp ‚Ñì-zero
-- ùîΩinSnd n ùï°base = Fin√óSnd n
-- ùîΩinSnd n = {!ùîΩinSnd* n!}

hùîΩin : ‚àÄ n ùï° ‚Üí hSet ‚Ñì-zero
hùîΩin n ùï° = _ , isSetŒ£ (snd (ùïç‚ÇÇ Bool isSetBool n ùï°))
                       (isProp‚ÜíisSet ‚àò snd ‚àò ùîΩinSnd n ùï°)

ùîΩin : ‚àÄ n ùï° ‚Üí Type
ùîΩin n = fst ‚àò hùîΩin n

Rsuc‚Ñôrm : ‚àÄ n {b} ‚Üí Rùï°rec {n = n} (‚Ñôrm {b} (suc n))
Rùï°rec.abase (Rsuc‚Ñôrm n) = ùï°base
Rùï°rec.aloop (Rsuc‚Ñôrm n) k = ùï°loop (suc (fst k) , (snd k))
Rùï°rec.alooop (Rsuc‚Ñôrm n) k l =
  ùï°looop _ _
Rùï°rec.acomp (Rsuc‚Ñôrm n) k l =
  ùï°comp _ _
Rùï°rec.ainvol (Rsuc‚Ñôrm n) k =
  ùï°invol _
Rùï°rec.acomm (Rsuc‚Ñôrm n) k l x =
  ùï°comm _ _ (suc-commT (fst k) (fst l) x)
Rùï°rec.abraid (Rsuc‚Ñôrm n) k k< =
  ùï°braid _ _

suc‚Ñôrm : ‚àÄ {b} n ‚Üí ‚Ñôrm {b} n ‚Üí ‚Ñôrm {b} (suc n)
suc‚Ñôrm {b} n = Rùï°rec.f {n = n} (Rsuc‚Ñôrm n) {squashA = w b}
 where
  w : ‚àÄ b ‚Üí if b then isGroupoid (‚Ñôrm {b} (suc n)) else Unit*
  w false = tt*
  w true = ùï°squash _


‚Ñôrm+ : ‚àÄ {b} n m ‚Üí ‚Ñôrm {b} m ‚Üí ‚Ñôrm {b} (n + m)
‚Ñôrm+ zero m x = x
‚Ñôrm+ (suc n) m x = suc‚Ñôrm (n + m) (‚Ñôrm+ n m x)

Rsuc‚Ñôrm' : ‚àÄ n {b} ‚Üí Rùï°rec {n = n} (‚Ñôrm {b} (suc n))
Rùï°rec.abase (Rsuc‚Ñôrm' n) = ùï°base
Rùï°rec.aloop (Rsuc‚Ñôrm' n) k = ùï°loop ((fst k) , (<-weaken {n = n} (snd k)))
Rùï°rec.alooop (Rsuc‚Ñôrm' n) k l =
  ùï°looop _ _
Rùï°rec.acomp (Rsuc‚Ñôrm' n) k l =
  ùï°comp _ _
Rùï°rec.ainvol (Rsuc‚Ñôrm' n) k =
  ùï°invol _
Rùï°rec.acomm (Rsuc‚Ñôrm' n) k l =
  ùï°comm _ _
Rùï°rec.abraid (Rsuc‚Ñôrm' n) k k< =
  ùï°braid _ _

suc‚Ñôrm' : ‚àÄ {b} n ‚Üí ‚Ñôrm {b} n ‚Üí ‚Ñôrm {b} (suc n)
suc‚Ñôrm' {b} n = Rùï°rec.f {n = n} (Rsuc‚Ñôrm' n) {squashA = w b}
 where
  w : ‚àÄ b ‚Üí if b then isGroupoid (‚Ñôrm {b} (suc n)) else Unit*
  w false = tt*
  w true = ùï°squash _



‚Ñôrm+* : ‚àÄ {b} n m ‚Üí ‚Ñôrm {b} m ‚Üí ‚Ñôrm {b} (n + m)
‚Ñôrm+* zero m x = x
‚Ñôrm+* (suc n) m x = suc‚Ñôrm' (n + m) (‚Ñôrm+* n m x)


‚Ñôrm+' : ‚àÄ {b} n m ‚Üí ‚Ñôrm {b} n ‚Üí ‚Ñôrm {b} (n + m)
‚Ñôrm+' n zero = subst ‚Ñôrm (sym (+-zero n))
‚Ñôrm+' n (suc m) x = subst ‚Ñôrm (sym (+-suc _ _)) (‚Ñôrm+' (suc n) m (suc‚Ñôrm' n x))


‚äï : ‚àÄ {n m} ‚Üí (‚Ñôrm {true} n ‚äé  ‚Ñôrm {true} m) ‚Üí ‚Ñôrm {true} (n + m)
‚äï (inl x) = ‚Ñôrm+' _ _ x
‚äï (inr x) = ‚Ñôrm+ _ _ x


-- record Rùï°elimCons {n} {trunc} (A : ‚Ñôrm {trunc} (suc n) ‚Üí Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    isGroupoidA : Bool‚ÜíType trunc ‚Üí ‚àÄ x ‚Üí isGroupoid (A x)
--    abase : A ùï°base
--    acons : ‚àÄ n ‚Üí {!A !}
--    -- aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--    --   PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
--    -- alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--    --   PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
--    -- acomp : ‚àÄ k l ‚Üí
--    --   SquareP (Œª j i ‚Üí A (ùï°comp k l j i))
--    --     (aloop k)
--    --     (aloop l)
--    --     (alooop k l)
--    --     refl
--    -- ainvol : ‚àÄ k ‚Üí
--    --   SquareP (Œª i j ‚Üí A (ùï°invol k i j))
--    --     (aloop k)
--    --     (symP (aloop k))
--    --     refl refl
--    -- acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ‚àÄ x ‚Üí     
--    --     SquareP (Œª i j ‚Üí A (ùï°comm k l x i j))
--    --       refl
--    --       refl
--    --     (alooop k l)
--    --     (alooop l k)
--    -- abraid : ‚àÄ k k<  ‚Üí        
--    --       SquareP (Œª i j ‚Üí A (ùï°braid k k< i j))
--    --       (aloop (suc k , k<))
--    --       (aloop (k , <-weaken {n = n} k<))
--    --       (alooop (k , <-weaken {n = n} k<) (suc k , k<))
--    --       (alooop (k , <-weaken {n = n} k<) (suc k , k<))



ùïó0 : ‚àÄ n (ùï° : ‚Ñôrm n) ‚Üí ùîΩin (suc n) (suc‚Ñôrm n ùï°)
ùïó0 n = Rùï°elimSet'.f (w n)
 where
 open Rùï°elimSet'
 w : ‚àÄ n ‚Üí Rùï°elimSet' (ùîΩin (suc n) ‚àò suc‚Ñôrm n)
 isSetA (w n) ùï° = snd (hùîΩin (suc n) (suc‚Ñôrm n ùï°)) 
 abase (w n) = Fin√ó0
 aloop (w n) (k , k<) = 
  Œ£PathPProp (snd ‚àò (Fin√óSnd (1 + n)))
    Œª i ‚Üí true , glue-repeat-false n k i



-- ùïósuc : ‚àÄ n (ùï° : ‚Ñôrm n) ‚Üí ùîΩin n ùï° ‚Üí ùîΩin (suc n) (suc‚Ñôrm n ùï°)
-- ùïósuc n = Rùï°elimSet'.f (w n)
--  where
--  open Rùï°elimSet'
--  w : ‚àÄ n ‚Üí Rùï°elimSet' (Œª ùï° ‚Üí ùîΩin n ùï° ‚Üí ùîΩin (suc n) (suc‚Ñôrm n ùï°))
--  isSetA (w n) ùï° = isSet‚Üí (snd (hùîΩin (suc n) (suc‚Ñôrm n ùï°)))
--  abase (w n) = sucFin√ó
--  aloop (w n) k i (x , y) = (false , x) , y


-- ùïóglue01 : ‚àÄ n ‚Üí
--        PathP (Œª i ‚Üí (Fin√ó (suc (suc n))) ‚Üí
--       ùîΩin (suc (suc n)) (ùï°loop (zero , _) i))
--         (idfun _)
--         (F√óadjT {n = 2 + n} zero )
-- ùïóglue01 n i = fst (glue-F√óadjT‚âÉ (suc (suc n)) zero i)

-- ùïóglue210 : ‚àÄ n ‚Üí
--        PathP (Œª i ‚Üí (Fin√ó (suc (suc (suc n)))) ‚Üí
--       ùîΩin (suc (suc (suc n))) (ùï°looop (suc zero , _) (zero , _) i))
--         (F√óadjT {n = 3 + n} (suc zero))
--         (F√óadjT {n = 3 + n} zero)
-- ùïóglue210 n =
--    funExt Œª (xs , ys) ‚Üí
--     Œ£PathPProp (snd ‚àò Fin√óSnd (3 + n))
--      (funExt‚Åª (glueBiAdjT√ó< n) xs)

-- ùïóglue210sym : ‚àÄ n ‚Üí
--        PathP (Œª i ‚Üí (Fin√ó (suc (suc (suc n)))) ‚Üí
--       ùîΩin (suc (suc (suc n))) (ùï°looop (zero , _) (suc zero , _)  i))
        
--         (F√óadjT {n = 3 + n} zero)
--         (F√óadjT {n = 3 + n} (suc zero))
-- ùïóglue210sym n =
--    funExt Œª (xs , ys) ‚Üí
--     Œ£PathPProp (snd ‚àò Fin√óSnd (3 + n))
--       (toPathP (Œ£PathP (refl ,
--         Œ£PathP (refl ,
--         Œ£PathP (refl , transportRefl _)))))
--      -- (funExt‚Åª (glueBiAdjT√ó< n) ?)
--      -- (funExt‚Åª (glueBiAdjT√ó< n) xs)


-- ùïóglueBi< : ‚àÄ n k ‚Üí
--        PathP (Œª i ‚Üí 
--          ùîΩin (suc (suc n)) (ùï°loop (suc (suc (fst k)) , snd k) i)
--            ‚Üí
--       ùîΩin (suc (suc n)) (ùï°looop (suc (suc (fst k)) , snd k) (zero , _) i))
--         (idfun _)
--         (F√óadjT {n = 2 + n} zero)
-- fst (ùïóglueBi< n k i (xs , ys)) = glueBiAdjT√ó<SS n k i xs
-- snd (ùïóglueBi< n k i (xs , ys)) =
--   isProp‚ÜíPathP
--     (Œª i ‚Üí isPropŒ† Œª ((xs , ys) : ùîΩin (suc (suc n)) (ùï°loop (suc (suc (fst k)) , snd k) i)) ‚Üí snd
--       (ùîΩinSnd (suc (suc n))
--        (ùï°looop (suc (suc (fst k)) , snd k) (zero , tt) i)
--        (glueBiAdjT√ó<SS n k i xs)))
--      snd (snd ‚àò F√óadjT {n = 2 + n} zero) i (xs , ys)

-- ùïóglueBi<sym : ‚àÄ n k ‚Üí
--        PathP (Œª i ‚Üí 
--          ùîΩin (suc (suc n)) (ùï°loop (suc (suc (fst k)) , snd k) (~ i))
--            ‚Üí
--       ùîΩin (suc (suc n)) (ùï°looop  (zero , _) (suc (suc (fst k)) , snd k) i))

--         (F√óadjT {n = 2 + n} zero)
--          (idfun _)
-- fst (ùïóglueBi<sym n k i (xs , ys)) = glueBiAdjT√ó<SS n k (~ i) xs
-- snd (ùïóglueBi<sym n k i (xs , ys)) = 
--   isProp‚ÜíPathP
--     (Œª i ‚Üí isPropŒ† Œª ((xs , ys) : ùîΩin (suc (suc n)) (ùï°loop (suc (suc (fst k)) , snd k) (~ i))) ‚Üí snd
--       (ùîΩinSnd (suc (suc n))
--        (ùï°looop (zero , tt) (suc (suc (fst k)) , snd k) i)
--        (glueBiAdjT√ó<SS n k (~ i) xs)))
--       (snd ‚àò F√óadjT {n = 2 + n} zero) snd i (xs , ys)


-- ùïóglue01-involSS : ‚àÄ n ‚Üí
--    SquareP (Œª i j ‚Üí Fin√ó (n)
--      ‚Üí ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j))
--      (Œª i ‚Üí ùïóglue01 n i ‚àò' sucFin√ó ‚àò' sucFin√ó)
--      (Œª i ‚Üí ùïóglue01 n (~ i) ‚àò' sucFin√ó ‚àò' sucFin√ó)
--      (Œª _ ‚Üí sucFin√ó ‚àò' sucFin√ó)
--      Œª _ ‚Üí sucFin√ó ‚àò' sucFin√ó
-- ùïóglue01-involSS n =
--   isSet‚ÜíSquareP'
--    (isSet‚Üí (isSetFin√ó (2 + n)))
--    _ _ _ _

-- ùïóglue01-invol01 : ‚àÄ n ‚Üí
--    SquareP (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j))
--      (Œª j ‚Üí ùïóglue01 n j Fin√ó0)
--      (Œª j ‚Üí (ùïóglue01 n (~ j) (sucFin√ó Fin√ó0)))
--      refl
--      refl
-- ùïóglue01-invol01 n = isSet‚ÜíSquareP' (isSetFin√ó (2 + n)) _ _ _ _


-- ùïóglue01-invol10 : ‚àÄ n ‚Üí
--    SquareP (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j))
--      (Œª j ‚Üí ùïóglue01 n j (sucFin√ó Fin√ó0))
--      (Œª j ‚Üí (ùïóglue01 n (~ j) (Fin√ó0)))
--      refl
--      refl
-- ùïóglue01-invol10 n = isSet‚ÜíSquareP' (isSetFin√ó (2 + n)) _ _ _ _

-- ùïóglue01invol : ‚àÄ n ‚Üí SquareP
--     (Œª i j ‚Üí (ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j)
--        √ó ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j))
--        √ó (Fin√ó n ‚Üí ùîΩin (suc (suc n)) (ùï°invol (zero , _) i j)))
--             (Œª j ‚Üí (ùïóglue01 n j (Fin√ó0) , ùïóglue01 n j (sucFin√ó Fin√ó0)) ,
--              ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó)
--             (Œª j ‚Üí (ùïóglue01 n (~ j) (sucFin√ó Fin√ó0) , ùïóglue01 n (~ j) (Fin√ó0))
--                    , ùïóglue01 n (~ j) ‚àò' sucFin√ó ‚àò' sucFin√ó)
--                       refl
--                       refl
                      
-- ùïóglue01invol n = (congSqP‚ÇÇ (Œª _ _ ‚Üí _,_)
--          (congSqP‚ÇÇ (Œª _ _ ‚Üí _,_)
--            (ùïóglue01-invol01 n)
--            (ùïóglue01-invol10 n))
--             (ùïóglue01-involSS n))

-- ùïóglue01comp< : ‚àÄ n ‚Üí
--  SquareP
--    (Œª i j ‚Üí
--      ((ùîΩin (suc (suc (suc n))) ((ùï°comp (1 , _) (zero , _) i j))) √ó^ 3)
--       √ó (Fin√ó (n) ‚Üí
--     ùîΩin (suc (suc (suc n))) ((ùï°comp (1 , _) (zero , _) i j))))
--    (Œª j ‚Üí (ùïó0 (suc (suc n)) (ùï°loop (zero , _) j)
--         , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (sucFin√ó Fin√ó0))
--         , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (Fin√ó0)) , _) ,
--      ùïósuc (suc (suc n)) (ùï°loop (zero , _) j)
--        ‚àò' ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó)
--    (Œª j ‚Üí (ùïóglue01 (suc n) j (sucFin√ó Fin√ó0) ,
--            ùïóglue01 (suc n) j (Fin√ó0) ,
--            ùïóglue01 (suc n) j (sucFin√ó (sucFin√ó Fin√ó0)) , _) ,
--      ùïóglue01 (suc n) j ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò'  sucFin√ó)
--    (Œª i ‚Üí (ùïóglue210 n i Fin√ó0 ,
--           ùïóglue210 n i (sucFin√ó Fin√ó0) ,
--           ùïóglue210 n i (sucFin√ó (sucFin√ó Fin√ó0)) , _) ,
--      ùïóglue210 n i ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó)
--    refl
-- ùïóglue01comp< n =
--  isSet‚ÜíSquareP'
--   (isSet√ó (isOfHLevel√ó^ 3 2 (isSetFin√ó (3 + n)))
--           (isSet‚Üí (isSetFin√ó (3 + n)))) _ _ _ _


-- ùïóglue01comp<sym : ‚àÄ n ‚Üí
--  SquareP
--    (Œª i j ‚Üí
--      ((ùîΩin (suc (suc (suc n))) ((ùï°comp (zero , _) (1 , _) i j))) √ó^ 3)
--       √ó (Fin√ó (n) ‚Üí
--     ùîΩin (suc (suc (suc n))) ((ùï°comp  (zero , _) (1 , _) i j))))
   
--    (Œª j ‚Üí (ùïóglue01 (suc n) j (sucFin√ó Fin√ó0) ,
--            ùïóglue01 (suc n) j (Fin√ó0) ,
--            ùïóglue01 (suc n) j (sucFin√ó (sucFin√ó Fin√ó0)) , _) ,
--      ùïóglue01 (suc n) (j) ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò'  sucFin√ó)
--    (Œª j ‚Üí (ùïó0 (suc (suc n)) (ùï°loop (zero , _) j)
--         , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (sucFin√ó Fin√ó0))
--         , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (Fin√ó0)) , _) ,
      
--      ùïósuc (suc (suc n)) (ùï°loop (zero , _) j)
--        ‚àò' ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó
--        )

--    (Œª i ‚Üí (ùïóglue210sym n i Fin√ó0 ,
--           ùïóglue210sym n i (sucFin√ó Fin√ó0) ,
--           ùïóglue210sym n i (sucFin√ó (sucFin√ó Fin√ó0)) , _) ,
--            ùïóglue210sym n i ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó)
--    refl
-- ùïóglue01comp<sym n = 
--  isSet‚ÜíSquareP'
--   (isSet√ó (isOfHLevel√ó^ 3 2 (isSetFin√ó (3 + n)))
--           (isSet‚Üí (isSetFin√ó (3 + n)))) _ _ _ _




-- -- (a : ùîΩin (suc n) (ùï°invol (l , l<) j (~ i))) ‚Üí
-- --       ùîΩin (suc (suc (suc n)))
-- --       (ùï°comm (zero , k<) (suc (suc l) , l<) x i j)

-- ùïóglue01commS : ‚àÄ n l l<
--  ‚Üí SquareP (Œª i j ‚Üí
--     let Z = ùîΩin (suc (suc (n)))
--                (ùï°comm (zero , tt) (suc (suc l) , l<) _ i j)
--     in (Z √ó Z) √ó
--      (ùîΩin (n) (ùï°invol (l , l<) j (~ i)) ‚Üí Z))
--       refl
--       refl
--       (Œª i ‚Üí (ùïóglueBi<sym (n) (l , l<) i
--            (ùïósuc (suc (n)) (ùï°loop (suc l , l<) (~ i))
--               (ùïó0 (n) (ùï°loop (l , l<) (~ i))))
--         , ùïóglueBi<sym (n) (l , l<) i
--            (ùïó0 (1 + n) (ùï°loop (suc l , l<) (~ i))))
--         ,
--          ùïóglueBi<sym (n) (l , l<) i
--          ‚àò' ùïósuc (suc (n)) (ùï°loop (suc l , l<) (~ i))
--          ‚àò' ùïósuc (n) (ùï°loop (l , l<) (~ i)))
--       Œª i ‚Üí (
--         (ùïóglueBi< (n) (l , l<) i (ùïó0 (1 + n) (ùï°loop (suc l , l<) i)))
--          ,
--          ùïóglueBi< (n) (l , l<) i
--            (ùïósuc (suc (n)) (ùï°loop (suc l , l<) (i))
--               (ùïó0 (n) (ùï°loop (l , l<) (i))))) , (ùïóglueBi< (n) (l , l<) i ‚àò'
--          ùïósuc (suc (n)) (ùï°loop (suc l , l<) i)
--          ‚àò' ùïósuc (n) (ùï°loop (l , l<) i))
-- ùïóglue01commS n l l< =
--     isSet‚ÜíSquareP'
--   (isSet√ó (isSet√ó (isSetFin√ó (2 + n)) (isSetFin√ó (2 + n)) )
--           (isSet‚Üí (isSetFin√ó (2 + n)))) _ _ _ _

-- ùïóglueBraid : ‚àÄ n ‚Üí SquareP
--   (Œª i j ‚Üí
--      let Z = ùîΩin (suc (suc (suc n))) (ùï°braid zero tt i j)
--      in (Z √ó Z √ó Z) √ó (Fin√ó (n) ‚Üí Z))
--     (Œª j ‚Üí (ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j Fin√ó0)
--          , (ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) (ùïóglue01 n j (sucFin√ó Fin√ó0))
--           , ùïó0 (2 + n) (ùï°loop (zero , _) j) ))
--       , ùïósuc (suc (suc n)) (ùï°loop (zero , _) j) ‚àò' ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó )
--     (Œª j ‚Üí (ùïóglue01 (suc n) j Fin√ó0 
--         , ùïóglue01 (suc n) j (sucFin√ó Fin√ó0)
--          , ùïóglue01 (suc n) j  (sucFin√ó (sucFin√ó Fin√ó0)) )
--       , ùïóglue01 (suc n) j ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó )
--     (Œª j ‚Üí ((ùïóglue210sym n j Fin√ó0 
--         , ùïóglue210sym n j (sucFin√ó (sucFin√ó Fin√ó0))
--          , ùïóglue210sym n j  (sucFin√ó Fin√ó0) ))
--            , ùïóglue210sym n j ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó)
--     Œª j ‚Üí ((ùïóglue210sym n j ((sucFin√ó (sucFin√ó Fin√ó0)))
--         , ùïóglue210sym n j Fin√ó0
--          , ùïóglue210sym n j  (sucFin√ó Fin√ó0) )) ,
--            ùïóglue210sym n j ‚àò' sucFin√ó ‚àò' sucFin√ó ‚àò' sucFin√ó
-- ùïóglueBraid n =
--   isSet‚ÜíSquareP'
--   (isSet√ó (isSet√ó (isSetFin√ó (3 + n))
--       ((isSet√ó (isSetFin√ó (3 + n)) (isSetFin√ó (3 + n)) )) )
--           (isSet‚Üí (isSetFin√ó (3 + n)))) _ _ _ _



-- -- abstract
-- Œ£-swap-012-‚â°-comp-ua-glue* : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí {B : Type ‚Ñì}  ‚Üí
--       SquareP (Œª i j ‚Üí A √ó A √ó A √ó B
--         ‚Üí Œ£-swap-012-‚â°-comp-ua {A = A} {B} (Œª _ ‚Üí A √ó A √ó A √ó B) i j)
--          (((Œª i (a , x) ‚Üí
--           a , glue
--             (Œª { (i = i0) ‚Üí _
--                ; (i = i1) ‚Üí _
--                })
--                x)))
--          ((Œª i x ‚Üí
--           glue (Œª { (i = i0) ‚Üí _ ; (i = i1) ‚Üí _ }) x))
--         (Œª i x ‚Üí
--           glue
--             (Œª { (i = i0) ‚Üí _
--                ; (i = i1) ‚Üí _
--                })
--                x)
--         Œª _ x ‚Üí x

-- Œ£-swap-012-‚â°-comp-ua-glue* i j x =
--   glue
--      (Œª { (i = i1)(j = i0) ‚Üí _
--         ; (i = i0) ‚Üí fst x ,
--            glue (Œª { (j = i0) ‚Üí _
--                    ; (j = i1) ‚Üí _
--                    }) (snd x)
--         ; (j = i1) ‚Üí _ })
--      x

-- isContrŒ£‚âÉ : (A : (Type ‚Ñì)) ‚Üí isContr (Œ£ (Type ‚Ñì) Œª T ‚Üí (A ‚âÉ T))
-- isContrŒ£‚âÉ A = isOfHLevelRespectEquiv 0
--   (Œ£-cong-equiv-snd Œª _ ‚Üí univalence)
--    (isContrSingl A)


-- module _ {‚Ñì} (A : Type ‚Ñì) where 

--  -- lookùïç : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí (ùïç Bool n ùï° ‚Üí A) ‚Üí ùïç A n ùï°

--  -- open Tab√ó‚âÉ {A = A}


--  tab√ó‚âÉ : ‚àÄ n ‚Üí (Fin√ó n ‚Üí A) ‚âÉ (A √ó^ n)
--  tab√ó‚âÉ zero = isoToEquiv Tab√ó.IsoFin√ó0‚ÜíAUnit*
--  tab√ó‚âÉ (suc n) =
--    preCompEquiv (Maybe‚àòFin√ó‚âÉFin√ó‚àòsuc n) ‚àô‚Çë
--        ‚âÉMaybeFunProd ‚àô‚Çë ‚âÉ-√ó (idEquiv _) (tab√ó‚âÉ n)

--  tab√ó : ‚àÄ n ‚Üí (Fin√ó n ‚Üí A) ‚Üí (A √ó^ n)
--  tab√ó = fst ‚àò tab√ó‚âÉ


--  consùïç : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí A ‚Üí ùïç A n ùï°
--      ‚Üí ùïç A (suc n) (suc‚Ñôrm n ùï°)
--  consùïç n ùï°base = _,_
--  consùïç n (ùï°loop x i) = _,_
--  consùïç n (ùï°looop k l i) = _,_
--  consùïç n (ùï°comp k l i i‚ÇÅ) = _,_
--  consùïç n (ùï°invol k i i‚ÇÅ) = _,_
--  consùïç n (ùï°comm (k , k<) (suc l , l<) x i i‚ÇÅ) = _,_
--  consùïç n (ùï°braid k k< i i‚ÇÅ) = _,_
 
--  tabùïç : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí (ùîΩin n (toTrunc‚Ñô ùï°) ‚Üí A) ‚Üí ùïç A n ùï°
--  tabùïç n = Rùï°elim.f (w n) 
--   where
--   open Rùï°elim

--   w : ‚àÄ n ‚Üí Rùï°elim {n = n} Œª ùï° ‚Üí (ùîΩin n (toTrunc‚Ñô ùï°) ‚Üí A) ‚Üí ùïç A n ùï°
--   isGroupoidA (w n) ()
--   abase (w n) = tab√ó n
  
--   aloop (w (suc n)) (suc k , k<) i f =
--     f (ùïó0 n (ùï°loop (k , k<) i))
--       , aloop (w n) (k , k<) i (f ‚àò ùïósuc n (ùï°loop (k , k<) i))
--   aloop (w (suc (suc n))) (zero , tt) i f =
--     glueAdjT√ó (2 + n) zero i
--      (tab√ó (2 + n) (f ‚àò ùïóglue01 n i))

--   alooop (w (suc n)) (suc k , k<) (suc l , l<) i f =
--     f (ùïó0 n (ùï°looop (k , k<) (l , l<) i))
--     , alooop (w n) (k , k<) (l , l<) i
--        (f ‚àò ùïósuc n (ùï°looop (k , k<) (l , l<) i))
--   alooop (w (suc (suc n))) (zero , tt) (zero , tt) = 
--     congP {B = Œª i _ ‚Üí _ ‚Üí
--              ùïç A (suc (suc n)) (ùï°looop (zero , tt) (zero , tt) i)}
--       (Œª _ g f ‚Üí tab√ó (2 + n) (f ‚àò' g))
--       {idfun _} {idfun _}
--       (funExt Œª x ‚Üí Œ£PathPProp (snd ‚àò Fin√óSnd (suc (suc n))) refl)
--   alooop (w (suc (suc n))) (zero , tt) (suc (suc k) , k<) i f =
--     glueBiAdjT√ó<SS {A = A} n (k , k<) (~ i)
--      (aloop (w (suc (suc n))) (suc (suc k) , k<) (~ i)
--         (f ‚àò' ùïóglueBi<sym n (k , k<) i))

--   alooop (w (suc (suc (suc n)))) (zero , tt) (suc zero , tt) i f =  
--     glueBiAdjT√ó< n (~ i) (tab√ó (3 + n) (f ‚àò ùïóglue210sym n i))
  
--   alooop (w (suc (suc n))) (suc (suc k) , k<) (zero , tt) i f =
--    glueBiAdjT√ó<SS {A = A} n (k , k<) i
--      (aloop (w (suc (suc n))) (suc (suc k) , k<) i
--         (f ‚àò' ùïóglueBi< n (k , k<) i))
--   alooop (w (suc (suc (suc n)))) (suc zero , tt) (zero , tt) i f =
--     glueBiAdjT√ó< n i (tab√ó (3 + n) (f ‚àò ùïóglue210 n i))

--   acomp (w (suc n)) (suc k , k<) (suc l , l<) i j f =
--     f (ùïó0 n (ùï°comp (k , k<) (l , l<) i j))
--     , acomp (w n) (k , k<) (l , l<) i j
--        (f ‚àò ùïósuc n (ùï°comp (k , k<) (l , l<) i j))
--   acomp (w (suc (suc n))) (zero , tt) (zero , tt) i j f =
--    aloop (w (suc (suc n))) (zero , tt) j (f ‚àò'     
--      isSet‚ÜíSquareP' {A = Œª i j ‚Üí
--        ùîΩin (suc (suc n)) (ùï°loop (zero , tt) j) ‚Üí
--       ùîΩin (suc (suc n)) (ùï°comp (zero , tt) (zero , tt) i j)}
--    (isSet‚Üí (isSetFin√ó (2 + n)))
--     (Œª _ x ‚Üí x) (Œª _ x ‚Üí x)
--     (funExt Œª x ‚Üí Œ£PathPProp (snd ‚àò Fin√óSnd (suc (suc n))) refl)
--       refl i j)
  
  
--   acomp (w (suc (suc n))) (zero , tt) (suc (suc l) , l<) i j f =
--     glue-biAdjT√ó^‚â°-comp<SS {n = n} l l< tt (~ i) j
--        (f (isSet‚ÜíSquareP'
--            {A =
--              (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°comp (zero , tt) (suc (suc l) , l<) i j))}
--            (isSetFin√ó (2 + n))
--            (Œª j ‚Üí ùïóglue01 n j (sucFin√ó Fin√ó0))
--            (Œª j ‚Üí ùïó0 (suc n) (ùï°loop ((suc l) , l<) j))
--            (Œª i ‚Üí ùïóglueBi<sym n (l , l<) i (ùïó0 (suc n) (ùï°loop ((suc l) , l<) (~ i))))
--            (Œª _ ‚Üí Fin√ó0) i j)
--          , f (isSet‚ÜíSquareP'
--            {A =
--              (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°comp (zero , tt) (suc (suc l) , l<) i j))}
--            (isSetFin√ó (2 + n))

--            (Œª j ‚Üí ùïóglue01 n j (Fin√ó0))
--            (Œª j ‚Üí ùïósuc (suc n) (ùï°loop (suc l , l<) (j))
--                   (ùïó0 (n) (ùï°loop ((l) , l<) (j))))
--            (Œª i ‚Üí ùïóglueBi<sym n (l , l<) i
--                      (ùïósuc (suc n) (ùï°loop (suc l , l<) (~ i))
--                         (ùïó0 n (ùï°loop (l , l<) (~ i)))))
--            (Œª _ ‚Üí sucFin√ó Fin√ó0) i j)
--          , aloop (w n) (l , l<) ((~ i) ‚à® j)
--         (f ‚àò'
--           isSet‚ÜíSquareP'
--             {A = Œª i j ‚Üí
--               ùîΩin n (ùï°loop (l , l<) ((~ i) ‚à® j)) ‚Üí
--       ùîΩin (suc (suc n)) (ùï°comp (zero , tt) (suc (suc l) , l<) i j)}
--             (isSet‚Üí (isSetFin√ó (2 + n)))
--             (Œª j ‚Üí ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó)
--             (Œª j ‚Üí ùïósuc (suc n) (ùï°loop (suc l , l<) j)
--                 ‚àò' ùïósuc n (ùï°loop (l , l<) j))
--             (Œª i ‚Üí ùïóglueBi<sym n (l , l<) (i) ‚àò'
--                 ùïósuc (suc n) (ùï°loop (suc l , l<) (~ i))
--                 ‚àò' ùïósuc n (ùï°loop (l , l<) (~ i)))
--             (Œª _ ‚Üí sucFin√ó ‚àò' sucFin√ó)

--             i j)
--             )

--   acomp (w (suc (suc (suc n)))) (zero , tt) (suc zero , l<) i j f =
--     let ((f0 , f1 , f2 , _) , fSSS) = ùïóglue01comp<sym n i j
--     in Œ£-swap-012-‚â°-comp-ua-glue* {A = A} {A √ó^ n} (~ i) j 
--           (f f0 , f f1 , f f2 , tab√ó n (f ‚àò' fSSS))


--   acomp (w (suc (suc n))) (suc (suc k) , k<) (zero , tt) i j f =
--    glue-biAdjT√ó^‚â°-comp<SS {n = n} k k< tt i j
--       (f (isSet‚ÜíSquareP'
--            {A =
--              (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°comp (suc (suc k) , k<) (zero , tt) i j))}
--            (isSetFin√ó (2 + n))
--            (Œª j ‚Üí ùïó0 (suc n) (ùï°loop ((suc k) , k<) j))
--            (Œª j ‚Üí ùïóglue01 n j (sucFin√ó Fin√ó0))
--            (Œª i ‚Üí ùïóglueBi< n (k , k<) i (ùïó0 (suc n) (ùï°loop ((suc k) , k<) i)))
--            (Œª _ ‚Üí Fin√ó0) i j) 
--      , f (isSet‚ÜíSquareP'
--            {A =
--              (Œª i j ‚Üí ùîΩin (suc (suc n)) (ùï°comp (suc (suc k) , k<) (zero , tt) i j))}
--            (isSetFin√ó (2 + n))
--            (Œª j ‚Üí ùïósuc (suc n) (ùï°loop (suc k , k<) j)
--                   (ùïó0 (n) (ùï°loop ((k) , k<) j)))
--            (Œª j ‚Üí ùïóglue01 n j (Fin√ó0))
--            (Œª i ‚Üí ùïóglueBi< n (k , k<) i
--                      (ùïósuc (suc n) (ùï°loop (suc k , k<) i)
--                         (ùïó0 n (ùï°loop (k , k<) i))))
--            (Œª _ ‚Üí sucFin√ó Fin√ó0) i j) 
--      , aloop (w n) (k , k<) (i ‚à® j)
--         (f ‚àò'
--           isSet‚ÜíSquareP'
--             {A = Œª i j ‚Üí
--               ùîΩin n (ùï°loop (k , k<) (i ‚à® j)) ‚Üí
--       ùîΩin (suc (suc n)) (ùï°comp (suc (suc k) , k<) (zero , tt) i j)}
--             (isSet‚Üí (isSetFin√ó (2 + n)))
--             (Œª j ‚Üí ùïósuc (suc n) (ùï°loop (suc k , k<) j)
--                 ‚àò' ùïósuc n (ùï°loop (k , k<) j))
--             (Œª j ‚Üí ùïóglue01 n j ‚àò' sucFin√ó ‚àò' sucFin√ó)
--             (Œª i ‚Üí ùïóglueBi< n (k , k<) i ‚àò'
--                 ùïósuc (suc n) (ùï°loop (suc k , k<) i)
--                 ‚àò' ùïósuc n (ùï°loop (k , k<) i))
--             (Œª _ ‚Üí sucFin√ó ‚àò' sucFin√ó) i j))

--   acomp (w (suc (suc (suc n)))) (suc zero , tt) (zero , tt) i j f =
--     let ((f0 , f1 , f2 , _) , fSSS) = ùïóglue01comp< n i j
--     in Œ£-swap-012-‚â°-comp-ua-glue* {A = A} {A √ó^ n} i j
--           (f f0 , f f1 , f f2 , tab√ó n (f ‚àò' fSSS))
  
  
--   ainvol (w (suc n)) (suc k , k<) i j f =
--     f (ùïó0 n (ùï°invol (k , k<) i j))
--     , ainvol (w n) (k , k<) i j
--         (f ‚àò ùïósuc n (ùï°invol (k , k<) i j))
--   ainvol (w (suc (suc n))) (zero , tt) i j f =    
--    let ((f0 , f1) , fSS) = ùïóglue01invol n i j
--    in Œ£-swap-01-‚â°-invol-ua-glue {A = A} {B = A √ó^ n} i j
--          (f f0 , f f1 , tab√ó n (f ‚àò' fSS))

--   acomm (w (suc n)) (suc k , k<) (suc (suc (suc l)) , l<) x i j f =    
--     f (ùïó0 n (ùï°comm (k , k<) (suc (suc l) , l<) x i j))
--     , acomm (w n) (k , k<) (suc (suc l) , l<) x i j
--        (f ‚àò ùïósuc n (ùï°comm (k , k<) (suc (suc l) , l<) x i j)) 
--   acomm (w (suc (suc n))) (zero , k<) (suc (suc l) , l<) x i j f =
--    let ((f0 , f1) , fSS) = ùïóglue01commS n l l< i j
--    in glue-biAdjT√ó^‚â°-comm {n = n} (l , l<)
--       i j
--       (f f0 , f f1 , ainvol (w n) (l , l<) j (~ i) (f ‚àò fSS))
   
--   abraid (w (suc n)) (suc k) k< i j f =
--       f (ùïó0 n (ùï°braid k k< i j))
--     , abraid (w n) k k< i j (f ‚àò  ùïósuc n (ùï°braid k  k< i j))
--   abraid (w (suc (suc (suc n)))) zero tt i j f =
--    let ((f0 , f1 , f2) , fSSS) = ùïóglueBraid n i j
--    in glue-adjT√ó^‚â°-braid {n = n} i j
--          (ua-gluePath (adjT√ó^‚âÉ 0 ‚àô‚Çë compEquiv (adjT√ó^‚âÉ 1) (adjT√ó^‚âÉ 0))
--            (Œª j ‚Üí f f2 , f f0 , f f1 , tab√ó n (f ‚àò' fSSS)) j)
           

--  isEquivTabùïç : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí (isEquiv (tabùïç n ùï°))
--  isEquivTabùïç n = Rùï°elimProp.f w
--   where
--   w : Rùï°elimProp (isEquiv ‚àò tabùïç n)
--   Rùï°elimProp.isPropA w _ = isPropIsEquiv _
--   Rùï°elimProp.abase w = snd (tab√ó‚âÉ n)

--  sùïç‚ÇÉ' : ‚àÄ n ‚Üí (ùï° : ‚Ñôrm {false} n) ‚Üí
--     Œ£ (Type ‚Ñì) Œª T ‚Üí ((ùîΩin n (toTrunc‚Ñô ùï°) ‚Üí A) ‚âÉ T)
--  sùïç‚ÇÉ' n ùï° = _ , (_ , isEquivTabùïç n ùï°)


--  sùïç‚ÇÉ : ‚àÄ n ‚Üí (ùï° : ‚Ñôrm {true} n) ‚Üí Œ£ (Type ‚Ñì) Œª T ‚Üí ((ùîΩin n ùï° ‚Üí A) ‚âÉ T)
--  sùïç‚ÇÉ =  trunc‚Ñô‚ÇÇ _ (Œª _ _ ‚Üí isOfHLevelPlus 3 (isContrŒ£‚âÉ _) )  sùïç‚ÇÉ'


--  ùïç‚ÇÉ : ‚àÄ n ‚Üí ‚Ñôrm {true} n ‚Üí Type ‚Ñì
--  ùïç‚ÇÉ n = fst ‚àò sùïç‚ÇÉ n

--  module _ (isGrpA : isGroupoid A) where

--   isGroupoidùïç‚ÇÉ : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí isGroupoid (ùïç‚ÇÉ n ùï°)
--   isGroupoidùïç‚ÇÉ n = Rùï°elimProp.f w
--    where
--    w : Rùï°elimProp _
--    Rùï°elimProp.isPropA w _ = isPropIsOfHLevel 3
--    Rùï°elimProp.abase w = isOfHLevel√ó^ n 3 isGrpA 


--   consùïç‚ÇÉ : ‚àÄ n ‚Üí ‚àÄ ùï° ‚Üí A ‚Üí ùïç‚ÇÉ n ùï°
--       ‚Üí ùïç‚ÇÉ (suc n) (suc‚Ñôrm n ùï°)
--   consùïç‚ÇÉ n = Rùï°elim.f w
--    where
--    w : Rùï°elim (Œª z ‚Üí A ‚Üí ùïç‚ÇÉ n z ‚Üí ùïç‚ÇÉ (suc n) (suc‚Ñôrm n z))
--    Rùï°elim.isGroupoidA w _ ùï° =
--      isGroupoidŒ†2 Œª _ _ ‚Üí  isGroupoidùïç‚ÇÉ (suc n) (suc‚Ñôrm n ùï°)
--    Rùï°elim.abase w = _,_
--    Rùï°elim.aloop w _ _ = _,_
--    Rùï°elim.alooop w _ _ _ = _,_
--    Rùï°elim.acomp w _ _ _ _ = _,_
--    Rùï°elim.ainvol w _ _ _ = _,_
--    Rùï°elim.acomm w _ (suc l , l<) _ _ _ = _,_
--    Rùï°elim.abraid w _ _ _ _ = _,_
