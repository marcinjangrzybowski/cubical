{-# OPTIONS --safe #-}
module Cubical.HITs.Permutation.BaseAssoc5 where

import Cubical.Data.Nat.Base as ‚Ñï
import Cubical.Data.Nat.Properties as ‚Ñïprops


-- open import Cubical.Data.Fin.Properties as FP
open import Cubical.Data.Empty as ‚ä•

open import Cubical.Functions.Involution

open import Cubical.Foundations.Everything
-- open import Cubical.Data.Empty as ‚ä•
-- open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_)
-- open import Cubical.Data.Nat.Order
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.Unit
open import Cubical.Data.Bool as ùüö
open import Cubical.Data.Sum as ‚äé


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Data.Nat.Order.RecursiveMoreEquiv

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.Algebra.Group

open import Cubical.Algebra.SymmetricGroup

import Cubical.Functions.Logic as L

open import Cubical.Functions.Embedding

open import Cubical.Data.List as Li

import Cubical.Data.Nat.FinGenAut2 as A

import Cubical.HITs.PropositionalTruncation as Prop

open import Cubical.HITs.GroupoidQuotients as GQ
  renaming ([_] to [_]// ; RelimProp to  RelimProp// ; Rrec to Rrec//)


open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties

-- open import Cubical.Algebra.Group.Generators

open import Cubical.Functions.FunExtEquiv
open import Cubical.Functions.Implicit

open import Cubical.HITs.SequentialColimit as SC

open import Cubical.HITs.EilenbergMacLane1 renaming (elim to elimEM)


open import Cubical.Relation.Binary

-- import Cubical.Homotopy.EilenbergMacLane.Properties as EMP

open import Cubical.Foundations.Equiv.HalfAdjoint

import Cubical.HITs.Permutation.Base as B

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì

infixl 6 _+_

data ‚Ñï‚Çê‚Å∫¬π' {trunc : Type}  : Type where
 one : ‚Ñï‚Çê‚Å∫¬π' 
 _+_ : ‚Ñï‚Çê‚Å∫¬π' {trunc} ‚Üí ‚Ñï‚Çê‚Å∫¬π' {trunc} ‚Üí ‚Ñï‚Çê‚Å∫¬π' {trunc}
 +-assoc : ‚àÄ m n o ‚Üí m + (n + o) ‚â° (m + n) + o
 +-sym : ‚àÄ m n ‚Üí m + n ‚â° n + m
 isSet‚Ñï‚Çê‚Å∫¬π' : trunc ‚Üí isSet ‚Ñï‚Çê‚Å∫¬π' 

-- record ‚Ñï‚Çê‚Å∫¬πrec (h : HLevel) (A : Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    aOne : {0 < h} ‚Üí A
--    _a+_ : {0 < h} ‚Üí A ‚Üí A ‚Üí A
--    a-assoc : ‚àÄ x y z ‚Üí x a+ (y a+ z) ‚â° (x a+ y) a+ z
--    -- asquash : if trunc then (isSet A) else Unit*

--  -- f : ‚àÄ {trunc} ‚Üí {_ : if trunc then (isSet A) else Unit*} ‚Üí
--  --       ‚Ñï‚Çê‚Å∫¬π' {if trunc then Unit else ‚ä•} ‚Üí A
--  -- f one = aOne
--  -- f {trunc} {squashA} (x + x‚ÇÅ) = f {trunc} {squashA} x a+ f {trunc} {squashA}x‚ÇÅ
--  -- f {trunc} {squashA} (+-assoc x x‚ÇÅ x‚ÇÇ i) =
--  --   a-assoc
--  --    (f {trunc} {squashA} x)
--  --    (f {trunc} {squashA} x‚ÇÅ)
--  --    (f {trunc} {squashA} x‚ÇÇ) i
--  -- f {true} {squashA} (isSet‚Ñï‚Çê‚Å∫¬π' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
--  --   squashA _ _ (cong (f {true} {squashA}) x‚ÇÉ) (cong f y) i i‚ÇÅ


record ‚Ñï‚Çê‚Å∫¬πrec (A : Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   aOne : A
   _a+_ : A ‚Üí A ‚Üí A
   a-assoc : ‚àÄ x y z ‚Üí x a+ (y a+ z) ‚â° (x a+ y) a+ z
   a-sym : ‚àÄ x y ‚Üí x a+ y ‚â° (y a+ x)
   -- asquash : if trunc then (isSet A) else Unit*

 f : ‚àÄ {trunc} ‚Üí {_ : if trunc then (isSet A) else Unit*} ‚Üí
       ‚Ñï‚Çê‚Å∫¬π' {if trunc then Unit else ‚ä•} ‚Üí A
 f one = aOne
 f {trunc} {squashA} (x + x‚ÇÅ) = f {trunc} {squashA} x a+ f {trunc} {squashA}x‚ÇÅ
 f {trunc} {squashA} (+-assoc x x‚ÇÅ x‚ÇÇ i) =
   a-assoc
    (f {trunc} {squashA} x)
    (f {trunc} {squashA} x‚ÇÅ)
    (f {trunc} {squashA} x‚ÇÇ) i
 f {trunc} {squashA} (+-sym x x‚ÇÅ i) =
   a-sym
    (f {trunc} {squashA} x)
    (f {trunc} {squashA} x‚ÇÅ) i
 f {true} {squashA} (isSet‚Ñï‚Çê‚Å∫¬π' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
   squashA _ _ (cong (f {true} {squashA}) x‚ÇÉ) (cong f y) i i‚ÇÅ

‚Ñï‚Çê‚Å∫¬π = ‚Ñï‚Çê‚Å∫¬π' {Unit}


‚Ñï‚Çê : Type 
‚Ñï‚Çê = Maybe ‚Ñï‚Çê‚Å∫¬π

infix 7 _++_++_

_++_++_ : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π
_++_++_ x y z = x + y + z

isSet‚Ñï‚Çê‚Å∫¬π = isSet‚Ñï‚Çê‚Å∫¬π' tt


isSet‚Ñï‚Çê : isSet ‚Ñï‚Çê
isSet‚Ñï‚Çê = isOfHLevelMaybe 0 isSet‚Ñï‚Çê‚Å∫¬π


record ‚Ñï‚Çê‚Å∫¬πelim (A : ‚Ñï‚Çê‚Å∫¬π ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   asquash : ‚àÄ x ‚Üí (isSet (A x))

   aOne : A one
   _a+_ : ‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n + m)
   a-assoc : ‚àÄ {n m o} (x : A n) (y : A m) (z : A o)
                 ‚Üí PathP (Œª i ‚Üí A (+-assoc n m o i))
                   (x a+ (y a+ z))
                   ((x a+ y) a+ z)
   a-sym : ‚àÄ {n m} (x : A n) (y : A m)
                 ‚Üí PathP (Œª i ‚Üí A (+-sym n m i))
                   (x a+ y)
                   (y a+ x)                   

 f : ‚àÄ x ‚Üí A x
 f one = aOne
 f (x + x‚ÇÅ) = f x a+ f x‚ÇÅ
 f (+-assoc x x‚ÇÅ x‚ÇÇ i) = a-assoc (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 f (+-sym x x‚ÇÅ  i) = a-sym (f x) (f x‚ÇÅ) i
 f (isSet‚Ñï‚Çê‚Å∫¬π' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
    isOfHLevel‚ÜíisOfHLevelDep 2 (asquash)
      _ _
     (cong f x‚ÇÉ) (cong f y)
     (isSet‚Ñï‚Çê‚Å∫¬π' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y) i i‚ÇÅ

isSet‚Ñï‚Çê‚Å∫¬πelim : ‚àÄ {‚Ñì} {A : ‚Ñï‚Çê‚Å∫¬π ‚Üí Type ‚Ñì} ‚Üí isSet (‚Ñï‚Çê‚Å∫¬πelim A)
isSet‚Ñï‚Çê‚Å∫¬πelim {A = A} =
  isSetRetract ff gg fg
    (isSetŒ£ (isProp‚ÜíisSet (isPropŒ† Œª _ ‚Üí isPropIsSet))
      Œª sq ‚Üí isSetŒ£ (sq _)
        Œª _ ‚Üí isSetŒ£ (isSetImplicitŒ† Œª _ ‚Üí isSetImplicitŒ† Œª _  ‚Üí
              isSetŒ†2 Œª _ _ ‚Üí sq _)
               Œª _ ‚Üí isProp‚ÜíisSet
                 (isProp√ó
                  (isPropImplicitŒ†2 Œª _ _ ‚Üí
                   isPropImplicitŒ† Œª _ ‚Üí
                     isPropŒ†3 Œª _ _ _ ‚Üí
                      isOfHLevelPathP' 1 (sq _) _ _)
                  (isPropImplicitŒ†2 Œª _ _ ‚Üí
                     isPropŒ†2 Œª _ _ ‚Üí
                      isOfHLevelPathP' 1 (sq _) _ _)))

 where
 open ‚Ñï‚Çê‚Å∫¬πelim
 ff : ‚Ñï‚Çê‚Å∫¬πelim _ ‚Üí
          (‚àÄ x ‚Üí (isSet (A x))) √ó
          Œ£ (A one) (Œª x' ‚Üí
               Œ£ (‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n + m))
                Œª xx' ‚Üí  Œ£
                 (‚àÄ {n m o} (x : A n) (y : A m) (z : A o)
                 ‚Üí PathP (Œª i ‚Üí A (+-assoc n m o i))
                   (xx' x (xx' y z))
                   (xx' (xx' x y) z))
                 Œª _ ‚Üí ‚àÄ {n m} (x : A n) (y : A m)
                 ‚Üí PathP (Œª i ‚Üí A (+-sym n m i))
                   (xx' x y)
                   (xx' y x)) 
 ff x = (asquash x) ,
        ((aOne x) ,
        ((_a+_ x) ,
        a-assoc x ,
         a-sym x))

 gg : _ ‚Üí ‚Ñï‚Çê‚Å∫¬πelim A
 asquash (gg (fst‚ÇÅ , x)) = fst‚ÇÅ
 aOne (gg (fst‚ÇÅ , x)) = fst x
 _a+_ (gg (fst‚ÇÅ , x)) = fst (snd x)
 a-assoc (gg (fst‚ÇÅ , x)) = fst (snd (snd x))
 a-sym (gg (fst‚ÇÅ , x)) = snd (snd (snd x))

 fg : (x : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí A z)) ‚Üí gg (ff x) ‚â° x
 asquash (fg x i) = asquash x
 aOne (fg x i) = aOne x
 _a+_ (fg x i) = x a+_
 a-assoc (fg x i) = a-assoc x
 a-sym (fg x i) = a-sym x

 
-- record ‚Ñï‚Çê‚Å∫¬πelim‚ÇÇ (A : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    aOne' : A one one
--    a+ : ‚àÄ {n m o} ‚Üí A o n ‚Üí A o m ‚Üí A o (n + m)
--    +a : ‚àÄ {n m o} ‚Üí A n o  ‚Üí A m o  ‚Üí A (n + m) o
--    a-assoc+ : ‚àÄ {n m o p} ‚Üí (x : A p n) (y : A p m) (z : A p o) ‚Üí
--       PathP (Œª i ‚Üí A p (+-assoc n m o i)) (a+ x (a+ y z))
--       (a+ (a+ x y) z)
--    a-+assoc : ‚àÄ {n m o} ‚Üí (x : A n one) (y : A m one) (z : A o one) ‚Üí
--       PathP (Œª i ‚Üí A (+-assoc n m o i) one)
--       ((+a x (+a y z)))
--       (+a (+a x y) z)
--    a-sym+ : ‚àÄ {n m o} ‚Üí (x : A o n) (y : A o m) ‚Üí
--       PathP (Œª i ‚Üí A o (+-sym n m i)) (a+ x y) (a+ y x)              
--    asquash‚ÇÇ : ‚àÄ x y ‚Üí (isSet (A x y))

--  open ‚Ñï‚Çê‚Å∫¬πelim

--  f'one : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí A one z)
--  aOne f'one = aOne'
--  _a+_ f'one = a+
--  a-assoc f'one = a-assoc+
--  a-sym f'one = a-sym+
--  asquash f'one x = asquash‚ÇÇ one x

--  f'+ : ‚àÄ {n m}
--      ‚Üí ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí A n z)
--      ‚Üí ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí A m z)
--      ‚Üí ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí A (n + m) z)
--  aOne (f'+ n' m') = +a (aOne n') (aOne m')
--  _a+_ (f'+ {n = n} {m} n' m') =
--    a+ {o = n + m} 
--  a-assoc (f'+ n' m') = a-assoc+ 
--  a-sym (f'+ n' m') = a-sym+
--  asquash (f'+ n' m') x = asquash‚ÇÇ _ _

--  f'assoc : ‚àÄ {n m o} ‚Üí (x : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí A n z)) (y : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí A m z))
--       (z : ‚Ñï‚Çê‚Å∫¬πelim (Œª z‚ÇÅ ‚Üí A o z‚ÇÅ)) ‚Üí
--       PathP (Œª i ‚Üí ‚Ñï‚Çê‚Å∫¬πelim (Œª z‚ÇÅ ‚Üí A (+-assoc n m o i) z‚ÇÅ))
--       (f'+ x (f'+ y z)) (f'+ (f'+ x y) z)
--  asquash (f'assoc x y z i) x‚ÇÅ = asquash‚ÇÇ (+-assoc _ _ _ i) x‚ÇÅ
--  aOne (f'assoc {n = n} {m} {o} x y z i) = 
--    a-+assoc {n} {m} {o}
--     (aOne x) (aOne y) (aOne z) i 
--  _a+_ (f'assoc x y z i) x' y' =
--     a+ x' y'
--  a-assoc (f'assoc {n'} {m'} {o'} x y z i) =
--    {!!}
--    -- isSet‚ÜíSquareP (Œª i j ‚Üí asquash‚ÇÇ (+-assoc n' m' o' i) (+-assoc n m o j))
--    --    (Œª i‚ÇÅ ‚Üí a-assoc+ {!!} {!!} {!!} i‚ÇÅ)
--    --    {!!}
--    --    {!!}
--    --    {!!} i j

-- -- Goal: A (+-assoc n' m' o' i) (+-assoc n m o j)
-- -- ‚Äî‚Äî‚Äî‚Äî Boundary (wanted) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
-- -- j = i0 ‚ä¢ a+ x' (a+ y' z')
-- -- j = i1 ‚ä¢ a+ (a+ x' y') z'
-- -- i = i0 ‚ä¢ a-assoc+ x' y' z' j
-- -- i = i1 ‚ä¢ a-assoc+ x' y' z' j

--    -- isSet‚ÜíSquareP (Œª i j ‚Üí asquash‚ÇÇ (+-assoc _ _ _ i) (+-assoc _ _ _ j))
--    --   (Œª j ‚Üí {!a-assoc+ x' y' z' j!} )
--    --   (a-assoc+ _ _ _)
--    --   (Œª i ‚Üí {!!})
--    --   {!!} i j

-- -- j = i0 ‚ä¢ a+ x' (a+ y' z')
-- -- j = i1 ‚ä¢ a+ (a+ x' y') z'
-- -- i = i0 ‚ä¢ a-assoc+ x' y' z' j
-- -- i = i1 ‚ä¢ a-assoc+ x' y' z' j

--  a-sym (f'assoc x y z i) x' y' j =
--    {!!}

--  f' : ‚Ñï‚Çê‚Å∫¬πelim (Œª x ‚Üí ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí A x z))
--  aOne f' = f'one
--  _a+_ f' = f'+
--  a-assoc f' = f'assoc
--   -- isProp‚ÜíPathP (Œª _ ‚Üí {!isSet‚Ñï‚Çê‚Å∫¬πelim!})
--   --  _ _
--  a-sym f' = {!!}
--  asquash f' = {!!}
 
--  f‚ÇÇ : ‚àÄ x y ‚Üí A x y
--  f‚ÇÇ x = ‚Ñï‚Çê‚Å∫¬πelim.f (‚Ñï‚Çê‚Å∫¬πelim.f f' x)



record ‚Ñï‚Çê‚Å∫¬πelimProp (A : ‚Ñï‚Çê‚Å∫¬π ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   aOne : A one
   _a+_ : ‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n + m)

   asquash : ‚àÄ x ‚Üí (isProp (A x))

 w : ‚Ñï‚Çê‚Å∫¬πelim A
 ‚Ñï‚Çê‚Å∫¬πelim.aOne w = aOne
 ‚Ñï‚Çê‚Å∫¬πelim._a+_ w = _a+_
 ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w x y z = isProp‚ÜíPathP (Œª i ‚Üí asquash (+-assoc _ _ _ i)) _ _
 ‚Ñï‚Çê‚Å∫¬πelim.a-sym w x y = isProp‚ÜíPathP (Œª i ‚Üí asquash (+-sym _ _ i)) _ _
 ‚Ñï‚Çê‚Å∫¬πelim.asquash w = isProp‚ÜíisSet ‚àò asquash 

 f : ‚àÄ x ‚Üí A x
 f = ‚Ñï‚Çê‚Å∫¬πelim.f w

+-sym-one : (m : ‚Ñï‚Çê‚Å∫¬π') ‚Üí one + m ‚â° m + one
+-sym-one = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
 where
 w : ‚Ñï‚Çê‚Å∫¬πelimProp (Œª z ‚Üí one + z ‚â° z + one)
 ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w = refl
 ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n = n} {m = m} q p = +-assoc _ _ _ ‚àô
  cong (_+ m) q ‚àô
   sym (+-assoc _ _ _)
    ‚àô cong (n +_) p ‚àô +-assoc _ _ _
 ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w _ = isSet‚Ñï‚Çê‚Å∫¬π _ _
 
+-sym' : ‚àÄ (n : ‚Ñï‚Çê‚Å∫¬π) m ‚Üí n + m ‚â° m + n
+-sym' = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
 where
 w : ‚Ñï‚Çê‚Å∫¬πelimProp (Œª z ‚Üí (m : ‚Ñï‚Çê‚Å∫¬π') ‚Üí z + m ‚â° m + z)
 ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w = +-sym-one
 ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n} {m} p' q' o =
    sym (+-assoc _ _ _)
   ‚àô (p' (m + o)
   ‚àô sym (+-assoc _ _ _))
   ‚àô q' ( o + n) ‚àô sym (+-assoc _ _ _)
 ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w _ = isPropŒ† (Œª _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π _ _)

isOne : ‚Ñï‚Çê‚Å∫¬π ‚Üí hProp ‚Ñì-zero
isOne = ‚Ñï‚Çê‚Å∫¬πrec.f w {true} {isSetHProp}
 where
 w : ‚Ñï‚Çê‚Å∫¬πrec (hProp ‚Ñì-zero)
 ‚Ñï‚Çê‚Å∫¬πrec.aOne w = L.‚ä§
 ‚Ñï‚Çê‚Å∫¬πrec._a+_ w _ _ = L.‚ä•
 ‚Ñï‚Çê‚Å∫¬πrec.a-assoc w _ _ _ = refl
 ‚Ñï‚Çê‚Å∫¬πrec.a-sym w _ _ = refl

-- isOne‚áîone‚â° : ‚àÄ n ‚Üí ‚ü® isOne n L.‚áî (one ‚â° n) , isSet‚Ñï‚Çê‚Å∫¬π _ _ ‚ü©
-- isOne‚áîone‚â° = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
--  where
--  w : ‚Ñï‚Çê‚Å∫¬πelimProp (Œª z ‚Üí ‚ü® isOne z L.‚áî (one ‚â° z) , isSet‚Ñï‚Çê‚Å∫¬π one z ‚ü©)
--  ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w = (Œª _ ‚Üí refl) , (Œª _ ‚Üí tt*)
--  fst (‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n} {m} x x‚ÇÅ) ()
--  snd (‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n} {m} x x‚ÇÅ) = {!!}
--  ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w n = snd (isOne n L.‚áî (one ‚â° n) , isSet‚Ñï‚Çê‚Å∫¬π _ _)

one< : ‚Ñï‚Çê‚Å∫¬π ‚Üí hProp ‚Ñì-zero
one< = ‚Ñï‚Çê‚Å∫¬πrec.f w {true} {isSetHProp}
 where
 w : ‚Ñï‚Çê‚Å∫¬πrec (hProp ‚Ñì-zero)
 ‚Ñï‚Çê‚Å∫¬πrec.aOne w = L.‚ä•
 ‚Ñï‚Çê‚Å∫¬πrec._a+_ w _ _ = L.‚ä§
 ‚Ñï‚Çê‚Å∫¬πrec.a-assoc w _ _ _ = refl
 ‚Ñï‚Çê‚Å∫¬πrec.a-sym w _ _ = refl



+‚â¢one : ‚àÄ n m ‚Üí n + m ‚â° one ‚Üí ‚ä•
+‚â¢one n m p = subst‚Åª (fst ‚àò isOne) p _

‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π :  ‚Ñï.‚Ñï ‚Üí ‚Ñï‚Çê‚Å∫¬π
‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π ‚Ñï.zero = one
‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π (‚Ñï.suc x) = one + (‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π x)


‚Ñï‚Üí‚Ñï‚Çê :  ‚Ñï.‚Ñï ‚Üí ‚Ñï‚Çê
‚Ñï‚Üí‚Ñï‚Çê ‚Ñï.zero = nothing
‚Ñï‚Üí‚Ñï‚Çê (‚Ñï.suc x) = just (‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π x)

‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï.‚Ñï
‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï = ‚Ñï‚Çê‚Å∫¬πrec.f w {true} {‚Ñïprops.isSet‚Ñï}
 where
 w : ‚Ñï‚Çê‚Å∫¬πrec ‚Ñï.‚Ñï
 ‚Ñï‚Çê‚Å∫¬πrec.aOne w = 1
 ‚Ñï‚Çê‚Å∫¬πrec._a+_ w = ‚Ñï._+_
 ‚Ñï‚Çê‚Å∫¬πrec.a-assoc w = ‚Ñïprops.+-assoc
 ‚Ñï‚Çê‚Å∫¬πrec.a-sym w = ‚Ñïprops.+-comm

-- ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï-elimProp : ‚àÄ {‚Ñì} {A : ‚Ñï.‚Ñï ‚Üí Type ‚Ñì} ‚Üí (‚àÄ n ‚Üí isProp (A n)) ‚Üí
--     (‚àÄ n ‚Üí A (‚Ñï.suc n)) ‚Üí ‚àÄ n ‚Üí A (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) 
-- ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï-elimProp {A = A} isPropA Asuc = w
--  where
--  w : (n : ‚Ñï‚Çê‚Å∫¬π) ‚Üí A (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n)
--  w one = Asuc 0
--  w (n + n‚ÇÅ) = {!!}
--  w (+-assoc n n‚ÇÅ n‚ÇÇ i) = {!!}
--  w (+-sym n n‚ÇÅ i) = {!!}
--  w (isSet‚Ñï‚Çê‚Å∫¬π' x n n‚ÇÅ x‚ÇÅ y i i‚ÇÅ) = {!!}
-- -- ‚Ñï‚Çê‚Å∫¬πelimProp.f w
-- --   where
-- --    w : ‚Ñï‚Çê‚Å∫¬πelimProp Œª z ‚Üí A (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï z)
-- --    ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w = Asuc _
-- --    ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w x x‚ÇÅ = {!!}
-- --    ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w = {!!}

‚Ñï‚Çê‚Üí‚Ñï :  ‚Ñï‚Çê ‚Üí ‚Ñï.‚Ñï
‚Ñï‚Çê‚Üí‚Ñï nothing = ‚Ñï.zero
‚Ñï‚Çê‚Üí‚Ñï (just x) = ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï x


-- Iso‚Ñï‚Ñï‚Çê‚Å∫¬π : Iso ‚Ñï.‚Ñï ‚Ñï‚Çê
-- Iso‚Ñï‚Ñï‚Çê‚Å∫¬π = w
--  where
--  w : Iso ‚Ñï.‚Ñï ‚Ñï‚Çê
--  Iso.fun w = ‚Ñï‚Üí‚Ñï‚Çê
--  Iso.inv w = ‚Ñï‚Çê‚Üí‚Ñï
--  Iso.rightInv w =
--   Mb.elim _ refl
--    (‚Ñï‚Çê‚Å∫¬πelimProp.f w')
--    where
--    w' : ‚Ñï‚Çê‚Å∫¬πelimProp _
--    ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w' = refl
--    ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w' p q =
--      {!cong‚ÇÇ _+_ p q!}
--    ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w' = {!!}
--  Iso.leftInv w = {!!}

+‚Çê‚â°+ : ‚àÄ n m ‚Üí ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï (n + m) ‚â° (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚Ñï.+ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m) 
+‚Çê‚â°+ = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
 where
 w : ‚Ñï‚Çê‚Å∫¬πelimProp (Œª z ‚Üí (m : ‚Ñï‚Çê‚Å∫¬π') ‚Üí ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï (z + m) ‚â° ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï z ‚Ñï.+ ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)
 ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w m = refl
 ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n} {m} q p m' =
    (cong ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï (sym (+-assoc n m m')) ‚àô‚àô q (m + m')
      ‚àô‚àô cong ((‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚Ñï.+_) (p m'))
     ‚àô‚àô ‚Ñïprops.+-assoc (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m') ‚àô‚àô
     (cong (‚Ñï._+ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m') ) (sym (q m)) ‚àô cong (‚Ñï._+ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m')) (q m))

 ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w _ = isPropŒ† Œª _ ‚Üí ‚Ñïprops.isSet‚Ñï _ _

-- record : ?

-- Fin‚Çê : ‚Ñï‚Çê‚Å∫¬π' {‚ä•} ‚Üí Type
-- Fin‚Çê one = Unit 
-- Fin‚Çê (x + x‚ÇÅ) = Fin‚Çê x ‚äé Fin‚Çê x‚ÇÅ
-- Fin‚Çê (+-assoc x x‚ÇÅ x‚ÇÇ i) =
--  ua (‚äé-assoc-‚âÉ {A = Fin‚Çê x} {B = Fin‚Çê x‚ÇÅ} {C = Fin‚Çê x‚ÇÇ}) (~ i) 

-- toTrunc : {!!}
-- toTrunc = {!!}

FinSucUnit‚äé : ‚àÄ n ‚Üí Iso (Fin (‚Ñï.suc n)) (Unit ‚äé Fin n)
FinSucUnit‚äé n = w
 where
 w : Iso (Fin (‚Ñï.suc n)) (Unit ‚äé Fin n)
 Iso.fun w (‚Ñï.zero , snd‚ÇÅ) = inl _
 Iso.fun w (‚Ñï.suc fst‚ÇÅ , snd‚ÇÅ) = inr (fst‚ÇÅ , snd‚ÇÅ)
 Iso.inv w (inl x) = ‚Ñï.zero , _
 Iso.inv w (inr x) = ‚Ñï.suc (fst x) , (snd x)
 Iso.rightInv w (inl x) = refl
 Iso.rightInv w (inr (fst‚ÇÅ , snd‚ÇÅ)) = refl
 Iso.leftInv w (‚Ñï.zero , snd‚ÇÅ) = refl
 Iso.leftInv w (‚Ñï.suc fst‚ÇÅ , snd‚ÇÅ) = refl

Fin‚äé : ‚àÄ n m ‚Üí Iso (Fin (n ‚Ñï.+ m)) (Fin n ‚äé Fin m)
Fin‚äé ‚Ñï.zero m =
 compIso (invIso ‚äé-‚ä•-Iso)
   (compIso ‚äé-swap-Iso (‚äéIso (compIso (invIso (Œ£EmptyIso _)) Œ£-swap-Iso) idIso))
Fin‚äé (‚Ñï.suc n) m =
  compIso (FinSucUnit‚äé _)
   (compIso (compIso (‚äéIso idIso (Fin‚äé n m))
    (invIso ‚äé-assoc-Iso)) (‚äéIso (invIso (FinSucUnit‚äé _)) idIso)) 

Fin‚äé‚â° : ‚àÄ n m ‚Üí  (Fin (n ‚Ñï.+ m)) ‚â° (Fin n ‚äé Fin m)
Fin‚äé‚â° n m = ua (isoToEquiv (Fin‚äé n m))


+-hlp-sing-Fin : (n m : ‚Ñï‚Çê‚Å∫¬π) ‚Üí
     Fin (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï (n + m)) ‚â° (Fin (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚äé Fin (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m))
+-hlp-sing-Fin n m  =
  cong Fin (+‚Çê‚â°+ n m)
   ‚àô Fin‚äé‚â° (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)  

module _ {‚Ñì} {A : Type ‚Ñì} where

 √ó^-+-‚âÉ : ‚àÄ n m ‚Üí  (A √ó^ n √ó A √ó^ m) ‚âÉ (A √ó^ (n ‚Ñï.+ m))  
 √ó^-+-‚âÉ (‚Ñï.zero) m = isoToEquiv (iso snd (_ ,_) (Œª _ ‚Üí refl) Œª _ ‚Üí refl)
 √ó^-+-‚âÉ (‚Ñï.suc n) m = Œ£-assoc-‚âÉ ‚àô‚Çë ‚âÉ-√ó (idEquiv _) (√ó^-+-‚âÉ n m)

 √ó^-+-‚â° : ‚àÄ n m ‚Üí  (A √ó^ n √ó A √ó^ m) ‚â° (A √ó^ (n ‚Ñï.+ m))  
 √ó^-+-‚â° n m = ua (√ó^-+-‚âÉ n m)


module _ {‚Ñì} (A : Type ‚Ñì) where

 -- ùëΩ' : ‚Ñï‚Çê‚Å∫¬πrec (Type ‚Ñì)
 -- ùëΩ' = {!!}
 -- -- ‚Ñï‚Çê‚Å∫¬πrec.aOne ùëΩ' = A
 -- -- ‚Ñï‚Çê‚Å∫¬πrec._a+_ ùëΩ' = _√ó_
 -- -- ‚Ñï‚Çê‚Å∫¬πrec.a-assoc ùëΩ' _ _ _ = sym (ua Œ£-assoc-‚âÉ)
 -- -- ‚Ñï‚Çê‚Å∫¬πrec.a-sym ùëΩ' _ _ _ = {!!}

 -- -- module _ (isSetA : isSet A) where

 -- singlùëΩ : (x : ‚Ñï‚Çê‚Å∫¬π) ‚Üí singl (A √ó^ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï x))
 -- singlùëΩ = ‚Ñï‚Çê‚Å∫¬πelim.f w
 --  where
 --   w : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí singl (A √ó^ ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï z))
 --   ‚Ñï‚Çê‚Å∫¬πelim.aOne w = _ , isoToPath (iso fst (_, _) (Œª _ ‚Üí refl) Œª _ ‚Üí refl)
 --   fst ((w ‚Ñï‚Çê‚Å∫¬πelim.a+ (x , x=)) (y , y=)) = x √ó y
 --   snd (((‚Ñï‚Çê‚Å∫¬πelim._a+_ w {n} {m}) (x , x=)) (y , y=)) =
 --      (sym (ua (√ó^-+-‚âÉ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)))) ‚àô  cong‚ÇÇ _√ó_ x= y=
 --   ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w {n} {m} {o} (x , x=) (y , y=) (z , z=) =
 --     Œ£PathP (sym (ua Œ£-assoc-‚âÉ)
 --           , {!!})
 --   ‚Ñï‚Çê‚Å∫¬πelim.a-sym  w {n} {m} (x , x=) (y , y=) =
 --      Œ£PathP ((sym (cong‚ÇÇ _√ó_ x= y=) ‚àô √ó^-+-‚â° (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)) ‚àô‚àô
 --               cong (A √ó^_) (‚Ñïprops.+-comm (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m))
 --              ‚àô‚àô (sym (√ó^-+-‚â° (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n)) ‚àô cong‚ÇÇ _√ó_ y= x=)
 --        , {!!}) 
 --   ‚Ñï‚Çê‚Å∫¬πelim.asquash w = {!!}
 --  -- w : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí singl (A √ó^ ‚Ñï‚Çê‚Üí‚Ñï z))
 --  -- ‚Ñï‚Çê‚Å∫¬πelim.aOne w = _ , isoToPath (iso fst (_, _) (Œª _ ‚Üí refl) Œª _ ‚Üí refl) 
 --  -- fst ((w ‚Ñï‚Çê‚Å∫¬πelim.a+ (x , x=)) (y , y=)) = x √ó y
 --  -- snd (((‚Ñï‚Çê‚Å∫¬πelim._a+_ w {n} {m}) (x , x=)) (y , y=)) =
 --  --   (sym (ua (√ó^-+-‚âÉ (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m)))) ‚àô  cong‚ÇÇ _√ó_ x= y=
 --  -- ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w {n} {m} {o} x y z =
 --  --  Œ£PathP (sym (ua Œ£-assoc-‚âÉ) ,
 --  --    {!!})
 --  -- -- fst (‚Ñï‚Çêelim.a-assoc w {n} {m} {o} x y z i) =
 --  -- --   sym (ua (Œ£-assoc-‚âÉ {A = fst x} {B = Œª _ ‚Üí fst y} {C = Œª _ _ ‚Üí fst z})) i
 --  -- -- snd (‚Ñï‚Çêelim.a-assoc w {n} {m} {o} x y z i) =
 --  -- --   {!!}
 --  -- ‚Ñï‚Çêelim.asquash w _ = isOfHLevelPlus {n = 0} 2 (isContrSingl _)

--  ùëΩ : ‚Ñï‚Çê ‚Üí Type ‚Ñì
--  ùëΩ = fst ‚àò singlùëΩ

-- allFalseùë© : ‚àÄ n ‚Üí ùëΩ Bool n ‚Üí hProp ‚Ñì-zero
-- allFalseùë© = ‚Ñï‚Çêelim.f w
--  where
--  w : ‚Ñï‚Çêelim (Œª z ‚Üí ùëΩ Bool z ‚Üí hProp ‚Ñì-zero)
--  ‚Ñï‚Çêelim.aOne w false = L.‚ä§
--  ‚Ñï‚Çêelim.aOne w true = L.‚ä•
--  ‚Ñï‚Çêelim._a+_ w {n} {m} Fn Fm = Œª (x , y) ‚Üí Fn x L.‚äì Fm y
--  ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fn Fm Fo i q =
--    let q' = unglue (i ‚à® ~ i) q
--    in L.‚äì-assoc (Fn (fst q')) (Fm (fst (snd q'))) ((Fo (snd (snd q')))) i

--  ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí isSetHProp

-- onlyOneTrueùë© : ‚àÄ n ‚Üí ùëΩ Bool n ‚Üí hProp ‚Ñì-zero
-- onlyOneTrueùë© = ‚Ñï‚Çêelim.f w
--  where
--  w : ‚Ñï‚Çêelim (Œª z ‚Üí ùëΩ Bool z ‚Üí hProp ‚Ñì-zero)
--  ‚Ñï‚Çêelim.aOne w false = L.‚ä•
--  ‚Ñï‚Çêelim.aOne w true = L.‚ä§
--  ‚Ñï‚Çêelim._a+_ w {n} {m} Fn Fm =
--    Œª (x , y) ‚Üí (Fn x L.‚äì allFalseùë© n x) L.‚äî (Fm y L.‚äì allFalseùë© m y)
--  ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fn Fm Fo i q =
--    let q' = unglue (i ‚à® ~ i) q
--    in {!!}
--       -- funExtDep Œª {x‚ÇÄ} {x‚ÇÅ} p ‚Üí
--       --   Œª i ‚Üí
--       --     let q = sym (ua-ungluePath _ (symP p)) i
--       --     in L.‚äì-assoc (Fn (fst q)) (Fm (fst (snd q))) ((Fo (snd (snd q)))) i

--  ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí isSetHProp



pattern suc k = one + k

infixl 6 _+‚Çê_ _‚Çê+_ _‚äπ_

_+‚Çê_ : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π
nothing +‚Çê x‚ÇÅ = x‚ÇÅ
just x +‚Çê x‚ÇÅ = x + x‚ÇÅ

_‚Çê+_ : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê ‚Üí  ‚Ñï‚Çê‚Å∫¬π
x ‚Çê+ nothing = x
x ‚Çê+ just x‚ÇÅ = x + x‚ÇÅ

_‚äπ‚Çê_ : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê
x ‚äπ‚Çê y = just (x +‚Çê y)

_‚Çê‚äπ_ : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê
x ‚Çê‚äπ y = just (x ‚Çê+ y)

_‚äπ_ : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê
nothing ‚äπ x‚ÇÅ = x‚ÇÅ
just x ‚äπ x‚ÇÅ = x ‚Çê‚äπ x‚ÇÅ

infix 7 _++‚Çê_‚Çê++_

_++‚Çê_‚Çê++_ : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê‚Å∫¬π
_++‚Çê_‚Çê++_ x y z = x +‚Çê y ‚Çê+ z

‚äπ-0 : ‚àÄ {x} ‚Üí x ‚äπ nothing ‚â° x
‚äπ-0 {nothing} = refl
‚äπ-0 {just x} = refl

‚Çê+‚Çê-assoc : ‚àÄ l c r ‚Üí
   l +‚Çê (c ‚Çê+ r) ‚â° l +‚Çê c ‚Çê+ r 
‚Çê+‚Çê-assoc nothing c r = refl
‚Çê+‚Çê-assoc (just x) c nothing = refl
‚Çê+‚Çê-assoc (just x) c (just x‚ÇÅ) = +-assoc _ _ _

-- n ‚Çê+ (p‚Çã·µ¢ .AB.lPad ‚äπ fst a) ‚â° n ‚Çê+ AB.lPad p‚Çã·µ¢ ‚Çê+ fst a

‚Çê+‚Çê-assoc' : ‚àÄ n m o ‚Üí n ‚Çê+ (m ‚äπ o) ‚â° n ‚Çê+ m ‚Çê+ o
‚Çê+‚Çê-assoc' n nothing o = refl
‚Çê+‚Çê-assoc' n (just x) nothing = refl
‚Çê+‚Çê-assoc' n (just x) (just x‚ÇÅ) = +-assoc _ _ _


‚Çê+‚Çê-assoc'' : ‚àÄ n m o ‚Üí ((n ‚äπ m) ‚äπ‚Çê o) ‚â° n ‚äπ (m ‚äπ‚Çê o)
‚Çê+‚Çê-assoc'' nothing m o = refl
‚Çê+‚Çê-assoc'' (just x) nothing o = refl
‚Çê+‚Çê-assoc'' (just x) (just x‚ÇÅ) o = cong just (sym (+-assoc _ _ _))


+-+‚Çê‚â°‚Çê+-+ : ‚àÄ {n m l} ‚Üí n + (m +‚Çê l) ‚â° n ‚Çê+ m + l
+-+‚Çê‚â°‚Çê+-+ {m = nothing} = refl
+-+‚Çê‚â°‚Çê+-+ {m = just x} = +-assoc _ _ _

+-+‚Çê‚â°‚Çê+-+' : ‚àÄ {n m l} ‚Üí n +‚Çê (m + l) ‚â° n +‚Çê m + l
+-+‚Çê‚â°‚Çê+-+' {nothing} = refl
+-+‚Çê‚â°‚Çê+-+' {just x} = +-assoc _ _ _

+-‚Çê+‚â°‚Çê+-+' : ‚àÄ {n m l} ‚Üí n + (m ‚Çê+ l) ‚â° n + m ‚Çê+ l
+-‚Çê+‚â°‚Çê+-+' {l = nothing} = refl
+-‚Çê+‚â°‚Çê+-+' {l = just x} = +-assoc _ _ _


+‚Çê-lem : ‚àÄ {n m l o p} ‚Üí
                    n +‚Çê (m + l) ‚Çê+ o ‚Çê+ p ‚â°
                    n +‚Çê (m + l ‚Çê+ (o ‚äπ p))
+‚Çê-lem {nothing} {o = nothing} {p} = refl
+‚Çê-lem {nothing} {o = just x} {nothing} = refl
+‚Çê-lem {nothing} {o = just x} {just x‚ÇÅ} = sym (+-assoc _ _ _)
+‚Çê-lem {just x} {o = nothing} {nothing} = refl
+‚Çê-lem {just x} {o = nothing} {just x‚ÇÅ} = sym (+-assoc _ _ _)
+‚Çê-lem {just x} {o = just x‚ÇÅ} {nothing} = sym (+-assoc _ _ _)
+‚Çê-lem {just x} {o = just x‚ÇÅ} {just x‚ÇÇ} =
  sym (+-assoc _ _ _) ‚àô sym (+-assoc _ _ _)


record AB' (n : ‚Ñï‚Çê‚Å∫¬π) : Type‚ÇÄ where
 constructor ùïíùïì'
 field
  l r  : ‚Ñï‚Çê‚Å∫¬π
  <n : (l + r) ‚â° n


record AB (n : ‚Ñï‚Çê‚Å∫¬π) : Type‚ÇÄ where
 constructor ùïíùïì
 field
  lPad : ‚Ñï‚Çê
  l r  : ‚Ñï‚Çê‚Å∫¬π
  rPad : ‚Ñï‚Çê
  <n : lPad +‚Çê (l + r) ‚Çê+ rPad ‚â° n

AB‚â° : ‚àÄ n ‚Üí (p p' : AB n) 
       ‚Üí AB.lPad p ‚â° AB.lPad p'
       ‚Üí AB.l p ‚â° AB.l p'
       ‚Üí AB.r p ‚â° AB.r p'
       ‚Üí AB.rPad p ‚â° AB.rPad p'
       ‚Üí p ‚â° p'
       
AB.lPad (AB‚â° n p p' x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) = x i
AB.l (AB‚â° n p p' x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) = x‚ÇÅ i
AB.r (AB‚â° n p p' x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) = x‚ÇÇ i
AB.rPad (AB‚â° n p p' x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) = x‚ÇÉ i
AB.<n (AB‚â° n p p' x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) j =
 isSet‚ÜíisSet' isSet‚Ñï‚Çê‚Å∫¬π
    (AB.<n p)
    (AB.<n p')
    (Œª i ‚Üí x i +‚Çê (x‚ÇÅ i + x‚ÇÇ i) ‚Çê+ x‚ÇÉ i)
    (Œª _ ‚Üí n) i j

‚â°AB : ‚àÄ {n} ‚Üí (p p' : AB n) ‚Üí Type
‚â°AB p p' =
           (AB.lPad p ‚â° AB.lPad p')
         √ó (AB.l p ‚â° AB.l p')
         √ó (AB.r p ‚â° AB.r p')
         √ó (AB.rPad p ‚â° AB.rPad p')

isProp‚â°AB : ‚àÄ {n} ‚Üí (p p' : AB n) ‚Üí isProp (‚â°AB p p')
isProp‚â°AB p p' =
  isProp√ó (isSet‚Ñï‚Çê _ _)
 (isProp√ó (isSet‚Ñï‚Çê‚Å∫¬π _ _)
 (isProp√ó (isSet‚Ñï‚Çê‚Å∫¬π _ _)
 (isSet‚Ñï‚Çê _ _)))

isSetAB : ‚àÄ {n} ‚Üí isSet (AB n)
isSetAB =
  isSetRetract
    _
    (uncurry (uncurry (uncurry (uncurry ùïíùïì))))
    (Œª x ‚Üí refl)
    (isSetŒ£ (isSet√ó
            (isSet√ó
            (isSet√ó isSet‚Ñï‚Çê isSet‚Ñï‚Çê‚Å∫¬π)
            isSet‚Ñï‚Çê‚Å∫¬π)
            isSet‚Ñï‚Çê)
      Œª _ ‚Üí isProp‚ÜíisSet (isSet‚Ñï‚Çê‚Å∫¬π _ _))


‚â°ABiso : ‚àÄ {n} ‚Üí (p p' : AB n) ‚Üí Iso (‚â°AB p p') (p ‚â° p')
‚â°ABiso p p' = w
 where
 open Iso
 w : Iso _ _
 fun w (x , x' , x'' , x''') = AB‚â° _ _ _ x x' x'' x'''
 fst (inv w p) i = AB.lPad (p i)
 fst (snd (inv w p)) i = AB.l (p i)
 fst (snd (snd (inv w p))) i = AB.r (p i)
 snd (snd (snd (inv w p))) i = AB.rPad (p i)

 rightInv w _ = isSetAB _ _ _ _ 
 leftInv w _ = isProp‚â°AB p p' _ _

swapAB : ‚àÄ {n} ‚Üí AB n ‚Üí AB n
swapAB (ùïíùïì lPad l r rPad <n) =
  ùïíùïì lPad r l rPad (cong (Œª x ‚Üí (lPad +‚Çê x ‚Çê+ rPad)) (+-sym r l) ‚àô <n)


swapAB' : ‚àÄ {n} ‚Üí (x : AB n) ‚Üí _ ‚Üí AB n
swapAB' (ùïíùïì lPad l r rPad <n) p =
  ùïíùïì lPad r l rPad p


-- -- +-suc : ‚àÄ trunc ‚Üí (m n : ‚Ñï‚Çê‚Å∫¬π {trunc}) ‚Üí m + (suc n) ‚â° suc (m + n)
-- -- +-suc = {!!}

suc' : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê
suc' = just ‚àò Mb.rec one suc

-- sucAB : ‚àÄ {n} ‚Üí AB n ‚Üí AB (suc n)
-- AB.lPad (sucAB x) = suc' (AB.lPad x)
-- AB.l (sucAB x) = AB.l x
-- AB.r (sucAB x) = AB.r x
-- AB.rPad (sucAB x) = AB.rPad x
-- AB.<n (sucAB {n} (ùïíùïì lPad l r rPad <n)) = w lPad rPad <n
--  where
--  w : ‚àÄ lPad rPad ‚Üí lPad +‚Çê (l + r) ‚Çê+ rPad ‚â° n
--      ‚Üí  Mb.rec one (_+_ one) lPad + (l + r) ‚Çê+ rPad ‚â° suc n
--  w nothing nothing p = cong suc p
--  w nothing (just x) p = sym (+-assoc _ _ _) ‚àô cong suc p
--  w (just x) nothing p = sym (+-assoc _ _ _) ‚àô cong suc p
--  w (just x) (just x‚ÇÅ) p = ( sym (+-assoc _ _ _) ‚àô sym (+-assoc _ _ _) ‚àô cong suc (+-assoc _ _ _)) ‚àô cong suc p




m+AB* : ‚àÄ m {n} m+n ‚Üí (m + n ‚â° m+n) ‚Üí AB n ‚Üí AB (m+n)
AB.lPad (m+AB* m m+n p x) = m ‚Çê‚äπ AB.lPad x
AB.l (m+AB* m m+n p x) = AB.l x
AB.r (m+AB* m m+n p x) = AB.r x
AB.rPad (m+AB* m m+n p x) = AB.rPad x
AB.<n (m+AB* m {n} m+n p (ùïíùïì lPad l r rPad <n)) = w lPad rPad <n ‚àô p
 where
 w : ‚àÄ lPad rPad ‚Üí lPad +‚Çê (l + r) ‚Çê+ rPad ‚â° n
     ‚Üí  m ‚Çê+  lPad + (l + r) ‚Çê+ rPad ‚â° m + n
 w nothing nothing p = cong (m +_) p
 w nothing (just x) p = sym (+-assoc _ _ _) ‚àô cong (m +_) p
 w (just x) nothing p = sym (+-assoc _ _ _) ‚àô cong (m +_) p
 w (just x) (just x‚ÇÅ) p = ( sym (+-assoc _ _ _) ‚àô sym (+-assoc _ _ _) ‚àô cong (m +_) (+-assoc _ _ _)) ‚àô cong (m +_) p

m+AB : ‚àÄ m {n} ‚Üí AB n ‚Üí AB (m + n)
m+AB m = m+AB* m _ refl

AB+m* : ‚àÄ m {n} n+m ‚Üí (n + m ‚â° n+m) ‚Üí AB n ‚Üí AB (n+m)
AB.lPad (AB+m* m _ _ x) = AB.lPad x
AB.l (AB+m* m  _ _ x) = AB.l x
AB.r (AB+m* m  _ _ x) = AB.r x
AB.rPad (AB+m* m  _ _ x) = AB.rPad x ‚äπ‚Çê m
AB.<n (AB+m* m {n} _ p (ùïíùïì lPad l r rPad <n)) = w lPad rPad <n ‚àô p
 where
 w : ‚àÄ lPad rPad ‚Üí lPad +‚Çê (l + r) ‚Çê+ rPad ‚â° n
     ‚Üí  lPad +‚Çê (l + r) + (rPad +‚Çê m) ‚â° n + m
 w _ nothing p = cong (_+ m) p
 w _ (just x) p = +-assoc _ _ _ ‚àô cong (_+ m) p


AB+m : ‚àÄ m {n} ‚Üí AB n ‚Üí AB (n + m)
AB+m m = AB+m* m _ refl


MbAB : ‚Ñï‚Çê‚Å∫¬π¬†‚Üí Type
MbAB = Maybe ‚àò' AB


-- data ‚Ñô‚ñ° (n : ‚Ñï‚Çê‚Å∫¬π) : Type‚ÇÄ where
--  ‚ñ°invol ‚ñ°hex ‚ñ°comm ‚ñ°over : ‚Ñô‚ñ° n


data ‚Ñôrm‚Çê {trunc : Bool} (n : ‚Ñï‚Çê‚Å∫¬π) : Type‚ÇÄ


ùï°base' : ‚àÄ {trunc : Bool} {n : ‚Ñï‚Çê‚Å∫¬π} ‚Üí ‚Ñôrm‚Çê {trunc} n

Œ©‚Ñô : {trunc : Bool} (n : ‚Ñï‚Çê‚Å∫¬π) ‚Üí Type‚ÇÄ
Œ©‚Ñô {trunc} n = Path (‚Ñôrm‚Çê {trunc} n) ùï°base' ùï°base'


involGuard : ‚àÄ {n} (p‚ÇÄ‚Çã p‚ÇÅ‚Çã : AB n) ‚Üí Type 
involGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã = ‚â°AB (swapAB p‚ÇÄ‚Çã) p‚ÇÅ‚Çã

hexGuard : ‚àÄ {n} (p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ : AB n) ‚Üí Type
hexGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ =
     (p‚ÇÄ‚Çã .lPad ‚â° p‚ÇÅ‚Çã .lPad)
   √ó (p‚ÇÅ‚Çã .rPad ‚â° p‚Çã‚ÇÅ .rPad)
   √ó (p‚Çã‚ÇÅ .l ‚â° p‚ÇÅ‚Çã .l) 
   √ó (p‚ÇÄ‚Çã .l ‚â° p‚ÇÅ‚Çã .l)
   √ó (p‚ÇÅ‚Çã .r ‚â° p‚ÇÄ‚Çã .r + p‚Çã‚ÇÅ .r) 
 where
 open AB
 
commGuard : ‚àÄ {n} (p·µ¢‚Çã p‚Çã·µ¢ : AB n) ‚Üí Type
commGuard p·µ¢‚Çã p‚Çã·µ¢ = Œ£ _ Œª cPad ‚Üí p‚Çã·µ¢ .lPad ‚â°
         ((p·µ¢‚Çã .lPad ‚äπ‚Çê ((p·µ¢‚Çã .l + p·µ¢‚Çã .r) ‚Çê+ cPad))) 
 where
 open AB


overGuard : ‚àÄ {n} (p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ : AB n) ‚Üí Type
overGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ =
  Œ£ (_ √ó _) (Œª (lPad' , rPad') ‚Üí
     (p‚ÇÅ‚Çã .lPad ‚â° p‚Çã·µ¢ .lPad ‚äπ lPad')
   √ó (p‚ÇÄ‚Çã .rPad ‚â° rPad' ‚äπ p‚Çã·µ¢ .rPad)
   √ó (p‚ÇÄ‚Çã .l ‚â° p‚ÇÅ‚Çã .l)
   √ó (p‚ÇÄ‚Çã .r ‚â° p‚ÇÅ‚Çã .r)
   √ó (lPad' +‚Çê (((p‚ÇÄ‚Çã .l) + (p‚ÇÄ‚Çã .r)) ‚Çê+ rPad') ‚â° p‚Çã·µ¢ .r))

 where
 open AB

-- cPad
--   ùï°over : ‚àÄ lPad rPad l x x' ‚Üí ‚àÄ p p' p'' ‚Üí
--      Square {A = ‚Ñôrm‚Çê {trunc} n}
--        (ùï°loop' (ùïíùïì (lPad ‚äπ‚Çê l + lPad') x x' (rPad' + rPad) p'))       
--        (ùï°loop' (ùïíùïì (lPad + lPad') x x' (rPad' + l ‚Çê‚äπ rPad) p''))
--        (ùï°loop' (ùïíùïì lPad l (lPad' + x' + x + rPad') rPad p))
--        (ùï°loop' (ùïíùïì lPad l (lPad' + x' + x + rPad') rPad p))


data ‚Ñôrm‚Çê {trunc} n where 
  ùï°base : ‚Ñôrm‚Çê n
  ùï°loop : AB n ‚Üí ùï°base ‚â° ùï°base
  ùï°invol : (p‚ÇÄ‚Çã p‚ÇÅ‚Çã : AB n) ‚Üí involGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã
            ‚Üí Square {A = ‚Ñôrm‚Çê {trunc} n}
                  (ùï°loop p‚ÇÄ‚Çã)
                  (sym (ùï°loop p‚ÇÅ‚Çã))
                  refl
                  refl
  ùï°hex : (p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ : AB n) ‚Üí hexGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ
    ‚Üí Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop p‚ÇÄ‚Çã)
       (ùï°loop p‚ÇÅ‚Çã)
       refl
       (ùï°loop p‚Çã‚ÇÅ)
  ùï°comm : (p·µ¢‚Çã p‚Çã·µ¢ : AB n) ‚Üí commGuard p·µ¢‚Çã p‚Çã·µ¢
     ‚Üí Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop p·µ¢‚Çã)
       (ùï°loop p·µ¢‚Çã)
       (ùï°loop p‚Çã·µ¢)
       (ùï°loop p‚Çã·µ¢)

  ùï°over : (p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ : AB n) ‚Üí overGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢
     ‚Üí Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop p‚ÇÄ‚Çã)
       (ùï°loop p‚ÇÅ‚Çã)
       (ùï°loop p‚Çã·µ¢)
       (ùï°loop p‚Çã·µ¢)

  ùï°squash : Bool‚ÜíType trunc ‚Üí isGroupoid (‚Ñôrm‚Çê n)

ùï°base' = ùï°base


-- record ‚ÑôrmRec (A : Type ‚Ñì) : Type ‚Ñì where
--  field
--   abase : ‚Ñï‚Çê‚Å∫¬π ‚Üí A
--   aloop : ‚àÄ n ‚Üí AB n ‚Üí abase n ‚â° abase n
--   ainvol : ‚àÄ n ab p ‚Üí aloop n  (swapAB' ab p) ‚â° sym (aloop n ab)
--   ahex : ‚àÄ n lPad rPad l c r ‚Üí ‚àÄ p p' p'' ‚Üí
--      Square {A = A}
--        (aloop n (ùïíùïì lPad l c (r ‚Çê‚äπ rPad) p''))
--        (aloop n (ùïíùïì lPad l (c + r) rPad p))
--        refl
--        (aloop n (ùïíùïì (lPad ‚äπ‚Çê c) l r rPad p'))       
--   acomm :
--       ‚àÄ n lPad cPad rPad l r l' r' ‚Üí ‚àÄ p p' ‚Üí
--      Square {A = A}
--        (aloop n (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))       
--        (aloop n (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))
--        (aloop n (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
--        (aloop n (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
--   aover : ‚àÄ n lPad rPad l x x' ‚Üí ‚àÄ p p' p'' ‚Üí
--      Square {A = A}
--        (aloop n (ùïíùïì (lPad ‚äπ‚Çê l) x x' rPad p'))       
--        (aloop n (ùïíùïì lPad x' x (l ‚Çê‚äπ rPad) p''))
--        (aloop n (ùïíùïì lPad l (x' + x) rPad p))
--        (aloop n (ùïíùïì lPad l (x' + x) rPad p))

--   asquash : isGroupoid A
  
--  f : ‚àÄ {n} ‚Üí ‚Ñôrm‚Çê {true} n ‚Üí A
--  f {n} ùï°base = abase n
--  f {n} (ùï°loop' x i) = aloop n x i
--  f {n} (ùï°invol' ab p i i‚ÇÅ) = ainvol n ab p i i‚ÇÅ
--  f {n} (ùï°hex' lPad rPad l c r p p' p'' i i‚ÇÅ) =
--    ahex n lPad rPad l c r p p' p'' i i‚ÇÅ
--  f {n} (ùï°comm lPad cPad rPad l r l' r' p p' i i‚ÇÅ) =
--    acomm n lPad cPad rPad l r l' r' p p' i i‚ÇÅ
--  f {n} (ùï°over lPad rPad l x x' p p' p'' i i‚ÇÅ) =
--    aover n lPad rPad l x x' p p' p'' i i‚ÇÅ
--  f (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) =
--   asquash _ _ _ _
--     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (x‚ÇÑ i‚ÇÇ x‚ÇÜ))
--     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (y‚ÇÅ i‚ÇÇ x‚ÇÜ))
--       i i‚ÇÅ x‚ÇÖ


record ‚ÑôrmElim (n : ‚Ñï‚Çê‚Å∫¬π) (A : ‚Ñôrm‚Çê {true} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 constructor ùï°rmElim
 field
  asquash : ‚àÄ p ‚Üí isGroupoid (A p)

  abase : A ùï°base
  aloop : (ab : AB n)
    ‚Üí PathP (Œª i ‚Üí A (ùï°loop ab i)) abase abase
  ainvol : (p‚ÇÄ‚Çã p‚ÇÅ‚Çã : AB n) ‚Üí ‚àÄ g ‚Üí
             SquareP (Œª i j ‚Üí A (ùï°invol p‚ÇÄ‚Çã p‚ÇÅ‚Çã g i j) )
               (aloop p‚ÇÄ‚Çã) (symP (aloop p‚ÇÅ‚Çã)) refl refl
  ahex :  (p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ : AB n) ‚Üí ‚àÄ g ‚Üí
      SquareP (Œª i j ‚Üí A (ùï°hex p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ g i j))
        (aloop p‚ÇÄ‚Çã)
        (aloop p‚ÇÅ‚Çã)
        refl
        (aloop p‚Çã‚ÇÅ)
  acomm : (p·µ¢‚Çã p‚Çã·µ¢ : AB n) ‚Üí ‚àÄ g ‚Üí
      SquareP (Œª i j ‚Üí A (ùï°comm p·µ¢‚Çã p‚Çã·µ¢ g i j))
       (aloop p·µ¢‚Çã)
       (aloop p·µ¢‚Çã)
       (aloop p‚Çã·µ¢)
       (aloop p‚Çã·µ¢)

  aover : (p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ : AB n) ‚Üí ‚àÄ g
     ‚Üí SquareP (Œª i j ‚Üí A (ùï°over p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ g i j))
       (aloop p‚ÇÄ‚Çã)
       (aloop p‚ÇÅ‚Çã)
       (aloop p‚Çã·µ¢)
       (aloop p‚Çã·µ¢)




 f : (p : ‚Ñôrm‚Çê {true} n) ‚Üí A p 
 f ùï°base = abase
 f (ùï°loop x i) = aloop x i
 f (ùï°invol p‚ÇÄ‚Çã p‚ÇÅ‚Çã x i i‚ÇÅ) = ainvol p‚ÇÄ‚Çã p‚ÇÅ‚Çã x i i‚ÇÅ

 f (ùï°hex p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ x i i‚ÇÅ) = ahex p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ x i i‚ÇÅ

 f (ùï°comm p·µ¢‚Çã p‚Çã·µ¢ x i i‚ÇÅ) = acomm p·µ¢‚Çã p‚Çã·µ¢ x i i‚ÇÅ

 f (ùï°over p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ x i i‚ÇÅ) = aover p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ x i i‚ÇÅ
 f (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) =   
     isOfHLevel‚ÜíisOfHLevelDep 3
      (asquash) _ _ _ _
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (x‚ÇÑ i‚ÇÇ x‚ÇÜ))
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (y‚ÇÅ i‚ÇÇ x‚ÇÜ))
     (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ)
       i i‚ÇÅ x‚ÇÖ


record ‚ÑôrmRecElimN (A : ‚Ñï‚Çê‚Å∫¬π ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  abase : ‚àÄ n ‚Üí A n
  aloop : ‚àÄ n ‚Üí AB n ‚Üí abase n ‚â° abase n
  ainvol : ‚àÄ n p‚ÇÄ‚Çã p‚ÇÅ‚Çã ‚Üí involGuard  p‚ÇÄ‚Çã p‚ÇÅ‚Çã
    ‚Üí aloop n p‚ÇÄ‚Çã ‚â° sym (aloop n p‚ÇÅ‚Çã)
  ahex : ‚àÄ n p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ ‚Üí hexGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ  
   ‚Üí  Square {A = A n}
       (aloop n p‚ÇÄ‚Çã)
       (aloop n p‚ÇÅ‚Çã)
       refl
       (aloop n p‚Çã‚ÇÅ)

  acomm : ‚àÄ n p·µ¢‚Çã p‚Çã·µ¢ ‚Üí commGuard p·µ¢‚Çã p‚Çã·µ¢
     ‚Üí Square {A = A n}
       (aloop n p·µ¢‚Çã)
       (aloop n p·µ¢‚Çã)
       (aloop n p‚Çã·µ¢)
       (aloop n p‚Çã·µ¢)

  aover : ‚àÄ n p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ ‚Üí overGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢
     ‚Üí Square {A = A n}
       (aloop n p‚ÇÄ‚Çã)
       (aloop n p‚ÇÅ‚Çã)
       (aloop n p‚Çã·µ¢)
       (aloop n p‚Çã·µ¢)


  asquash : ‚àÄ n ‚Üí isGroupoid (A n)
  
 f : ‚àÄ {n} ‚Üí ‚Ñôrm‚Çê {true} n ‚Üí A n
 f {n} ùï°base = abase n
 f {n} (ùï°loop x i) = aloop n x i
 f {n} (ùï°invol p‚ÇÄ‚Çã p‚ÇÅ‚Çã x i i‚ÇÅ) = ainvol n p‚ÇÄ‚Çã p‚ÇÅ‚Çã x i i‚ÇÅ
 f {n} (ùï°hex p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ x i i‚ÇÅ) = ahex n p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ x i i‚ÇÅ
 f {n} (ùï°comm p·µ¢‚Çã p‚Çã·µ¢ x i i‚ÇÅ) = acomm n p·µ¢‚Çã p‚Çã·µ¢ x i i‚ÇÅ
 f {n} (ùï°over p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ x i i‚ÇÅ) =
   aover n p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ x i i‚ÇÅ
 f {n} (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) =
   asquash n _ _ _ _
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f {n} (x‚ÇÑ i‚ÇÇ x‚ÇÜ))
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f {n} (y‚ÇÅ i‚ÇÇ x‚ÇÜ))
       i i‚ÇÅ x‚ÇÖ

record ‚ÑôrmElimSet (n : ‚Ñï‚Çê‚Å∫¬π) (A : ‚Ñôrm‚Çê {true} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 constructor ùï°rmElimSet
 field
  asquash : ‚àÄ p ‚Üí isSet (A p)

  abase : A ùï°base
  aloop : (ab : AB n)
    ‚Üí PathP (Œª i ‚Üí A (ùï°loop ab i)) abase abase


 f : (p : ‚Ñôrm‚Çê {true} n) ‚Üí A p
 f ùï°base = abase
 f (ùï°loop x i) = aloop x i
 f (ùï°invol p‚ÇÄ‚Çã p‚ÇÅ‚Çã x i i‚ÇÅ) =
   isSet‚ÜíSquareP
     (Œª i i‚ÇÅ ‚Üí asquash (ùï°invol p‚ÇÄ‚Çã p‚ÇÅ‚Çã x i i‚ÇÅ))
     (aloop p‚ÇÄ‚Çã) (symP (aloop p‚ÇÅ‚Çã))
     refl refl
     i i‚ÇÅ

 f (ùï°hex p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ x i i‚ÇÅ) =
    isSet‚ÜíSquareP
     (Œª i i‚ÇÅ ‚Üí asquash (ùï°hex p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ x i i‚ÇÅ))
     (aloop p‚ÇÄ‚Çã) (aloop p‚ÇÅ‚Çã)
     refl (aloop p‚Çã‚ÇÅ)
     i i‚ÇÅ

 f (ùï°comm p·µ¢‚Çã p‚Çã·µ¢ x i i‚ÇÅ) =
   isSet‚ÜíSquareP
     (Œª i i‚ÇÅ ‚Üí asquash (ùï°comm p·µ¢‚Çã p‚Çã·µ¢ x i i‚ÇÅ))
     (aloop p·µ¢‚Çã) (aloop p·µ¢‚Çã)
     (aloop p‚Çã·µ¢) (aloop p‚Çã·µ¢)
     i i‚ÇÅ
 f (ùï°over p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ x i i‚ÇÅ) =
   isSet‚ÜíSquareP
     (Œª i i‚ÇÅ ‚Üí asquash (ùï°over p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ x i i‚ÇÅ))
     (aloop p‚ÇÄ‚Çã) (aloop p‚ÇÅ‚Çã)
     (aloop p‚Çã·µ¢) (aloop p‚Çã·µ¢)
     i i‚ÇÅ
 f (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) =   
     isOfHLevel‚ÜíisOfHLevelDep 3
      (isSet‚ÜíisGroupoid ‚àò asquash ) _ _ _ _
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (x‚ÇÑ i‚ÇÇ x‚ÇÜ))
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (y‚ÇÅ i‚ÇÇ x‚ÇÜ))
     (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ)
       i i‚ÇÅ x‚ÇÖ

isSet‚ÑôrmElimSet : ‚àÄ {‚Ñì} {n} {A} ‚Üí isSet (‚ÑôrmElimSet {‚Ñì} n A)
isSet‚ÑôrmElimSet = isSetRetract
 (Œª x ‚Üí ‚ÑôrmElimSet.asquash x , ‚ÑôrmElimSet.abase x , ‚ÑôrmElimSet.aloop x)
 (uncurry (uncurry ùï°rmElimSet) ‚àò invEq Œ£-assoc-‚âÉ)
 w
 -- (Œª x i ‚Üí ùï°rmElimSet (‚ÑôrmElimSet.asquash x)
 --                      (‚ÑôrmElimSet.abase x)
 --                      (‚ÑôrmElimSet.aloop x))
 (isSetŒ£ 
   (isProp‚ÜíisSet (isPropŒ† (Œª _ ‚Üí isPropIsSet)))
   Œª isSetA ‚Üí isSetŒ£ (isSetA _) Œª _ ‚Üí
     isSetŒ† Œª _ ‚Üí isOfHLevelPathP 2 (isSetA _) _ _)

 where
 w : (x : ‚ÑôrmElimSet _ _) ‚Üí
       uncurry (uncurry ùï°rmElimSet) (invEq Œ£-assoc-‚âÉ _) ‚â° x
 
 ‚ÑôrmElimSet.asquash (w x i) = ‚ÑôrmElimSet.asquash x
 ‚ÑôrmElimSet.abase (w x i) = ‚ÑôrmElimSet.abase x
 ‚ÑôrmElimSet.aloop (w x i) = ‚ÑôrmElimSet.aloop x

record ‚ÑôrmElimSet‚ÇÇ (A : {n m : ‚Ñï‚Çê‚Å∫¬π} ‚Üí
                ‚Ñôrm‚Çê {true} n ‚Üí
                ‚Ñôrm‚Çê {true} m ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  asquash‚ÇÇ : ‚àÄ {n m} ‚Üí ‚àÄ x y ‚Üí isSet (A {n} {m} x y)

  abase‚ÇÇ : ‚àÄ {n m } ‚Üí A {n} {m} ùï°base ùï°base
  aloop‚Çô : ‚àÄ {n m} (ab : AB n)
    ‚Üí PathP (Œª i ‚Üí A {n} {m} (ùï°loop ab i) ùï°base) abase‚ÇÇ abase‚ÇÇ
  aloop‚Çò : ‚àÄ {n m} (ab : AB m)
    ‚Üí PathP (Œª i ‚Üí A {n} {m} ùï°base (ùï°loop ab i)) abase‚ÇÇ abase‚ÇÇ
  
 open ‚ÑôrmElimSet

 f** : ‚àÄ {n m} ‚Üí ‚ÑôrmElimSet m (A {n} {m} ùï°base)
 asquash f** _ = asquash‚ÇÇ ùï°base _
 abase f** = abase‚ÇÇ
 aloop f** = aloop‚Çò

 f* : ‚àÄ {n m} ‚Üí ‚ÑôrmElimSet n
           (Œª v ‚Üí ‚ÑôrmElimSet m (A v))
 asquash f* _ = isSet‚ÑôrmElimSet
 abase f* = f**
 asquash (aloop f* ab i) = asquash‚ÇÇ (ùï°loop ab i) 
 abase (aloop f* ab i) = aloop‚Çô ab i
 aloop (aloop f* _ i) _ j = 
   isSet‚ÜíSquareP (Œª i j ‚Üí asquash‚ÇÇ (ùï°loop _ i) (ùï°loop _ j))
     (aloop‚Çò _) (aloop‚Çò _) (aloop‚Çô _) (aloop‚Çô _) i j
 
 f‚ÇÇ :  ‚àÄ {n m} ‚Üí ‚àÄ x y ‚Üí A {n} {m} x y
 f‚ÇÇ {n} {m} x = ‚ÑôrmElimSet.f (‚ÑôrmElimSet.f (f* {n} {m}) x )

record ‚ÑôrmElimProp‚ÇÇ (A : {n m : ‚Ñï‚Çê‚Å∫¬π} ‚Üí
                ‚Ñôrm‚Çê {true} n ‚Üí
                ‚Ñôrm‚Çê {true} m ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  asquash‚ÇÇ : ‚àÄ {n m} ‚Üí ‚àÄ x y ‚Üí isProp (A {n} {m} x y)

  abase‚ÇÇ : ‚àÄ {n m } ‚Üí A {n} {m} ùï°base ùï°base

 f‚ÇÇ : ‚àÄ {n m} ‚Üí ‚àÄ x y ‚Üí A {n} {m} x y
 f‚ÇÇ = ‚ÑôrmElimSet‚ÇÇ.f‚ÇÇ w
  where
  w : ‚ÑôrmElimSet‚ÇÇ A
  ‚ÑôrmElimSet‚ÇÇ.asquash‚ÇÇ w _ _ = isProp‚ÜíisSet (asquash‚ÇÇ _ _)
  ‚ÑôrmElimSet‚ÇÇ.abase‚ÇÇ w = abase‚ÇÇ
  ‚ÑôrmElimSet‚ÇÇ.aloop‚Çô w ab =
   isProp‚ÜíPathP (Œª i ‚Üí asquash‚ÇÇ (ùï°loop ab i) ùï°base) _ _
  ‚ÑôrmElimSet‚ÇÇ.aloop‚Çò w ab =
   isProp‚ÜíPathP (Œª i ‚Üí asquash‚ÇÇ ùï°base (ùï°loop ab i) ) _ _


record ‚ÑôrmElimSet‚ÇÉ (A : {n m o : ‚Ñï‚Çê‚Å∫¬π} ‚Üí
                ‚Ñôrm‚Çê {true} n ‚Üí
                ‚Ñôrm‚Çê {true} m ‚Üí
                ‚Ñôrm‚Çê {true} o ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  asquash‚ÇÉ : ‚àÄ {n m o} ‚Üí ‚àÄ x y z ‚Üí isSet (A {n} {m} {o} x y z)

  abase‚ÇÉ : ‚àÄ {n m o} ‚Üí A {n} {m} {o} ùï°base ùï°base ùï°base
  aloop‚Çô : ‚àÄ {n m o} (ab : AB n)
    ‚Üí PathP (Œª i ‚Üí A {n} {m} {o} (ùï°loop ab i) ùï°base ùï°base) abase‚ÇÉ abase‚ÇÉ
  aloop‚Çò : ‚àÄ {n m o} (ab : AB m)
    ‚Üí PathP (Œª i ‚Üí A {n} {m} {o}  ùï°base (ùï°loop ab i) ùï°base) abase‚ÇÉ abase‚ÇÉ
  aloop‚Çí : ‚àÄ {n m o} (ab : AB o)
    ‚Üí PathP (Œª i ‚Üí A {n} {m} {o}  ùï°base ùï°base (ùï°loop ab i)) abase‚ÇÉ abase‚ÇÉ
  
 open ‚ÑôrmElimSet

 f** : ‚àÄ {n m o} ‚Üí ‚ÑôrmElimSet o (A {n} {m} ùï°base ùï°base)
 asquash f** _ = asquash‚ÇÉ _ _ _
 abase f** = abase‚ÇÉ
 aloop f** = aloop‚Çí

 f*** : ‚àÄ {n m o} ‚Üí ‚àÄ ab ‚Üí
   PathP (Œª i ‚Üí (‚ÑôrmElimSet o ‚àò A {n} {m} {o} ùï°base) (ùï°loop ab i))
     (f** {n} {m} {o}) (f** {n} {m} {o})
 asquash (f*** ab i)  = asquash‚ÇÉ ùï°base (ùï°loop ab i)
 abase (f*** ab i) = aloop‚Çò ab i
 aloop (f*** _ i) _ =
      isSet‚ÜíSquareP (Œª i j ‚Üí asquash‚ÇÉ _ (ùï°loop _ i) (ùï°loop _ j))
     (aloop‚Çí _) (aloop‚Çí _) (aloop‚Çò _) (aloop‚Çò _) i


 f* : ‚àÄ {n m o} ‚Üí ‚ÑôrmElimSet m (‚ÑôrmElimSet o ‚àò (A {n} ùï°base))
 asquash f* _ = isSet‚ÑôrmElimSet
 abase f* = f**
 aloop f* = f***

 f**** : ‚àÄ {n m o} ‚Üí
    (ab : AB n) ‚Üí
      PathP (Œª i ‚Üí (‚ÑôrmElimSet m ‚àò _‚àò_ (‚ÑôrmElimSet o) ‚àò A) (ùï°loop ab i))
      f* f*
 asquash (f**** {n} {m} {o} ab i) =
   (isProp‚ÜíPathP (Œª i ‚Üí isPropŒ† Œª _ ‚Üí isPropIsSet
     {A = ‚ÑôrmElimSet o (A (ùï°loop ab i) _)})
    (asquash (f* {n} {m} {o})) (asquash (f* {n} {m} {o})) i)
 asquash (abase (f**** ab i)) p = asquash‚ÇÉ (ùï°loop _ i) ùï°base p
 abase (abase (f**** ab i)) = aloop‚Çô ab i

 aloop (abase (f**** _ i)) _ =
     isSet‚ÜíSquareP
      (Œª i j ‚Üí asquash‚ÇÉ (ùï°loop _ i) ùï°base  (ùï°loop _ j))
          (aloop‚Çí _) (aloop‚Çí _) (aloop‚Çô _) (aloop‚Çô _) i
 asquash (aloop (f**** ab i) ab' i‚ÇÅ) p =
   asquash‚ÇÉ (ùï°loop ab i) (ùï°loop ab' i‚ÇÅ) p
 abase (aloop (f**** ab i) ab' i‚ÇÅ) =
   isSet‚ÜíSquareP
      (Œª i j ‚Üí asquash‚ÇÉ (ùï°loop _ i)  (ùï°loop _ j)  ùï°base)
          (aloop‚Çò _) (aloop‚Çò _) (aloop‚Çô _) (aloop‚Çô _) i i‚ÇÅ
 aloop (aloop (f**** {n} {m} {o} ab i) ab' i‚ÇÅ) ab'' = 
  isSet‚ÜíSquareP {A = Œª i i‚ÇÅ ‚Üí
      PathP (Œª i‚ÇÇ ‚Üí A (ùï°loop ab i) (ùï°loop ab' i‚ÇÅ) (ùï°loop ab'' i‚ÇÇ))
      (isSet‚ÜíSquareP
       (Œª i‚ÇÇ j ‚Üí asquash‚ÇÉ (ùï°loop ab i‚ÇÇ) (ùï°loop ab' j) ùï°base) (aloop‚Çò ab')
       (aloop‚Çò ab') (aloop‚Çô ab) (aloop‚Çô ab) i i‚ÇÅ)
      (isSet‚ÜíSquareP
       (Œª i‚ÇÇ j ‚Üí asquash‚ÇÉ (ùï°loop ab i‚ÇÇ) (ùï°loop ab' j) ùï°base) (aloop‚Çò ab')
       (aloop‚Çò ab') (aloop‚Çô ab) (aloop‚Çô ab) i i‚ÇÅ)}
   (Œª i i‚ÇÅ ‚Üí  isOfHLevelPathP' 1 (isOfHLevelPathP 2
      (asquash‚ÇÉ (ùï°loop ab i) (ùï°loop ab' i‚ÇÅ) ùï°base) _ _) )
   (isSet‚ÜíSquareP
         (Œª i‚ÇÇ j ‚Üí asquash‚ÇÉ {n} {m} {o} ùï°base (ùï°loop ab' i‚ÇÇ) (ùï°loop ab'' j))
         (aloop‚Çí ab'') (aloop‚Çí ab'') (aloop‚Çò ab') (aloop‚Çò ab'))
   (isSet‚ÜíSquareP
         (Œª i‚ÇÇ j ‚Üí asquash‚ÇÉ {n} {m} {o} ùï°base (ùï°loop ab' i‚ÇÇ) (ùï°loop ab'' j))
         (aloop‚Çí ab'') (aloop‚Çí ab'') (aloop‚Çò ab') (aloop‚Çò ab'))
   (isSet‚ÜíSquareP
          (Œª i‚ÇÇ j ‚Üí asquash‚ÇÉ {n} {m} {o} (ùï°loop ab i‚ÇÇ) ùï°base (ùï°loop ab'' j))
          (aloop‚Çí ab'') (aloop‚Çí ab'') (aloop‚Çô ab) (aloop‚Çô ab))
   (isSet‚ÜíSquareP
          (Œª i‚ÇÇ j ‚Üí asquash‚ÇÉ {n} {m} {o} (ùï°loop ab i‚ÇÇ) ùï°base (ùï°loop ab'' j))
          (aloop‚Çí ab'') (aloop‚Çí ab'') (aloop‚Çô ab) (aloop‚Çô ab))
     i i‚ÇÅ

 f''' : ‚àÄ {n m o} ‚Üí
    ‚ÑôrmElimSet n (‚ÑôrmElimSet m ‚àò (‚ÑôrmElimSet o ‚àò_) ‚àò A)
 asquash f''' p = isSet‚ÑôrmElimSet
 abase f''' = f*
 aloop f''' = f****

 f‚ÇÉ :  ‚àÄ {n m o} ‚Üí ‚àÄ x y z ‚Üí A {n} {m} {o} x y z
 f‚ÇÉ x y = ‚ÑôrmElimSet.f (‚ÑôrmElimSet.f (‚ÑôrmElimSet.f f''' x) y)

record ‚ÑôrmElimProp‚ÇÉ (A : {n m o : ‚Ñï‚Çê‚Å∫¬π} ‚Üí
                ‚Ñôrm‚Çê {true} n ‚Üí
                ‚Ñôrm‚Çê {true} m ‚Üí
                ‚Ñôrm‚Çê {true} o ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  asquash‚ÇÉ : ‚àÄ {n m o} ‚Üí ‚àÄ x y z ‚Üí isProp (A {n} {m} {o} x y z)

  abase‚ÇÉ : ‚àÄ {n m o} ‚Üí A {n} {m} {o} ùï°base ùï°base ùï°base
  

 f‚ÇÉ : ‚àÄ {n m o} ‚Üí ‚àÄ x y z ‚Üí A {n} {m} {o} x y z 
 f‚ÇÉ = ‚ÑôrmElimSet‚ÇÉ.f‚ÇÉ w
  where
  w : ‚ÑôrmElimSet‚ÇÉ A
  ‚ÑôrmElimSet‚ÇÉ.asquash‚ÇÉ w _ _ _ = isProp‚ÜíisSet (asquash‚ÇÉ _ _ _)
  ‚ÑôrmElimSet‚ÇÉ.abase‚ÇÉ w = abase‚ÇÉ
  ‚ÑôrmElimSet‚ÇÉ.aloop‚Çô w _ = isProp‚ÜíPathP (Œª i ‚Üí asquash‚ÇÉ _ _ _) _ _ 
  ‚ÑôrmElimSet‚ÇÉ.aloop‚Çò w _ = isProp‚ÜíPathP (Œª i ‚Üí asquash‚ÇÉ _ _ _) _ _ 
  ‚ÑôrmElimSet‚ÇÉ.aloop‚Çí w _ = isProp‚ÜíPathP (Œª i ‚Üí asquash‚ÇÉ _ _ _) _ _ 

record ‚ÑôrmElimProp (n : ‚Ñï‚Çê‚Å∫¬π) (A : ‚Ñôrm‚Çê {true} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  abase : A ùï°base
  asquash : ‚àÄ p ‚Üí isProp (A p)

 fR : ‚ÑôrmElimSet n A
 ‚ÑôrmElimSet.abase fR = abase
 ‚ÑôrmElimSet.aloop fR ab = isProp‚ÜíPathP (Œª i ‚Üí asquash (ùï°loop ab i)) _ _
 ‚ÑôrmElimSet.asquash fR = isProp‚ÜíisSet ‚àò asquash

 f : (p : ‚Ñôrm‚Çê {true} n) ‚Üí A p
 f =  ‚ÑôrmElimSet.f fR




+ùï°* : ‚àÄ n {m} ‚Üí ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (n + m) 
+ùï°* n = ‚ÑôrmRecElimN.f w
 where
 open ‚ÑôrmRecElimN
 w : ‚ÑôrmRecElimN (Œª m ‚Üí ‚Ñôrm‚Çê (n + m))
 abase w _ = ùï°base
 aloop w m x = ùï°loop (m+AB n x)
 ainvol w _ _ _ g =  ùï°invol _ _ (map-fst (cong (n ‚Çê‚äπ_)) g)   
 ahex w m _ _ _ g = ùï°hex _ _ _ (map-fst (cong (n ‚Çê‚äπ_)) g)    
 acomm w m _ _ g = ùï°comm _ _
    (map-snd (Œª p ‚Üí cong (n ‚Çê‚äπ_) p ‚àô cong just +-+‚Çê‚â°‚Çê+-+) g)    
 aover w m _ _ p‚Çã·µ¢ g = ùï°over _ _ _
   (map-snd (Œª {a} ‚Üí map-fst (Œª q ‚Üí cong (n ‚Çê‚äπ_) q ‚àô
       cong just (‚Çê+‚Çê-assoc'  n (p‚Çã·µ¢ .AB.lPad) (fst a))))
     g)

 asquash w _ = ùï°squash _


+ùï° : ‚àÄ n {m} ‚Üí ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (n + m) 
+ùï° n = ‚ÑôrmRecElimN.f w
 where
 open ‚ÑôrmRecElimN
 w : ‚ÑôrmRecElimN (Œª m ‚Üí ‚Ñôrm‚Çê (n + m))
 abase w _ = ùï°base
 aloop w m x = ùï°loop (m+AB n x)
 ainvol w _ _ _ g =  ùï°invol _ _ (map-fst (cong (n ‚Çê‚äπ_)) g)   
 ahex w m _ _ _ g = ùï°hex _ _ _ (map-fst (cong (n ‚Çê‚äπ_)) g)    
 acomm w m _ _ g = ùï°comm _ _
    (map-snd (Œª p ‚Üí cong (n ‚Çê‚äπ_) p ‚àô cong just +-+‚Çê‚â°‚Çê+-+) g)    
 aover w m _ _ p‚Çã·µ¢ g = ùï°over _ _ _
   (map-snd (Œª {a} ‚Üí map-fst (Œª q ‚Üí cong (n ‚Çê‚äπ_) q ‚àô
       cong just (‚Çê+‚Çê-assoc'  n (p‚Çã·µ¢ .AB.lPad) (fst a))))
     g)

 asquash w _ = ùï°squash _

ùï°+ : ‚àÄ n {m} ‚Üí ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (m + n) 
ùï°+ n = ‚ÑôrmRecElimN.f w
 where
 open ‚ÑôrmRecElimN
 w : ‚ÑôrmRecElimN (Œª m ‚Üí ‚Ñôrm‚Çê (m + n))
 abase w _ = ùï°base
 aloop w m x = ùï°loop (AB+m n x)
 ainvol w _ _ _ g =
   ùï°invol _ _ (map-snd (map-snd (map-snd (cong (_‚äπ‚Çê n)))) g)
 ahex w m _ _ _ g = ùï°hex _ _ _ ((map-snd (map-fst (cong (_‚äπ‚Çê n)))) g)    
 acomm w m _ _ g = ùï°comm _ _ g    
 aover w m _ _ p‚Çã·µ¢ g = ùï°over _ _ _
   (map-snd (Œª {a} ‚Üí map-snd (map-fst
     (Œª p ‚Üí cong (_‚äπ‚Çê n) p ‚àô ‚Çê+‚Çê-assoc'' (snd a) (p‚Çã·µ¢ .AB.rPad) n))) g)    
 asquash w _ = ùï°squash _


ùï°¬∑ : ‚àÄ {n} ‚Üí ‚Ñôrm‚Çê {true} n ‚Üí ‚àÄ {m} ‚Üí  ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (n + m) 
ùï°¬∑ = ‚ÑôrmRecElimN.f
   {A = Œª n ‚Üí ‚àÄ {m} ‚Üí  ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (n + m)} w
 where
 open ‚ÑôrmRecElimN
 open AB


 wL : (n : ‚Ñï‚Çê‚Å∫¬π) ‚Üí AB n ‚Üí
        Path (‚àÄ {m} ‚Üí ‚Ñôrm‚Çê m ‚Üí ‚Ñôrm‚Çê (n + m))
        _ _
 wL n ab‚Çô = implicitFunExt
   Œª {m} ‚Üí funExt (‚ÑôrmElimSet.f {n = m} (w' m))
  where
  open ‚ÑôrmElimSet
  w' : ‚àÄ m ‚Üí ‚ÑôrmElimSet m _
  abase (w' m) = cong (ùï°+ m {n}) (ùï°loop ab‚Çô) 
  aloop (w' m) ab‚Çò =
    ùï°comm (AB+m m ab‚Çô) (m+AB n ab‚Çò)
      (rPad ab‚Çô ‚äπ lPad ab‚Çò
      , sym (cong (_‚Çê‚äπ lPad ab‚Çò) (<n ab‚Çô)) ‚àô
      (cong just (+‚Çê-lem {lPad ab‚Çô} {l ab‚Çô} {r ab‚Çô} {rPad ab‚Çô} {lPad ab‚Çò}) ))  
   
  asquash (w' m) _ = ùï°squash _ _ _

 wInv : (n : ‚Ñï‚Çê‚Å∫¬π) (p‚ÇÄ‚Çã p‚ÇÅ‚Çã : AB n) ‚Üí
          involGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã ‚Üí
          wL n p‚ÇÄ‚Çã ‚â° sym (wL n p‚ÇÅ‚Çã)
 wInv n p‚ÇÄ‚Çã p‚ÇÅ‚Çã g = 
  implicitFunExtSq _ _ _ _
   Œª m ‚Üí funExtSq _ _ _ _ (‚ÑôrmElimProp.f (w' m))
   where
   open ‚ÑôrmElimProp
   w' : ‚àÄ m ‚Üí ‚ÑôrmElimProp m _
   abase (w' m) =
    ùï°invol _ _
       (map-snd (map-snd (map-snd (cong (_‚äπ‚Çê m)))) g)

   asquash (w' m) p = 
     isOfHLevelPathP' 1
       (isOfHLevelPathP' 2 (ùï°squash _)
         _ _) _ _

 wHex : (n‚ÇÅ : ‚Ñï‚Çê‚Å∫¬π) (p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ : AB n‚ÇÅ) ‚Üí
      hexGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ ‚Üí
      Square (wL n‚ÇÅ p‚ÇÄ‚Çã) (wL n‚ÇÅ p‚ÇÅ‚Çã) refl (wL n‚ÇÅ p‚Çã‚ÇÅ)
 wHex n p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã‚ÇÅ g =
  implicitFunExtSq _ _ _ _
  Œª m ‚Üí funExtSq _ _ _ _ (‚ÑôrmElimProp.f (w' m))
  where
  open ‚ÑôrmElimProp
  w' : ‚àÄ m ‚Üí ‚ÑôrmElimProp m _
  abase (w' m) =
   ùï°hex _ _ _ (map-snd (map-fst (cong (_‚äπ‚Çê m))) g)
  asquash (w' m) p = 
    isOfHLevelPathP' 1
      (isOfHLevelPathP' 2 (ùï°squash _)
        _ _) _ _


 wComm : (n‚ÇÅ : ‚Ñï‚Çê‚Å∫¬π) (p·µ¢‚Çã p‚Çã·µ¢ : AB n‚ÇÅ) ‚Üí
      commGuard p·µ¢‚Çã p‚Çã·µ¢ ‚Üí
      Square (wL n‚ÇÅ p·µ¢‚Çã) (wL n‚ÇÅ p·µ¢‚Çã) (wL n‚ÇÅ p‚Çã·µ¢) (wL n‚ÇÅ p‚Çã·µ¢)
 wComm _ _ _ g =
  implicitFunExtSq _ _ _ _
  Œª m ‚Üí funExtSq _ _ _ _ (‚ÑôrmElimProp.f (w' m))
  where
  open ‚ÑôrmElimProp
  w' : ‚àÄ m ‚Üí ‚ÑôrmElimProp m _
  abase (w' m) = ùï°comm _ _ g

  asquash (w' m) p = 
    isOfHLevelPathP' 1
      (isOfHLevelPathP' 2 (ùï°squash _)
        _ _) _ _


 wOver : (n‚ÇÅ : ‚Ñï‚Çê‚Å∫¬π) (p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ : AB n‚ÇÅ) ‚Üí
      overGuard p‚ÇÄ‚Çã p‚ÇÅ‚Çã p‚Çã·µ¢ ‚Üí
      Square (wL n‚ÇÅ p‚ÇÄ‚Çã) (wL n‚ÇÅ p‚ÇÅ‚Çã) (wL n‚ÇÅ p‚Çã·µ¢) (wL n‚ÇÅ p‚Çã·µ¢)
 wOver _ _ _ p‚Çã·µ¢ g =
  implicitFunExtSq _ _ _ _
  Œª m ‚Üí funExtSq _ _ _ _ (‚ÑôrmElimProp.f (w' m))
  where
  open ‚ÑôrmElimProp
  w' : ‚àÄ m ‚Üí ‚ÑôrmElimProp m _
  abase (w' m) = 
    ùï°over _ _ _
    (map-snd (Œª {a} ‚Üí map-snd (map-fst
     (Œª p ‚Üí cong (_‚äπ‚Çê m) p ‚àô ‚Çê+‚Çê-assoc'' (snd a) (p‚Çã·µ¢ .rPad) m)
     )) g)

  asquash (w' m) p = 
    isOfHLevelPathP' 1
      (isOfHLevelPathP' 2 (ùï°squash _)
        _ _) _ _


 w : ‚ÑôrmRecElimN _
 abase w = +ùï°
 aloop w = wL

 ainvol w = wInv

 ahex w = wHex
 acomm w = wComm
 aover w = wOver
 asquash w _ =
   isOfHLevelRespectEquiv 3
     (invEquiv implicit‚âÉExplicit)
     (isGroupoidŒ†2 Œª _ _ ‚Üí ùï°squash _)



ùï°loopP : ‚àÄ lPad l r rPad ‚Üí
     PathP (Œª i ‚Üí ‚Ñôrm‚Çê {true} (lPad +‚Çê +-sym l r i ‚Çê+ rPad))
       ùï°base
       ùï°base
ùï°loopP lPad l r rPad i =
 ùï°loop (ùïíùïì lPad l r rPad Œª j ‚Üí lPad +‚Çê +-sym l r (j ‚àß i) ‚Çê+ rPad) i


ùï°¬∑-comm : ‚àÄ {n m} ‚Üí (x : ‚Ñôrm‚Çê {true} n)
         (y : ‚Ñôrm‚Çê {true} m) ‚Üí 
     PathP (Œª i ‚Üí ‚Ñôrm‚Çê {true} (+-sym n m i))
       (ùï°¬∑ x y)
       (ùï°¬∑ y x)
ùï°¬∑-comm = ‚ÑôrmElimSet‚ÇÇ.f‚ÇÇ w
 where
 open AB
 open ‚ÑôrmElimSet‚ÇÇ
 w : ‚ÑôrmElimSet‚ÇÇ Œª {n m} (x : ‚Ñôrm‚Çê {true} n)
         (y : ‚Ñôrm‚Çê {true} m) ‚Üí 
     PathP (Œª i ‚Üí ‚Ñôrm‚Çê {true} (+-sym n m i))
       (ùï°¬∑ x y)
       (ùï°¬∑ y x)
 asquash‚ÇÇ w _ _ = isOfHLevelPathP' 2 (ùï°squash _) _ _
 abase‚ÇÇ w = ùï°loopP nothing _ _ nothing
 aloop‚Çô w {n} {m} ab =
   let z : PathP
         (Œª i ‚Üí
         PathP (Œª i‚ÇÅ ‚Üí ‚Ñôrm‚Çê {true} (+-sym n m i‚ÇÅ)) (ùï°¬∑ (ùï°loop ab i) ùï°base)
         (ùï°¬∑ ùï°base (ùï°loop ab i)))
           _ _
       z = (Œª i j ‚Üí ùï°over
          
          (ùïíùïì (lPad (m+AB m ab))
           (l (m+AB m ab))
           (r (m+AB m ab))
           (rPad (m+AB m ab))
           Œª i‚ÇÅ ‚Üí isSet‚ÜíSquareP
                   (Œª _ _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π)
                   refl
                   (sym (+-sym n m)) --(+-sym n m)
                   (<n (m+AB m ab))
                   (<n (m+AB m ab) ‚àô +-sym m n)
                   i‚ÇÅ (~ j))
          (ùïíùïì (lPad (AB+m m ab))
           (l (AB+m m ab))
           (r (AB+m m ab))
           (rPad (AB+m m ab))
            Œª i‚ÇÅ ‚Üí isSet‚ÜíSquareP
                   (Œª _ _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π)
                   refl
                   (sym (+-sym n m))
                   (<n (AB+m m ab) ‚àô +-sym n m) --(<n (AB+m m ab) ‚àô ?)
                   (<n (AB+m m ab)) --(<n (AB+m m ab))
                    --(<n (AB+m m ab) ‚àô +-sym n m)
                   i‚ÇÅ (~ j))
          (ùïíùïì nothing m n nothing (Œª j‚ÇÅ ‚Üí +-sym n m (j ‚à® ~ j‚ÇÅ)))
          ((lPad ab , rPad ab) ,
            refl , ((sym ‚äπ-0) ,
              (refl , (refl , (‚Çê+‚Çê-assoc (lPad ab) _ _) ‚àô <n ab))))
          (~ j) i)
   in  (Œª i j ‚Üí (ùï°invol (ùïíùïì nothing n m nothing  Œª i‚ÇÅ ‚Üí +-sym n m (i‚ÇÅ ‚àß j))
                        (ùïíùïì nothing m n nothing Œª i‚ÇÅ ‚Üí +-sym n m (j ‚à® ~ i‚ÇÅ))
                        (refl , (refl , refl , refl)) i j))
        ‚óÅ z ‚ñ∑
        (Œª i j ‚Üí (ùï°invol
           (ùïíùïì nothing n m nothing Œª i‚ÇÅ ‚Üí +-sym n m (i‚ÇÅ ‚àß j))
           (ùïíùïì nothing m n nothing Œª i‚ÇÅ ‚Üí +-sym n m (j ‚à® ~ i‚ÇÅ))
           (refl , (refl , refl , refl)) (~ i) j))  
       
 aloop‚Çò w {n} {m} ab i j =
   ùï°over
      (ùïíùïì (lPad (m+AB n ab))
           (l (m+AB n ab))
           (r (m+AB n ab))
           (rPad (m+AB n ab))
           Œª i‚ÇÅ ‚Üí isSet‚ÜíSquareP
                   (Œª _ _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π)
                   refl
                   (+-sym n m)
                   (<n (m+AB n ab))
                   (<n (m+AB n ab) ‚àô +-sym n m)
                   i‚ÇÅ j)

      (ùïíùïì (lPad (AB+m n ab))
           (l (AB+m n ab))
           (r (AB+m n ab))
           (rPad (AB+m n ab))
                      Œª i‚ÇÅ ‚Üí isSet‚ÜíSquareP
                   (Œª _ _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π)
                   refl
                   (+-sym n m)                                      
                   (<n (AB+m n ab) ‚àô +-sym m n)
                   (<n (AB+m n ab))
                   i‚ÇÅ j)
      (ùïíùïì nothing n m nothing (Œª j‚ÇÅ ‚Üí +-sym n m (j‚ÇÅ ‚àß j)))
      ((lPad ab , rPad ab ) ,
         refl , (sym ‚äπ-0 , (refl ,
          (refl , (‚Çê+‚Çê-assoc (lPad ab) _ _) ‚àô <n ab))))
          j i 
    where
    open AB

ùï°¬∑-assoc : ‚àÄ {n m o} ‚Üí (x : ‚Ñôrm‚Çê {true} n)
         (y : ‚Ñôrm‚Çê {true} m)
         (z : ‚Ñôrm‚Çê {true} o) ‚Üí 
     PathP (Œª i ‚Üí ‚Ñôrm‚Çê {true} (+-assoc n m o i))
       (ùï°¬∑ x (ùï°¬∑ y z))
       (ùï°¬∑ (ùï°¬∑ x y) z)
ùï°¬∑-assoc = ‚ÑôrmElimSet‚ÇÉ.f‚ÇÉ w
 where
 open ‚ÑôrmElimSet‚ÇÉ
 open AB
 w : ‚ÑôrmElimSet‚ÇÉ Œª {n m o} (x : ‚Ñôrm‚Çê {true} n)
         (y : ‚Ñôrm‚Çê {true} m)
         (z : ‚Ñôrm‚Çê {true} o) ‚Üí 
     PathP (Œª i ‚Üí ‚Ñôrm‚Çê {true} (+-assoc n m o i))
       (ùï°¬∑ x (ùï°¬∑ y z))
       (ùï°¬∑ (ùï°¬∑ x y) z)
 asquash‚ÇÉ w _ _ _ =
  isOfHLevelPathP' 2 (ùï°squash _) _ _ 
 abase‚ÇÉ w _ = ùï°base
 aloop‚Çô w ab = flipSquareP (congP (Œª _ ‚Üí ùï°loop)
   (congP‚ÇÇ (Œª _ ‚Üí ùïíùïì (lPad ab) (l ab) (r ab))
         (cong just +-+‚Çê‚â°‚Çê+-+')
           (isSet‚ÜíSquareP (Œª _ _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π)
            _ _ _ _)))
   

 aloop‚Çò  w {n} {m} {o} ab =
   flipSquareP (congP (Œª _ ‚Üí ùï°loop)
     (congP (Œª _ ‚Üí ùïíùïì (just (n ‚Çê+ lPad ab)) (l ab) (r ab)
             (just (rPad ab +‚Çê o)))
       (isSet‚ÜíSquareP (Œª _ _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π)
            _ _ _ _)))
 aloop‚Çí w {n} {m} {o} ab = flipSquareP (congP (Œª _ ‚Üí ùï°loop)
    (congP‚ÇÇ (Œª i x ‚Üí ùïíùïì {n = +-assoc n m o i} x (l ab) (r ab)
             (rPad ab))
             (cong just +-‚Çê+‚â°‚Çê+-+')
       (isSet‚ÜíSquareP (Œª _ _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π)
            _ _ _ _)))



infixr 5 _¬∑_


data FCSG‚ä§ : Type where
 ‚óè : FCSG‚ä§
 _¬∑_ : FCSG‚ä§ ‚Üí FCSG‚ä§ ‚Üí FCSG‚ä§
 ¬∑-assoc :  ‚àÄ m n o ‚Üí m ¬∑ (n ¬∑ o) ‚â° (m ¬∑ n) ¬∑ o
 ¬∑-comm :  ‚àÄ m n ‚Üí m ¬∑ n ‚â° n ¬∑ m
 ¬∑-comminvol :  ‚àÄ m n ‚Üí ¬∑-comm m n ‚â° sym (¬∑-comm n m)
 ¬∑-hex-diag : ‚àÄ l c r ‚Üí
      ((l ¬∑ c) ¬∑ r) ‚â° (c ¬∑ (r ¬∑ l))
 ¬∑-hex-up : ‚àÄ l c r ‚Üí
      Square 
        (¬∑-comm l (c ¬∑ r))
        (¬∑-hex-diag l c r)
        (¬∑-assoc l c r)
        (sym (¬∑-assoc c r l))
 ¬∑-hex-down :  ‚àÄ l c r ‚Üí
      Square 
        (¬∑-hex-diag l c r)
        (sym (¬∑-assoc c l r))
        (cong (_¬∑ r) (¬∑-comm l c))
        (cong (c ¬∑_) (¬∑-comm r l))

 ¬∑-pentagon-diag : ‚àÄ xs ys zs ws
      ‚Üí ((xs ¬∑ ys) ¬∑ zs) ¬∑ ws ‚â° xs ¬∑ ys ¬∑ zs ¬∑ ws
 ¬∑-pentagon-‚ñ≥ : ‚àÄ xs ys zs ws  ‚Üí
       Square refl (¬∑-pentagon-diag xs ys zs ws)
         (¬∑-assoc _ _ _) (sym (¬∑-assoc _ _ _))
 ¬∑-pentagon-‚ñ° : ‚àÄ xs ys zs ws ‚Üí
       Square (¬∑-pentagon-diag xs ys zs ws)
          (sym (¬∑-assoc xs (ys ¬∑ zs) ws))
          (sym (cong (_¬∑ ws) (¬∑-assoc _ _ _)))           
          ((cong (xs ¬∑_) (¬∑-assoc _ _ _)))
 trunc : isGroupoid FCSG‚ä§
 
record ElimFCSG {‚Ñì} (A : FCSG‚ä§ ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  asquash : ‚àÄ x ‚Üí isGroupoid (A x)
  ‚óèa : A ‚óè
  ¬∑a : ‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n ¬∑ m)
  ¬∑a-assoc : ‚àÄ {n m o} ‚Üí (a : A n) ‚Üí (b : A m) ‚Üí (c : A o) ‚Üí
                PathP
                  (Œª i ‚Üí A (¬∑-assoc n m o i))
                  (¬∑a a (¬∑a b c))
                  (¬∑a (¬∑a a b) c)
  ¬∑a-comm : ‚àÄ {n m} ‚Üí (a : A n) ‚Üí (b : A m) ‚Üí
                PathP
                  (Œª i ‚Üí A (¬∑-comm n m i))
                  (¬∑a a b)
                  (¬∑a b a)
  ¬∑a-comminvol : ‚àÄ {n m} ‚Üí (a : A n) ‚Üí (b : A m) ‚Üí
                SquareP
                  (Œª i j ‚Üí A (¬∑-comminvol n m i j))
                  (¬∑a-comm a b)
                  (symP (¬∑a-comm b a))
                  refl
                  refl
  ¬∑a-hexDiag : ‚àÄ {n m o} ‚Üí (a : A n) ‚Üí (b : A m) ‚Üí (c : A o) ‚Üí
                PathP
                  (Œª i ‚Üí A (¬∑-hex-diag n m o i))
                  (¬∑a (¬∑a a b) c)
                  (¬∑a b (¬∑a c a))
  ¬∑a-hex-up : ‚àÄ {n m o} ‚Üí (l : A n) ‚Üí (c : A m) ‚Üí (r : A o)  ‚Üí
       SquareP (Œª i j ‚Üí A (¬∑-hex-up n m o i j))
         (¬∑a-comm l (¬∑a c  r))
         (¬∑a-hexDiag l c r)
         (¬∑a-assoc l c r)
         (symP (¬∑a-assoc c r l))
  ¬∑a-hex-down : ‚àÄ {n m o} ‚Üí (l : A n) ‚Üí (c : A m) ‚Üí (r : A o)  ‚Üí
       SquareP (Œª i j ‚Üí A (¬∑-hex-down n m o i j))
         (¬∑a-hexDiag l c r)
         (symP (¬∑a-assoc c l r))
         (congP (Œª _ x ‚Üí ¬∑a x r) (¬∑a-comm l c))
         (congP (Œª _ ‚Üí ¬∑a c) (¬∑a-comm r l))

  ¬∑a-pentagon-diag : ‚àÄ {n m o p} ‚Üí ‚àÄ xs ys zs ws
      ‚Üí PathP (Œª i ‚Üí A (¬∑-pentagon-diag n m o p i))
        (¬∑a (¬∑a (¬∑a xs ys) zs) ws)
        (¬∑a xs (¬∑a ys (¬∑a zs ws)))


  ¬∑a-pentagon-‚ñ≥ : ‚àÄ {n m o p} ‚Üí ‚àÄ xs ys zs ws
      ‚Üí SquareP (Œª i j ‚Üí A (¬∑-pentagon-‚ñ≥ n m o p i j))
        refl (¬∑a-pentagon-diag xs ys zs ws)
          (¬∑a-assoc _ _ _) (symP (¬∑a-assoc _ _ _))
  ¬∑a-pentagon-‚ñ° : ‚àÄ {n m o p} ‚Üí ‚àÄ xs ys zs ws ‚Üí
        SquareP (Œª i j ‚Üí A (¬∑-pentagon-‚ñ° n m o p i j))
           (¬∑a-pentagon-diag xs ys zs ws)
           (symP (¬∑a-assoc xs (¬∑a ys zs) ws))
           (symP (congP (Œª _ x ‚Üí ¬∑a x ws) (¬∑a-assoc _ _ _)))           
           ((congP (Œª _ ‚Üí ¬∑a xs) (¬∑a-assoc _ _ _)))

 f : ‚àÄ x ‚Üí A x
 f ‚óè = ‚óèa
 f (x ¬∑ x‚ÇÅ) = ¬∑a (f x) (f x‚ÇÅ)
 f (¬∑-assoc x x‚ÇÅ x‚ÇÇ i) =
   ¬∑a-assoc (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 f (¬∑-comm x x‚ÇÅ i) =
   ¬∑a-comm (f x) (f x‚ÇÅ) i
 f (¬∑-comminvol x x‚ÇÅ i i‚ÇÅ) =
   ¬∑a-comminvol (f x) (f x‚ÇÅ) i i‚ÇÅ
 f (¬∑-hex-diag x x‚ÇÅ x‚ÇÇ i) =
      ¬∑a-hexDiag (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 f (¬∑-hex-up x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) =
    ¬∑a-hex-up (f x) (f x‚ÇÅ) (f x‚ÇÇ) i i‚ÇÅ
 f (¬∑-hex-down x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) =
       ¬∑a-hex-down (f x) (f x‚ÇÅ) (f x‚ÇÇ) i i‚ÇÅ
 f (¬∑-pentagon-diag x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) =
     ¬∑a-pentagon-diag (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i 
 f (¬∑-pentagon-‚ñ≥ x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) =
     ¬∑a-pentagon-‚ñ≥ (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i i‚ÇÅ
 f (¬∑-pentagon-‚ñ° x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = 
     ¬∑a-pentagon-‚ñ° (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i i‚ÇÅ
 f (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) =
     isOfHLevel‚ÜíisOfHLevelDep 3 (asquash)
      _ _ _ _
     (Œª i j ‚Üí f (x‚ÇÉ i j)) (Œª i j ‚Üí f (y‚ÇÅ i j))
     (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ) i i‚ÇÅ x‚ÇÑ

record RecFCSG {‚Ñì} (A : Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  asquash : isGroupoid A
  ‚óèa : A
  ¬∑a : A ‚Üí A ‚Üí A
  ¬∑a-assoc : ‚àÄ a b c ‚Üí (¬∑a a (¬∑a b c)) ‚â° (¬∑a (¬∑a a b) c)
  ¬∑a-comm : ‚àÄ a b ‚Üí (¬∑a a b) ‚â° (¬∑a b a)
  ¬∑a-comminvol : ‚àÄ a b ‚Üí (¬∑a-comm a b) ‚â° sym (¬∑a-comm b a)
  ¬∑a-hexDiag : ‚àÄ a b c ‚Üí  
                     (¬∑a (¬∑a a b) c)
                  ‚â° (¬∑a b (¬∑a c a))
  ¬∑a-pentagon-diag : ‚àÄ xs ys zs ws
      ‚Üí (¬∑a (¬∑a (¬∑a xs ys) zs) ws) ‚â° (¬∑a xs (¬∑a ys (¬∑a zs ws)))
  ¬∑a-hex-up : ‚àÄ l c r ‚Üí
        Square
        (¬∑a-comm l (¬∑a c r))
        (¬∑a-hexDiag l c r)
        (¬∑a-assoc l c r)
        (sym (¬∑a-assoc c r l))
  ¬∑a-hex-down : ‚àÄ l c r ‚Üí
    Square 
        (¬∑a-hexDiag l c r)
        (sym (¬∑a-assoc c l r))
        (cong (Œª x ‚Üí ¬∑a x r) (¬∑a-comm l c))
        (cong (¬∑a c) (¬∑a-comm r l))
  ¬∑a-pentagon-‚ñ≥ : ‚àÄ xs ys zs ws ‚Üí
         Square refl (¬∑a-pentagon-diag xs ys zs ws)
         (¬∑a-assoc _ _ _) (sym (¬∑a-assoc _ _ _))
  ¬∑a-pentagon-‚ñ° : ‚àÄ xs ys zs ws ‚Üí
             Square (¬∑a-pentagon-diag xs ys zs ws)
          (sym (¬∑a-assoc xs (¬∑a ys zs) ws))
          (sym (cong (Œª x ‚Üí ¬∑a x ws) (¬∑a-assoc _ _ _)))           
          ((cong (¬∑a xs) (¬∑a-assoc _ _ _)))
  


 f : FCSG‚ä§ ‚Üí A
 f ‚óè = ‚óèa
 f (x ¬∑ x‚ÇÅ) = ¬∑a (f x) (f x‚ÇÅ)
 f (¬∑-assoc x x‚ÇÅ x‚ÇÇ i) =
   ¬∑a-assoc (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 f (¬∑-comm x x‚ÇÅ i) =
   ¬∑a-comm (f x) (f x‚ÇÅ) i
 f (¬∑-comminvol x x‚ÇÅ i i‚ÇÅ) =
   ¬∑a-comminvol (f x) (f x‚ÇÅ) i i‚ÇÅ
 f (¬∑-hex-diag x x‚ÇÅ x‚ÇÇ i) =
      ¬∑a-hexDiag (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 f (¬∑-hex-up x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) =
    ¬∑a-hex-up (f x) (f x‚ÇÅ) (f x‚ÇÇ) i i‚ÇÅ
 f (¬∑-hex-down x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) =
       ¬∑a-hex-down (f x) (f x‚ÇÅ) (f x‚ÇÇ) i i‚ÇÅ
 f (¬∑-pentagon-diag x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) =
     ¬∑a-pentagon-diag (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i 
 f (¬∑-pentagon-‚ñ≥ x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) =
     ¬∑a-pentagon-‚ñ≥ (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i i‚ÇÅ
 f (¬∑-pentagon-‚ñ° x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = 
     ¬∑a-pentagon-‚ñ° (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i i‚ÇÅ
 f (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) =
     (asquash)
      _ _ _ _
     (Œª i j ‚Üí f (x‚ÇÉ i j)) (Œª i j ‚Üí f (y‚ÇÅ i j))
      i i‚ÇÅ x‚ÇÑ

 
record ElimSetFCSG {‚Ñì} (A : FCSG‚ä§ ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  asquash : ‚àÄ x ‚Üí isSet (A x)
  ‚óèa : A ‚óè
  ¬∑a : ‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n ¬∑ m)
  ¬∑a-assoc : ‚àÄ {n m o} ‚Üí (a : A n) ‚Üí (b : A m) ‚Üí (c : A o) ‚Üí
                PathP
                  (Œª i ‚Üí A (¬∑-assoc n m o i))
                  (¬∑a a (¬∑a b c))
                  (¬∑a (¬∑a a b) c)
  ¬∑a-comm : ‚àÄ {n m} ‚Üí (a : A n) ‚Üí (b : A m) ‚Üí
                PathP
                  (Œª i ‚Üí A (¬∑-comm n m i))
                  (¬∑a a b)
                  (¬∑a b a)
  ¬∑a-hexDiag : ‚àÄ {n m o} ‚Üí (a : A n) ‚Üí (b : A m) ‚Üí (c : A o) ‚Üí
                PathP
                  (Œª i ‚Üí A (¬∑-hex-diag n m o i))
                  (¬∑a (¬∑a a b) c)
                  (¬∑a b (¬∑a c a))
  ¬∑a-pentagon-diag : ‚àÄ {n m o p} ‚Üí ‚àÄ xs ys zs ws
      ‚Üí PathP (Œª i ‚Üí A (¬∑-pentagon-diag n m o p i))
        (¬∑a (¬∑a (¬∑a xs ys) zs) ws)
        (¬∑a xs (¬∑a ys (¬∑a zs ws)))

 f : ‚àÄ x ‚Üí A x
 f = ElimFCSG.f w
  where
  w : ElimFCSG (Œª z ‚Üí A z)
  ElimFCSG.asquash w = isSet‚ÜíisGroupoid ‚àò asquash
  ElimFCSG.‚óèa w = ‚óèa
  ElimFCSG.¬∑a w = ¬∑a
  ElimFCSG.¬∑a-assoc w = ¬∑a-assoc
  ElimFCSG.¬∑a-comm w = ¬∑a-comm
  ElimFCSG.¬∑a-comminvol w _ _ =
    isSet‚ÜíSquareP (Œª _ _ ‚Üí asquash _)
      _ _ _ _
  ElimFCSG.¬∑a-hexDiag w = ¬∑a-hexDiag
  ElimFCSG.¬∑a-hex-up w _ _ _ =
    isSet‚ÜíSquareP (Œª _ _ ‚Üí asquash _)
      _ _ _ _
  ElimFCSG.¬∑a-hex-down w _ _ _ =
    isSet‚ÜíSquareP (Œª _ _ ‚Üí asquash _)
      _ _ _ _
  ElimFCSG.¬∑a-pentagon-diag w = ¬∑a-pentagon-diag 
  ElimFCSG.¬∑a-pentagon-‚ñ≥ w _ _ _ _ =
    isSet‚ÜíSquareP (Œª _ _ ‚Üí asquash _)
      _ _ _ _
  ElimFCSG.¬∑a-pentagon-‚ñ° w _ _ _ _ =
    isSet‚ÜíSquareP (Œª _ _ ‚Üí asquash _)
      _ _ _ _

-- record RecSetFCSG' {‚Ñì} (A : Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--   asquash : isSet A
--   ‚óèa : A
--   ¬∑a : A ‚Üí A ‚Üí A
--   ¬∑a-assoc : ‚àÄ a b c ‚Üí (¬∑a a (¬∑a b c)) ‚â° (¬∑a (¬∑a a b) c)
--   ¬∑a-comm : ‚àÄ a b ‚Üí (¬∑a a b) ‚â° (¬∑a b a)
--   -- ¬∑a-hexDiag : ‚àÄ a b c ‚Üí  
--   --                    (¬∑a (¬∑a a b) c)
--   --                 ‚â° (¬∑a b (¬∑a c a))
--   -- ¬∑a-pentagon-diag : ‚àÄ xs ys zs ws
--   --     ‚Üí (¬∑a (¬∑a (¬∑a xs ys) zs) ws) ‚â° (¬∑a xs (¬∑a ys (¬∑a zs ws)))

--  f : FCSG‚ä§ ‚Üí A
--  f ‚óè = ‚óèa
--  f (x ¬∑ x‚ÇÅ) = ¬∑a (f x) (f x‚ÇÅ)
--  f (¬∑-assoc x x‚ÇÅ x‚ÇÇ i) =
--    ¬∑a-assoc (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
--  f (¬∑-comm x x‚ÇÅ i) =
--    ¬∑a-comm (f x) (f x‚ÇÅ) i
--  f (¬∑-comminvol x x‚ÇÅ i i‚ÇÅ) =
--    asquash (¬∑a (f x) (f x‚ÇÅ)) (¬∑a (f x‚ÇÅ) (f x))
--      (¬∑a-comm (f x) (f x‚ÇÅ)) (sym (¬∑a-comm (f x‚ÇÅ) (f x))) i i‚ÇÅ
--  f (¬∑-hex-diag x x‚ÇÅ x‚ÇÇ i) = ({!!} ‚àô‚àô {!!} ‚àô‚àô {!!}) i
--       -- ¬∑a-hexDiag (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
--  f (¬∑-hex-up x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) = {!!}
--     -- ¬∑a-hex-up (f x) (f x‚ÇÅ) (f x‚ÇÇ) i i‚ÇÅ
--  f (¬∑-hex-down x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) = {!!}
--        -- ¬∑a-hex-down (f x) (f x‚ÇÅ) (f x‚ÇÇ) i i‚ÇÅ
--  f (¬∑-pentagon-diag x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) =
--      ¬∑a-pentagon-diag (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i 
--  f (¬∑-pentagon-‚ñ≥ x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = {!!}
--      -- ¬∑a-pentagon-‚ñ≥ (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i i‚ÇÅ
--  f (¬∑-pentagon-‚ñ° x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = {!!}
--      -- ¬∑a-pentagon-‚ñ° (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i i‚ÇÅ
--  f (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) =
--      isOfHLevel‚ÜíisOfHLevelDep 3 (Œª _ ‚Üí isSet‚ÜíisGroupoid asquash)
--       _ _ _ _
--      (Œª i j ‚Üí f (x‚ÇÉ i j)) (Œª i j ‚Üí f (y‚ÇÅ i j))
--      (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ) i i‚ÇÅ x‚ÇÑ


record RecSetFCSG {‚Ñì} (A : Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
  asquash : isSet A
  ‚óèa : A
  ¬∑a : A ‚Üí A ‚Üí A
  ¬∑a-assoc : ‚àÄ a b c ‚Üí (¬∑a a (¬∑a b c)) ‚â° (¬∑a (¬∑a a b) c)
  ¬∑a-comm : ‚àÄ a b ‚Üí (¬∑a a b) ‚â° (¬∑a b a)
  ¬∑a-hexDiag : ‚àÄ a b c ‚Üí  
                     (¬∑a (¬∑a a b) c)
                  ‚â° (¬∑a b (¬∑a c a))
  ¬∑a-pentagon-diag : ‚àÄ xs ys zs ws
      ‚Üí (¬∑a (¬∑a (¬∑a xs ys) zs) ws) ‚â° (¬∑a xs (¬∑a ys (¬∑a zs ws)))

 f : FCSG‚ä§ ‚Üí A
 f = ElimSetFCSG.f w
  where
  w : ElimSetFCSG (Œª _ ‚Üí A)
  ElimSetFCSG.asquash w _ = asquash
  ElimSetFCSG.‚óèa w = ‚óèa
  ElimSetFCSG.¬∑a w = ¬∑a
  ElimSetFCSG.¬∑a-assoc w = ¬∑a-assoc
  ElimSetFCSG.¬∑a-comm w = ¬∑a-comm
  ElimSetFCSG.¬∑a-hexDiag w = ¬∑a-hexDiag
  ElimSetFCSG.¬∑a-pentagon-diag w = ¬∑a-pentagon-diag 

 -- f ‚óè = ‚óèa
 -- f (x ¬∑ x‚ÇÅ) = ¬∑a (f x) (f x‚ÇÅ)
 -- f (¬∑-assoc x x‚ÇÅ x‚ÇÇ i) =
 --   ¬∑a-assoc (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 -- f (¬∑-comm x x‚ÇÅ i) =
 --   ¬∑a-comm (f x) (f x‚ÇÅ) i
 -- f (¬∑-comminvol x x‚ÇÅ i i‚ÇÅ) =
 --   {!!}
 -- f (¬∑-hex-diag x x‚ÇÅ x‚ÇÇ i) =
 --      ¬∑a-hexDiag (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 -- f (¬∑-hex-up x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) =
 --    {!!}
 -- f (¬∑-hex-down x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) =
 --      {!!}
 -- f (¬∑-pentagon-diag x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) =
 --     ¬∑a-pentagon-diag (f x) (f x‚ÇÅ) (f x‚ÇÇ) (f x‚ÇÉ) i 
 -- f (¬∑-pentagon-‚ñ≥ x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) =
 --     isSet‚ÜíisSet'
 -- f (¬∑-pentagon-‚ñ° x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = 
 --     {!? isSet‚ÜíisSet' asquash
 --       !}
 -- f (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) =
 --   (isSet‚ÜíisGroupoid asquash) _ _ _ _
 --     (Œª i j ‚Üí f (x‚ÇÉ i j)) (Œª i j ‚Üí f (y‚ÇÅ i j)) i i‚ÇÅ x‚ÇÑ


-- -- -- repFCSG‚ä•‚Ñï : ‚Ñï.‚Ñï ‚Üí FCSG‚ä§
-- -- -- repFCSG‚ä•‚Ñï ‚Ñï.zero = ‚óè
-- -- -- repFCSG‚ä•‚Ñï (‚Ñï.suc x) = ‚óè ¬∑ repFCSG‚ä•‚Ñï x 

-- -- -- rep+ : ‚àÄ n m ‚Üí repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï (‚Ñï.suc n))
-- -- --                 ¬∑ repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï (‚Ñï.suc m)) ‚â°
-- -- --                repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï  ((‚Ñï.suc n) ‚Ñï.+ (‚Ñï.suc m))) 
-- -- -- rep+ ‚Ñï.zero m = refl
-- -- -- rep+ (‚Ñï.suc n) m = sym (¬∑-assoc _ _ _) ‚àô cong (‚óè ¬∑_) (rep+ n m)

-- -- -- repFCSG‚ä•‚Ñïsingl : (n : ‚Ñï‚Çê‚Å∫¬π) ‚Üí singl (repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n)))
-- -- -- repFCSG‚ä•‚Ñïsingl = ‚Ñï‚Çê‚Å∫¬πelim.f w
-- -- --  where
-- -- --  h : ‚àÄ n m ‚Üí (‚Ñï.pred‚Ñï (((‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚Ñï.+ ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m))) ‚â°
      
-- -- --       (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚Ñï.+
-- -- --        ‚Ñï.suc
-- -- --        (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)))
-- -- --  h = ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï-elimProp
-- -- --       {A = Œª n ‚Üí ‚àÄ m ‚Üí
-- -- --         (‚Ñï.pred‚Ñï ((n ‚Ñï.+ ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m))) ‚â°
      
-- -- --       (‚Ñï.pred‚Ñï n ‚Ñï.+
-- -- --        ‚Ñï.suc
-- -- --        (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)))}
-- -- --     (Œª n ‚Üí isPropŒ† Œª _ ‚Üí ‚Ñïprops.isSet‚Ñï _ _)
-- -- --      Œª n ‚Üí ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï-elimProp
-- -- --            {A = Œª m ‚Üí ( ((n ‚Ñï.+ m))) ‚â° ( n ‚Ñï.+ ‚Ñï.suc (‚Ñï.pred‚Ñï m))}
-- -- --              (Œª _ ‚Üí ‚Ñïprops.isSet‚Ñï _ _)
-- -- --               Œª _ ‚Üí refl
 
-- -- --  w : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí singl (repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï z))))
-- -- --  ‚Ñï‚Çê‚Å∫¬πelim.aOne w = _ , refl
-- -- --  fst ((w ‚Ñï‚Çê‚Å∫¬πelim.a+ (x , _)) (y , _)) = x ¬∑ y
-- -- --  snd (‚Ñï‚Çê‚Å∫¬πelim._a+_ w {n} {m} (x , x=) (y , y=)) =
-- -- --     -- cong‚Ä≤ (repFCSG‚ä•‚Ñï ‚àò' ‚Ñï.pred‚Ñï) {!!}
-- -- --      (cong (repFCSG‚ä•‚Ñï) (cong ‚Ñï.pred‚Ñï (+‚Çê‚â°+ n m) ‚àô h n m))
-- -- --     ‚àô‚àô sym (rep+ _ _)
-- -- --          ‚àô‚àô cong‚ÇÇ _¬∑_ x= y=
  

-- -- --  ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w {n} {m} {o} x y z =
-- -- --    Œ£PathP (¬∑-assoc _ _ _
-- -- --         , {!!}) 
-- -- --  ‚Ñï‚Çê‚Å∫¬πelim.a-sym w = {!!}
-- -- --  ‚Ñï‚Çê‚Å∫¬πelim.asquash w = {!!}



-- -- -- repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π : ‚Ñï‚Çê‚Å∫¬π ‚Üí FCSG‚ä§
-- -- -- repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π = fst ‚àò repFCSG‚ä•‚Ñïsingl

-- lenFCSG‚ä• ‚óè = one
-- lenFCSG‚ä• (n ¬∑ n‚ÇÅ) = lenFCSG‚ä• n + lenFCSG‚ä• n‚ÇÅ 
-- lenFCSG‚ä• (¬∑-assoc n n‚ÇÅ n‚ÇÇ i) =
--    +-assoc (lenFCSG‚ä• n) (lenFCSG‚ä• n‚ÇÅ) (lenFCSG‚ä• n‚ÇÇ) i
-- lenFCSG‚ä• (¬∑-comm n n‚ÇÅ i) =
--   +-sym (lenFCSG‚ä• n) (lenFCSG‚ä• n‚ÇÅ) i
-- lenFCSG‚ä• (¬∑-hex-diag n n‚ÇÅ n‚ÇÇ i) = {!!}
-- lenFCSG‚ä• (¬∑-hex-up n n‚ÇÅ n‚ÇÇ i i‚ÇÅ) = {!!}
-- lenFCSG‚ä• (¬∑-hex-down n n‚ÇÅ n‚ÇÇ i i‚ÇÅ) = {!!}
-- lenFCSG‚ä• (¬∑-pentagon-diag n n‚ÇÅ n‚ÇÇ n‚ÇÉ i) = {!!}
-- lenFCSG‚ä• (¬∑-pentagon-‚ñ≥ n n‚ÇÅ n‚ÇÇ n‚ÇÉ i i‚ÇÅ) = {!!}
-- lenFCSG‚ä• (¬∑-pentagon-‚ñ° n n‚ÇÅ n‚ÇÇ n‚ÇÉ i i‚ÇÅ) = {!!}


-- -- -- toFCSG‚ä•'loop : ‚àÄ n ‚Üí AB n ‚Üí      
-- -- --         repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π n ‚â° repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π n
-- -- -- toFCSG‚ä•'loop n (ùïíùïì nothing l r nothing <n) =
-- -- --    cong repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π (sym <n ‚àô +-sym _ _) ‚àô‚àô ¬∑-comm _ _ ‚àô‚àô cong repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π <n
-- -- -- toFCSG‚ä•'loop n (ùïíùïì nothing l r (just x) <n) = {!!}
-- -- -- toFCSG‚ä•'loop n (ùïíùïì (just x) l r nothing <n) = {!!}
-- -- -- toFCSG‚ä•'loop n (ùïíùïì (just x) l r (just x‚ÇÅ) <n) = {!!}

-- -- -- -- ‚Ñï‚Çê‚Å∫¬πelim.f w
-- -- -- --  where
-- -- -- --  w : ‚Ñï‚Çê‚Å∫¬πelim Œª z ‚Üí AB z ‚Üí repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π z ‚â° repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π z
-- -- -- --  ‚Ñï‚Çê‚Å∫¬πelim.aOne w _ = refl
-- -- -- --  ‚Ñï‚Çê‚Å∫¬πelim._a+_ w = {!!}
-- -- -- --  ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w = {!!}
-- -- -- --  ‚Ñï‚Çê‚Å∫¬πelim.a-sym w = {!!}
-- -- -- --  ‚Ñï‚Çê‚Å∫¬πelim.asquash w = {!!}

-- -- -- -- toFCSG‚ä•' : ‚àÄ n ‚Üí ‚Ñôrm‚Çê {true} n ‚Üí FCSG‚ä§
-- -- -- -- toFCSG‚ä•' n ùï°base = repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π n
-- -- -- -- toFCSG‚ä•' n (ùï°loop x i) = toFCSG‚ä•'loop n x i
-- -- -- -- toFCSG‚ä•' n (ùï°invol (ùïíùïì lPad l r rPad <n) p i i‚ÇÅ) = {!lPad rPad!}
-- -- -- -- toFCSG‚ä•' n (ùï°hex lPad rPad l c r p p' p'' i i‚ÇÅ) = {!!}
-- -- -- -- toFCSG‚ä•' n (ùï°comm lPad cPad rPad l r l' r' p p' i i‚ÇÅ) = {!!}
-- -- -- -- toFCSG‚ä•' n (ùï°over lPad rPad l x x' p p' p'' i i‚ÇÅ) = {!!}
-- -- -- -- toFCSG‚ä•' n (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) = {!!}

-- -- -- -- fromFCSG‚ä•' : (x : FCSG‚ä§) ‚Üí ‚Ñôrm‚Çê {true} (lenFCSG‚ä• x)
-- -- -- -- fromFCSG‚ä•' ‚óè = ùï°base
-- -- -- -- fromFCSG‚ä•' (x ¬∑ x‚ÇÅ) = ùï°¬∑ (fromFCSG‚ä•' x) (fromFCSG‚ä•' x‚ÇÅ)
-- -- -- -- fromFCSG‚ä•' (¬∑-assoc x x‚ÇÅ x‚ÇÇ i) =
-- -- -- --  ùï°¬∑-assoc (fromFCSG‚ä•' x) (fromFCSG‚ä•' x‚ÇÅ) (fromFCSG‚ä•' x‚ÇÇ) i
-- -- -- -- fromFCSG‚ä•' (¬∑-comm x x‚ÇÅ i) = {!!}
-- -- -- -- fromFCSG‚ä•' (¬∑-hex-diag x x‚ÇÅ x‚ÇÇ i) = {!!}
-- -- -- -- fromFCSG‚ä•' (¬∑-hex-up x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) = {!!}
-- -- -- -- fromFCSG‚ä•' (¬∑-hex-down x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) = {!!}
-- -- -- -- fromFCSG‚ä•' (¬∑-pentagon-diag x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) = {!!}
-- -- -- -- fromFCSG‚ä•' (¬∑-pentagon-‚ñ≥ x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = {!!}
-- -- -- -- fromFCSG‚ä•' (¬∑-pentagon-‚ñ° x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = {!!}


-- -- -- -- -- -- -- ùï°hex : ‚àÄ lPad rPad l c r ‚Üí ‚àÄ p p' p'' ‚Üí
-- -- -- -- -- -- --          SquareP (Œª i j ‚Üí ‚Ñôrm‚Çê {true}
-- -- -- -- -- -- --              (isSet‚ÜíisSet' isSet‚Ñï‚Çê‚Å∫¬π
-- -- -- -- -- -- --              (Œª j ‚Üí lPad + +-sym l c j + (r + rPad))
-- -- -- -- -- -- --              (Œª j ‚Üí lPad + +-sym l (c + r) j + rPad)
-- -- -- -- -- -- --              -- (Œª j ‚Üí lPad + +-sym l c j + (r + rPad))
-- -- -- -- -- -- --              -- (Œª j ‚Üí c + lPad + +-sym l r j + rPad)
-- -- -- -- -- -- --              {!!}
-- -- -- -- -- -- --              ({!!} ‚àô‚àô (Œª i ‚Üí (lPad + c) + +-sym l r i + rPad) ‚àô‚àô {!!})
-- -- -- -- -- -- --              -- (+-assoc _ _ _ ‚àô cong (_+ _) {!!})
-- -- -- -- -- -- --              --(Œª i ‚Üí (lPad + +-sym l (c + r) i + rPad))
-- -- -- -- -- -- --              i j)
-- -- -- -- -- -- --              )
-- -- -- -- -- -- --        -- {ùï°base {n = {!!}}}
-- -- -- -- -- -- --        -- {ùï°base {n = lPad + (l + (c + r)) + rPad}}
-- -- -- -- -- -- --        -- (ùï°loop lPad l c (r + rPad))
-- -- -- -- -- -- --        -- {ùï°base {n = {!!}}}
-- -- -- -- -- -- --        -- {ùï°base {n = {!!}}}
-- -- -- -- -- -- --        -- (ùï°loop (c + lPad) l r rPad)
-- -- -- -- -- -- --        -- {!!}
-- -- -- -- -- -- --        (ùï°loop lPad l c (r + rPad))
-- -- -- -- -- -- --        (ùï°loop lPad l (c + r) rPad)
-- -- -- -- -- -- --        {!!}
-- -- -- -- -- -- --        {!!}
-- -- -- -- -- -- --        -- (ùï°loop (lPad + c) l r rPad)
       
-- -- -- -- -- -- -- ùï°hex = {!!}
