{-# OPTIONS --safe #-}
module Cubical.HITs.Permutation.BaseAssoc3 where

import Cubical.Data.Nat.Base as ‚Ñï
import Cubical.Data.Nat.Properties as ‚Ñïprops


-- open import Cubical.Data.Fin.Properties as FP
open import Cubical.Data.Empty as ‚ä•

open import Cubical.Functions.Involution

open import Cubical.Foundations.Everything
-- open import Cubical.Data.Empty as ‚ä•
-- open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_)
-- open import Cubical.Data.Nat.Order
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.Unit
open import Cubical.Data.Bool as ùüö
open import Cubical.Data.Sum as ‚äé


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Data.Nat.Order.RecursiveMoreEquiv

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.Algebra.Group

open import Cubical.Algebra.SymmetricGroup

import Cubical.Functions.Logic as L

open import Cubical.Functions.Embedding

open import Cubical.Data.List as Li

import Cubical.Data.Nat.FinGenAut2 as A

import Cubical.HITs.PropositionalTruncation as Prop

open import Cubical.HITs.GroupoidQuotients as GQ
  renaming ([_] to [_]// ; RelimProp to  RelimProp// ; Rrec to Rrec//)


open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties

-- open import Cubical.Algebra.Group.Generators

open import Cubical.Functions.FunExtEquiv

open import Cubical.HITs.SequentialColimit as SC

open import Cubical.HITs.EilenbergMacLane1 renaming (elim to elimEM)


open import Cubical.Relation.Binary

-- import Cubical.Homotopy.EilenbergMacLane.Properties as EMP

open import Cubical.Foundations.Equiv.HalfAdjoint

import Cubical.HITs.Permutation.Base as B

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì

infixl 6 _+_

data ‚Ñï‚Çê‚Å∫¬π' {trunc : Type}  : Type where
 one : ‚Ñï‚Çê‚Å∫¬π' 
 _+_ : ‚Ñï‚Çê‚Å∫¬π' {trunc} ‚Üí ‚Ñï‚Çê‚Å∫¬π' {trunc} ‚Üí ‚Ñï‚Çê‚Å∫¬π' {trunc}
 +-assoc : ‚àÄ m n o ‚Üí m + (n + o) ‚â° (m + n) + o
 +-sym : ‚àÄ m n ‚Üí m + n ‚â° n + m
 isSet‚Ñï‚Çê‚Å∫¬π' : trunc ‚Üí isSet ‚Ñï‚Çê‚Å∫¬π' 

-- record ‚Ñï‚Çê‚Å∫¬πrec (h : HLevel) (A : Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    aOne : {0 < h} ‚Üí A
--    _a+_ : {0 < h} ‚Üí A ‚Üí A ‚Üí A
--    a-assoc : ‚àÄ x y z ‚Üí x a+ (y a+ z) ‚â° (x a+ y) a+ z
--    -- asquash : if trunc then (isSet A) else Unit*

--  -- f : ‚àÄ {trunc} ‚Üí {_ : if trunc then (isSet A) else Unit*} ‚Üí
--  --       ‚Ñï‚Çê‚Å∫¬π' {if trunc then Unit else ‚ä•} ‚Üí A
--  -- f one = aOne
--  -- f {trunc} {squashA} (x + x‚ÇÅ) = f {trunc} {squashA} x a+ f {trunc} {squashA}x‚ÇÅ
--  -- f {trunc} {squashA} (+-assoc x x‚ÇÅ x‚ÇÇ i) =
--  --   a-assoc
--  --    (f {trunc} {squashA} x)
--  --    (f {trunc} {squashA} x‚ÇÅ)
--  --    (f {trunc} {squashA} x‚ÇÇ) i
--  -- f {true} {squashA} (isSet‚Ñï‚Çê‚Å∫¬π' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
--  --   squashA _ _ (cong (f {true} {squashA}) x‚ÇÉ) (cong f y) i i‚ÇÅ


record ‚Ñï‚Çê‚Å∫¬πrec (A : Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   aOne : A
   _a+_ : A ‚Üí A ‚Üí A
   a-assoc : ‚àÄ x y z ‚Üí x a+ (y a+ z) ‚â° (x a+ y) a+ z
   a-sym : ‚àÄ x y ‚Üí x a+ y ‚â° (y a+ x)
   -- asquash : if trunc then (isSet A) else Unit*

 f : ‚àÄ {trunc} ‚Üí {_ : if trunc then (isSet A) else Unit*} ‚Üí
       ‚Ñï‚Çê‚Å∫¬π' {if trunc then Unit else ‚ä•} ‚Üí A
 f one = aOne
 f {trunc} {squashA} (x + x‚ÇÅ) = f {trunc} {squashA} x a+ f {trunc} {squashA}x‚ÇÅ
 f {trunc} {squashA} (+-assoc x x‚ÇÅ x‚ÇÇ i) =
   a-assoc
    (f {trunc} {squashA} x)
    (f {trunc} {squashA} x‚ÇÅ)
    (f {trunc} {squashA} x‚ÇÇ) i
 f {trunc} {squashA} (+-sym x x‚ÇÅ i) =
   a-sym
    (f {trunc} {squashA} x)
    (f {trunc} {squashA} x‚ÇÅ) i
 f {true} {squashA} (isSet‚Ñï‚Çê‚Å∫¬π' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
   squashA _ _ (cong (f {true} {squashA}) x‚ÇÉ) (cong f y) i i‚ÇÅ

‚Ñï‚Çê‚Å∫¬π = ‚Ñï‚Çê‚Å∫¬π' {Unit}


‚Ñï‚Çê : Type 
‚Ñï‚Çê = Maybe ‚Ñï‚Çê‚Å∫¬π

infix 7 _++_++_

_++_++_ : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π
_++_++_ x y z = x + y + z

isSet‚Ñï‚Çê‚Å∫¬π = isSet‚Ñï‚Çê‚Å∫¬π' tt


isSet‚Ñï‚Çê : isSet ‚Ñï‚Çê
isSet‚Ñï‚Çê = isOfHLevelMaybe 0 isSet‚Ñï‚Çê‚Å∫¬π


record ‚Ñï‚Çê‚Å∫¬πelim (A : ‚Ñï‚Çê‚Å∫¬π ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   aOne : A one
   _a+_ : ‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n + m)
   a-assoc : ‚àÄ {n m o} (x : A n) (y : A m) (z : A o)
                 ‚Üí PathP (Œª i ‚Üí A (+-assoc n m o i))
                   (x a+ (y a+ z))
                   ((x a+ y) a+ z)
   a-sym : ‚àÄ {n m} (x : A n) (y : A m)
                 ‚Üí PathP (Œª i ‚Üí A (+-sym n m i))
                   (x a+ y)
                   (y a+ x)                   
   asquash : ‚àÄ x ‚Üí (isSet (A x))

 f : ‚àÄ x ‚Üí A x
 f one = aOne
 f (x + x‚ÇÅ) = f x a+ f x‚ÇÅ
 f (+-assoc x x‚ÇÅ x‚ÇÇ i) = a-assoc (f x) (f x‚ÇÅ) (f x‚ÇÇ) i
 f (+-sym x x‚ÇÅ  i) = a-sym (f x) (f x‚ÇÅ) i
 f (isSet‚Ñï‚Çê‚Å∫¬π' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y i i‚ÇÅ) =
    isOfHLevel‚ÜíisOfHLevelDep 2 (asquash)
      _ _
     (cong f x‚ÇÉ) (cong f y)
     (isSet‚Ñï‚Çê‚Å∫¬π' x x‚ÇÅ x‚ÇÇ x‚ÇÉ y) i i‚ÇÅ

record ‚Ñï‚Çê‚Å∫¬πelimProp (A : ‚Ñï‚Çê‚Å∫¬π ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   aOne : A one
   _a+_ : ‚àÄ {n m} ‚Üí A n ‚Üí A m ‚Üí A (n + m)

   asquash : ‚àÄ x ‚Üí (isProp (A x))

 w : ‚Ñï‚Çê‚Å∫¬πelim A
 ‚Ñï‚Çê‚Å∫¬πelim.aOne w = aOne
 ‚Ñï‚Çê‚Å∫¬πelim._a+_ w = _a+_
 ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w x y z = isProp‚ÜíPathP (Œª i ‚Üí asquash (+-assoc _ _ _ i)) _ _
 ‚Ñï‚Çê‚Å∫¬πelim.a-sym w x y = isProp‚ÜíPathP (Œª i ‚Üí asquash (+-sym _ _ i)) _ _
 ‚Ñï‚Çê‚Å∫¬πelim.asquash w = isProp‚ÜíisSet ‚àò asquash 

 f : ‚àÄ x ‚Üí A x
 f = ‚Ñï‚Çê‚Å∫¬πelim.f w

+-sym-one : (m : ‚Ñï‚Çê‚Å∫¬π') ‚Üí one + m ‚â° m + one
+-sym-one = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
 where
 w : ‚Ñï‚Çê‚Å∫¬πelimProp (Œª z ‚Üí one + z ‚â° z + one)
 ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w = refl
 ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n = n} {m = m} q p = +-assoc _ _ _ ‚àô
  cong (_+ m) q ‚àô
   sym (+-assoc _ _ _)
    ‚àô cong (n +_) p ‚àô +-assoc _ _ _
 ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w _ = isSet‚Ñï‚Çê‚Å∫¬π _ _
 
+-sym' : ‚àÄ (n : ‚Ñï‚Çê‚Å∫¬π) m ‚Üí n + m ‚â° m + n
+-sym' = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
 where
 w : ‚Ñï‚Çê‚Å∫¬πelimProp (Œª z ‚Üí (m : ‚Ñï‚Çê‚Å∫¬π') ‚Üí z + m ‚â° m + z)
 ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w = +-sym-one
 ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n} {m} p' q' o =
    sym (+-assoc _ _ _)
   ‚àô (p' (m + o)
   ‚àô sym (+-assoc _ _ _))
   ‚àô q' ( o + n) ‚àô sym (+-assoc _ _ _)
 ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w _ = isPropŒ† (Œª _ ‚Üí isSet‚Ñï‚Çê‚Å∫¬π _ _)

isOne : ‚Ñï‚Çê‚Å∫¬π ‚Üí hProp ‚Ñì-zero
isOne = ‚Ñï‚Çê‚Å∫¬πrec.f w {true} {isSetHProp}
 where
 w : ‚Ñï‚Çê‚Å∫¬πrec (hProp ‚Ñì-zero)
 ‚Ñï‚Çê‚Å∫¬πrec.aOne w = L.‚ä§
 ‚Ñï‚Çê‚Å∫¬πrec._a+_ w _ _ = L.‚ä•
 ‚Ñï‚Çê‚Å∫¬πrec.a-assoc w _ _ _ = refl
 ‚Ñï‚Çê‚Å∫¬πrec.a-sym w _ _ = refl

-- isOne‚áîone‚â° : ‚àÄ n ‚Üí ‚ü® isOne n L.‚áî (one ‚â° n) , isSet‚Ñï‚Çê‚Å∫¬π _ _ ‚ü©
-- isOne‚áîone‚â° = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
--  where
--  w : ‚Ñï‚Çê‚Å∫¬πelimProp (Œª z ‚Üí ‚ü® isOne z L.‚áî (one ‚â° z) , isSet‚Ñï‚Çê‚Å∫¬π one z ‚ü©)
--  ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w = (Œª _ ‚Üí refl) , (Œª _ ‚Üí tt*)
--  fst (‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n} {m} x x‚ÇÅ) ()
--  snd (‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n} {m} x x‚ÇÅ) = {!!}
--  ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w n = snd (isOne n L.‚áî (one ‚â° n) , isSet‚Ñï‚Çê‚Å∫¬π _ _)

one< : ‚Ñï‚Çê‚Å∫¬π ‚Üí hProp ‚Ñì-zero
one< = ‚Ñï‚Çê‚Å∫¬πrec.f w {true} {isSetHProp}
 where
 w : ‚Ñï‚Çê‚Å∫¬πrec (hProp ‚Ñì-zero)
 ‚Ñï‚Çê‚Å∫¬πrec.aOne w = L.‚ä•
 ‚Ñï‚Çê‚Å∫¬πrec._a+_ w _ _ = L.‚ä§
 ‚Ñï‚Çê‚Å∫¬πrec.a-assoc w _ _ _ = refl
 ‚Ñï‚Çê‚Å∫¬πrec.a-sym w _ _ = refl



+‚â¢one : ‚àÄ n m ‚Üí n + m ‚â° one ‚Üí ‚ä•
+‚â¢one n m p = subst‚Åª (fst ‚àò isOne) p _

‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π :  ‚Ñï.‚Ñï ‚Üí ‚Ñï‚Çê‚Å∫¬π
‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π ‚Ñï.zero = one
‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π (‚Ñï.suc x) = one + (‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π x)


‚Ñï‚Üí‚Ñï‚Çê :  ‚Ñï.‚Ñï ‚Üí ‚Ñï‚Çê
‚Ñï‚Üí‚Ñï‚Çê ‚Ñï.zero = nothing
‚Ñï‚Üí‚Ñï‚Çê (‚Ñï.suc x) = just (‚Ñï‚Üí‚Ñï‚Çê‚Å∫¬π x)

‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï.‚Ñï
‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï = ‚Ñï‚Çê‚Å∫¬πrec.f w {true} {‚Ñïprops.isSet‚Ñï}
 where
 w : ‚Ñï‚Çê‚Å∫¬πrec ‚Ñï.‚Ñï
 ‚Ñï‚Çê‚Å∫¬πrec.aOne w = 1
 ‚Ñï‚Çê‚Å∫¬πrec._a+_ w = ‚Ñï._+_
 ‚Ñï‚Çê‚Å∫¬πrec.a-assoc w = ‚Ñïprops.+-assoc
 ‚Ñï‚Çê‚Å∫¬πrec.a-sym w = ‚Ñïprops.+-comm

‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï-elimProp : ‚àÄ {‚Ñì} {A : ‚Ñï.‚Ñï ‚Üí Type ‚Ñì} ‚Üí (‚àÄ n ‚Üí isProp (A n)) ‚Üí
    (‚àÄ n ‚Üí A (‚Ñï.suc n)) ‚Üí ‚àÄ n ‚Üí A (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) 
‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï-elimProp {A = A} isPropA Asuc = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
  where
   w : ‚Ñï‚Çê‚Å∫¬πelimProp Œª z ‚Üí A (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï z)
   ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w = Asuc _
   ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w _ _ = {!!}
   ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w = {!!}

‚Ñï‚Çê‚Üí‚Ñï :  ‚Ñï‚Çê ‚Üí ‚Ñï.‚Ñï
‚Ñï‚Çê‚Üí‚Ñï nothing = ‚Ñï.zero
‚Ñï‚Çê‚Üí‚Ñï (just x) = ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï x


-- Iso‚Ñï‚Ñï‚Çê‚Å∫¬π : Iso ‚Ñï.‚Ñï ‚Ñï‚Çê
-- Iso‚Ñï‚Ñï‚Çê‚Å∫¬π = w
--  where
--  w : Iso ‚Ñï.‚Ñï ‚Ñï‚Çê
--  Iso.fun w = ‚Ñï‚Üí‚Ñï‚Çê
--  Iso.inv w = ‚Ñï‚Çê‚Üí‚Ñï
--  Iso.rightInv w =
--   Mb.elim _ refl
--    (‚Ñï‚Çê‚Å∫¬πelimProp.f w')
--    where
--    w' : ‚Ñï‚Çê‚Å∫¬πelimProp _
--    ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w' = refl
--    ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w' p q =
--      {!cong‚ÇÇ _+_ p q!}
--    ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w' = {!!}
--  Iso.leftInv w = {!!}

+‚Çê‚â°+ : ‚àÄ n m ‚Üí ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï (n + m) ‚â° (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚Ñï.+ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m) 
+‚Çê‚â°+ = ‚Ñï‚Çê‚Å∫¬πelimProp.f w
 where
 w : ‚Ñï‚Çê‚Å∫¬πelimProp (Œª z ‚Üí (m : ‚Ñï‚Çê‚Å∫¬π') ‚Üí ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï (z + m) ‚â° ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï z ‚Ñï.+ ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)
 ‚Ñï‚Çê‚Å∫¬πelimProp.aOne w m = refl
 ‚Ñï‚Çê‚Å∫¬πelimProp._a+_ w {n} {m} q p m' =
    (cong ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï (sym (+-assoc n m m')) ‚àô‚àô q (m + m')
      ‚àô‚àô cong ((‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚Ñï.+_) (p m'))
     ‚àô‚àô ‚Ñïprops.+-assoc (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m') ‚àô‚àô
     (cong (‚Ñï._+ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m') ) (sym (q m)) ‚àô cong (‚Ñï._+ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m')) (q m))

 ‚Ñï‚Çê‚Å∫¬πelimProp.asquash w _ = isPropŒ† Œª _ ‚Üí ‚Ñïprops.isSet‚Ñï _ _

-- record : ?

-- Fin‚Çê : ‚Ñï‚Çê‚Å∫¬π' {‚ä•} ‚Üí Type
-- Fin‚Çê one = Unit 
-- Fin‚Çê (x + x‚ÇÅ) = Fin‚Çê x ‚äé Fin‚Çê x‚ÇÅ
-- Fin‚Çê (+-assoc x x‚ÇÅ x‚ÇÇ i) =
--  ua (‚äé-assoc-‚âÉ {A = Fin‚Çê x} {B = Fin‚Çê x‚ÇÅ} {C = Fin‚Çê x‚ÇÇ}) (~ i) 

-- toTrunc : {!!}
-- toTrunc = {!!}

FinSucUnit‚äé : ‚àÄ n ‚Üí Iso (Fin (‚Ñï.suc n)) (Unit ‚äé Fin n)
FinSucUnit‚äé n = w
 where
 w : Iso (Fin (‚Ñï.suc n)) (Unit ‚äé Fin n)
 Iso.fun w (‚Ñï.zero , snd‚ÇÅ) = inl _
 Iso.fun w (‚Ñï.suc fst‚ÇÅ , snd‚ÇÅ) = inr (fst‚ÇÅ , snd‚ÇÅ)
 Iso.inv w (inl x) = ‚Ñï.zero , _
 Iso.inv w (inr x) = ‚Ñï.suc (fst x) , (snd x)
 Iso.rightInv w (inl x) = refl
 Iso.rightInv w (inr (fst‚ÇÅ , snd‚ÇÅ)) = refl
 Iso.leftInv w (‚Ñï.zero , snd‚ÇÅ) = refl
 Iso.leftInv w (‚Ñï.suc fst‚ÇÅ , snd‚ÇÅ) = refl

Fin‚äé : ‚àÄ n m ‚Üí Iso (Fin (n ‚Ñï.+ m)) (Fin n ‚äé Fin m)
Fin‚äé ‚Ñï.zero m =
 compIso (invIso ‚äé-‚ä•-Iso)
   (compIso ‚äé-swap-Iso (‚äéIso (compIso (invIso (Œ£EmptyIso _)) Œ£-swap-Iso) idIso))
Fin‚äé (‚Ñï.suc n) m =
  compIso (FinSucUnit‚äé _)
   (compIso (compIso (‚äéIso idIso (Fin‚äé n m))
    (invIso ‚äé-assoc-Iso)) (‚äéIso (invIso (FinSucUnit‚äé _)) idIso)) 

Fin‚äé‚â° : ‚àÄ n m ‚Üí  (Fin (n ‚Ñï.+ m)) ‚â° (Fin n ‚äé Fin m)
Fin‚äé‚â° n m = ua (isoToEquiv (Fin‚äé n m))


+-hlp-sing-Fin : (n m : ‚Ñï‚Çê‚Å∫¬π) ‚Üí
     Fin (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï (n + m)) ‚â° (Fin (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚äé Fin (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m))
+-hlp-sing-Fin n m  =
  cong Fin (+‚Çê‚â°+ n m)
   ‚àô Fin‚äé‚â° (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)  

module _ {‚Ñì} {A : Type ‚Ñì} where

 √ó^-+-‚âÉ : ‚àÄ n m ‚Üí  (A √ó^ n √ó A √ó^ m) ‚âÉ (A √ó^ (n ‚Ñï.+ m))  
 √ó^-+-‚âÉ (‚Ñï.zero) m = isoToEquiv (iso snd (_ ,_) (Œª _ ‚Üí refl) Œª _ ‚Üí refl)
 √ó^-+-‚âÉ (‚Ñï.suc n) m = Œ£-assoc-‚âÉ ‚àô‚Çë ‚âÉ-√ó (idEquiv _) (√ó^-+-‚âÉ n m)

 √ó^-+-‚â° : ‚àÄ n m ‚Üí  (A √ó^ n √ó A √ó^ m) ‚â° (A √ó^ (n ‚Ñï.+ m))  
 √ó^-+-‚â° n m = ua (√ó^-+-‚âÉ n m)


module _ {‚Ñì} (A : Type ‚Ñì) where

 -- ùëΩ' : ‚Ñï‚Çê‚Å∫¬πrec (Type ‚Ñì)
 -- ùëΩ' = {!!}
 -- -- ‚Ñï‚Çê‚Å∫¬πrec.aOne ùëΩ' = A
 -- -- ‚Ñï‚Çê‚Å∫¬πrec._a+_ ùëΩ' = _√ó_
 -- -- ‚Ñï‚Çê‚Å∫¬πrec.a-assoc ùëΩ' _ _ _ = sym (ua Œ£-assoc-‚âÉ)
 -- -- ‚Ñï‚Çê‚Å∫¬πrec.a-sym ùëΩ' _ _ _ = {!!}

 -- -- module _ (isSetA : isSet A) where

 -- singlùëΩ : (x : ‚Ñï‚Çê‚Å∫¬π) ‚Üí singl (A √ó^ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï x))
 -- singlùëΩ = ‚Ñï‚Çê‚Å∫¬πelim.f w
 --  where
 --   w : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí singl (A √ó^ ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï z))
 --   ‚Ñï‚Çê‚Å∫¬πelim.aOne w = _ , isoToPath (iso fst (_, _) (Œª _ ‚Üí refl) Œª _ ‚Üí refl)
 --   fst ((w ‚Ñï‚Çê‚Å∫¬πelim.a+ (x , x=)) (y , y=)) = x √ó y
 --   snd (((‚Ñï‚Çê‚Å∫¬πelim._a+_ w {n} {m}) (x , x=)) (y , y=)) =
 --      (sym (ua (√ó^-+-‚âÉ (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)))) ‚àô  cong‚ÇÇ _√ó_ x= y=
 --   ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w {n} {m} {o} (x , x=) (y , y=) (z , z=) =
 --     Œ£PathP (sym (ua Œ£-assoc-‚âÉ)
 --           , {!!})
 --   ‚Ñï‚Çê‚Å∫¬πelim.a-sym  w {n} {m} (x , x=) (y , y=) =
 --      Œ£PathP ((sym (cong‚ÇÇ _√ó_ x= y=) ‚àô √ó^-+-‚â° (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)) ‚àô‚àô
 --               cong (A √ó^_) (‚Ñïprops.+-comm (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m))
 --              ‚àô‚àô (sym (√ó^-+-‚â° (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m) (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n)) ‚àô cong‚ÇÇ _√ó_ y= x=)
 --        , {!!}) 
 --   ‚Ñï‚Çê‚Å∫¬πelim.asquash w = {!!}
 --  -- w : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí singl (A √ó^ ‚Ñï‚Çê‚Üí‚Ñï z))
 --  -- ‚Ñï‚Çê‚Å∫¬πelim.aOne w = _ , isoToPath (iso fst (_, _) (Œª _ ‚Üí refl) Œª _ ‚Üí refl) 
 --  -- fst ((w ‚Ñï‚Çê‚Å∫¬πelim.a+ (x , x=)) (y , y=)) = x √ó y
 --  -- snd (((‚Ñï‚Çê‚Å∫¬πelim._a+_ w {n} {m}) (x , x=)) (y , y=)) =
 --  --   (sym (ua (√ó^-+-‚âÉ (‚Ñï‚Çê‚Üí‚Ñï n) (‚Ñï‚Çê‚Üí‚Ñï m)))) ‚àô  cong‚ÇÇ _√ó_ x= y=
 --  -- ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w {n} {m} {o} x y z =
 --  --  Œ£PathP (sym (ua Œ£-assoc-‚âÉ) ,
 --  --    {!!})
 --  -- -- fst (‚Ñï‚Çêelim.a-assoc w {n} {m} {o} x y z i) =
 --  -- --   sym (ua (Œ£-assoc-‚âÉ {A = fst x} {B = Œª _ ‚Üí fst y} {C = Œª _ _ ‚Üí fst z})) i
 --  -- -- snd (‚Ñï‚Çêelim.a-assoc w {n} {m} {o} x y z i) =
 --  -- --   {!!}
 --  -- ‚Ñï‚Çêelim.asquash w _ = isOfHLevelPlus {n = 0} 2 (isContrSingl _)

--  ùëΩ : ‚Ñï‚Çê ‚Üí Type ‚Ñì
--  ùëΩ = fst ‚àò singlùëΩ

-- allFalseùë© : ‚àÄ n ‚Üí ùëΩ Bool n ‚Üí hProp ‚Ñì-zero
-- allFalseùë© = ‚Ñï‚Çêelim.f w
--  where
--  w : ‚Ñï‚Çêelim (Œª z ‚Üí ùëΩ Bool z ‚Üí hProp ‚Ñì-zero)
--  ‚Ñï‚Çêelim.aOne w false = L.‚ä§
--  ‚Ñï‚Çêelim.aOne w true = L.‚ä•
--  ‚Ñï‚Çêelim._a+_ w {n} {m} Fn Fm = Œª (x , y) ‚Üí Fn x L.‚äì Fm y
--  ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fn Fm Fo i q =
--    let q' = unglue (i ‚à® ~ i) q
--    in L.‚äì-assoc (Fn (fst q')) (Fm (fst (snd q'))) ((Fo (snd (snd q')))) i

--  ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí isSetHProp

-- onlyOneTrueùë© : ‚àÄ n ‚Üí ùëΩ Bool n ‚Üí hProp ‚Ñì-zero
-- onlyOneTrueùë© = ‚Ñï‚Çêelim.f w
--  where
--  w : ‚Ñï‚Çêelim (Œª z ‚Üí ùëΩ Bool z ‚Üí hProp ‚Ñì-zero)
--  ‚Ñï‚Çêelim.aOne w false = L.‚ä•
--  ‚Ñï‚Çêelim.aOne w true = L.‚ä§
--  ‚Ñï‚Çêelim._a+_ w {n} {m} Fn Fm =
--    Œª (x , y) ‚Üí (Fn x L.‚äì allFalseùë© n x) L.‚äî (Fm y L.‚äì allFalseùë© m y)
--  ‚Ñï‚Çêelim.a-assoc w {n} {m} {o} Fn Fm Fo i q =
--    let q' = unglue (i ‚à® ~ i) q
--    in {!!}
--       -- funExtDep Œª {x‚ÇÄ} {x‚ÇÅ} p ‚Üí
--       --   Œª i ‚Üí
--       --     let q = sym (ua-ungluePath _ (symP p)) i
--       --     in L.‚äì-assoc (Fn (fst q)) (Fm (fst (snd q))) ((Fo (snd (snd q)))) i

--  ‚Ñï‚Çêelim.asquash w _ = isSet‚Üí isSetHProp



pattern suc k = one + k

infixl 6 _+‚Çê_ _‚Çê+_ _‚äπ_

_+‚Çê_ : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê‚Å∫¬π
nothing +‚Çê x‚ÇÅ = x‚ÇÅ
just x +‚Çê x‚ÇÅ = x + x‚ÇÅ

_‚Çê+_ : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê ‚Üí  ‚Ñï‚Çê‚Å∫¬π
x ‚Çê+ nothing = x
x ‚Çê+ just x‚ÇÅ = x + x‚ÇÅ

_‚äπ‚Çê_ : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê
x ‚äπ‚Çê y = just (x +‚Çê y)

_‚Çê‚äπ_ : ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê
x ‚Çê‚äπ y = just (x ‚Çê+ y)

_‚äπ_ : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê
nothing ‚äπ x‚ÇÅ = x‚ÇÅ
just x ‚äπ x‚ÇÅ = x ‚Çê‚äπ x‚ÇÅ

infix 7 _++‚Çê_‚Çê++_

_++‚Çê_‚Çê++_ : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê‚Å∫¬π ‚Üí ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê‚Å∫¬π
_++‚Çê_‚Çê++_ x y z = x +‚Çê y ‚Çê+ z


‚Çê+‚Çê-assoc : ‚àÄ l c r ‚Üí
   l +‚Çê (c ‚Çê+ r) ‚â° l +‚Çê c ‚Çê+ r 
‚Çê+‚Çê-assoc nothing c r = refl
‚Çê+‚Çê-assoc (just x) c nothing = refl
‚Çê+‚Çê-assoc (just x) c (just x‚ÇÅ) = +-assoc _ _ _



record AdjacentBundles' (n : ‚Ñï‚Çê‚Å∫¬π) : Type‚ÇÄ where
 constructor ùïíùïì'
 field
  l r  : ‚Ñï‚Çê‚Å∫¬π
  <n : (l + r) ‚â° n


record AdjacentBundles (n : ‚Ñï‚Çê‚Å∫¬π) : Type‚ÇÄ where
 constructor ùïíùïì
 field
  lPad : ‚Ñï‚Çê
  l r  : ‚Ñï‚Çê‚Å∫¬π
  rPad : ‚Ñï‚Çê
  <n : lPad +‚Çê (l + r) ‚Çê+ rPad ‚â° n


swapAB : ‚àÄ {n} ‚Üí AdjacentBundles n ‚Üí AdjacentBundles n
swapAB (ùïíùïì lPad l r rPad <n) =
  ùïíùïì lPad r l rPad (cong (Œª x ‚Üí (lPad +‚Çê x ‚Çê+ rPad)) (+-sym r l) ‚àô <n)


swapAB' : ‚àÄ {n} ‚Üí (x : AdjacentBundles n) ‚Üí _ ‚Üí AdjacentBundles n
swapAB' (ùïíùïì lPad l r rPad <n) p =
  ùïíùïì lPad r l rPad p


-- -- +-suc : ‚àÄ trunc ‚Üí (m n : ‚Ñï‚Çê‚Å∫¬π {trunc}) ‚Üí m + (suc n) ‚â° suc (m + n)
-- -- +-suc = {!!}

suc' : ‚Ñï‚Çê ‚Üí ‚Ñï‚Çê
suc' = just ‚àò Mb.rec one suc

-- sucAB : ‚àÄ {n} ‚Üí AdjacentBundles n ‚Üí AdjacentBundles (suc n)
-- AdjacentBundles.lPad (sucAB x) = suc' (AdjacentBundles.lPad x)
-- AdjacentBundles.l (sucAB x) = AdjacentBundles.l x
-- AdjacentBundles.r (sucAB x) = AdjacentBundles.r x
-- AdjacentBundles.rPad (sucAB x) = AdjacentBundles.rPad x
-- AdjacentBundles.<n (sucAB {n} (ùïíùïì lPad l r rPad <n)) = w lPad rPad <n
--  where
--  w : ‚àÄ lPad rPad ‚Üí lPad +‚Çê (l + r) ‚Çê+ rPad ‚â° n
--      ‚Üí  Mb.rec one (_+_ one) lPad + (l + r) ‚Çê+ rPad ‚â° suc n
--  w nothing nothing p = cong suc p
--  w nothing (just x) p = sym (+-assoc _ _ _) ‚àô cong suc p
--  w (just x) nothing p = sym (+-assoc _ _ _) ‚àô cong suc p
--  w (just x) (just x‚ÇÅ) p = ( sym (+-assoc _ _ _) ‚àô sym (+-assoc _ _ _) ‚àô cong suc (+-assoc _ _ _)) ‚àô cong suc p


m+AB : ‚àÄ m {n} ‚Üí AdjacentBundles n ‚Üí AdjacentBundles (m + n)
AdjacentBundles.lPad (m+AB m x) = (m ‚Çê‚äπ AdjacentBundles.lPad x)
AdjacentBundles.l (m+AB m x) = AdjacentBundles.l x
AdjacentBundles.r (m+AB m x) = AdjacentBundles.r x
AdjacentBundles.rPad (m+AB m x) = AdjacentBundles.rPad x
AdjacentBundles.<n (m+AB m {n} (ùïíùïì lPad l r rPad <n)) = w lPad rPad <n
 where
 w : ‚àÄ lPad rPad ‚Üí lPad +‚Çê (l + r) ‚Çê+ rPad ‚â° n
     ‚Üí  m ‚Çê+  lPad + (l + r) ‚Çê+ rPad ‚â° m + n
 w nothing nothing p = cong (m +_) p
 w nothing (just x) p = sym (+-assoc _ _ _) ‚àô cong (m +_) p
 w (just x) nothing p = sym (+-assoc _ _ _) ‚àô cong (m +_) p
 w (just x) (just x‚ÇÅ) p = ( sym (+-assoc _ _ _) ‚àô sym (+-assoc _ _ _) ‚àô cong (m +_) (+-assoc _ _ _)) ‚àô cong (m +_) p


AB+m : ‚àÄ m {n} ‚Üí AdjacentBundles n ‚Üí AdjacentBundles (n + m)
AdjacentBundles.lPad (AB+m m x) = AdjacentBundles.lPad x
AdjacentBundles.l (AB+m m x) = AdjacentBundles.l x
AdjacentBundles.r (AB+m m x) = AdjacentBundles.r x
AdjacentBundles.rPad (AB+m m x) = AdjacentBundles.rPad x ‚äπ‚Çê m
AdjacentBundles.<n (AB+m m {n} (ùïíùïì lPad l r rPad <n)) = w lPad rPad <n
 where
 w : ‚àÄ lPad rPad ‚Üí lPad +‚Çê (l + r) ‚Çê+ rPad ‚â° n
     ‚Üí  lPad +‚Çê (l + r) + (rPad +‚Çê m) ‚â° n + m
 w _ nothing p = cong (_+ m) p
 w _ (just x) p = +-assoc _ _ _ ‚àô cong (_+ m) p
    


        



data ‚Ñôrm‚Çê {trunc : Bool} (n : ‚Ñï‚Çê‚Å∫¬π) : Type‚ÇÄ where 
  ùï°base : ‚Ñôrm‚Çê n
  
  ùï°loop' : AdjacentBundles n ‚Üí ùï°base ‚â° ùï°base

  ùï°invol' : ‚àÄ ab p ‚Üí ùï°loop' (swapAB' ab p) ‚â° sym (ùï°loop' ab)
  ùï°hex' : ‚àÄ lPad rPad l c r ‚Üí ‚àÄ p p' p'' ‚Üí
     Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop' (ùïíùïì lPad l c (r ‚Çê‚äπ rPad) p''))
       (ùï°loop' (ùïíùïì lPad l (c + r) rPad p))
       refl
       (ùï°loop' (ùïíùïì (lPad ‚äπ‚Çê c) l r rPad p'))
       

  ùï°comm :
      ‚àÄ lPad cPad rPad l r l' r' ‚Üí ‚àÄ p p' ‚Üí
     Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop' (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))       
       (ùï°loop' (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))
       (ùï°loop' (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
       (ùï°loop' (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))

  ùï°over : ‚àÄ lPad rPad l x x' ‚Üí ‚àÄ p p' p'' ‚Üí
     Square {A = ‚Ñôrm‚Çê {trunc} n}
       (ùï°loop' (ùïíùïì (lPad ‚äπ‚Çê l) x x' rPad p'))       
       (ùï°loop' (ùïíùïì lPad x' x (l  ‚Çê‚äπ rPad) p''))
       (ùï°loop' (ùïíùïì lPad l (x' + x) rPad p))
       (ùï°loop' (ùïíùïì lPad l (x' + x) rPad p))

  ùï°squash : Bool‚ÜíType trunc ‚Üí isGroupoid (‚Ñôrm‚Çê n)

-- ùï°loopGap : {!!}
-- ùï°loopGap = {!!}

-- ùï°overGap : ‚àÄ n lPad cPad rPad l x x' ‚Üí ‚àÄ p p' p'' ‚Üí
--    Square {A = ‚Ñôrm‚Çê {true} n}
--      (ùï°loop' (ùïíùïì (lPad ‚äπ‚Çê (l ‚Çê+ cPad)) x x' rPad p'))       
--      (ùï°loop' (ùïíùïì lPad x' x ((cPad +‚Çê l)  ‚Çê‚äπ rPad) p''))
--      (ùï°loop' (ùïíùïì lPad l (x' + x) rPad p))
--      (ùï°loop' (ùïíùïì lPad l (x' + x) rPad p))
-- ùï°overGap = {!!}

record ‚ÑôrmRec (A : Type ‚Ñì) : Type ‚Ñì where
 field
  abase : ‚Ñï‚Çê‚Å∫¬π ‚Üí A
  aloop : ‚àÄ n ‚Üí AdjacentBundles n ‚Üí abase n ‚â° abase n
  ainvol : ‚àÄ n ab p ‚Üí aloop n  (swapAB' ab p) ‚â° sym (aloop n ab)
  ahex : ‚àÄ n lPad rPad l c r ‚Üí ‚àÄ p p' p'' ‚Üí
     Square {A = A}
       (aloop n (ùïíùïì lPad l c (r ‚Çê‚äπ rPad) p''))
       (aloop n (ùïíùïì lPad l (c + r) rPad p))
       refl
       (aloop n (ùïíùïì (lPad ‚äπ‚Çê c) l r rPad p'))       
  acomm :
      ‚àÄ n lPad cPad rPad l r l' r' ‚Üí ‚àÄ p p' ‚Üí
     Square {A = A}
       (aloop n (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))       
       (aloop n (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))
       (aloop n (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
       (aloop n (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
  aover : ‚àÄ n lPad rPad l x x' ‚Üí ‚àÄ p p' p'' ‚Üí
     Square {A = A}
       (aloop n (ùïíùïì (lPad ‚äπ‚Çê l) x x' rPad p'))       
       (aloop n (ùïíùïì lPad x' x (l ‚Çê‚äπ rPad) p''))
       (aloop n (ùïíùïì lPad l (x' + x) rPad p))
       (aloop n (ùïíùïì lPad l (x' + x) rPad p))

  asquash : isGroupoid A
  
 f : ‚àÄ {n} ‚Üí ‚Ñôrm‚Çê {true} n ‚Üí A
 f {n} ùï°base = abase n
 f {n} (ùï°loop' x i) = aloop n x i
 f {n} (ùï°invol' ab p i i‚ÇÅ) = ainvol n ab p i i‚ÇÅ
 f {n} (ùï°hex' lPad rPad l c r p p' p'' i i‚ÇÅ) =
   ahex n lPad rPad l c r p p' p'' i i‚ÇÅ
 f {n} (ùï°comm lPad cPad rPad l r l' r' p p' i i‚ÇÅ) =
   acomm n lPad cPad rPad l r l' r' p p' i i‚ÇÅ
 f {n} (ùï°over lPad rPad l x x' p p' p'' i i‚ÇÅ) =
   aover n lPad rPad l x x' p p' p'' i i‚ÇÅ
 f (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) =
  asquash _ _ _ _
    (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (x‚ÇÑ i‚ÇÇ x‚ÇÜ))
    (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (y‚ÇÅ i‚ÇÇ x‚ÇÜ))
      i i‚ÇÅ x‚ÇÖ

record ‚ÑôrmRecElimN (A : ‚Ñï‚Çê‚Å∫¬π ‚Üí Type ‚Ñì) : Type ‚Ñì where
 field
  abase : ‚àÄ n ‚Üí A n
  aloop : ‚àÄ n ‚Üí AdjacentBundles n ‚Üí abase n ‚â° abase n
  ainvol : ‚àÄ n ab p ‚Üí aloop n  (swapAB' ab p) ‚â° sym (aloop n ab)
  ahex : ‚àÄ n lPad rPad l c r ‚Üí ‚àÄ p p' p'' ‚Üí
     Square {A = A n}
       (aloop n (ùïíùïì lPad l c (r ‚Çê‚äπ rPad) p''))
       (aloop n (ùïíùïì lPad l (c + r) rPad p))
       refl
       (aloop n (ùïíùïì (lPad ‚äπ‚Çê c) l r rPad p'))       
  acomm :
      ‚àÄ n lPad cPad rPad l r l' r' ‚Üí ‚àÄ p p' ‚Üí
     Square {A = A n}
       (aloop n (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))       
       (aloop n (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))
       (aloop n (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
       (aloop n (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
  aover : ‚àÄ n lPad rPad l x x' ‚Üí ‚àÄ p p' p'' ‚Üí
     Square {A = A n}
       (aloop n (ùïíùïì (lPad ‚äπ‚Çê l) x x' rPad p'))       
       (aloop n (ùïíùïì lPad x' x (l ‚Çê‚äπ rPad) p''))
       (aloop n (ùïíùïì lPad l (x' + x) rPad p))
       (aloop n (ùïíùïì lPad l (x' + x) rPad p))

  asquash : ‚àÄ n ‚Üí isGroupoid (A n)
  
 f : ‚àÄ {n} ‚Üí ‚Ñôrm‚Çê {true} n ‚Üí A n
 f {n} ùï°base = abase n
 f {n} (ùï°loop' x i) = aloop n x i
 f {n} (ùï°invol' ab p i i‚ÇÅ) = ainvol n ab p i i‚ÇÅ
 f {n} (ùï°hex' lPad rPad l c r p p' p'' i i‚ÇÅ) =
   ahex n lPad rPad l c r p p' p'' i i‚ÇÅ
 f {n} (ùï°comm lPad cPad rPad l r l' r' p p' i i‚ÇÅ) =
   acomm n lPad cPad rPad l r l' r' p p' i i‚ÇÅ
 f {n} (ùï°over lPad rPad l x x' p p' p'' i i‚ÇÅ) =
   aover n lPad rPad l x x' p p' p'' i i‚ÇÅ
 f {n} (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) =
   asquash n _ _ _ _
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f {n} (x‚ÇÑ i‚ÇÇ x‚ÇÜ))
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f {n} (y‚ÇÅ i‚ÇÇ x‚ÇÜ))
       i i‚ÇÅ x‚ÇÖ

record ‚ÑôrmElimSet (n : ‚Ñï‚Çê‚Å∫¬π) (A : ‚Ñôrm‚Çê {true} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 field
  abase : A ùï°base
  aloop : (ab : AdjacentBundles n)
    ‚Üí PathP (Œª i ‚Üí A (ùï°loop' ab i)) abase abase

  asquash : ‚àÄ p ‚Üí isSet (A p)

 f : (p : ‚Ñôrm‚Çê {true} n) ‚Üí A p
 f ùï°base = abase
 f (ùï°loop' x i) = aloop x i
 f (ùï°invol' ab p i i‚ÇÅ) =
   isSet‚ÜíSquareP
     (Œª i i‚ÇÅ ‚Üí asquash (ùï°invol' ab p i i‚ÇÅ))
     (aloop (swapAB' ab p)) (symP (aloop ab))
     refl refl
     i i‚ÇÅ

 f (ùï°hex' lPad rPad l c r p p' p'' i i‚ÇÅ) =
   isSet‚ÜíSquareP
     (Œª i i‚ÇÅ ‚Üí asquash (ùï°hex' lPad rPad l c r p p' p'' i i‚ÇÅ))
     (aloop (ùïíùïì lPad l c (r ‚Çê‚äπ rPad) p''))
     (aloop (ùïíùïì lPad l (c + r) rPad p))
     refl (aloop (ùïíùïì (lPad ‚äπ‚Çê c) l r rPad p'))
     i i‚ÇÅ

 f (ùï°comm lPad cPad rPad l r l' r' p p' i i‚ÇÅ) =
   isSet‚ÜíSquareP
     (Œª i i‚ÇÅ ‚Üí asquash (ùï°comm lPad cPad rPad l r l' r' p p' i i‚ÇÅ))
     (aloop (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))
     (aloop (ùïíùïì lPad l r ((cPad +‚Çê (l' + r')) ‚Çê‚äπ rPad) p'))
     (aloop (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
     (aloop (ùïíùïì (lPad ‚äπ‚Çê ((l + r) ‚Çê+ cPad)) l' r' rPad p))
     i i‚ÇÅ

 f (ùï°over lPad rPad l x x' p p' p'' i i‚ÇÅ) =
   isSet‚ÜíSquareP
     (Œª i i‚ÇÅ ‚Üí asquash (ùï°over lPad rPad l x x' p p' p'' i i‚ÇÅ))
     (aloop (ùïíùïì (lPad ‚äπ‚Çê l) x x' rPad p'))
     (aloop (ùïíùïì lPad x' x (l ‚Çê‚äπ rPad) p''))
     (aloop (ùïíùïì lPad l (x' + x) rPad p))
     (aloop (ùïíùïì lPad l (x' + x) rPad p))
     i i‚ÇÅ

 f (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) =

     isOfHLevel‚ÜíisOfHLevelDep 3
      (isSet‚ÜíisGroupoid ‚àò asquash ) _ _ _ _
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (x‚ÇÑ i‚ÇÇ x‚ÇÜ))
     (Œª i‚ÇÇ x‚ÇÜ ‚Üí f (y‚ÇÅ i‚ÇÇ x‚ÇÜ))
     (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ)
       i i‚ÇÅ x‚ÇÖ

record ‚ÑôrmElimProp (n : ‚Ñï‚Çê‚Å∫¬π) (A : ‚Ñôrm‚Çê {true} n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 field
  abase : A ùï°base
  asquash : ‚àÄ p ‚Üí isProp (A p)

 fR : ‚ÑôrmElimSet n A
 ‚ÑôrmElimSet.abase fR = abase
 ‚ÑôrmElimSet.aloop fR ab = isProp‚ÜíPathP (Œª i ‚Üí asquash (ùï°loop' ab i)) _ _
 ‚ÑôrmElimSet.asquash fR = isProp‚ÜíisSet ‚àò asquash

 f : (p : ‚Ñôrm‚Çê {true} n) ‚Üí A p
 f =  ‚ÑôrmElimSet.f fR



+ùï° : ‚àÄ n {m} ‚Üí ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (n + m) 
+ùï° n = ‚ÑôrmRecElimN.f w
 where
 open ‚ÑôrmRecElimN
 w : ‚ÑôrmRecElimN (Œª m ‚Üí ‚Ñôrm‚Çê (n + m))
 abase w _ = ùï°base
 aloop w m x = ùï°loop' (m+AB n x)
 ainvol w m ab p = ùï°invol' _ _
 ahex w m lPad rPad l c r p p' p'' =
  let z = AdjacentBundles.<n (m+AB n (ùïíùïì (lPad ‚äπ‚Çê c) l r rPad p'))
  in flipSquare
      (flipSquare (ùï°hex' _ _ _ _ _ _
        ({!!} ‚àô z) _)
        ‚ñ∑ Œª j ‚Üí
         ùï°loop' (ùïíùïì {!!} l r rPad {!!}))

 acomm w = {!!}
 aover w = {!!}
 asquash w = {!!}

ùï°+ : ‚àÄ n {m} ‚Üí ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (m + n) 
ùï°+ n = ‚ÑôrmRecElimN.f w
 where
 open ‚ÑôrmRecElimN
 w : ‚ÑôrmRecElimN (Œª m ‚Üí ‚Ñôrm‚Çê (m + n))
 abase w _ = ùï°base
 aloop w m x = ùï°loop' (AB+m n x)
 ainvol w m ab p = ùï°invol' _ _
 ahex w m lPad rPad l c r p p' p'' = {!!}
  -- let z = AdjacentBundles.<n (m+AB n (ùïíùïì (lPad ‚äπ‚Çê c) l r rPad p'))
  -- in flipSquare
  --     (flipSquare (ùï°hex' _ _ _ _ _ _
  --       ({!!} ‚àô z) _)
  --       ‚ñ∑ Œª j ‚Üí
  --        ùï°loop' (ùïíùïì {!!} l r rPad {!!}))

 acomm w = {!!}
 aover w = {!!}
 asquash w = {!!}


ùï°¬∑ : ‚àÄ {n} ‚Üí ‚Ñôrm‚Çê {true} n ‚Üí ‚àÄ {m} ‚Üí  ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (n + m) 
ùï°¬∑ = ‚ÑôrmRecElimN.f
   {A = Œª n ‚Üí ‚àÄ {m} ‚Üí  ‚Ñôrm‚Çê {true} m ‚Üí ‚Ñôrm‚Çê {true} (n + m)} w
 where
 open ‚ÑôrmRecElimN
 w : ‚ÑôrmRecElimN _
 abase w = +ùï°
 aloop w n ab‚Çô = implicitFunExt
   Œª {m} ‚Üí funExt (‚ÑôrmElimSet.f {n = m} (w' m) )
  where
  open ‚ÑôrmElimSet
  w' : ‚àÄ m ‚Üí ‚ÑôrmElimSet m _
  abase (w' m) = cong (ùï°+ m {n}) (ùï°loop' ab‚Çô) 
  aloop (w' m) ab‚Çò =
    whiskSq.sq' _
      (ùï°comm
        (lPad ab‚Çô)
        (rPad ab‚Çô ‚äπ lPad ab‚Çò)
        (rPad ab‚Çò)
        (l ab‚Çô) (r ab‚Çô)
        (l ab‚Çò) (r ab‚Çò)
        {!!} {!!})
      {!!} {!!} {!!} {!!}
    where
    open AdjacentBundles
  asquash (w' m) = {!!}
 ainvol w = {!!}
 ahex w = {!!}
 acomm w = {!!}
 aover w = {!!}
 asquash w = {!!}


-- Goal: ‚Ñôrm‚Çê (+-sym (lenFCSG‚ä• x) (lenFCSG‚ä• x‚ÇÅ) i)
-- ‚Äî‚Äî‚Äî‚Äî Boundary (wanted) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
-- i = i0 ‚ä¢ ùï°¬∑ (fromFCSG‚ä•' x) (fromFCSG‚ä•' x‚ÇÅ)
-- i = i1 ‚ä¢ ùï°¬∑ (fromFCSG‚ä•' x‚ÇÅ) (fromFCSG‚ä•' x)

ùï°loop : ‚àÄ lPad l r rPad ‚Üí
     PathP (Œª i ‚Üí ‚Ñôrm‚Çê {true} (lPad +‚Çê +-sym l r i ‚Çê+ rPad))
       ùï°base
       ùï°base
ùï°loop lPad l r rPad i =
 ùï°loop' (ùïíùïì lPad l r rPad Œª j ‚Üí lPad +‚Çê +-sym l r (j ‚àß i) ‚Çê+ rPad) i


ùï°¬∑-comm : ‚àÄ {n m} ‚Üí (x : ‚Ñôrm‚Çê {true} n)
         (y : ‚Ñôrm‚Çê {true} m) ‚Üí 
     PathP (Œª i ‚Üí ‚Ñôrm‚Çê {true} (+-sym n m i))
       (ùï°¬∑ x y)
       (ùï°¬∑ y x)
ùï°¬∑-comm {n} {m} =  ‚ÑôrmElimSet.f w
 where
 open AdjacentBundles
 open ‚ÑôrmElimSet
 w : ‚ÑôrmElimSet _ _
 abase w = ‚ÑôrmElimSet.f w'
  where
  open ‚ÑôrmElimSet
  w' : ‚ÑôrmElimSet _ _
  abase w' = ùï°loop {!!} n m {!!}
  aloop w' = {!!}
  asquash w' = {!!}
 aloop w = {!!}
 asquash w = {!!}
 
-- ùï°¬∑-assoc : ‚àÄ {n m o} ‚Üí (x : ‚Ñôrm‚Çê {true} n)
--          (y : ‚Ñôrm‚Çê {true} m)
--          (z : ‚Ñôrm‚Çê {true} o) ‚Üí 
--      PathP (Œª i ‚Üí ‚Ñôrm‚Çê {true} (+-assoc n m o i))
--        (ùï°¬∑ x (ùï°¬∑ y z))
--        (ùï°¬∑ (ùï°¬∑ x y) z)
-- ùï°¬∑-assoc {n} {m} {o} = ‚ÑôrmElimSet.f w
--  where
--  open ‚ÑôrmElimSet
--  w : ‚ÑôrmElimSet _ _
--  abase w = ‚ÑôrmElimSet.f w'
--   where
--   w' : ‚ÑôrmElimSet _ _
--   abase w' = ‚ÑôrmElimSet.f w''
--    where
--    w'' : ‚ÑôrmElimSet _ _
--    abase w'' = Œª _ ‚Üí ùï°base
--    aloop w'' ab = flipSquareP {!!}
--    asquash w'' = {!!}
--   aloop w' ab‚Çò = funExt (‚ÑôrmElimProp.f w'')
--    where
--    open ‚ÑôrmElimProp
--    w'' : ‚ÑôrmElimProp _ _
--    abase w'' = {!!}
--    asquash w'' = {!!}
  
--   asquash w' = {!!}
--  aloop w = {!!}
--  asquash w _ = isSetŒ†2 Œª _ _ ‚Üí {!!}


-- ùï°invol : ‚àÄ lPad l r rPad ‚Üí
--      SquareP (Œª i j ‚Üí ‚Ñôrm‚Çê {true} (lPad +‚Çê
--                 isSet‚Ñï‚Çê‚Å∫¬π (l + r) (r + l)
--                   (+-sym _ _) (sym (+-sym _ _)) i j ‚Çê+ rPad))
--        (ùï°loop lPad l r rPad )
--        (symP (ùï°loop lPad r l rPad))
--        refl
--        refl

-- ùï°invol lPad l r rPad i j = 
--  ùï°invol' (ùïíùïì lPad r l rPad
--     (cong (lPad ++‚Çê_‚Çê++ rPad) (
--       isSet‚ÜíisSet' isSet‚Ñï‚Çê‚Å∫¬π
--          (Œª i‚ÇÅ ‚Üí +-sym l r (j ‚à® ~ i‚ÇÅ))
--          (Œª i‚ÇÅ ‚Üí +-sym r l (i‚ÇÅ ‚àß ~ j))
--          refl
--          (Œª i ‚Üí isSet‚Ñï‚Çê‚Å∫¬π (l + r) (r + l) (+-sym l r) (sym (+-sym r l)) i j)
--          i))
--          )
--   (cong (lPad ++‚Çê_‚Çê++ rPad) (isSet‚ÜíisSet' isSet‚Ñï‚Çê‚Å∫¬π
--         (Œª i‚ÇÅ ‚Üí +-sym l r (i‚ÇÅ ‚àß j))
--         (Œª i‚ÇÅ ‚Üí +-sym r l (~ (i‚ÇÅ ‚àß j)))
--         refl
--         (Œª i ‚Üí isSet‚Ñï‚Çê‚Å∫¬π (l + r) (r + l) (+-sym l r) (sym (+-sym r l)) i j) i)
--         ) i j

-- infixr 5 _¬∑_


-- data FCSG‚ä§ : Type where
--  ‚óè : FCSG‚ä§
--  _¬∑_ : FCSG‚ä§ ‚Üí FCSG‚ä§ ‚Üí FCSG‚ä§
--  ¬∑-assoc :  ‚àÄ m n o ‚Üí m ¬∑ (n ¬∑ o) ‚â° (m ¬∑ n) ¬∑ o
--  ¬∑-comm :  ‚àÄ m n ‚Üí m ¬∑ n ‚â° n ¬∑ m
--  ¬∑-hex-diag : ‚àÄ l c r ‚Üí
--       ((l ¬∑ c) ¬∑ r) ‚â° (c ¬∑ (r ¬∑ l))
--  ¬∑-hex-up : ‚àÄ l c r ‚Üí
--       Square 
--         (¬∑-comm l (c ¬∑ r))
--         (¬∑-hex-diag l c r)
--         (¬∑-assoc l c r)
--         (sym (¬∑-assoc c r l))
--  ¬∑-hex-down :  ‚àÄ l c r ‚Üí
--       Square 
--         (¬∑-hex-diag l c r)
--         (sym (¬∑-assoc c l r))
--         (cong (_¬∑ r) (¬∑-comm l c))
--         (cong (c ¬∑_) (¬∑-comm r l))

--  ¬∑-pentagon-diag : ‚àÄ xs ys zs ws
--       ‚Üí ((xs ¬∑ ys) ¬∑ zs) ¬∑ ws ‚â° xs ¬∑ ys ¬∑ zs ¬∑ ws
--  ¬∑-pentagon-‚ñ≥ : ‚àÄ xs ys zs ws  ‚Üí
--        Square refl (¬∑-pentagon-diag xs ys zs ws)
--          (¬∑-assoc _ _ _) (sym (¬∑-assoc _ _ _))
--  ¬∑-pentagon-‚ñ° : ‚àÄ xs ys zs ws ‚Üí
--        Square (¬∑-pentagon-diag xs ys zs ws)
--           (sym (¬∑-assoc _ _ _))
--           (sym (cong (_¬∑ ws) (¬∑-assoc _ _ _)))           
--           ((cong (xs ¬∑_) (¬∑-assoc _ _ _)))


-- repFCSG‚ä•‚Ñï : ‚Ñï.‚Ñï ‚Üí FCSG‚ä§
-- repFCSG‚ä•‚Ñï ‚Ñï.zero = ‚óè
-- repFCSG‚ä•‚Ñï (‚Ñï.suc x) = ‚óè ¬∑ repFCSG‚ä•‚Ñï x 

-- rep+ : ‚àÄ n m ‚Üí repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï (‚Ñï.suc n))
--                 ¬∑ repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï (‚Ñï.suc m)) ‚â°
--                repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï  ((‚Ñï.suc n) ‚Ñï.+ (‚Ñï.suc m))) 
-- rep+ ‚Ñï.zero m = refl
-- rep+ (‚Ñï.suc n) m = sym (¬∑-assoc _ _ _) ‚àô cong (‚óè ¬∑_) (rep+ n m)

-- repFCSG‚ä•‚Ñïsingl : (n : ‚Ñï‚Çê‚Å∫¬π) ‚Üí singl (repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n)))
-- repFCSG‚ä•‚Ñïsingl = ‚Ñï‚Çê‚Å∫¬πelim.f w
--  where
--  h : ‚àÄ n m ‚Üí (‚Ñï.pred‚Ñï (((‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚Ñï.+ ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m))) ‚â°
      
--       (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï n) ‚Ñï.+
--        ‚Ñï.suc
--        (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)))
--  h = ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï-elimProp
--       {A = Œª n ‚Üí ‚àÄ m ‚Üí
--         (‚Ñï.pred‚Ñï ((n ‚Ñï.+ ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m))) ‚â°
      
--       (‚Ñï.pred‚Ñï n ‚Ñï.+
--        ‚Ñï.suc
--        (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï m)))}
--     (Œª n ‚Üí isPropŒ† Œª _ ‚Üí ‚Ñïprops.isSet‚Ñï _ _)
--      Œª n ‚Üí ‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï-elimProp
--            {A = Œª m ‚Üí ( ((n ‚Ñï.+ m))) ‚â° ( n ‚Ñï.+ ‚Ñï.suc (‚Ñï.pred‚Ñï m))}
--              (Œª _ ‚Üí ‚Ñïprops.isSet‚Ñï _ _)
--               Œª _ ‚Üí refl
 
--  w : ‚Ñï‚Çê‚Å∫¬πelim (Œª z ‚Üí singl (repFCSG‚ä•‚Ñï (‚Ñï.pred‚Ñï (‚Ñï‚Çê‚Å∫¬π‚Üí‚Ñï z))))
--  ‚Ñï‚Çê‚Å∫¬πelim.aOne w = _ , refl
--  fst ((w ‚Ñï‚Çê‚Å∫¬πelim.a+ (x , _)) (y , _)) = x ¬∑ y
--  snd (‚Ñï‚Çê‚Å∫¬πelim._a+_ w {n} {m} (x , x=) (y , y=)) =
--     -- cong‚Ä≤ (repFCSG‚ä•‚Ñï ‚àò' ‚Ñï.pred‚Ñï) {!!}
--      (cong (repFCSG‚ä•‚Ñï) (cong ‚Ñï.pred‚Ñï (+‚Çê‚â°+ n m) ‚àô h n m))
--     ‚àô‚àô sym (rep+ _ _)
--          ‚àô‚àô cong‚ÇÇ _¬∑_ x= y=
  

--  ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w {n} {m} {o} x y z =
--    Œ£PathP (¬∑-assoc _ _ _
--         , {!!}) 
--  ‚Ñï‚Çê‚Å∫¬πelim.a-sym w = {!!}
--  ‚Ñï‚Çê‚Å∫¬πelim.asquash w = {!!}



-- repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π : ‚Ñï‚Çê‚Å∫¬π ‚Üí FCSG‚ä§
-- repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π = fst ‚àò repFCSG‚ä•‚Ñïsingl

-- lenFCSG‚ä• : FCSG‚ä§ ‚Üí ‚Ñï‚Çê‚Å∫¬π
-- lenFCSG‚ä• ‚óè = one
-- lenFCSG‚ä• (n ¬∑ n‚ÇÅ) = lenFCSG‚ä• n + lenFCSG‚ä• n‚ÇÅ 
-- lenFCSG‚ä• (¬∑-assoc n n‚ÇÅ n‚ÇÇ i) =
--    +-assoc (lenFCSG‚ä• n) (lenFCSG‚ä• n‚ÇÅ) (lenFCSG‚ä• n‚ÇÇ) i
-- lenFCSG‚ä• (¬∑-comm n n‚ÇÅ i) =
--   +-sym (lenFCSG‚ä• n) (lenFCSG‚ä• n‚ÇÅ) i
-- lenFCSG‚ä• (¬∑-hex-diag n n‚ÇÅ n‚ÇÇ i) = {!!}
-- lenFCSG‚ä• (¬∑-hex-up n n‚ÇÅ n‚ÇÇ i i‚ÇÅ) = {!!}
-- lenFCSG‚ä• (¬∑-hex-down n n‚ÇÅ n‚ÇÇ i i‚ÇÅ) = {!!}
-- lenFCSG‚ä• (¬∑-pentagon-diag n n‚ÇÅ n‚ÇÇ n‚ÇÉ i) = {!!}
-- lenFCSG‚ä• (¬∑-pentagon-‚ñ≥ n n‚ÇÅ n‚ÇÇ n‚ÇÉ i i‚ÇÅ) = {!!}
-- lenFCSG‚ä• (¬∑-pentagon-‚ñ° n n‚ÇÅ n‚ÇÇ n‚ÇÉ i i‚ÇÅ) = {!!}


-- toFCSG‚ä•'loop : ‚àÄ n ‚Üí AdjacentBundles n ‚Üí      
--         repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π n ‚â° repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π n
-- toFCSG‚ä•'loop n (ùïíùïì nothing l r nothing <n) =
--    cong repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π (sym <n ‚àô +-sym _ _) ‚àô‚àô ¬∑-comm _ _ ‚àô‚àô cong repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π <n
-- toFCSG‚ä•'loop n (ùïíùïì nothing l r (just x) <n) = {!!}
-- toFCSG‚ä•'loop n (ùïíùïì (just x) l r nothing <n) = {!!}
-- toFCSG‚ä•'loop n (ùïíùïì (just x) l r (just x‚ÇÅ) <n) = {!!}

-- -- ‚Ñï‚Çê‚Å∫¬πelim.f w
-- --  where
-- --  w : ‚Ñï‚Çê‚Å∫¬πelim Œª z ‚Üí AdjacentBundles z ‚Üí repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π z ‚â° repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π z
-- --  ‚Ñï‚Çê‚Å∫¬πelim.aOne w _ = refl
-- --  ‚Ñï‚Çê‚Å∫¬πelim._a+_ w = {!!}
-- --  ‚Ñï‚Çê‚Å∫¬πelim.a-assoc w = {!!}
-- --  ‚Ñï‚Çê‚Å∫¬πelim.a-sym w = {!!}
-- --  ‚Ñï‚Çê‚Å∫¬πelim.asquash w = {!!}

-- toFCSG‚ä•' : ‚àÄ n ‚Üí ‚Ñôrm‚Çê {true} n ‚Üí FCSG‚ä§
-- toFCSG‚ä•' n ùï°base = repFCSG‚ä•‚Ñï‚Çê‚Å∫¬π n
-- toFCSG‚ä•' n (ùï°loop' x i) = toFCSG‚ä•'loop n x i
-- toFCSG‚ä•' n (ùï°invol' (ùïíùïì lPad l r rPad <n) p i i‚ÇÅ) = {!lPad rPad!}
-- toFCSG‚ä•' n (ùï°hex' lPad rPad l c r p p' p'' i i‚ÇÅ) = {!!}
-- toFCSG‚ä•' n (ùï°comm lPad cPad rPad l r l' r' p p' i i‚ÇÅ) = {!!}
-- toFCSG‚ä•' n (ùï°over lPad rPad l x x' p p' p'' i i‚ÇÅ) = {!!}
-- toFCSG‚ä•' n (ùï°squash x x‚ÇÅ x‚ÇÇ x‚ÇÉ y x‚ÇÑ y‚ÇÅ i i‚ÇÅ x‚ÇÖ) = {!!}

-- fromFCSG‚ä•' : (x : FCSG‚ä§) ‚Üí ‚Ñôrm‚Çê {true} (lenFCSG‚ä• x)
-- fromFCSG‚ä•' ‚óè = ùï°base
-- fromFCSG‚ä•' (x ¬∑ x‚ÇÅ) = ùï°¬∑ (fromFCSG‚ä•' x) (fromFCSG‚ä•' x‚ÇÅ)
-- fromFCSG‚ä•' (¬∑-assoc x x‚ÇÅ x‚ÇÇ i) =
--  ùï°¬∑-assoc (fromFCSG‚ä•' x) (fromFCSG‚ä•' x‚ÇÅ) (fromFCSG‚ä•' x‚ÇÇ) i
-- fromFCSG‚ä•' (¬∑-comm x x‚ÇÅ i) = {!!}
-- fromFCSG‚ä•' (¬∑-hex-diag x x‚ÇÅ x‚ÇÇ i) = {!!}
-- fromFCSG‚ä•' (¬∑-hex-up x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) = {!!}
-- fromFCSG‚ä•' (¬∑-hex-down x x‚ÇÅ x‚ÇÇ i i‚ÇÅ) = {!!}
-- fromFCSG‚ä•' (¬∑-pentagon-diag x x‚ÇÅ x‚ÇÇ x‚ÇÉ i) = {!!}
-- fromFCSG‚ä•' (¬∑-pentagon-‚ñ≥ x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = {!!}
-- fromFCSG‚ä•' (¬∑-pentagon-‚ñ° x x‚ÇÅ x‚ÇÇ x‚ÇÉ i i‚ÇÅ) = {!!}


-- -- -- -- ùï°hex : ‚àÄ lPad rPad l c r ‚Üí ‚àÄ p p' p'' ‚Üí
-- -- -- --          SquareP (Œª i j ‚Üí ‚Ñôrm‚Çê {true}
-- -- -- --              (isSet‚ÜíisSet' isSet‚Ñï‚Çê‚Å∫¬π
-- -- -- --              (Œª j ‚Üí lPad + +-sym l c j + (r + rPad))
-- -- -- --              (Œª j ‚Üí lPad + +-sym l (c + r) j + rPad)
-- -- -- --              -- (Œª j ‚Üí lPad + +-sym l c j + (r + rPad))
-- -- -- --              -- (Œª j ‚Üí c + lPad + +-sym l r j + rPad)
-- -- -- --              {!!}
-- -- -- --              ({!!} ‚àô‚àô (Œª i ‚Üí (lPad + c) + +-sym l r i + rPad) ‚àô‚àô {!!})
-- -- -- --              -- (+-assoc _ _ _ ‚àô cong (_+ _) {!!})
-- -- -- --              --(Œª i ‚Üí (lPad + +-sym l (c + r) i + rPad))
-- -- -- --              i j)
-- -- -- --              )
-- -- -- --        -- {ùï°base {n = {!!}}}
-- -- -- --        -- {ùï°base {n = lPad + (l + (c + r)) + rPad}}
-- -- -- --        -- (ùï°loop lPad l c (r + rPad))
-- -- -- --        -- {ùï°base {n = {!!}}}
-- -- -- --        -- {ùï°base {n = {!!}}}
-- -- -- --        -- (ùï°loop (c + lPad) l r rPad)
-- -- -- --        -- {!!}
-- -- -- --        (ùï°loop lPad l c (r + rPad))
-- -- -- --        (ùï°loop lPad l (c + r) rPad)
-- -- -- --        {!!}
-- -- -- --        {!!}
-- -- -- --        -- (ùï°loop (lPad + c) l r rPad)
       
-- -- -- -- ùï°hex = {!!}
