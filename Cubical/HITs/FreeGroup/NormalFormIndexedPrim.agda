{-# OPTIONS --safe #-}

module Cubical.HITs.FreeGroup.NormalFormIndexedPrim where

-- open import Cubical.HITs.FreeGroup.Base renaming (assoc to ¬∑assoc)

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure

-- open import Cubical.Foundations.Path
open import Cubical.Foundations.Function
-- open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Isomorphism
-- open import Cubical.Foundations.Equiv
-- open import Cubical.Foundations.Equiv.BiInvertible
open import Cubical.Foundations.HLevels

open import Cubical.Relation.Nullary

open import Cubical.Functions.Involution

open import Cubical.Functions.Embedding
import Cubical.Functions.Logic as L

open import Cubical.Data.Bool as ùüö hiding (_‚â§_)
open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_)
open import Cubical.Data.Nat.Order.Recursive as OR
open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Unit
open import Cubical.Data.Sum as ‚äé
open import Cubical.Data.Sigma
open import Cubical.Data.List as Li
open import Cubical.Data.Maybe
import Cubical.Data.Fin as Fin

open import Cubical.Algebra.Group
open import Cubical.Algebra.Group.Properties
open import Cubical.Algebra.Group.Morphisms

open import Cubical.HITs.SetQuotients as SQ renaming (_/_ to _/‚ÇÇ_ ; [_] to [_]/)
open import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary.Base


private
  variable
    ‚Ñì : Level

module _ {A : Type ‚Ñì} where

 ++=[] : ‚àÄ (xs ys : List A) ‚Üí xs ++ ys ‚â° [] ‚Üí ys ‚â° [] 
 ++=[] [] ys x = x
 ++=[] (x‚ÇÅ ‚à∑ xs) ys x = ‚ä•.rec (¬¨cons‚â°nil x)

 pop : List A ‚Üí List A 
 pop [] = []
 pop (x ‚à∑ []) = []
 pop (x ‚à∑ xs@(_ ‚à∑ _)) = x ‚à∑ pop xs

 tail : List A ‚Üí List A
 tail [] = []
 tail (x ‚à∑ xs) = xs

 pop-red-lem : ‚àÄ (x : A) xs ‚Üí ¬¨ (xs ‚â° []) ‚Üí (x ‚à∑ pop xs) ‚â° (pop (x ‚à∑ xs))
 pop-red-lem x [] x‚ÇÅ = ‚ä•.rec (x‚ÇÅ refl)
 pop-red-lem x (x‚ÇÇ ‚à∑ xs) x‚ÇÅ = refl

 pop‚à∑ ≥ : ‚àÄ x xs ‚Üí pop (xs ‚à∑ ≥ x) ‚â° xs
 pop‚à∑ ≥ x [] = refl
 pop‚à∑ ≥ x (x‚ÇÅ ‚à∑ []) = refl
 pop‚à∑ ≥ x (x‚ÇÅ ‚à∑ x‚ÇÇ ‚à∑ xs) = cong (x‚ÇÅ ‚à∑_) (pop‚à∑ ≥ x (x‚ÇÇ ‚à∑ xs))

 pop++ : ‚àÄ x xs ys ‚Üí xs ++ pop (x ‚à∑ ys) ‚â° pop (xs ++ x ‚à∑ ys) 
 pop++ x [] ys = refl
 pop++ x (x‚ÇÅ ‚à∑ []) ys = refl
 pop++ x (x‚ÇÅ ‚à∑ x‚ÇÇ ‚à∑ xs) ys =
  cong (x‚ÇÅ ‚à∑_) (pop++ x (x‚ÇÇ ‚à∑ xs) ys)

 length‚â°0‚Üí‚â°[] : ‚àÄ (xs : List A) ‚Üí length xs ‚â° 0 ‚Üí xs ‚â° []
 length‚â°0‚Üí‚â°[] [] x = refl
 length‚â°0‚Üí‚â°[] (x‚ÇÅ ‚à∑ xs) x = ‚ä•.rec (snotz x)
 
module NormalForm (A : Type ‚Ñì) where


 IsRedex : Bool √ó A ‚Üí Bool √ó A ‚Üí Type ‚Ñì
 IsRedex (b , x) (b' , x') = (b ‚â° not b') √ó (x ‚â° x')

 symIsRedex : ‚àÄ x y ‚Üí IsRedex x y ‚Üí IsRedex y x
 symIsRedex x y (u , v) = (sym (notnot _) ‚àô sym (cong not u) , sym v)
 
 WillReduce : Bool ‚Üí A ‚Üí (xs : List (Bool √ó A)) ‚Üí Type ‚Ñì
 WillReduce _ _ [] = ‚ä•* 
 WillReduce b x (h ‚à∑ _) = IsRedex (b , x) h

 WillReduce ≥ : Bool ‚Üí A ‚Üí (xs : List (Bool √ó A)) ‚Üí Type ‚Ñì
 WillReduce ≥ _ _ [] = ‚ä•*
 WillReduce ≥ b x (h' ‚à∑ []) = IsRedex (b , x) h'
 WillReduce ≥ b x (_ ‚à∑ xs@(_ ‚à∑ _)) = WillReduce ≥ b x xs

   

 HeadIsRedex : List (Bool √ó A) ‚Üí Type ‚Ñì
 HeadIsRedex [] = ‚ä•*
 HeadIsRedex ((b , a) ‚à∑ xs) = WillReduce b a xs

 IsNormalised : List (Bool √ó A) ‚Üí Type ‚Ñì
 IsNormalised [] = Unit*
 IsNormalised ((b , x) ‚à∑ xs) = (¬¨ WillReduce b x xs)  √ó IsNormalised xs

 WillReduce‚à∑ ≥ : ‚àÄ x x' xs ‚Üí WillReduce (fst x) (snd x) xs ‚Üí
                 WillReduce (fst x) (snd x) (xs ‚à∑ ≥ x')
 WillReduce‚à∑ ≥ x x' (x‚ÇÇ ‚à∑ xs) x‚ÇÅ = x‚ÇÅ


 WillReduce ≥‚à∑ : ‚àÄ x x' xs ‚Üí WillReduce ≥ (fst x) (snd x) xs ‚Üí
                 WillReduce ≥ (fst x) (snd x) (x' ‚à∑ xs)
 WillReduce ≥‚à∑ _ _ (_ ‚à∑ _) x = x

 WillReduce ≥[‚à∑ ≥] : ‚àÄ b a xs x ‚Üí
   WillReduce ≥ b a (xs ‚à∑ ≥ x) ‚Üí
   IsRedex (b , a) x
 WillReduce ≥[‚à∑ ≥] b a [] x p = p
 WillReduce ≥[‚à∑ ≥] b a (x‚ÇÇ ‚à∑ []) x p = p
 WillReduce ≥[‚à∑ ≥] b a (_ ‚à∑ xs@(_ ‚à∑ _)) =
   WillReduce ≥[‚à∑ ≥] b a xs


 WillReduce++ ≥ : ‚àÄ {x xs ys} ‚Üí WillReduce (fst x) (snd x) xs ‚Üí
                 WillReduce (fst x) (snd x) (xs ++ ys)
 WillReduce++ ≥ {xs = _ ‚à∑ _} u = u

 WillReduce ≥++ : ‚àÄ {x xs ys} ‚Üí WillReduce ≥ (fst x) (snd x) ys ‚Üí
                 WillReduce ≥ (fst x) (snd x) (xs ++ ys)
 WillReduce ≥++ {xs = []} u = u
 WillReduce ≥++ {x'} {xs = x ‚à∑ xs} {ys} u =
   WillReduce ≥‚à∑ x' _ (xs ++ ys) (WillReduce ≥++ {xs = xs} {ys} u)

 CasesWillReduce++ : ‚àÄ x xs ys ‚Üí Type ‚Ñì
 CasesWillReduce++ x xs ys =
   ((xs ‚â° []) √ó WillReduce (fst x) (snd x) ys)
     ‚äé WillReduce (fst x) (snd x) xs

 casesWillReduce++ : ‚àÄ x xs ys ‚Üí WillReduce (fst x) (snd x) (xs ++ ys)
   ‚Üí CasesWillReduce++ x xs ys
 casesWillReduce++ x [] ys q = inl (refl , q)
 casesWillReduce++ x (x‚ÇÅ ‚à∑ xs) ys q = inr q

 CasesWillReduce ≥++ : ‚àÄ x xs ys ‚Üí Type ‚Ñì
 CasesWillReduce ≥++ x xs ys =
   ((ys ‚â° []) √ó WillReduce ≥ (fst x) (snd x) xs)
     ‚äé WillReduce ≥ (fst x) (snd x) ys
-- snocView
 -- casesWillReduce ≥++' : ‚àÄ x xs ys ‚Üí WillReduce ≥ (fst x) (snd x) (xs ++ ys)
 --   ‚Üí SnocView ys ‚Üí CasesWillReduce ≥++ x xs ys
 -- casesWillReduce ≥++' x xs .[] x‚ÇÅ nil = {!!}
 -- casesWillReduce ≥++' x xs .(xs‚ÇÅ ‚à∑ ≥ x‚ÇÇ) x‚ÇÅ (snoc x‚ÇÇ xs‚ÇÅ x‚ÇÉ) = {!!}
 
 -- casesWillReduce ≥++ : ‚àÄ x xs ys ‚Üí WillReduce ≥ (fst x) (snd x) (xs ++ ys)
 --   ‚Üí CasesWillReduce ≥++ x xs ys
 -- casesWillReduce ≥++ = {!!}
  

 IsNormalised‚à∑·µ£ : ‚àÄ x xs ‚Üí IsNormalised (xs ‚à∑ ≥ x) ‚Üí IsNormalised xs 
 IsNormalised‚à∑·µ£ x [] x‚ÇÅ = tt*
 IsNormalised‚à∑·µ£ x (x‚ÇÇ ‚à∑ xs) x‚ÇÅ =
   fst x‚ÇÅ ‚àò WillReduce‚à∑ ≥ _ _ _  , IsNormalised‚à∑·µ£ x xs (snd x‚ÇÅ)

 IsNormalised++ : ‚àÄ xs ys ‚Üí IsNormalised (xs ++ ys) ‚Üí
      IsNormalised xs √ó IsNormalised ys
 IsNormalised++ [] ys x = _ , x
 IsNormalised++ (x‚ÇÅ ‚à∑ xs) ys (u , v) = 
  let (u' , v')  = IsNormalised++ xs ys v
  in (u ‚àò  WillReduce++ ≥ , u') , v'

 HasRedex : List (Bool √ó A) ‚Üí Type ‚Ñì
 HasRedex [] = ‚ä•*
 HasRedex xs@(_ ‚à∑ xs') = HeadIsRedex xs ‚äé HasRedex xs'



 ¬¨HasRedex[x] : ‚àÄ x ‚Üí ¬¨ HasRedex [ x ] 
 ¬¨HasRedex[x] x (inl ())
 ¬¨HasRedex[x] x (inr ())

 HasRedex‚à∑ ≥ : ‚àÄ xs x ‚Üí HasRedex xs ‚Üí HasRedex (xs ‚à∑ ≥ x) 
 HasRedex‚à∑ ≥ (x‚ÇÇ ‚à∑ xs) x (inr x‚ÇÅ) =
   inr (HasRedex‚à∑ ≥ xs x x‚ÇÅ)
 HasRedex‚à∑ ≥ (x‚ÇÇ ‚à∑ x‚ÇÉ ‚à∑ xs) x (inl x‚ÇÅ) =
   inl x‚ÇÅ


 HasRedex++ : ‚àÄ xs ys ‚Üí HasRedex xs ‚Üí HasRedex (xs ++ ys)  
 HasRedex++ (x‚ÇÅ ‚à∑ xs) ys (inr x) = inr (HasRedex++ xs ys x)
 HasRedex++ (x‚ÇÅ ‚à∑ x‚ÇÇ ‚à∑ xs) ys (inl x) = inl x

 ++HasRedex : ‚àÄ xs ys ‚Üí HasRedex ys ‚Üí HasRedex (xs ++ ys)  
 ++HasRedex [] ys x = x
 ++HasRedex (x‚ÇÅ ‚à∑ xs) ys x =
   inr (++HasRedex xs ys x)
 
 reduce : ‚àÄ xs ‚Üí HasRedex xs ‚Üí List (Bool √ó A)
 reduce (x ‚à∑ xs) (inr u) = x ‚à∑ reduce xs u
 reduce (_ ‚à∑ _ ‚à∑ xs) (inl x) = xs

 reduce++ : ‚àÄ xs ys hr ‚Üí reduce _ (HasRedex++ xs ys hr) ‚â° reduce _ hr ++ ys
 reduce++ (x ‚à∑ xs) ys (inr x‚ÇÅ) = cong (x ‚à∑_) (reduce++ xs ys x‚ÇÅ)
 reduce++ (x ‚à∑ x‚ÇÇ ‚à∑ xs) ys (inl x‚ÇÅ) = refl

 ++reduce : ‚àÄ xs ys hr ‚Üí reduce _ (++HasRedex xs ys hr) ‚â° xs ++ reduce _ hr
 ++reduce [] ys hr = refl
 ++reduce (x ‚à∑ xs) ys hr = cong (x ‚à∑_) (++reduce xs ys hr)


 reduceLength : ‚àÄ xs hr ‚Üí 2 + length (reduce xs hr) ‚â° length xs 
 reduceLength (_ ‚à∑ xs) (inr u) =
   cong  suc (reduceLength xs u)
 reduceLength (_ ‚à∑ _ ‚à∑ _) (inl _) = refl

 IsNormalised‚Üí¬¨HaseRedex : ‚àÄ xs ‚Üí IsNormalised xs ‚Üí ¬¨ HasRedex xs
 IsNormalised‚Üí¬¨HaseRedex (x‚ÇÇ ‚à∑ x‚ÇÉ ‚à∑ xs) x (inl x‚ÇÅ) = fst x x‚ÇÅ
 IsNormalised‚Üí¬¨HaseRedex (x‚ÇÇ ‚à∑ xs) x (inr x‚ÇÅ) = 
   IsNormalised‚Üí¬¨HaseRedex _ (snd x) x‚ÇÅ 
 
 -- infixr 5 _‚à∑_ 


 not‚ÇÅ : (Bool √ó A) ‚Üí (Bool √ó A)
 not‚ÇÅ = map-fst not

 not‚ÇÅnot‚ÇÅ : ‚àÄ x ‚Üí not‚ÇÅ (not‚ÇÅ x) ‚â° x 
 not‚ÇÅnot‚ÇÅ (x , y) = cong (_, y) (notnot x) 

 
 WillReduce ≥++' : ‚àÄ b a xs x‚ÇÉ ys ‚Üí
  WillReduce ≥ b a (xs ++ x‚ÇÉ ‚à∑ ys) ‚Üí  WillReduce ≥ b a (x‚ÇÉ ‚à∑ ys)
 WillReduce ≥++' b a [] x‚ÇÉ ys x = x
 WillReduce ≥++' b a (x‚ÇÅ ‚à∑ []) x‚ÇÉ ys x = x
 WillReduce ≥++' b a (x‚ÇÅ ‚à∑ x‚ÇÇ ‚à∑ xs) x‚ÇÉ ys x =
    WillReduce ≥++' b a (x‚ÇÇ ‚à∑ xs) x‚ÇÉ ys x
   
 data Red : (List (Bool √ó A)) ‚Üí Type ‚Ñì where
  red[] : Red []
  cj : ‚àÄ x ‚Üí ‚àÄ xs ‚Üí Red xs ‚Üí  Red (x ‚à∑ (xs ‚à∑ ≥ not‚ÇÅ x) )
  _¬∑_ : ‚àÄ xs ys ‚Üí Red xs ‚Üí Red ys ‚Üí Red (xs ++ ys)

 HasRedexSplitCases++ : (xs : List (Bool √ó A)) ‚Üí (ys : List (Bool √ó A)) ‚Üí
   HasRedex (xs ++ ys) ‚Üí Type ‚Ñì
 HasRedexSplitCases++ xs ys hrx =
   ((Œ£ _ Œª rxXs ‚Üí reduce xs rxXs ++ ys ‚â° reduce _ hrx)
      ‚äé (Œ£ _ Œª rxYs ‚Üí xs ++ reduce ys rxYs ‚â° reduce _ hrx)) ‚äé
     ((reduce _ hrx ‚â° pop xs ++ tail ys) √ó
            Œ£ (Bool √ó A) Œª (b , a) ‚Üí
          WillReduce ≥ (not b) a xs √ó
            WillReduce b a ys)

 reduceHead : ‚àÄ x ys u ‚Üí reduce (x ‚à∑ ys) (inl u) ‚â° tail ys
 reduceHead x (x‚ÇÅ ‚à∑ ys) u = refl
 
 hasRedexSplitCases++ : ‚àÄ xs ys hr ‚Üí
    HasRedexSplitCases++ xs ys hr
 hasRedexSplitCases++ [] ys hr = inl (inr (hr , refl))
 hasRedexSplitCases++ (x ‚à∑ xs) ys (inr u) =
   ‚äé.map (‚äé.map (Œª v ‚Üí inr (fst v) , cong (x ‚à∑_) (snd v))
         (Œª (v , q) ‚Üí v , cong (x ‚à∑_) q))
      (Œª (p , (a , b) , u , v) ‚Üí
          (cong (x ‚à∑_) p ‚àô cong (_++ (tail ys))
           (pop-red-lem x xs
            (lower ‚àò flip (subst (WillReduce ≥ (not a) b)) u))) ,
              (a , b) , WillReduce ≥‚à∑ (not a , b) x xs u , v)
     (hasRedexSplitCases++ xs ys u)

 hasRedexSplitCases++ (x ‚à∑ []) ys (inl u) =
   inr (reduceHead x ys u , _ , (refl , refl) , u)
 hasRedexSplitCases++ (x ‚à∑ x‚ÇÇ ‚à∑ xs) ys (inl u) =
   inl (inl (inl u , refl))

 RedWillReduceView : ‚àÄ b a ys ‚Üí Red ys ‚Üí WillReduce b a ys ‚Üí
      Œ£ ((Œ£ _ Red) √ó (Œ£ _ Red))
        Œª ((rl , _) , (rr , _)) ‚Üí
           rl ++ [ b , a ] ++ rr ‚â° tail ys
 RedWillReduceView b a .(x ‚à∑ (xs ‚à∑ ≥ _)) (cj x xs x‚ÇÉ) x‚ÇÅ =
   ((_ , x‚ÇÉ) , (_ , red[])) , cong (xs ‚à∑ ≥_) (Œ£PathP x‚ÇÅ)
 RedWillReduceView b a .([] ++ ys) (([] ¬∑ ys) x x‚ÇÇ) x‚ÇÅ =
   RedWillReduceView b a ys x‚ÇÇ x‚ÇÅ
 RedWillReduceView b a .((_ ‚à∑ _) ++ ys) ((xs@(_ ‚à∑ _) ¬∑ ys) x x‚ÇÇ) x‚ÇÅ =
   let (((rl , rlR) , (rr , rrR)) , p) = RedWillReduceView b a xs x x‚ÇÅ 
   in ((_ , rlR) , (_ , (_ ¬∑ _) rrR x‚ÇÇ)) ,
     sym (++-assoc rl _ _) ‚àô cong (_++ ys) p

 RedWillReduce ≥View : ‚àÄ b a ys ‚Üí Red ys ‚Üí WillReduce ≥ b a ys ‚Üí
      Œ£ ((Œ£ _ Red) √ó (Œ£ _ Red))
        Œª ((rl , _) , (rr , _)) ‚Üí
           rl ++ [ b , a ] ++ rr ‚â° pop ys
 RedWillReduce ≥View b a .(x ‚à∑ (xs ‚à∑ ≥ not‚ÇÅ x)) (cj x xs x‚ÇÇ) x‚ÇÅ =
   ((_ , red[]) , (_ , x‚ÇÇ)) , cong (_‚à∑ xs) (Œ£PathP
     (WillReduce ≥[‚à∑ ≥] b  a (x ‚à∑ xs) (not‚ÇÅ x) x‚ÇÅ) ‚àô
      not‚ÇÅnot‚ÇÅ _) ‚àô sym (pop‚à∑ ≥ (not‚ÇÅ x) (x ‚à∑ xs))
 RedWillReduce ≥View b a .(xs ++ []) ((xs ¬∑ []) x x‚ÇÇ) x‚ÇÅ =
  let z = RedWillReduce ≥View b a xs x (subst (WillReduce ≥ b a) (++-unit-r xs) x‚ÇÅ)
  in map-snd (_‚àô cong pop (sym (++-unit-r xs))) z 
 RedWillReduce ≥View b a .(xs ++ _ ‚à∑ _) ((xs ¬∑ ys@(_ ‚à∑ _)) x x‚ÇÇ) x‚ÇÅ =
  let (((rl , rlR) , (rr , rrR)) , p) = RedWillReduce ≥View b a ys x‚ÇÇ
        (WillReduce ≥++' b a xs _ _ x‚ÇÅ) 
  in ((_ , (_ ¬∑ _) x rlR) , (_ , rrR)) ,
    ++-assoc xs rl _ ‚àô cong (xs ++_) p ‚àô
     pop++ _ _ _




 HasRedexSplitCases‚à∑ : ‚àÄ x x' ‚Üí
      (xs : List (Bool √ó A)) ‚Üí HasRedex (x ‚à∑ (xs ‚à∑ ≥ x')) ‚Üí Type ‚Ñì
 HasRedexSplitCases‚à∑ (b , a) (b' , a') xs hr =
   ((WillReduce b a xs √ó (reduce _ hr ‚â° (tail xs ‚à∑ ≥ (b' , a'))))
     ‚äé (WillReduce ≥ b' a' xs √ó (reduce _ hr ‚â° ((b , a) ‚à∑ pop xs))))
    ‚äé ((Œ£ _ Œª rdxs ‚Üí (b , a) ‚à∑ (reduce xs rdxs ‚à∑ ≥ (b' , a')) ‚â° reduce _ hr  )
     ‚äé (reduce _ hr ‚â° []))


 hasRedexSplitCases‚à∑ : ‚àÄ x x' xs hr ‚Üí HasRedexSplitCases‚à∑ x x' xs hr
 hasRedexSplitCases‚à∑ x x' [] (inl _) =
  inr (inr refl)
 hasRedexSplitCases‚à∑ x x' [] (inr u) =
  ‚äé.rec (‚ä•.rec ‚àò lower) (‚ä•.rec ‚àò lower) u
 hasRedexSplitCases‚à∑ x x' (x'' ‚à∑ xs) (inl u) =
    inl (inl (u , refl))
 hasRedexSplitCases‚à∑ x x' (x'' ‚à∑ []) (inr (inl u)) =
   inl (inr (symIsRedex _ _ u , refl))
 hasRedexSplitCases‚à∑ x x' (x'' ‚à∑ []) (inr (inr u)) =
   ‚äé.rec (‚ä•.rec ‚àò lower) (‚ä•.rec ‚àò lower) u
   
 hasRedexSplitCases‚à∑ x x' (x'' ‚à∑ xs@(x* ‚à∑ xs')) (inr u) =
   ‚äé.rec (‚äé.rec
         (Œª (l , m) ‚Üí
           inr (inl (inl l , sym (cong (x ‚à∑_) m))))
         Œª (l , m) ‚Üí
           inl (inr (l , (cong (x ‚à∑_) m))))
      (‚äé.rec (Œª (rdx , p) ‚Üí
           inr (inl ((inr rdx) , cong (x ‚à∑_) p)))
        Œª p ‚Üí ‚ä•.rec (snotz
          ((+-comm 1 (length xs') ‚àô sym (length++ xs' [ _ ])) ‚àô (injSuc (injSuc ( sym (reduceLength _ u)))) ‚àô cong length p)))
     (hasRedexSplitCases‚à∑ x'' x' xs u)

 reduceRed : ‚àÄ xs hr ‚Üí Red xs ‚Üí Red (reduce xs hr)
 reduceRed .(x ‚à∑ (xs ‚à∑ ≥ not‚ÇÅ x)) hr (cj x xs x‚ÇÅ) with (hasRedexSplitCases‚à∑ x (not‚ÇÅ x) xs hr)
 ... | inl (inl (wr , p)) =
   let (((rl' , rlR') , (rr' , rrR')) , p') =
         RedWillReduceView _ _ _ x‚ÇÅ wr
   in subst Red (sym (++-assoc rl' _ _) ‚àô‚àô cong (_‚à∑ ≥ (not‚ÇÅ x)) p' ‚àô‚àô sym p)
         ((_ ¬∑ _) rlR' (cj x _ rrR'))
 ... | inl (inr (wr , p)) =
   let (((rl' , rlR') , (rr' , rrR')) , p') =
         RedWillReduce ≥View _ _ _ x‚ÇÅ wr
   in subst Red (++-assoc (x ‚à∑ rl') [ not‚ÇÅ x ] _ ‚àô‚àô cong (x ‚à∑_) p' ‚àô‚àô sym p)
           ((_ ¬∑ _)  (cj x _ rlR') rrR')
 ... | inr (inl (hr , p)) =
        subst Red p (cj x _ (reduceRed xs hr x‚ÇÅ))
       
 ... | inr (inr p) = subst Red (sym p) red[]
 reduceRed .(xs ++ ys) hr ((xs ¬∑ ys) x x‚ÇÅ) with (hasRedexSplitCases++ xs ys hr)
 ... | inl (inl (x‚ÇÇ , q)) =
   let z = reduceRed xs x‚ÇÇ x
       z' = (_ ¬∑ _) z x‚ÇÅ 
   in subst Red q z'
 ... | inl (inr (x‚ÇÇ , q)) =
   let z = reduceRed ys x‚ÇÇ x‚ÇÅ
         
    in subst Red q ((_ ¬∑ _) x z)
 ... | inr (p* , (b , a) , rX , rY) =
   let (((rl , rlR) , (rr , rrR)) , p) = RedWillReduce ≥View (not b) a xs x rX 
       (((rl' , rlR') , (rr' , rrR')) , p') = RedWillReduceView b a ys x‚ÇÅ rY
       z = (_ ¬∑ _) ((_ ¬∑ _) rlR
              (cj ((not b , a)) _ ((_ ¬∑ _) rrR rlR'))) rrR'
   in subst Red ((
         (Œª i ‚Üí (rl ++ ((not b , a) ‚à∑
           (++-assoc rr  rl' [ not‚ÇÅnot‚ÇÅ (b , a) i ] i))) ++ rr')
           ‚àô‚àô cong (_++ rr') (sym (++-assoc rl ((not b , a) ‚à∑ rr)
            (rl' ++ [ b , a ])))
              ‚àô
            ++-assoc (rl ++ (not b , a) ‚à∑ rr) _ _ ‚àô
             cong ((rl ++ (not b , a) ‚à∑ rr) ++_)
              (++-assoc rl' _ _) ‚àô‚àô cong‚ÇÇ _++_ p p') ‚àô sym p*) z


 reduce-HasRedex‚à∑ ≥ : ‚àÄ x‚ÇÅ xs‚ÇÅ r' x ‚Üí reduce (x‚ÇÅ ‚à∑ xs‚ÇÅ) r' ‚à∑ ≥ not‚ÇÅ x ‚â°
      reduce ((x‚ÇÅ ‚à∑ xs‚ÇÅ) ‚à∑ ≥ not‚ÇÅ x)
      (HasRedex‚à∑ ≥ ((fst x‚ÇÅ , snd x‚ÇÅ) ‚à∑ xs‚ÇÅ) (not‚ÇÅ x) r')
 reduce-HasRedex‚à∑ ≥ x‚ÇÅ (x‚ÇÉ ‚à∑ xs‚ÇÅ) (inl x‚ÇÇ) x = refl
 reduce-HasRedex‚à∑ ≥ x‚ÇÅ (x‚ÇÉ ‚à∑ xs‚ÇÅ) (inr x‚ÇÇ) x = 
     cong (x‚ÇÅ ‚à∑_)
        (reduce-HasRedex‚à∑ ≥ x‚ÇÉ xs‚ÇÅ x‚ÇÇ _)
 
 Red‚áíHasRedex : ‚àÄ xs ‚Üí 0 < length xs ‚Üí Red xs ‚Üí Œ£ _ Œª hr ‚Üí Red (reduce xs hr) 
 Red‚áíHasRedex .(x ‚à∑ ([] ‚à∑ ≥ not‚ÇÅ x)) _ (cj x [] r) = 
   inl (symIsRedex _ _ (refl , refl)) , red[]
 Red‚áíHasRedex .(x ‚à∑ ((_ ‚à∑ _) ‚à∑ ≥ not‚ÇÅ x)) _ (cj x xs@(_ ‚à∑ _) r) =
   let (r' , p) = Red‚áíHasRedex xs _ r
   in inr (HasRedex‚à∑ ≥ _ _ r') , subst Red (cong (x ‚à∑_) (reduce-HasRedex‚à∑ ≥ _ _ r' _)) (cj x _ p)
 Red‚áíHasRedex .(xs ++ []) q ((xs ¬∑ []) rX rY) = 
   subst (Œª xs ‚Üí Œ£ _ Œª hr ‚Üí Red (reduce xs hr)) (sym (++-unit-r xs))
     (Red‚áíHasRedex _ (subst (Œª xs ‚Üí 0 < length xs) (++-unit-r xs) q) rX)
 Red‚áíHasRedex .(xs ++ x ‚à∑ ys) q ((xs ¬∑ (x ‚à∑ ys)) rX rY) = 
   let (r' , p) = Red‚áíHasRedex _ _ rY
   in ++HasRedex _ _ r' ,
      subst Red (sym (++reduce xs (x ‚à∑ ys) r')) ((_ ¬∑ _) rX p)


 reduce-length-‚â§ : ‚àÄ x ys rdx ‚Üí length (reduce (x ‚à∑ ys) rdx) ‚â§ length ys
 reduce-length-‚â§ x ys rdx =
   <-weaken {m = length (reduce (x ‚à∑ ys) rdx)}
    (‚â°‚Üí‚â§ (injSuc (reduceLength _ rdx)))

 reduce-length-‚â§' : ‚àÄ ys rdx ‚Üí length (reduce (ys) rdx) < length ys
 reduce-length-‚â§' (x ‚à∑ ys) rdx = reduce-length-‚â§ x ys rdx

 inferRed' : ‚àÄ n xs ys ‚Üí length ys ‚â§ n ‚Üí ‚àÄ zs
             ‚Üí Red (xs ++ ys ++ zs)
             ‚Üí Red ys
             ‚Üí Red (xs ++ zs)
 inferRed' n xs [] x zs x‚ÇÅ x‚ÇÇ = x‚ÇÅ
 inferRed' (suc n) xs ys@(_ ‚à∑ ys') x zs x‚ÇÅ r = 
   let (rdx , _) = Red‚áíHasRedex _ _ r
   in inferRed' n xs (reduce ys rdx)
        ((‚â§-trans {length (reduce ys rdx)} {(length ys')} {n}
          (reduce-length-‚â§ _ ys' rdx)
         x)) zs
           (subst Red (++reduce xs (ys ++ zs) _ ‚àô
              cong (xs ++_) (reduce++ ys zs rdx))
            ((reduceRed _ (++HasRedex _ _ (HasRedex++ _ _ rdx)))
              x‚ÇÅ))
           (reduceRed _ rdx r)

 inferRed : ‚àÄ xs ys zs ‚Üí Red (xs ++ ys ++ zs) ‚Üí Red ys ‚Üí Red (xs ++ zs)
 inferRed xs ys = inferRed' _ xs ys (‚â§-refl (length ys))


 infixr 5 _‚à∂_‚Üì‚à∑_


 data _‚Üì_ : List (Bool √ó A) ‚Üí List (Bool √ó A) ‚Üí Type ‚Ñì where
  _‚Üì[] : ‚àÄ {xs} ‚Üí Red xs ‚Üí xs ‚Üì []
  _‚à∂_‚Üì‚à∑_ : ‚àÄ {xs} ‚Üí Red xs ‚Üí ‚àÄ {ys} x {zs} ‚Üí ys ‚Üì zs ‚Üí (xs ++ x ‚à∑ ys ) ‚Üì (x ‚à∑ zs)

 open BinaryRelation

 _‚à∑‚Üì_ : ‚àÄ {xs ys} x ‚Üí xs ‚Üì ys ‚Üí (x ‚à∑ xs) ‚Üì (x ‚à∑ ys)
 _‚à∑‚Üì_ = red[] ‚à∂_‚Üì‚à∑_

 _++‚Üì_ : ‚àÄ {xs ys} zs ‚Üí xs ‚Üì ys ‚Üí (zs ++ xs) ‚Üì (zs ++ ys)
 [] ++‚Üì x = x
 (x‚ÇÅ ‚à∑ zs) ++‚Üì x = x‚ÇÅ ‚à∑‚Üì (zs ++‚Üì x)

 ‚Üìrefl : isRefl _‚Üì_ 
 ‚Üìrefl [] = red[] ‚Üì[]
 ‚Üìrefl (x ‚à∑ xs) = red[] ‚à∂ x ‚Üì‚à∑ ‚Üìrefl xs
 
 _‚Üô_‚Üò_ : List (Bool √ó A) ‚Üí List (Bool √ó A) ‚Üí List (Bool √ó A) ‚Üí Type ‚Ñì
 xs ‚Üô ys ‚Üò zs = ys ‚Üì xs √ó (ys ‚Üì zs)

 _‚Üò_‚Üô_ : List (Bool √ó A) ‚Üí List (Bool √ó A) ‚Üí List (Bool √ó A) ‚Üí Type ‚Ñì
 xs ‚Üò ys ‚Üô zs = xs ‚Üì ys √ó (zs ‚Üì ys)

 Red++‚Üì : ‚àÄ {xs ys zs} ‚Üí Red zs ‚Üí  xs ‚Üì ys ‚Üí (zs ++ xs) ‚Üì ys   
 Red++‚Üì x (x‚ÇÅ ‚Üì[]) = (_ ¬∑ _) x x‚ÇÅ ‚Üì[]
 Red++‚Üì {.(xs ++ x‚ÇÇ ‚à∑ _)} {.(x‚ÇÇ ‚à∑ _)} {zs} x (_‚à∂_‚Üì‚à∑_ {xs} x‚ÇÅ x‚ÇÇ x‚ÇÉ) = 
   subst (_‚Üì (x‚ÇÇ ‚à∑ _)) (++-assoc zs xs _) (((_ ¬∑ _) x x‚ÇÅ) ‚à∂ x‚ÇÇ ‚Üì‚à∑ x‚ÇÉ)

 ‚Üì++Red : ‚àÄ {xs ys zs} ‚Üí Red zs ‚Üí  xs ‚Üì ys ‚Üí (xs ++ zs) ‚Üì ys   
 ‚Üì++Red x (x‚ÇÅ ‚Üì[]) = (_ ¬∑ _) x‚ÇÅ x ‚Üì[]
 ‚Üì++Red x (_‚à∂_‚Üì‚à∑_ {xs} x‚ÇÅ {ys} x‚ÇÇ {zs} x‚ÇÉ) = 
   let z = x‚ÇÅ ‚à∂ x‚ÇÇ ‚Üì‚à∑  (‚Üì++Red x x‚ÇÉ)
   in subst (_‚Üì (x‚ÇÇ ‚à∑ _)) (sym (++-assoc xs (x‚ÇÇ ‚à∑ ys) _)) z

 ‚Üì‚áílength‚â• : ‚àÄ {xs ys} ‚Üí xs ‚Üì ys ‚Üí length ys ‚â§ length xs
 ‚Üì‚áílength‚â• (x ‚Üì[]) = tt
 ‚Üì‚áílength‚â• (_‚à∂_‚Üì‚à∑_ {xs} x {ys} x‚ÇÅ {zs} x‚ÇÇ) = 
  let z' = ‚â§-+-weaken {suc (length zs)} {k = length xs} (‚Üì‚áílength‚â• x‚ÇÇ)
  in subst (suc (length zs) ‚â§_) (sym (length++ xs (x‚ÇÅ ‚à∑ ys))) z'


 ‚ÜìEqualLengths‚áí‚â° : ‚àÄ {xs ys} ‚Üí xs ‚Üì ys ‚Üí length xs ‚â° length ys ‚Üí xs ‚â° ys
 ‚ÜìEqualLengths‚áí‚â° {xs} (x ‚Üì[]) x‚ÇÅ = length‚â°0‚Üí‚â°[] _ x‚ÇÅ
 ‚ÜìEqualLengths‚áí‚â° (_‚à∂_‚Üì‚à∑_ {xs} x {ys} x‚ÇÇ {zs} x‚ÇÉ) p = 
   let z = ‚Üì‚áílength‚â• x‚ÇÉ
       xs‚â°[] : xs ‚â° []
       xs‚â°[] = length‚â°0‚Üí‚â°[] xs (‚â§0‚Üí‚â°0 (k+l‚â°m+n-‚äì-k‚â§m-‚áín‚â§l {length zs}
                {1} {length ys} {suc (length xs) }
                  (+-comm (length zs) 1 ‚àô‚àô sym p ‚àô‚àô
                    ((length++ xs (x‚ÇÇ ‚à∑ ys) ‚àô
                     +-suc (length xs) (length ys))
                      ‚àô +-comm (suc (length xs)) ((length ys)) )) z))
   in cong (_++ (x‚ÇÇ ‚à∑ ys)) xs‚â°[] ‚àô
        cong (x‚ÇÇ ‚à∑_) (‚ÜìEqualLengths‚áí‚â° x‚ÇÉ
          (injSuc
           (cong (Œª xs ‚Üí length (xs ++ x‚ÇÇ ‚à∑ ys)) (sym (xs‚â°[])) ‚àô p )))





 []‚Üì : ‚àÄ xs ‚Üí [] ‚Üì xs ‚Üí xs ‚â° [] 
 []‚Üì [] x = refl
 []‚Üì (x‚ÇÅ ‚à∑ xs) x = ‚ä•.rec (‚Üì‚áílength‚â• x)

 ‚Üì[x]View : ‚àÄ a x ‚Üí a ‚Üì [ x ] ‚Üí
    Œ£ (_ √ó _) Œª (aL , aR) ‚Üí (aL ++ x ‚à∑ aR ‚â° a) √ó Red aL √ó Red aR
 ‚Üì[x]View .(_ ++ x ‚à∑ _) x (x‚ÇÅ ‚à∂ .x ‚Üì‚à∑ (x‚ÇÇ ‚Üì[])) = 
   _ , (refl , (x‚ÇÅ , x‚ÇÇ))
 
 ‚ÜìView++' : ‚àÄ a b c b++c ‚Üí ((b ++ c) ‚â° b++c) ‚Üí a ‚Üì (b++c) ‚Üí
   Œ£ (_ √ó _) Œª (aL , aR) ‚Üí ((aL ‚Üì b) √ó (aR ‚Üì c)) √ó (aL ++ aR ‚â° a)
 ‚ÜìView++' a [] c b++c x x‚ÇÅ =
   ([] , a) , (‚Üìrefl [] , subst (a ‚Üì_) (sym x) x‚ÇÅ) , refl
 ‚ÜìView++' a (x‚ÇÇ ‚à∑ b) c .[] x (x‚ÇÅ ‚Üì[]) = ‚ä•.rec (¬¨cons‚â°nil x)
 ‚ÜìView++' .(xs ++ x‚ÇÉ ‚à∑ ys) (x‚ÇÇ ‚à∑ b) c .(x‚ÇÉ ‚à∑ zs) x (_‚à∂_‚Üì‚à∑_ {xs} x‚ÇÅ {ys} x‚ÇÉ {zs} x‚ÇÑ) = 
  let ((aL , aR) , (l‚Üì , r‚Üì) , p)  = ‚ÜìView++' _ b c _ (cons-inj‚ÇÇ x) x‚ÇÑ
  in (xs ++ x‚ÇÇ ‚à∑ aL , aR) , ((Red++‚Üì x‚ÇÅ (x‚ÇÇ ‚à∑‚Üì l‚Üì) , r‚Üì) ,
       ++-assoc xs _ _ ‚àô
        cong (xs ++_) (cong‚ÇÇ _‚à∑_ (cons-inj‚ÇÅ x) p))

 ‚Üìtrans[] : ‚àÄ a b ‚Üí Red b ‚Üí a ‚Üì b ‚Üí Red a
 ‚Üìtrans[] a .[] red[] (x ‚Üì[]) = x
 ‚Üìtrans[] a .(x ‚à∑ (xs ‚à∑ ≥ not‚ÇÅ x)) (cj x xs x‚ÇÇ) x‚ÇÅ =
  let ((aL , aR) , (l‚Üì , r‚Üì) , p)  =
           ‚ÜìView++' a [ x ] (xs ‚à∑ ≥ (not‚ÇÅ x)) _ refl
            x‚ÇÅ
      ((aL' , aR') , (l‚Üì' , r‚Üì') , p')  =
           ‚ÜìView++' aR xs [ not‚ÇÅ x ] _ refl r‚Üì
      Red-aL' = ‚Üìtrans[] aL' xs x‚ÇÇ l‚Üì'
      ((q1* , q2*) , pa1 , q1 , q2) = ‚Üì[x]View _ _ l‚Üì
      ((q3* , q4*) , pa2 , q3 , q4) = ‚Üì[x]View _ _ r‚Üì'
      z = (_ ¬∑ _) q1 ((_ ¬∑ _)
            (cj x _ ((_ ¬∑ _) ((_ ¬∑ _) q2 Red-aL') q3)) q4)
  in subst Red ((Œª i ‚Üí ++-assoc q1* [ x ]
                 (++-assoc (q2* ++  aL') q3* [ not‚ÇÅ x ] i ++ q4*)
                 (~ i)) ‚àô‚àô  cong ((q1* ++ [ x ]) ++_)
                          (++-assoc (q2* ++ aL') _ _ ‚àô ++-assoc (q2*) aL' _) ‚àô
                            sym (++-assoc (q1* ++ [ x ]) q2* _)
                         ‚àô‚àô
                (Œª i ‚Üí (++-assoc q1* [ x ] q2* ‚àô pa1) i
                 ++ aL' ++ (++-assoc q3* _ q4* ‚àô pa2) i)
          ‚àô cong (aL ++_) p' ‚àô p) z


 ‚Üìtrans[] a .(xs ++ ys) ((xs ¬∑ ys) x x‚ÇÇ) x‚ÇÅ =
  let ((aL , aR) , (l‚Üì , r‚Üì) , p)  = ‚ÜìView++' a xs ys _ refl x‚ÇÅ
      xx = ‚Üìtrans[] aL xs x l‚Üì
      yy = ‚Üìtrans[] aR ys x‚ÇÇ r‚Üì
  in subst Red p ((_ ¬∑ _) xx yy)

 _‚Üì++‚Üì_ : ‚àÄ {xs xs' ys ys'} ‚Üí xs ‚Üì ys ‚Üí xs' ‚Üì ys' ‚Üí (xs ++ xs') ‚Üì (ys ++ ys') 
 (x ‚Üì[]) ‚Üì++‚Üì x‚ÇÅ = Red++‚Üì x x‚ÇÅ 
 _‚Üì++‚Üì_ {xs' = xs'} (_‚à∂_‚Üì‚à∑_ {xs} x {ys} x‚ÇÇ {zs} x‚ÇÉ) x‚ÇÅ =
  let z = x‚ÇÉ ‚Üì++‚Üì x‚ÇÅ
  in subst (_‚Üì (x‚ÇÇ ‚à∑ zs ++ _)) (sym (++-assoc xs (x‚ÇÇ ‚à∑ ys) xs'))
      (Red++‚Üì x (x‚ÇÇ ‚à∑‚Üì z))

 ‚Üìtrans : isTrans _‚Üì_
 ‚Üìtrans a b [] x (x‚ÇÅ ‚Üì[]) = ‚Üìtrans[] _ _ x‚ÇÅ x ‚Üì[]
 ‚Üìtrans a b (x‚ÇÇ ‚à∑ c) x x‚ÇÅ =
   let ((aL , aR) , (l‚Üì , r‚Üì) , p) = ‚ÜìView++' b [ x‚ÇÇ ] c _ refl x‚ÇÅ
       ((aL' , aR') , (l‚Üì' , r‚Üì') , p') = ‚ÜìView++' a aL aR b p x
       z = ‚Üìtrans _ _ c r‚Üì' r‚Üì
       ((q1* , q2*) , pa1 , q1 , q2) = ‚Üì[x]View _ _ l‚Üì
       ((aL* , aR*) , (l‚Üì* , r‚Üì*) , p*) =
         ‚ÜìView++' aL' q1* (x‚ÇÇ ‚à∑ q2*) aL pa1 l‚Üì'
       ((aL*' , aR*') , (l‚Üì*' , r‚Üì*') , p*') =
         ‚ÜìView++' aR* [ x‚ÇÇ ] q2* _ refl r‚Üì*
       ww' = Red++‚Üì (‚Üìtrans[] aL* q1* q1 l‚Üì*)
          (‚Üì++Red (‚Üìtrans[] aR*' q2* q2 r‚Üì*') l‚Üì*')
       ww = subst (_‚Üì [ x‚ÇÇ ]) (cong (aL* ++_) p*' ‚àô p*) ww'
   in subst (_‚Üì (x‚ÇÇ ‚à∑ c)) p' (ww ‚Üì++‚Üì z)
 
 
 ‚Üò‚Üô‚áí‚Üô‚Üò : ‚àÄ xs ys zs ‚Üí xs ‚Üò ys ‚Üô zs ‚Üí Œ£ _ (xs ‚Üô_‚Üò zs) 
 ‚Üò‚Üô‚áí‚Üô‚Üò xs .[] zs ((x ‚Üì[]) , (x‚ÇÅ ‚Üì[])) =
   (xs ++ zs) , ‚Üì++Red x‚ÇÅ (‚Üìrefl _) , Red++‚Üì x (‚Üìrefl _)
 ‚Üò‚Üô‚áí‚Üô‚Üò .(_ ++ x‚ÇÅ ‚à∑ _) .(x‚ÇÅ ‚à∑ _) .(xs ++ x‚ÇÅ ‚à∑ _) (_‚à∂_‚Üì‚à∑_  {xs'} x x‚ÇÅ u , _‚à∂_‚Üì‚à∑_ {xs} x‚ÇÇ .x‚ÇÅ v) = 
   let (zs' , (u' , v')) = ‚Üò‚Üô‚áí‚Üô‚Üò _ _ _ (u , v)
   in (xs ++ xs') ++ x‚ÇÅ ‚à∑ zs' ,
        subst (_‚Üì (xs' ++ x‚ÇÅ ‚à∑ _)) (sym (++-assoc xs xs' _))
           (Red++‚Üì x‚ÇÇ (xs' ++‚Üì (x‚ÇÅ ‚à∑‚Üì u'))) ,
            subst (_‚Üì (xs ++ x‚ÇÅ ‚à∑ _)) (sym (++-assoc xs xs' _))
              (xs ++‚Üì (Red++‚Üì x (x‚ÇÅ ‚à∑‚Üì v')))


 _‚Üô‚Üò_ : _ ‚Üí _ ‚Üí Type ‚Ñì
 xs ‚Üô‚Üò ys = Œ£ _ (xs ‚Üô_‚Üò ys)

 _‚Üò‚Üô_ : _ ‚Üí _ ‚Üí Type ‚Ñì
 xs ‚Üò‚Üô ys = Œ£ _ (xs ‚Üò_‚Üô ys)

 open isEquivRel


 ‚Üô‚Üòrefl : isRefl _‚Üô‚Üò_
 ‚Üô‚Üòrefl _ = _ , ‚Üìrefl _ , ‚Üìrefl _ 

 ‚Üô‚Üòsym : isSym _‚Üô‚Üò_
 ‚Üô‚Üòsym _ _ = map-snd Œª (x , y) ‚Üí y , x 

 ‚Üô‚Üòtrans : isTrans _‚Üô‚Üò_
 ‚Üô‚Üòtrans _ _ _ (_ , (u , v)) (_ , (u' , v')) =
  let (_ , (u'' , v'')) = ‚Üò‚Üô‚áí‚Üô‚Üò _ _ _ (v , u')
  in _ , ‚Üìtrans _ _ _ u'' u , ‚Üìtrans _ _ _ v'' v' 

 ‚Üô‚ÜòisEquivRel : isEquivRel _‚Üô‚Üò_
 reflexive ‚Üô‚ÜòisEquivRel = ‚Üô‚Üòrefl
 symmetric ‚Üô‚ÜòisEquivRel = ‚Üô‚Üòsym
 transitive ‚Üô‚ÜòisEquivRel = ‚Üô‚Üòtrans


 isNormalisedRed : ‚àÄ xs ‚Üí IsNormalised xs ‚Üí  Red xs ‚Üí xs ‚â° []
 isNormalisedRed [] isNrmxs _ = refl
 isNormalisedRed (x ‚à∑ xs) isNrmxs r = ‚ä•.rec
   (IsNormalised‚Üí¬¨HaseRedex _ isNrmxs (fst (Red‚áíHasRedex _ _ r)))


 minimalNormalised : ‚àÄ xs ys ‚Üí IsNormalised xs ‚Üí xs ‚Üì ys ‚Üí xs ‚â° ys
 minimalNormalised _ _ isNrmXs q = 
     ‚ÜìEqualLengths‚áí‚â° q (w _ _ isNrmXs q)
  where
  w : ‚àÄ xs ys ‚Üí IsNormalised xs ‚Üí xs ‚Üì ys ‚Üí length xs ‚â° length ys
  w xs .[] isNrmXs (x ‚Üì[]) = cong length (isNormalisedRed _ isNrmXs x)
  w .(xs ++ x‚ÇÅ ‚à∑ ys) .(x‚ÇÅ ‚à∑ zs) isNrmXs (_‚à∂_‚Üì‚à∑_ {xs} x {ys} x‚ÇÅ {zs} q) =
    let (nrmXs , nrmX‚ÇÅ‚à∑ys) = (IsNormalised++  xs (x‚ÇÅ ‚à∑ ys) isNrmXs)
        xs‚â°[] = isNormalisedRed _ nrmXs x
     in cong (Œª xs ‚Üí length (xs ++ x‚ÇÅ ‚à∑ ys)) xs‚â°[] ‚àô
          cong suc (w _ _ (snd (IsNormalised++ [ x‚ÇÅ ] ys nrmX‚ÇÅ‚à∑ys)) q) 
 

 ‚â¢‚Üì‚ÜíHasRedex : ‚àÄ xs ys ‚Üí length ys < length xs ‚Üí
      xs ‚Üì ys ‚Üí Œ£ (HasRedex xs) Œª hr ‚Üí reduce _ hr ‚Üì ys
 ‚â¢‚Üì‚ÜíHasRedex xs .[] x (x‚ÇÅ ‚Üì[]) = map-snd _‚Üì[] (Red‚áíHasRedex _ x x‚ÇÅ) 
 ‚â¢‚Üì‚ÜíHasRedex .([] ++ x‚ÇÇ ‚à∑ ys) .(x‚ÇÇ ‚à∑ zs) x (_‚à∂_‚Üì‚à∑_ {[]} x‚ÇÅ {ys} x‚ÇÇ {zs} x‚ÇÉ) =
  let (p , q) = ‚â¢‚Üì‚ÜíHasRedex _ _ x x‚ÇÉ
  in inr p , (x‚ÇÇ ‚à∑‚Üì q)
 ‚â¢‚Üì‚ÜíHasRedex .((x‚ÇÑ ‚à∑ xs) ++ x‚ÇÇ ‚à∑ _) .(x‚ÇÇ ‚à∑ _) x (_‚à∂_‚Üì‚à∑_ {x‚ÇÑ ‚à∑ xs} x‚ÇÅ x‚ÇÇ {zs} x‚ÇÉ) = 
  let (p , q) = Red‚áíHasRedex _ _ x‚ÇÅ
  in  HasRedex++ _ _ p , subst (_‚Üì (x‚ÇÇ ‚à∑ zs)) (sym (reduce++ _ _ p)) (Red++‚Üì q (x‚ÇÇ ‚à∑‚Üì x‚ÇÉ))

 reduce‚Üì : ‚àÄ {xs ys} hr
     ‚Üí xs ‚Üì ys
     ‚Üí IsNormalised ys
     ‚Üí reduce xs hr ‚Üì ys
 reduce‚Üì hr (x ‚Üì[]) x‚ÇÅ = reduceRed _ hr x ‚Üì[]
 reduce‚Üì hr (x ‚à∂ x‚ÇÇ ‚Üì‚à∑ x‚ÇÉ) x‚ÇÅ with hasRedexSplitCases++ _ (x‚ÇÇ ‚à∑ _) hr
 ... | inl (inl (hr' , p)) =
       subst (_‚Üì (x‚ÇÇ ‚à∑ _)) p (reduceRed _ hr' x ‚à∂ x‚ÇÇ ‚Üì‚à∑ x‚ÇÉ)
 reduce‚Üì hr (_‚à∂_‚Üì‚à∑_ {xs} x {ys} x' (x‚ÇÇ ‚Üì[])) x‚ÇÅ | inl (inr (inl u , p)) =
   let (((_ , rlR') , (_ , rrR')) , p'') =
            RedWillReduceView _ _ _ x‚ÇÇ u 
   in subst (_‚Üì (_ ‚à∑ _)) (cong (xs ++_) (p'' ‚àô sym (reduceHead _ _ u)) ‚àô p)
        (Red++‚Üì x (rlR' ‚à∂ x' ‚Üì‚à∑ (rrR' ‚Üì[])))
   
 reduce‚Üì hr (x ‚à∂ _ ‚Üì‚à∑ _‚à∂_‚Üì‚à∑_ {[]} x‚ÇÇ x‚ÇÉ x‚ÇÑ) x‚ÇÅ | inl (inr (inl u , p)) =
    ‚ä•.rec (fst x‚ÇÅ u)
 reduce‚Üì hr (_‚à∂_‚Üì‚à∑_ {xs‚ÇÅ} x _ (_‚à∂_‚Üì‚à∑_ {x‚ÇÖ ‚à∑ xs} x‚ÇÇ {ys} x‚ÇÉ x‚ÇÑ)) x‚ÇÅ | inl (inr (inl u , p)) = 
  let (((rl' , rlR') , (rr' , rrR')) , p'') =
          RedWillReduceView _ _ _ x‚ÇÇ u
  in subst (_‚Üì (_ ‚à∑ _)) (cong (xs‚ÇÅ ++_) (sym (++-assoc rl' _ _))
       ‚àô cong (Œª xs ‚Üí xs‚ÇÅ ++ xs ++ x‚ÇÉ ‚à∑ ys) p'' ‚àô p)
         (Red++‚Üì x (rlR' ‚à∂ _ ‚Üì‚à∑ rrR' ‚à∂ x‚ÇÉ ‚Üì‚à∑ x‚ÇÑ))
 ... | inl (inr (inr u , p)) =
    subst (_‚Üì (_ ‚à∑ _)) p (x ‚à∂ x‚ÇÇ ‚Üì‚à∑ reduce‚Üì u x‚ÇÉ (snd x‚ÇÅ))
 ... | inr (p , x‚ÇÇ' , (w , p')) =
    let (((rl' , rlR') , (rr' , rrR')) , p'') =
          RedWillReduce ≥View _ _ _ x w
        p* = cong (Œª x* ‚Üí rl' ++ x* ‚à∑ rr') ((Œ£PathP (symIsRedex _ _ p')))  ‚àô p''
        z = rlR' ‚à∂ x‚ÇÇ ‚Üì‚à∑ Red++‚Üì rrR' x‚ÇÉ
    in subst (_‚Üì (_ ‚à∑ _)) ( sym (++-assoc rl' _ _) ‚àô cong (_++ _) p* ‚àô sym p)
          z
 

 -- Red‚Üì‚Üí‚ÜìRed : ‚àÄ a b ‚Üí Red a ‚Üí a ‚Üì b ‚Üí Red b
 -- Red‚Üì‚Üí‚ÜìRed a b x x‚ÇÅ = {!!}

 N‚Üô‚ÜòN‚Üí‚â°' : ‚àÄ n xs ys ‚Üí (q : xs ‚Üô‚Üò ys) ‚Üí length (fst q) ‚â§ n ‚Üí 
     IsNormalised xs ‚Üí
     IsNormalised ys ‚Üí Œ£ (xs ‚Üô‚Üò ys) Œª q' ‚Üí length xs ‚â° length (fst q')
 N‚Üô‚ÜòN‚Üí‚â°' zero xs ys ([] , ‚Üìxs , ‚Üìys) g xsN ysN =
   ([] , ‚Üìxs , ‚Üìys) , cong length ([]‚Üì _ ‚Üìxs)
 N‚Üô‚ÜòN‚Üí‚â°' (suc n) xs ys q@(zs , ‚Üìxs , ‚Üìys) g xsN ysN =
  ‚äé.rec
    (Œª lenXS<lenZS ‚Üí
       let (w , _) = ‚â¢‚Üì‚ÜíHasRedex zs xs lenXS<lenZS ‚Üìxs
         
       in N‚Üô‚ÜòN‚Üí‚â°' n xs ys
           (_ , (reduce‚Üì w ‚Üìxs xsN) , reduce‚Üì w ‚Üìys ysN)
           (‚â§-trans {length (reduce _ w)} {suc (length (reduce _ w))}
                {n}
              (‚â§-suc-weaken {(length (reduce _ w))}
                (‚â§-refl (length (reduce _ w))))
             (subst (_‚â§ suc n) (sym (reduceLength _ w)) g)) xsN ysN)
    (q ,_)
   (‚â§-split {length xs} {length zs} (‚Üì‚áílength‚â• ‚Üìxs))


 N‚Üô‚ÜòN‚Üí‚â°-eqLen : ‚àÄ xs ys ‚Üí (q : xs ‚Üô‚Üò ys) ‚Üí length xs ‚â° length (fst q) ‚Üí 
     IsNormalised xs ‚Üí
     IsNormalised ys ‚Üí xs ‚â° ys
 N‚Üô‚ÜòN‚Üí‚â°-eqLen xs ys (zs , ‚Üìxs , ‚Üìys) p xsN ysN =
   let zs‚â°xs = ‚ÜìEqualLengths‚áí‚â° ‚Üìxs (sym p) 
       zsN = subst IsNormalised (sym zs‚â°xs) xsN
   in sym zs‚â°xs ‚àô minimalNormalised zs ys zsN ‚Üìys
 
 N‚Üô‚ÜòN‚Üí‚â° : ‚àÄ xs ys ‚Üí xs ‚Üô‚Üò ys ‚Üí
     IsNormalised xs ‚Üí
     IsNormalised ys ‚Üí xs ‚â° ys
 N‚Üô‚ÜòN‚Üí‚â° xs ys q xsN ysN =
  let (q' , p) = N‚Üô‚ÜòN‚Üí‚â°' (length (fst q)) xs ys q
        (‚â§-refl (length (fst q))) xsN ysN
  in N‚Üô‚ÜòN‚Üí‚â°-eqLen xs ys q' p xsN ysN


 _‚Üô‚Üò++‚Üô‚Üò_ : ‚àÄ {xsL xsR ysL ysR} ‚Üí
    xsL ‚Üô‚Üò ysL ‚Üí xsR ‚Üô‚Üò ysR ‚Üí
      (xsL ++ xsR) ‚Üô‚Üò (ysL ++ ysR)
 (_ , xl , yl) ‚Üô‚Üò++‚Üô‚Üò (_ , xr , yr) = _ , (xl ‚Üì++‚Üì xr) , (yl ‚Üì++‚Üì yr)


 List/‚Üô‚Üò : Type ‚Ñì
 List/‚Üô‚Üò = _ /‚ÇÇ _‚Üô‚Üò_


 List/‚Üô‚Üò¬∑ : List/‚Üô‚Üò ‚Üí List/‚Üô‚Üò ‚Üí List/‚Üô‚Üò
 List/‚Üô‚Üò¬∑ =  SQ.rec2 squash/ (Œª a b ‚Üí SQ.[ a ++ b ])
    (Œª _ _ c ‚Üí eq/ _ _ ‚àò _‚Üô‚Üò++‚Üô‚Üò (‚Üô‚Üòrefl c))
    (Œª a _ _ ‚Üí eq/ _ _ ‚àò (‚Üô‚Üòrefl a) ‚Üô‚Üò++‚Üô‚Üò_ )


 Iso-‚Üô‚Üò-‚â° : ‚àÄ a b ‚Üí Iso ([ a ]/ ‚â° [ b ]/) ‚à• a ‚Üô‚Üò b ‚à•‚ÇÅ
 Iso-‚Üô‚Üò-‚â° = isEquivRel‚ÜíTruncIso ‚Üô‚ÜòisEquivRel

 ‚â°‚Üí‚Üô‚Üò : ‚àÄ a b ‚Üí ([ a ]/ ‚â° [ b ]/) ‚Üí  ‚à• a ‚Üô‚Üò b ‚à•‚ÇÅ
 ‚â°‚Üí‚Üô‚Üò _ _ = Iso.fun (Iso-‚Üô‚Üò-‚â° _ _)
 
 NormalForm/ : List/‚Üô‚Üò ‚Üí Type ‚Ñì
 NormalForm/ g = Œ£ _ Œª l ‚Üí ([ l ]/ ‚â° g) √ó ‚à• IsNormalised l ‚à•‚ÇÅ





 invLi : List (Bool √ó A) ‚Üí List (Bool √ó A)
 invLi = rev ‚àò Li.map (map-fst not)

 invLi++ : ‚àÄ xs ys ‚Üí invLi (xs ++ ys) ‚â°
                 invLi ys ++ invLi xs
 invLi++ xs ys =
   sym (cong rev (map++ _ xs ys)) ‚àô
     rev-++ (Li.map _ xs) (Li.map _ ys)
 
 invol-invLi : isInvolution invLi
 invol-invLi xs =
  sym (rev-map-comm (map-fst not) (invLi xs)) ‚àô
    cong (Li.map (map-fst not))
      (rev-rev (Li.map (map-fst not) xs))
     ‚àô map-‚àò (map-fst not) (map-fst not) xs ‚àô
     (Œª i ‚Üí Li.map (map-fst (Œª x ‚Üí notnot x i) ) xs) ‚àô map-id xs
    

 Red-invLi : ‚àÄ xs ‚Üí Red xs ‚Üí Red (invLi xs)
 Red-invLi .[] red[] = red[]
 Red-invLi .(x ‚à∑ (xs ‚à∑ ≥ not‚ÇÅ x)) (cj x xs x‚ÇÅ) =
   let z = cj x _ (Red-invLi _ x‚ÇÅ)
   in subst Red (cong
     (_‚à∑ rev (Li.map (map-fst not) xs) ++ (not (fst x) , snd x) ‚à∑ [])
       (sym (not‚ÇÅnot‚ÇÅ x)) ‚àô cong (_‚à∑ ≥ (not‚ÇÅ x))
     (sym (invLi++ xs [ not‚ÇÅ x ])) ) z
 Red-invLi .(xs ++ ys) ((xs ¬∑ ys) x x‚ÇÅ) =
   subst Red (sym (invLi++ xs ys))
     ((_ ¬∑ _) (Red-invLi _ x‚ÇÅ) (Red-invLi _ x))

 invLi-‚Üì : ‚àÄ xs ys ‚Üí xs ‚Üì ys ‚Üí invLi xs ‚Üì invLi ys
 invLi-‚Üì xs .[] (x ‚Üì[]) = Red-invLi _ x ‚Üì[] 
 invLi-‚Üì .(xs ++ x‚ÇÅ ‚à∑ ys) .(x‚ÇÅ ‚à∑ _) (_‚à∂_‚Üì‚à∑_ {xs} x {ys} x‚ÇÅ y) = 
   subst (_‚Üì _) (sym (invLi++ xs (_ ‚à∑ ys)))
     (‚Üì++Red (Red-invLi _ x) ((invLi-‚Üì _ _ y) ‚Üì++‚Üì (‚Üìrefl _)) ) 

 invLi-‚Üô‚Üò : ‚àÄ xs ys ‚Üí xs ‚Üô‚Üò ys ‚Üí (invLi xs) ‚Üô‚Üò (invLi ys)
 invLi-‚Üô‚Üò xs ys (zs , ‚Üìxs , ‚Üìys) =
   (invLi zs) ,
     invLi-‚Üì _ _ ‚Üìxs , invLi-‚Üì _ _ ‚Üìys

 Red[XS++invLiXS] : ‚àÄ xs ‚Üí Red (xs ++ invLi xs)
 Red[XS++invLiXS] [] = red[]
 Red[XS++invLiXS] (x ‚à∑ xs) =
   subst Red (sym (++-assoc [ x ] xs (invLi (x ‚à∑ xs)) ‚àô
         cong (x ‚à∑_) (sym (++-assoc xs (invLi xs) _))))
     (cj x _ (Red[XS++invLiXS] xs))
 
 XS++invLiXS‚Üì[] : ‚àÄ xs ‚Üí (xs ++ invLi xs) ‚Üì []
 XS++invLiXS‚Üì[] xs = Red[XS++invLiXS] xs ‚Üì[] 

 invLiXS++XS‚Üì[] : ‚àÄ xs ‚Üí (invLi xs ++ xs) ‚Üì []
 invLiXS++XS‚Üì[] xs = 
   subst (Œª xs' ‚Üí (invLi xs ++ xs') ‚Üì [])
      (invol-invLi xs)
     (XS++invLiXS‚Üì[] (invLi xs))

 ‚Üì‚Üí‚Üô‚Üò : ‚àÄ {xs ys} ‚Üí xs ‚Üì ys ‚Üí xs ‚Üô‚Üò ys
 ‚Üì‚Üí‚Üô‚Üò x = _ , ‚Üìrefl _ , x
 

 List/‚Üô‚ÜòGroup : GroupStr List/‚Üô‚Üò
 GroupStr.1g List/‚Üô‚ÜòGroup = SQ.[ [] ]
 GroupStr._¬∑_ List/‚Üô‚ÜòGroup = List/‚Üô‚Üò¬∑

 GroupStr.inv List/‚Üô‚ÜòGroup =
   SQ.rec squash/ (SQ.[_] ‚àò invLi)
    Œª _ _ ‚Üí eq/ _ _ ‚àò invLi-‚Üô‚Üò _ _
 GroupStr.isGroup List/‚Üô‚ÜòGroup = makeIsGroup
   squash/ (SQ.elimProp3
     (Œª _ _ _ ‚Üí squash/ _ _)
      Œª xs ys zs ‚Üí cong SQ.[_] (sym (++-assoc xs ys zs)))
   (SQ.elimProp
     (Œª _ ‚Üí squash/ _ _)
     Œª xs ‚Üí cong SQ.[_] (++-unit-r xs))
   (SQ.elimProp
     (Œª _ ‚Üí squash/ _ _)
     Œª _ ‚Üí refl)
   (SQ.elimProp
     (Œª _ ‚Üí squash/ _ _)
     Œª xs ‚Üí eq/ _ _ (‚Üì‚Üí‚Üô‚Üò {ys = []} (XS++invLiXS‚Üì[] xs)))
   (SQ.elimProp
     (Œª _ ‚Üí squash/ _ _)
     Œª xs ‚Üí eq/ _ _ (‚Üì‚Üí‚Üô‚Üò {ys = []} (invLiXS++XS‚Üì[] xs)))




-- -- -- --  module FG (freeGroupGroup : Group ‚Ñì) (Œ∑ : A ‚Üí ‚ü® freeGroupGroup ‚ü©) where 

-- -- -- --   FreeGroup = ‚ü® freeGroupGroup ‚ü©

-- -- -- --   open GroupStr (snd freeGroupGroup) renaming (_¬∑_ to _¬∑fg_) public


-- -- -- --   open GroupTheory freeGroupGroup

-- -- -- --   Œ∑* : Bool √ó A ‚Üí FreeGroup
-- -- -- --   Œ∑* (b , a) = (if b then idfun _ else inv) (Œ∑ a)

-- -- -- --   fromList' : FreeGroup ‚Üí List (Bool √ó A) ‚Üí FreeGroup
-- -- -- --   fromList' = foldr (_¬∑fg_ ‚àò Œ∑*) 

-- -- -- --   fromList : List (Bool √ó A) ‚Üí FreeGroup
-- -- -- --   fromList = fromList' 1g

-- -- -- --   fromList¬∑ : ‚àÄ xs ys ‚Üí fromList (xs ++ ys) ‚â°
-- -- -- --                             fromList xs ¬∑fg fromList ys
-- -- -- --   fromList¬∑ [] _ = sym (¬∑IdL _)
-- -- -- --   fromList¬∑ (_ ‚à∑ xs) _ =
-- -- -- --    cong (_ ¬∑fg_) (fromList¬∑ xs _) ‚àô
-- -- -- --     ¬∑Assoc _ _ _

-- -- -- --   redex-Œµ-Œ∑* : ‚àÄ x x' ‚Üí IsRedex x x' ‚Üí Œ∑* x ¬∑fg Œ∑* x' ‚â° 1g
-- -- -- --   redex-Œµ-Œ∑* (false , _) (false , _) (p , _) = ‚ä•.rec (false‚â¢true p)
-- -- -- --   redex-Œµ-Œ∑* (false , x) (true , _) (_ , q) = 
-- -- -- --     cong (inv (Œ∑ x) ¬∑fg_) (cong (Œ∑) (sym q)) ‚àô ¬∑InvL (Œ∑ x) 
-- -- -- --   redex-Œµ-Œ∑* (true , x) (false , _) (_ , q) =
-- -- -- --     cong (Œ∑ x ¬∑fg_) (cong (inv ‚àò Œ∑) (sym q)) ‚àô ¬∑InvR (Œ∑ x)
-- -- -- --   redex-Œµ-Œ∑* (true , _) (true , _) (p , _) = ‚ä•.rec (true‚â¢false p)

-- -- -- --   NormalForm : FreeGroup ‚Üí Type ‚Ñì
-- -- -- --   NormalForm g = Œ£ _ Œª l ‚Üí (fromList l ‚â° g) √ó IsNormalised l
-- -- -- --   module _ (isSetA : isSet A) where
  
-- -- -- --    isPropNormalForm : ‚àÄ g ‚Üí isProp (NormalForm g)
-- -- -- --    isPropNormalForm g (l , p , n) (l' , p' , n') =
-- -- -- --      {!!}



-- -- -- -- --  module HIT-FG where

-- -- -- -- --   open import Cubical.HITs.FreeGroup renaming (rec to recFG ; elimProp to elimPropFG)

-- -- -- -- --   open FG (freeGroupGroup A) Œ∑ renaming (inv to invFG)
  

-- -- -- -- --   FG‚ÜíL/‚Üô‚Üò : GroupHom (freeGroupGroup A) (_ , List/‚Üô‚ÜòGroup)
-- -- -- -- --   FG‚ÜíL/‚Üô‚Üò = recFG ([_]/ ‚àò [_] ‚àò (true ,_))

-- -- -- -- --   open IsGroupHom (snd (FG‚ÜíL/‚Üô‚Üò))

-- -- -- -- --   Red‚ÜíFG‚â° : ‚àÄ a ‚Üí Red a ‚Üí fromList a ‚â° Œµ
-- -- -- -- --   Red‚ÜíFG‚â° .[] red[] = refl
-- -- -- -- --   Red‚ÜíFG‚â° .(x ‚à∑ (xs ‚à∑ ≥ not‚ÇÅ x)) (cj x xs x‚ÇÅ) =
-- -- -- -- --         cong (Œ∑* x ¬∑fg_) (fromList¬∑ xs [ not‚ÇÅ x ] ‚àô
-- -- -- -- --           cong‚ÇÇ _¬∑fg_ (Red‚ÜíFG‚â° _ x‚ÇÅ) (¬∑IdR _) ‚àô ¬∑IdL _) ‚àô
-- -- -- -- --            redex-Œµ-Œ∑* x (not‚ÇÅ x) (symIsRedex _ _ (refl , refl))
-- -- -- -- --   Red‚ÜíFG‚â° .(xs ++ ys) ((xs ¬∑ ys) x x‚ÇÅ) =
-- -- -- -- --     fromList¬∑ xs ys
-- -- -- -- --       ‚àô‚àô cong‚ÇÇ _¬∑fg_ (Red‚ÜíFG‚â° _ x) (Red‚ÜíFG‚â° _ x‚ÇÅ)
-- -- -- -- --       ‚àô‚àô ¬∑IdL _
  
-- -- -- -- --   ‚Üì‚ÜíFG‚â° : (a b : List (Bool √ó A)) ‚Üí a ‚Üì b ‚Üí fromList a ‚â° fromList b
-- -- -- -- --   ‚Üì‚ÜíFG‚â° a .[] (x ‚Üì[]) = Red‚ÜíFG‚â° _ x
-- -- -- -- --   ‚Üì‚ÜíFG‚â° .(xs ++ x‚ÇÅ ‚à∑ ys) .(x‚ÇÅ ‚à∑ _) (_‚à∂_‚Üì‚à∑_ {xs} x {ys} x‚ÇÅ x‚ÇÇ) =
-- -- -- -- --     fromList¬∑ xs (x‚ÇÅ ‚à∑ ys) ‚àô‚àô
-- -- -- -- --       cong (_¬∑fg fromList (x‚ÇÅ ‚à∑ ys)) (Red‚ÜíFG‚â° xs x) ‚àô
-- -- -- -- --         ¬∑IdL _ ‚àô‚àô cong (Œ∑* x‚ÇÅ ¬∑fg_) (‚Üì‚ÜíFG‚â° _ _ x‚ÇÇ)

-- -- -- -- --   ‚Üô‚Üò‚ÜíFG‚â° : (a b : List (Bool √ó A)) ‚Üí a ‚Üô‚Üò b ‚Üí fromList a ‚â° fromList b
-- -- -- -- --   ‚Üô‚Üò‚ÜíFG‚â° a b (c , ‚Üìa , ‚Üìb) = sym (‚Üì‚ÜíFG‚â° c a ‚Üìa)  ‚àô ‚Üì‚ÜíFG‚â° c b ‚Üìb

-- -- -- -- --   section-FG-L/‚Üô‚Üò : ‚àÄ a ‚Üí fst (FG‚ÜíL/‚Üô‚Üò) (fromList a) ‚â° [ a ]/
-- -- -- -- --   section-FG-L/‚Üô‚Üò [] = refl
-- -- -- -- --   section-FG-L/‚Üô‚Üò (x ‚à∑ xs) =
-- -- -- -- --      pres¬∑ (Œ∑* x) (fromList xs) ‚àô
-- -- -- -- --        cong (List/‚Üô‚Üò¬∑ (fst FG‚ÜíL/‚Üô‚Üò (Œ∑* x)))
-- -- -- -- --          (section-FG-L/‚Üô‚Üò xs)  ‚àô
-- -- -- -- --           w x
-- -- -- -- --    where
-- -- -- -- --    w : ‚àÄ x ‚Üí List/‚Üô‚Üò¬∑ (fst FG‚ÜíL/‚Üô‚Üò (Œ∑* x)) [ xs ]/ ‚â° [ x ‚à∑ xs ]/
-- -- -- -- --    w (false , a) = refl
-- -- -- -- --    w (true , a) = refl

-- -- -- -- --   fromL/ : List/‚Üô‚Üò ‚Üí _
-- -- -- -- --   fromL/ = SQ.rec trunc fromList ‚Üô‚Üò‚ÜíFG‚â°

-- -- -- -- --   fromL/pres¬∑ : ‚àÄ a b ‚Üí fromL/ (List/‚Üô‚Üò¬∑ a b) ‚â° fromL/ a ¬∑fg fromL/ b 
-- -- -- -- --   fromL/pres¬∑ = SQ.elimProp2 (Œª _ _ ‚Üí trunc _ _) fromList¬∑

-- -- -- -- --   fromL/presinv : ‚àÄ xs ‚Üí
-- -- -- -- --        fromL/ (GroupStr.inv List/‚Üô‚ÜòGroup xs) ‚â°
-- -- -- -- --       invFG (fromL/ xs)
-- -- -- -- --   fromL/presinv = SQ.elimProp (Œª _ ‚Üí trunc _ _) w
-- -- -- -- --    where
-- -- -- -- --    open GroupTheory (freeGroupGroup A)

-- -- -- -- --    w' : ‚àÄ x ‚Üí fromL/ [ [ not‚ÇÅ x ] ]/ ‚â° invFG (Œ∑* x)
-- -- -- -- --    w' (false , a) = ¬∑IdR _ ‚àô sym (invInv _)
-- -- -- -- --    w' (true , a) = ¬∑IdR _
   
-- -- -- -- --    w : (xs : List (Bool √ó A)) ‚Üí
-- -- -- -- --       fromL/ [ invLi xs ]/ ‚â° invFG (fromL/ [ xs ]/)
-- -- -- -- --    w [] = sym inv1g
-- -- -- -- --    w (x ‚à∑ xs) = 
-- -- -- -- --         (fromL/pres¬∑ ([ invLi xs ]/) [ [ not‚ÇÅ x ] ]/ ‚àô
-- -- -- -- --             cong (fromL/ [ invLi xs ]/ ¬∑fg_) (w' x))
-- -- -- -- --          ‚àô‚àô cong (_¬∑fg invFG (Œ∑* x)) (w xs) ‚àô‚àô  sym (invDistr _ _) 
  
-- -- -- -- --   retract-FG-L/‚Üô‚Üò : ‚àÄ b ‚Üí  fromL/ (fst (FG‚ÜíL/‚Üô‚Üò) b) ‚â° b
-- -- -- -- --   retract-FG-L/‚Üô‚Üò =
-- -- -- -- --     elimPropFG (Œª _ ‚Üí trunc _ _)
-- -- -- -- --       (Œª _ ‚Üí ¬∑IdR _)
-- -- -- -- --       (Œª g1 g2 p1 p2 ‚Üí
-- -- -- -- --         cong fromL/ (pres¬∑ g1 g2) ‚àô
-- -- -- -- --           fromL/pres¬∑ (fst (FG‚ÜíL/‚Üô‚Üò) g1) (fst (FG‚ÜíL/‚Üô‚Üò) g2) ‚àô
-- -- -- -- --            cong‚ÇÇ _¬∑fg_ p1 p2)
-- -- -- -- --       refl
-- -- -- -- --       Œª g p ‚Üí cong fromL/ (presinv g) ‚àô
-- -- -- -- --          fromL/presinv (fst (FG‚ÜíL/‚Üô‚Üò) g) ‚àô cong invFG p 

-- -- -- -- --   GroupIso-FG-L/‚Üô‚Üò : GroupIso (freeGroupGroup A) (_ , List/‚Üô‚ÜòGroup)
-- -- -- -- --   Iso.fun (fst GroupIso-FG-L/‚Üô‚Üò) = _
-- -- -- -- --   Iso.inv (fst GroupIso-FG-L/‚Üô‚Üò) = fromL/
    
-- -- -- -- --   Iso.rightInv (fst GroupIso-FG-L/‚Üô‚Üò) =
-- -- -- -- --     SQ.elimProp (Œª _ ‚Üí squash/ _ _)
-- -- -- -- --      section-FG-L/‚Üô‚Üò
-- -- -- -- --   Iso.leftInv (fst GroupIso-FG-L/‚Üô‚Üò) = retract-FG-L/‚Üô‚Üò
-- -- -- -- --   snd GroupIso-FG-L/‚Üô‚Üò = snd FG‚ÜíL/‚Üô‚Üò
