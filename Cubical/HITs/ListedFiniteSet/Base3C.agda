{-# OPTIONS --safe  #-}  --experimental-lossy-unification
module Cubical.HITs.ListedFiniteSet.Base3C where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.GroupoidLaws
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Structure
open import Cubical.Foundations.CartesianKanOps
open import Cubical.Foundations.Path

open import Cubical.Data.Empty as ‚ä•
open import Cubical.Data.Sum as ‚äé using (_‚äé_; inl; inr)
open import Cubical.Data.Nat
open import Cubical.Data.Sigma
open import Cubical.Data.List

open import Cubical.Data.Unit
open import Cubical.Data.Bool as ùüö

open import Cubical.Functions.Logic as L
open import Cubical.Foundations.Function

open import Cubical.Functions.FunExtEquiv
open import Cubical.Foundations.Function
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Transport

open import Cubical.HITs.EilenbergMacLane1

open import Cubical.Data.FinData.Properties

open import Cubical.Data.Nat.Order.Recursive

open import Cubical.Relation.Binary



open import Cubical.HITs.GroupoidTruncation as GT using (‚à•_‚à•‚ÇÉ ; ‚à£_‚à£‚ÇÉ ; squash‚ÇÉ) 

open import Cubical.HITs.GroupoidQuotients as GQ
  renaming ([_] to [_]// ; RelimProp to  RelimProp// ; Rrec to Rrec//)


private
  variable
    ‚Ñì ‚Ñì' ‚Ñì'' : Level
    A B : Type ‚Ñì




infixr 5 _‚à∑2_


data FMSet2C {B : Type‚ÇÄ} (A : Type ‚Ñì) : Type ‚Ñì where
  []    : FMSet2C {B = B} A
  _‚à∑2_   : (x : A) ‚Üí (xs : FMSet2C {B = B} A) ‚Üí FMSet2C A
  comm  : ‚àÄ x y xs ‚Üí x ‚à∑2 y ‚à∑2 xs ‚â° y ‚à∑2 x ‚à∑2 xs
  comm-inv : ‚àÄ x y xs ‚Üí 
              comm x y xs ‚â° sym (comm y x xs)
  commm : ‚àÄ x y z xs ‚Üí x ‚à∑2 y ‚à∑2 z ‚à∑2  xs ‚â° y ‚à∑2 z ‚à∑2 x ‚à∑2 xs
  commp : ‚àÄ x y z xs ‚Üí Square
      (comm _ _ (_ ‚à∑2 xs))
      (cong (x ‚à∑2_) (comm y z xs))      
      (commm _ _ _ xs)
      refl
      
  hex : ‚àÄ x y z xs ‚Üí Square          
          (cong (z ‚à∑2_) (comm x y xs))
          (comm _ _ (_ ‚à∑2 xs))
          (commm _ _ _ xs)
          (commm _ _ _ xs)
  trunc : {guard : B} ‚Üí isGroupoid (FMSet2C A)

FMSet2 : (A : Type ‚Ñì) ‚Üí  Type ‚Ñì
FMSet2 = FMSet2C {B = Unit}

module _ {A : Type ‚Ñì} where

 record RElim {‚Ñì'} {T} (B : FMSet2C {B = T} A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
  no-eta-equality
  field
   []* : B []
   _‚à∑*_ : (x : A) {xs : FMSet2C A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
   comm* : (x y : A) {xs : FMSet2C A} (b : B xs)
         ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b))
   comm-inv* : ‚àÄ x y {xs} (b : B xs) ‚Üí SquareP (Œª i j ‚Üí B (comm-inv x y xs i j))
                      (comm* x y b ) (symP (comm* y x b))
                      refl refl
   commm* : (x y z : A) {xs : FMSet2C A} (b : B xs)
         ‚Üí PathP (Œª i ‚Üí B (commm x y z xs i))
            (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
            (y ‚à∑* (z ‚à∑* (x ‚à∑* b)))
   commp* : ‚àÄ x y z {xs : FMSet2C A} (b : B xs) ‚Üí
             SquareP (Œª i j ‚Üí B (commp x y z xs i j))
             (comm* z x (y ‚à∑* b))
             (congP (Œª _ ‚Üí x ‚à∑*_) (comm* _ _ _))             
             (commm* _ _ _ b)
             refl
   hex* : ‚àÄ x y z {xs : FMSet2C A} (b : B xs) ‚Üí
             SquareP (Œª i j ‚Üí B (hex x y z xs i j))
             (congP (Œª _ ‚Üí z ‚à∑*_) (comm* x y b))
             (comm* _ _ (_ ‚à∑* b))
             (commm* _ _ _ b)
             (commm* _ _ _ b)              

  ff : (T ‚Üí ‚àÄ xs ‚Üí isGroupoid (B xs)) ‚Üí
      (xs : FMSet2C {B = T} _) ‚Üí B xs
  ff trunc* = f
   where
   f : (xs : FMSet2C _) ‚Üí B xs
   f [] = []*
   f (x ‚à∑2 xs) = x ‚à∑* f xs
   f (comm x y xs i) = comm* x y (f xs) i
   f (comm-inv x y xs i j) =
      comm-inv* x y (f xs) i j
   f (commm x y z xs i) = commm* x y z (f xs) i 
   f (commp x y z xs i j) = commp* x y z (f xs) i j 
   f (hex x y z xs i j) = hex* x y z (f xs) i j 
   f (trunc {guard = g} xs ys p q r s i j k) = 
     isOfHLevel‚ÜíisOfHLevelDep 3 (Œª a ‚Üí trunc* g a)
        _ _ _ _
        (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) 
          (trunc xs ys p q r s) i j k

 record RElimSet {‚Ñì'} {T} (B : FMSet2C {B = T} A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
  no-eta-equality
  field
   []* : B []
   _‚à∑*_ : (x : A) {xs : FMSet2C A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
   comm* : (x y : A) {xs : FMSet2C A} (b : B xs)
         ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b))
   -- commm* : (x y z : A) {xs : FMSet2C A} (b : B xs)
   --       ‚Üí PathP (Œª i ‚Üí B (commm x y z xs i))
   --          (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
   --          (y ‚à∑* (z ‚à∑* (x ‚à∑* b)))
   trunc* : ‚àÄ xs ‚Üí isSet (B xs)
   
  fR : RElim B
  RElim.[]* fR = []*
  RElim._‚à∑*_ fR = _‚à∑*_
  RElim.comm* fR = comm*
  RElim.comm-inv* fR = Œª _ _ _ ‚Üí 
    isOfHLevel‚ÜíisOfHLevelDep 2 (trunc*)
      _ _ _ _ (comm-inv _ _ _)
  RElim.commm* fR x y z {xs} b i =
    comp (Œª l ‚Üí B (commp y z x xs i (~ l)))
       (Œª l ‚Üí Œª { (i = i0) ‚Üí comm* _ _ (_ ‚à∑* b) (~ l)
                ; (i = i1) ‚Üí _ ‚à∑* comm* _ _ b (~ l)
                })
       (_ ‚à∑* (_ ‚à∑* (_ ‚à∑* b)))
  RElim.commp* fR _ _ _ _ = isSet‚ÜíSquareP (Œª _ _  ‚Üí trunc* _) _ _ _ _
  RElim.hex* fR _ _ _ _ = isSet‚ÜíSquareP (Œª _ _  ‚Üí trunc* _) _ _ _ _

  f : (xs : FMSet2C {B = T} _) ‚Üí B xs
  f = RElim.ff fR Œª t ‚Üí isSet‚ÜíisGroupoid ‚àò trunc*

 record RElimProp {‚Ñì'} {T} (B : FMSet2C {B = T} A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
  no-eta-equality
  field
   []* : B []
   _‚à∑*_ : (x : A) {xs : FMSet2C A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
   trunc* : ‚àÄ xs ‚Üí isProp (B xs)

  fR : RElimSet B
  RElimSet.[]* fR = []*
  RElimSet._‚à∑*_ fR = _‚à∑*_
  RElimSet.comm* fR _ _ _ =
    isProp‚ÜíPathP (Œª i ‚Üí trunc* (comm _ _ _ i)) _ _
  RElimSet.trunc* fR = isProp‚ÜíisSet ‚àò trunc*
  
  f : (xs : FMSet2C {B = T} _) ‚Üí B xs
  f = RElimSet.f fR

 record RRec {‚Ñì'} (B : Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
  no-eta-equality
  field
   []* : B
   _‚à∑*_ : (x : A) ‚Üí B ‚Üí B
   comm* : (x y : A) ‚Üí (b : B)
         ‚Üí  (x ‚à∑* (y ‚à∑* b)) ‚â° (y ‚à∑* (x ‚à∑* b))
   comm-inv* : ‚àÄ x y b ‚Üí Square {A = B}
                      (comm* x y b ) (sym (comm* y x b))
                      refl refl
   commm* : (x y z : A) (b : B)
         ‚Üí (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
           ‚â°  (y ‚à∑* (z ‚à∑* (x ‚à∑* b)))
   commp* : ‚àÄ x y z b ‚Üí
             Square {A = B}
             (comm* z x (y ‚à∑* b))
             (cong (x ‚à∑*_) (comm* _ _ _))             
             (commm* _ _ _ b)
             refl
   hex* : ‚àÄ x y z b ‚Üí
             Square {A = B}
             (cong (z ‚à∑*_) (comm* x y b))
             (comm* _ _ (_ ‚à∑* b))
             (commm* _ _ _ b)
             (commm* _ _ _ b)              
   

  ff : ‚àÄ {T} ‚Üí (T ‚Üí isGroupoid B) ‚Üí
      (FMSet2C {B = T} A) ‚Üí B
  ff trunc* = f
   where
   f : FMSet2C A ‚Üí B
   f [] = []*
   f (x ‚à∑2 xs) = x ‚à∑* f xs
   f (comm x y xs i) = comm* x y (f xs) i
   f (comm-inv x y xs i j) =
      comm-inv* x y (f xs) i j
   f (commm x y z xs i) = commm* x y z (f xs) i 
   f (commp x y z xs i j) = commp* x y z (f xs) i j 
   f (hex x y z xs i j) = hex* x y z (f xs) i j 
   f (trunc {guard = g} xs ys p q r s i j k) =
     trunc* g _ _ _ _ (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k))
       i j k



 RecŒ£ : (B : Type ‚Ñì') (P : B ‚Üí hProp ‚Ñì'') (RB : RRec B)
         ‚Üí ‚ü® P (RRec.[]* RB) ‚ü© 
         ‚Üí (‚àÄ a {b} ‚Üí ‚ü® P b ‚ü© ‚Üí ‚ü® P (RRec._‚à∑*_ RB a b) ‚ü©) 
         ‚Üí RRec (Œ£ B (fst ‚àò P))
 RecŒ£ B P RB P[] P‚à∑ = w
  where
  module R‚ÇÅ = RRec RB
  -- module R‚ÇÇ = RRec RB
  open RRec

  w : RRec (Œ£ B (fst ‚àò P))
  []* w = R‚ÇÅ.[]* , P[]
  (w ‚à∑* x) (xs , ys) = x R‚ÇÅ.‚à∑* xs , P‚à∑ x ys
  comm* w x y b = Œ£‚â°Prop (snd ‚àò P) (R‚ÇÅ.comm* x y (fst b))
  comm-inv* w x y b = Œ£SquareSet (isProp‚ÜíisSet ‚àò snd ‚àò P) (R‚ÇÅ.comm-inv* x y (fst b))
  commm* w x y z (b , _) = Œ£‚â°Prop (snd ‚àò P) (R‚ÇÅ.commm* x y z b)
  commp* w x y z b = Œ£SquareSet (isProp‚ÜíisSet ‚àò snd ‚àò P) (R‚ÇÅ.commp* x y z (fst b))
  hex* w x y z b = Œ£SquareSet (isProp‚ÜíisSet ‚àò snd ‚àò P) (R‚ÇÅ.hex* x y z (fst b))

 -- RecŒ£' : (B : Type ‚Ñì') (P : B ‚Üí Type ‚Ñì'') (RB : RRec B)
 --         ‚Üí RElim {!!} 
 --         ‚Üí RRec (Œ£ B P)
 -- RecŒ£' B P RB RP = w
 --  where
 --  module R‚ÇÅ = RRec RB
 --  -- module R‚ÇÇ = RRec RB
 --  open RRec

 --  w : RRec (Œ£ B (P))
 --  w = {!!}


-- -- toTruncFM2 : ‚àÄ {T T'} ‚Üí (T ‚Üí T') ‚Üí FMSet2C {B = T} A ‚Üí FMSet2C {B = T'} A
-- -- toTruncFM2 ft = w
-- --  where
-- --  w : FMSet2C _ ‚Üí FMSet2C _
-- --  w [] = []
-- --  w (x ‚à∑2 x‚ÇÅ) = x ‚à∑2 (w x‚ÇÅ)
-- --  w (comm x y x‚ÇÅ i) = {!!}
-- --  w (comm-inv x y x‚ÇÅ i i‚ÇÅ) = {!!}
-- --  w (commm x y z x‚ÇÅ i) = {!!}
-- --  w (commp x y z x‚ÇÅ i i‚ÇÅ) = {!!}
-- --  w (hex x y z x‚ÇÅ i i‚ÇÅ) = {!!}
-- --  w (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) =
-- --   {!!}
 
-- -- unTrunc : ‚àÄ {T T'} ‚Üí {!A!} ‚Üí {!!}
-- -- unTrunc = {!!}

mapFM2 : ‚àÄ {B' B : Type‚ÇÄ} {A' : Type ‚Ñì'} {A : Type ‚Ñì} ‚Üí (fb : B' ‚Üí B) (f : A' ‚Üí A) ‚Üí
             FMSet2C {B = B'} A' ‚Üí FMSet2C {B = B} A
mapFM2 fb f = f'
 where
 f' : FMSet2C _ ‚Üí FMSet2C _
 f' [] = []
 f' (x ‚à∑2 x‚ÇÅ) = f x ‚à∑2 (f' x‚ÇÅ)
 f' (comm x y x‚ÇÅ i) = comm (f x) (f y) (f' x‚ÇÅ) i
 f' (comm-inv x y x‚ÇÅ i i‚ÇÅ) = comm-inv (f x) (f y) (f' x‚ÇÅ) i i‚ÇÅ
 f' (commm x y z x‚ÇÅ i) = commm (f x) (f y) (f z) (f' x‚ÇÅ) i
 f' (commp x y z x‚ÇÅ i i‚ÇÅ) = commp (f x) (f y) (f z) (f' x‚ÇÅ) i i‚ÇÅ
 f' (hex x y z x‚ÇÅ i i‚ÇÅ) = hex (f x) (f y) (f z) (f' x‚ÇÅ) i i‚ÇÅ
 f' (trunc {guard = b} x x‚ÇÅ x‚ÇÇ y r s i i‚ÇÅ i‚ÇÇ) =
   trunc {guard = fb b}  _ _ _ _ (Œª i j ‚Üí f' (r i j)) (Œª i j ‚Üí f' (s i j)) i i‚ÇÅ i‚ÇÇ

<$tt : FMSet2C {B = B} A ‚Üí FMSet2C Unit
<$tt = mapFM2 (idfun _) (Œª _ ‚Üí tt)

length2 : ‚àÄ {B : Type} {A : Type ‚Ñì} ‚Üí FMSet2C {B = B} A ‚Üí ‚Ñï
length2 [] = zero
length2 (x ‚à∑2 x‚ÇÅ) = suc (length2 x‚ÇÅ)
length2 (comm x y x‚ÇÅ i) = suc (suc (length2 x‚ÇÅ))
length2 (comm-inv x y x‚ÇÅ i i‚ÇÅ) = suc (suc (length2 x‚ÇÅ))
length2 (commm x y z x‚ÇÅ i) = suc (suc (suc (length2 x‚ÇÅ)))
length2 (commp x y z x‚ÇÅ i i‚ÇÅ) = suc (suc (suc (length2 x‚ÇÅ)))
length2 (hex x y z x‚ÇÅ i i‚ÇÅ) = suc (suc (suc (length2 x‚ÇÅ)))
length2 (trunc x x‚ÇÅ x‚ÇÇ y p q i i‚ÇÅ x‚ÇÑ) =
  isSet‚ÜíisGroupoid (isSet‚Ñï) _ _ _ _
    (Œª i j ‚Üí length2 (p i j))
    (Œª i j ‚Üí length2 (q i j))
    i i‚ÇÅ x‚ÇÑ

-- toTruncFM2 : ‚àÄ {T T'} ‚Üí (T ‚Üí T') ‚Üí FMSet2C {B = T} A ‚Üí FMSet2C {B = T'} A
-- toTruncFM2 fb = mapFM2 fb (idfun _)

-- squashFM2 : ‚àÄ {T T'} ‚Üí  FMSet2C {B = T} A ‚Üí ‚à• FMSet2C {B = T'} A ‚à•‚ÇÉ
-- squashFM2 = RElim.ff w Œª _ _ ‚Üí squash‚ÇÉ
--  where
--  w : RElim (Œª _ ‚Üí ‚à• FMSet2C _ ‚à•‚ÇÉ)
--  RElim.[]* w = ‚à£ [] ‚à£‚ÇÉ
--  RElim._‚à∑*_ w x = GT.map (x ‚à∑2_)
--  RElim.comm* w _ _ = GT.elim (Œª _ ‚Üí isSet‚ÜíisGroupoid (squash‚ÇÉ _ _))
--    (cong ‚à£_‚à£‚ÇÉ ‚àò (comm _ _))
--  RElim.comm-inv* w x y =
--    GT.elim (Œª _ ‚Üí isSet‚ÜíisGroupoid (isProp‚ÜíisSet (squash‚ÇÉ _ _ _ _)))
--     Œª xs i j ‚Üí  ‚à£ comm-inv x y xs i j ‚à£‚ÇÉ
--  RElim.commm* w _ _ _ = GT.elim (Œª _ ‚Üí isSet‚ÜíisGroupoid (squash‚ÇÉ _ _))
--    (cong ‚à£_‚à£‚ÇÉ ‚àò (commm _ _ _))
--  RElim.commp* w x y z =
--    GT.elim (Œª _ ‚Üí 
--      isOfHLevelPathP 3
--       (isSet‚ÜíisGroupoid (squash‚ÇÉ _ _)) _ _)
--     Œª xs i j ‚Üí  ‚à£ commp x y z xs i j ‚à£‚ÇÉ
--  RElim.hex* w x y z =
--    GT.elim (Œª _ ‚Üí 
--      isOfHLevelPathP 3
--       (isSet‚ÜíisGroupoid (squash‚ÇÉ _ _)) _ _)
--     Œª xs i j ‚Üí  ‚à£ hex x y z xs i j ‚à£‚ÇÉ


-- trunc‚Ñô‚ÇÇ : ‚àÄ {T T'}-- ‚Üí (fb : T ‚Üí T')
--            ‚Üí (C : Type ‚Ñì')
--            ‚Üí (isGroupoidC : isGroupoid C)
--            ‚Üí (FMSet2C {B = T} A ‚Üí C)
--            ‚Üí FMSet2C {B = T'} A  ‚Üí C
-- trunc‚Ñô‚ÇÇ C isGrpC f =
--   GT.rec isGrpC f ‚àò squashFM2


-- module _ {A' : Type ‚Ñì'} {T} (A : Type ‚Ñì) where

--  sRùïÉ : RRec {A = A'} (Œ£ (Type ‚Ñì) Œª X ‚Üí X ‚Üí FMSet2C {B = T} A)
--  RRec.[]* sRùïÉ =
--    Unit* , (Œª _ ‚Üí [])
--  (sRùïÉ RRec.‚à∑* _) (X , e) =
--    A √ó X , Œª (a , x) ‚Üí a ‚à∑2 e x
--  RRec.comm* sRùïÉ _ _ (X , e) i =
--    (ua (Œ£-swap-01-‚âÉ {A = A} {A} {X}) i) ,
--     (Œª (a , a' , xs) ‚Üí comm a' a (e xs) i) ‚àò' ua-unglue Œ£-swap-01-‚âÉ i
--  RRec.comm-inv* sRùïÉ _ _ (X , e) i j =
--    Œ£-swap-01-‚â°-invol {A = A} (Œª _ ‚Üí X) i j ,
--      (Œª (a , a' , xs) ‚Üí comm-inv a a' (e xs) i j)
--       ‚àò' unglue (i ‚à® ~ i) ‚àò' unglue (j ‚à® ~ j)
--  RRec.commm* sRùïÉ _ _ _ (X , e) i =
--    (ùëÆ (Œ£-swap-01-‚âÉ {A = A} {A} {A √ó X})
--            refl (‚âÉ-√ó (idEquiv A) (Œ£-swap-01-‚âÉ {A = A} {A} {X})) i) ,
--      (Œª (a , a' , a'' , xs) ‚Üí commm a' a a'' (e xs) i)
--        ‚àò' unglue (i ‚à® ~ i)
--  RRec.commp* sRùïÉ _ _ _ (X , e) i j =
--   Œ£-swap-012-‚â°-comp-ua (Œª _ ‚Üí A √ó A √ó A √ó X) (~ i) j ,
--     (Œª (a , a' , a'' , xs) ‚Üí commp a a'' a' (e xs) i j)
--      ‚àò' unglue (i ‚à® j ‚à® (~ j ‚àß ~ i))
--  RRec.hex* sRùïÉ _ _ _ (X , e) i j =
--    hex.hexSq A X i j ,
--      (Œª (a , a' , a'' , xs) ‚Üí
--           hex a'' a a' (e xs) i j) ‚àò'
--           unglue (j ‚à® ~ j) ‚àò' unglue (i ‚à® ~ i)

--  sRùïÉIsEquiv : RRec {A = A'} {!!}
--  sRùïÉIsEquiv = RecŒ£ {!!} (Œª x ‚Üí _ , isPropIsEquiv (snd x)) sRùïÉ
--    {!!} {!!}

module _ {A' : Type ‚Ñì'} (A : Type ‚Ñì) where

 RùïÉ : RRec {A = A'} (Type ‚Ñì)
 RRec.[]* RùïÉ = Unit*
 RRec._‚à∑*_ RùïÉ _ = A √ó_ 
 RRec.comm* RùïÉ _ _ X = ua (Œ£-swap-01-‚âÉ {A = A} {A} {X})
 RRec.comm-inv* RùïÉ _ _ X = Œ£-swap-01-‚â°-invol {A = A} (Œª _ ‚Üí X)
 RRec.commm* RùïÉ _ _ _ X =
         ùëÆ (Œ£-swap-01-‚âÉ {A = A} {A} {A √ó X})
           refl (‚âÉ-√ó (idEquiv A) (Œ£-swap-01-‚âÉ {A = A} {A} {X}))     
 RRec.commp* RùïÉ _ _ _ X =
   symP (Œ£-swap-012-‚â°-comp-ua (Œª _ ‚Üí A √ó A √ó A √ó X))
 RRec.hex* RùïÉ _ _ _ = hex.hexSq A


 module _ (isSetA : isSet A) {T} where
  RhùïÉ‚ÇÇ : RRec {A = A'} (hSet ‚Ñì)
  RhùïÉ‚ÇÇ = RecŒ£ _ (Œª x ‚Üí isSet x , isPropIsSet) RùïÉ
         isSetUnit* Œª _ ‚Üí isSet√ó isSetA

  ùïÉ‚ÇÇ : FMSet2C {B = T} A' ‚Üí Type ‚Ñì
  ùïÉ‚ÇÇ = fst ‚àò RRec.ff RhùïÉ‚ÇÇ Œª _ ‚Üí isGroupoidHSet

  isSetùïÉ‚ÇÇ : ‚àÄ ùïù ‚Üí isSet (ùïÉ‚ÇÇ ùïù)
  isSetùïÉ‚ÇÇ = snd ‚àò RRec.ff RhùïÉ‚ÇÇ Œª _ ‚Üí isGroupoidHSet
  -- ùïÉ‚ÇÇtest : ‚àÄ a xs ‚Üí ùïÉ‚ÇÇ (a ‚à∑2 xs) ‚Üí ùïÉ‚ÇÇ (xs)
  -- ùïÉ‚ÇÇtest _ _ = snd

module ùïÉFin {T} {A' : Type ‚Ñì'} where

 ùïÉBool = ùïÉ‚ÇÇ {A' = A'} Bool (isSetBool) {T}

 
 ùïÉallFalse : ‚àÄ ùïù ‚Üí ùïÉBool ùïù ‚Üí hProp ‚Ñì-zero
 ùïÉallFalse = RElimSet.f w
  where
  w : RElimSet (Œª z ‚Üí ùïÉBool z ‚Üí hProp ‚Ñì-zero)
  RElimSet.[]* w _ = L.‚ä§
  (w RElimSet.‚à∑* _) f (b , xs) = if b then L.‚ä• else f xs
  RElimSet.comm* w x y {xs} b =
    Œ£-swap-01‚ÜíhProp _ _ _ _
      w'
   where
   w' : _
   w' true true z = refl
   w' false y z = refl
   w' x false z = refl
   
  RElimSet.trunc* w _ = isSet‚Üí isSetHProp

 repeatF : ‚àÄ ùïù ‚Üí ùïÉBool ùïù
 repeatF = RElimSet.f w
  where
  w : RElimSet ùïÉBool
  RElimSet.[]* w = tt*
  RElimSet._‚à∑*_ w a' {xs} = false ,_
  RElimSet.comm* w a' b' b i = ua-gluePathExt Œ£-swap-01-‚âÉ i (false , false , b)
  RElimSet.trunc* w =
    snd ‚àò
    RRec.ff (RhùïÉ‚ÇÇ _ isSetBool {Unit})  (Œª _ ‚Üí isGroupoidHSet)
 
 repeatùïÉallFalse : ‚àÄ ùïù ‚Üí ‚ü® ùïÉallFalse ùïù (repeatF ùïù) ‚ü© 
 repeatùïÉallFalse = RElimProp.f w
  where
  w : RElimProp (Œª z ‚Üí ‚ü® ùïÉallFalse z (repeatF z) ‚ü©)
  RElimProp.[]* w = tt*
  (w RElimProp.‚à∑* x) x‚ÇÅ = x‚ÇÅ
  RElimProp.trunc* w ùïù = snd (ùïÉallFalse ùïù (repeatF ùïù))




 ùïÉFinSnd : ‚àÄ ùïù ‚Üí ùïÉBool ùïù ‚Üí hProp ‚Ñì-zero
 ùïÉFinSnd = RElimSet.f w
  where
  w : RElimSet (Œª z ‚Üí ùïÉBool z ‚Üí hProp ‚Ñì-zero)
  RElimSet.[]* w _ = L.‚ä•
  (w RElimSet.‚à∑* _) {xs} f (b , bs) =
    if b then ùïÉallFalse xs bs else (f bs)

  RElimSet.comm* w x y {xs} b = Œ£-swap-01‚ÜíhProp _ _ _ _
      w'
   where
   w' : _
   w' true true z = refl
   w' false y z = refl
   w' x false z = refl

  RElimSet.trunc* w _ = isSet‚Üí isSetHProp



 ùïÉFin : FMSet2C {B = T} A' ‚Üí Type
 ùïÉFin ùïù = Œ£ (ùïÉBool ùïù) (fst ‚àò ùïÉFinSnd ùïù)

 ùïÉFin0 : ‚àÄ ùïù {a'} ‚Üí ùïÉFin (a' ‚à∑2 ùïù)
 ùïÉFin0 ùïù {a'} = (true , repeatF ùïù) , repeatùïÉallFalse ùïù 

 ùïÉFin-suc : ‚àÄ ùïù {a'} ‚Üí ùïÉFin ùïù ‚Üí  ùïÉFin (a' ‚à∑2 ùïù)
 ùïÉFin-suc ùïù x = (false , (fst x)) , (snd x)

 -- ùïÉFin-comm : ‚àÄ ùïù {a' a''} ‚Üí ùïÉFin (a' ‚à∑2 a'' ‚à∑2 ùïù) ‚Üí
 --              PathP (Œª i ‚Üí ùïÉFin (comm a' a'' ùïù i))
 --                {!!}
 --                {!!}
 -- ùïÉFin-comm ùïù x = {!!}


 ùïÉFin-comm : ‚àÄ ùïù {a' a''} ‚Üí (x : ùïÉFin ùïù) ‚Üí
              PathP (Œª i ‚Üí ùïÉFin (comm a' a'' ùïù i))
                (ùïÉFin-suc (a' ‚à∑2 ùïù) {a''} (ùïÉFin-suc ùïù {a'} x))
                (ùïÉFin-suc (a'' ‚à∑2 ùïù) {a'} (ùïÉFin-suc ùïù {a''} x))
 ùïÉFin-comm ùïù {a'} {a''} x =
   Œ£PathPProp (snd ‚àò ùïÉFinSnd (a'' ‚à∑2 a' ‚à∑2 ùïù))
        Œª i ‚Üí glue'-Œ£-swap-01 refl i (false , false , fst x)

 ùïÉFin-swap01 : ‚àÄ ùïù {a' a''} ‚Üí ùïÉFin (a' ‚à∑2 a'' ‚à∑2 ùïù) ‚Üí ùïÉFin (a'' ‚à∑2 a' ‚à∑2 ùïù)
 fst (ùïÉFin-swap01 ùïù x) = swap-01 (fst x)
 snd (ùïÉFin-swap01 ùïù ((false , false , _) , x)) = x
 snd (ùïÉFin-swap01 ùïù ((false , true , _) , x)) = x
 snd (ùïÉFin-swap01 ùïù ((true , false , _) , x)) = x

 ùïÉFin-comm-unglue : ‚àÄ ùïù {a' a''} ‚Üí
              PathP (Œª i ‚Üí ùïÉFin (comm a' a'' ùïù i) ‚Üí (ùïÉFin (a'' ‚à∑2 a' ‚à∑2 ùïù)))
                (ùïÉFin-swap01 ùïù {a'} {a''})
                (idfun _)
                -- (ùïÉFin-suc (a' ‚à∑2 ùïù) {a''} (ùïÉFin-suc ùïù {a'} x))
                -- (ùïÉFin-suc (a'' ‚à∑2 ùïù) {a'} (ùïÉFin-suc ùïù {a''} x))
 fst (ùïÉFin-comm-unglue ùïù {a'} {a''} i (x , y)) =
   ua-unglue Œ£-swap-01-‚âÉ i x
 snd (ùïÉFin-comm-unglue ùïù {a'} {a''} i (x , y)) =
   isProp‚ÜíPathP
     (Œª i ‚Üí isPropŒ† Œª (x : ùïÉFin (comm a' a'' ùïù i)) ‚Üí snd (ùïÉFinSnd (a'' ‚à∑2 a' ‚à∑2 ùïù)
         (ua-unglue Œ£-swap-01-‚âÉ i (fst x))))
           (snd ‚àò (ùïÉFin-swap01 ùïù {a'} {a''})) snd i (x , y)


 ùïÉFin-01 : ‚àÄ ùïù {a' a''} ‚Üí 
       PathP (Œª i ‚Üí ùïÉFin (comm a' a'' ùïù i) √ó ùïÉFin (comm a' a'' ùïù i))
         (ùïÉFin0 (a' ‚à∑2 ùïù) {a''} , ùïÉFin-suc (a'' ‚à∑2 ùïù) {a'} (ùïÉFin0 ùïù {a''}))
         (ùïÉFin-suc (a' ‚à∑2 ùïù) {a''} (ùïÉFin0 ùïù {a'}) , (ùïÉFin0 (a'' ‚à∑2 ùïù) {a'}))
 ùïÉFin-01 ùïù {a'} {a''} =
   Œ£PathP ((Œ£PathPProp (snd ‚àò ùïÉFinSnd (a'' ‚à∑2 a' ‚à∑2 ùïù))
               Œª i ‚Üí glue'-Œ£-swap-01 refl i
                 (true , false , repeatF ùïù)) ,
          (Œ£PathPProp (snd ‚àò ùïÉFinSnd (a'' ‚à∑2 a' ‚à∑2 ùïù))
               Œª i ‚Üí glue'-Œ£-swap-01 refl i
                 (false , true , repeatF ùïù)))

-- infix  0 dep-if_then_else_

-- dep-if_then_else_ : Bool ‚Üí A ‚Üí A ‚Üí A
-- dep-if true  then x else y = x
-- dep-if false then x else y = y

-- singl' : Type ‚Ñì ‚Üí Type (‚Ñì-suc ‚Ñì)
-- singl' {‚Ñì} A =
--   Œ£ (Type ‚Ñì)
--   Œª T ‚Üí Œ£ (A ‚Üí T)
--   Œª f ‚Üí
--    Œ£ (‚àÄ (x : T) ‚Üí A)
--    Œª g ‚Üí ‚àÄ (x : T) ‚Üí Œ£ (f (g x) ‚â° x)
--      {!!}

open ùïÉFin {T = Unit} {A' = Unit} public

FM2‚ä§ : Type
FM2‚ä§ = FMSet2C {‚Ñì-zero} {Unit} Unit


-- Iso-look-tab' : Iso (Œ£ FM2‚ä§ Œª ùïù ‚Üí (ùïÉFin ùïù ‚Üí A)) (FMSet2 A)
-- Iso-look-tab' = {!!}


-- Iso-look-tabŒ© : ‚àÄ {x y : FMSet2 A} ‚Üí (x ‚â° y) ‚âÉ
--                   Œ£ {!!} {!!}
-- Iso-look-tabŒ© = congEquiv (isoToEquiv (invIso  Iso-look-tab')) ‚àô‚Çë
--     invEquiv Œ£Path‚âÉPathŒ£ 

-- module //‚Üî (A : Type ‚Ñì) where

 
--  repFM2‚ä§ : ‚Ñï ‚Üí FM2‚ä§
--  repFM2‚ä§ zero = []
--  repFM2‚ä§ (suc x) = _ ‚à∑2 repFM2‚ä§ x

--  -- List' : Type ‚Ñì
--  -- List' = Œ£ ‚Ñï Œª n ‚Üí ùïÉFin (repFM2‚ä§ n) ‚Üí A
--  ùïÉist : Type ‚Ñì
--  ùïÉist = Œ£ _ Œª ùïù ‚Üí ùïÉFin ùïù ‚Üí A

--  List‚ÜíList'snd : (l : List A) ‚Üí ùïÉFin (repFM2‚ä§ (length l)) ‚Üí A
--  List‚ÜíList'snd (x‚ÇÅ ‚à∑ l) ((false , snd‚ÇÇ) , snd‚ÇÅ) = List‚ÜíList'snd l (snd‚ÇÇ , snd‚ÇÅ)
--  List‚ÜíList'snd (x‚ÇÅ ‚à∑ l) ((true , snd‚ÇÇ) , snd‚ÇÅ) = x‚ÇÅ

--  List‚ÜíList' : List A ‚Üí ùïÉist
--  List‚ÜíList' l = repFM2‚ä§ (length l) , List‚ÜíList'snd l
 
 



-- subst-adjT : ‚àÄ (a a' : A) (xs : FMSet2C _) ‚Üí
--              subst (Œª x ‚Üí ùïÉBool (mapFM2 (idfun Unit) (Œª _ ‚Üí tt) x))
--                (comm a a' xs) ‚â°
--                  Œª x ‚Üí (swap-01 x) 
-- subst-adjT a a' xs = funExt (uaŒ≤ Œ£-swap-01-‚âÉ) 


module _ {A : Type ‚Ñì} where
 fromList : List A ‚Üí FMSet2 A
 fromList [] = []
 fromList (x ‚à∑ xs) = x ‚à∑2 fromList xs

 _‚Üî_ : Rel (List A) (List A) ‚Ñì
 _‚Üî_ x y = fromList x ‚â° fromList y

 _‚â°'_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Type
 zero ‚â°' zero = Unit
 zero ‚â°' suc x‚ÇÅ = ‚ä•.‚ä•
 suc x ‚â°' zero = ‚ä•.‚ä•
 suc x ‚â°' suc x‚ÇÅ = x ‚â°' x‚ÇÅ

 sameL : (FMSet2 B) ‚Üí (List A) ‚Üí Type
 sameL p l = (length2 p) ‚â°' (length l)


--  ‚Üî-trans : (a b c : List A) ‚Üí a ‚Üî b ‚Üí b ‚Üî c ‚Üí a ‚Üî c
--  ‚Üî-trans _ _ _ = _‚àô_

--  ‚Üî// : Type ‚Ñì
--  ‚Üî// = (List A) // ‚Üî-trans

--  infixr 5 _‚Üî‚à∑_

--  _‚Üî‚à∑_ : A ‚Üí ‚Üî// ‚Üí ‚Üî//
--  _‚Üî‚à∑_ a = GQ.Rrec.f w
--   where
--   w : Rrec// ‚Üî//
--   Rrec//.Bgpd w = squash//
--   Rrec//.fb w = [_]// ‚àò' (a ‚à∑_)
--   Rrec//.feq w = eq// ‚àò cong (a ‚à∑2_)
--   Rrec//.fsq w r s =
--     comp// _ _ ‚ñ∑ cong eq// (sym (cong-‚àô (a ‚à∑2_) _ _)) 


--  -- comm-‚Üî‚à∑ : ‚àÄ a a' l l' ‚Üí (r : l ‚Üî l') ‚Üí
--  --      PathP (Œª i ‚Üí (a ‚Üî‚à∑ (a' ‚Üî‚à∑ eq// r i)) ‚â° (a' ‚Üî‚à∑ (a ‚Üî‚à∑ eq// r i)))
--  --      (eq// (comm a a' (fromList l))) (eq// (comm a a' (fromList l')))
--  -- comm-‚Üî‚à∑ a a' [] [] r =
--  --   flipSquare ( {!!} ‚óÅ (Œª _ ‚Üí refl) ‚ñ∑ {!!})
--  -- comm-‚Üî‚à∑ a a' [] (x ‚à∑ l') r = {!cong length2!}
--  -- comm-‚Üî‚à∑ a a' (x ‚à∑ l) [] r = {!!}
--  -- comm-‚Üî‚à∑ a a' (x ‚à∑ l) (x‚ÇÅ ‚à∑ l') r =
--  --   {!!}
--  -- -- flipSquare
--  -- --   ( {!!} ‚óÅ ({!(Œª i ‚Üí a' ‚Üî‚à∑ (a ‚Üî‚à∑ eq// r i))!}))

--  -- comm-‚Üî‚à∑ : ‚àÄ a a' l l' ‚Üí (r : l ‚Üî l') ‚Üí
--  --      PathP (Œª i ‚Üí (a ‚Üî‚à∑ (a' ‚Üî‚à∑ eq// r i)) ‚â° (a' ‚Üî‚à∑ (a ‚Üî‚à∑ eq// r i)))
--  --      (eq// (comm a a' (fromList l))) (eq// (comm a a' (fromList l')))
--  -- comm-‚Üî‚à∑ a a' l l' r = comm‚ÜíPathP
--  --   (sym (comp'// _ _ _ _) ‚àô‚àô
--  --     cong eq// (PathP‚Üícomm
--  --       (Œª i j ‚Üí comm a a' (r i) j))
--  --     ‚àô‚àô (comp'// _ _ _ _))

--  -- inv-‚Üî‚à∑ : (b : ‚Üî//) ‚Üí
--  --      Square (RRec.comm* w x y b) (sym (RRec.comm* w y x b)) refl refl

--  comm-‚Üî‚à∑ : (x y : A) (b : ‚Üî//) ‚Üí x ‚Üî‚à∑ y ‚Üî‚à∑ b ‚â° y ‚Üî‚à∑ x ‚Üî‚à∑ b
--  comm-‚Üî‚à∑ a a' = GQ.RelimSet.f w'
--    where
--    w' : RelimSet _
--    RelimSet.truncB w' _ = squash// _ _
--    RelimSet.fb w' _ = eq// (comm _ _ _)
--    RelimSet.fbEq w' r = comm‚ÜíPathP
--      (sym (comp'// _ _ _ _) ‚àô‚àô
--        cong eq// (PathP‚Üícomm
--          (Œª i j ‚Üí comm a a' (r i) j))
--        ‚àô‚àô (comp'// _ _ _ _))

--  comm-‚Üî‚à∑-inv : (x y : A) (b : ‚Üî//) ‚Üí
--       Square (comm-‚Üî‚à∑ x y b) (sym (comm-‚Üî‚à∑ y x b)) refl refl
--  comm-‚Üî‚à∑-inv x y = GQ.RelimProp.f w'
--   where
--   w' : GQ.RelimProp _
--   RelimProp//.truncB w' _ = squash// _ _ _ _
--   RelimProp//.fb w' a = {!!}
--     -- flipSquareP (compPathR‚ÜíPathP
--     --  (cong sym (sym (refl‚â°Id ‚Üî-trans (comm _ _ _ ‚àô comm _ _ _)
--     --    {!!})) ‚àô‚àô {!comp'// _ _  _!} ‚àô‚àô cong‚Ä≤ (comm-‚Üî‚à∑ x y [ a ]//  ‚àô_) (lUnit _))) 


--  FM2‚Üí// : (FMSet2 A) ‚Üí ‚Üî//
--  FM2‚Üí// = RRec.ff w Œª _ ‚Üí squash//
--   where
--   w : RRec ‚Üî//
--   RRec.[]* w = [ [] ]//
--   RRec._‚à∑*_ w = _‚Üî‚à∑_
--   RRec.comm* w = comm-‚Üî‚à∑
--   RRec.comm-inv* w = {!!}
--    --  GQ.RelimProp.f w'
--    -- where
--    -- w' : GQ.RelimProp _
--    -- RelimProp//.truncB w' _ = {!squash// _ _ _ _!}
--    -- RelimProp//.fb w' = {!!}
--   RRec.commm* w = {!!}
--   RRec.commp* w = {!!}
--   RRec.hex* w = {!!}

--  //‚ÜíFM2 : ‚Üî// ‚Üí FMSet2 A 
--  //‚ÜíFM2 = GQ.Rrec.f w
--   where
--   w : Rrec// (FMSet2 A)
--   Rrec//.Bgpd w _ = trunc _
--   Rrec//.fb w = fromList
--   Rrec//.feq w = idfun _
--   Rrec//.fsq w r s = compPath-filler _ _

--  -- ri-lem : RelimSet (Œª z ‚Üí FM2‚Üí// (//‚ÜíFM2 z) ‚â° z)
--  -- RelimSet.truncB ri-lem _ = squash// _ _
--  -- RelimSet.fb = ?
--  -- -- ri-lem [] = refl
--  -- -- RelimSet.fb ri-lem (a ‚à∑ x) =
--  -- --   {!cong (a ‚Üî‚à∑_) (RelimSet.fb w (xs))!}
--  -- RelimSet.fbEq ri-lem = {!!}

--  ri-fb : (a : List A) ‚Üí FM2‚Üí// (//‚ÜíFM2 [ a ]//) ‚â° [ a ]//
--  ri-fb [] = refl
--  ri-fb (a ‚à∑ xs) =
--   cong (a ‚Üî‚à∑_) (ri-fb xs) 

--  ri-fbEq : ‚àÄ a b ‚Üí (r : a ‚Üî b) ‚Üí
--       PathP (Œª i ‚Üí FM2‚Üí// (r i) ‚â° eq// r i) (ri-fb a)
--       (ri-fb b)
--  ri-fbEq a b r = flipSquare
--    ( {!!} ‚óÅ {!!})
 
-- --  Iso-FM2-// : Iso (FMSet2 A) ‚Üî//
-- --  Iso.fun Iso-FM2-// = FM2‚Üí//
-- --  Iso.inv Iso-FM2-// = //‚ÜíFM2
-- --  Iso.rightInv Iso-FM2-// = GQ.RelimSet.f w
-- --   where
-- --   w : RelimSet (Œª z ‚Üí Iso.fun Iso-FM2-// (Iso.inv Iso-FM2-// z) ‚â° z)
-- --   RelimSet.truncB w _ = squash// _ _
-- --   RelimSet.fb w = ri-fb
-- --   RelimSet.fbEq w = ri-fbEq _ _
  
-- --  Iso.leftInv Iso-FM2-// = RElimSet.f w
-- --   where
-- --   w : RElimSet _
-- --   RElimSet.[]* w = refl
-- --   RElimSet._‚à∑*_ w a {xs} p =
-- --     {!!} ‚àô cong (a ‚à∑2_) p
-- --   RElimSet.comm* w = {!!}
-- --   RElimSet.trunc* w _ = trunc _ _

-- --  -- ùïÉ' : ‚àÄ ùïù ‚Üí Œ£ (Type ‚Ñì) Œª T ‚Üí (ùïÉFin ùïù ‚Üí A) ‚âÉ T
-- --  -- ùïÉ' = RElim.ff w {!!}
-- --  --  where
-- --  --  w : RElim (Œª z ‚Üí Œ£ (Type ‚Ñì) (_‚âÉ_ (ùïÉFin z ‚Üí A)))
-- --  --  fst (RElim.[]* w) = {!!}
-- --  --  fst (snd (RElim.[]* w)) = {!!}
-- --  --  snd (snd (RElim.[]* w)) = {!!}
-- --  --  fst ((w RElim.‚à∑* x) {xs} x‚ÇÅ) = {!!}
-- --  --  snd ((w RElim.‚à∑* x) x‚ÇÅ) = {!!}
-- --  --  RElim.comm* w = {!!}
-- --  --  RElim.comm-inv* w = {!!}
-- --  --  RElim.commm* w = {!!}
-- --  --  RElim.commp* w = {!!}
-- --  --  RElim.hex* w = {!!}



-- module _ (A : Type ‚Ñì) where

--  ùïÉtab : ‚àÄ ùïù ‚Üí (ùïÉFin ùïù ‚Üí A) ‚Üí FMSet2 A
--  ùïÉtab = RElim.ff w Œª _ ‚Üí Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí trunc
--   where
--   w : RElim (Œª z ‚Üí (ùïÉFin z ‚Üí A) ‚Üí FMSet2 A)
--   RElim.[]* w _ = []
--   (w RElim.‚à∑* x) {ùïù} X f =
--     f (ùïÉFin0 ùïù) ‚à∑2 X (f ‚àò' ùïÉFin-suc ùïù)
--   RElim.comm* w x y {ùïù} X i f =
--    let (f0 , f1) = ùïÉFin-01 ùïù i
--    in comm (f f0) (f f1)
--         (X (f ‚àò' Œª x ‚Üí ùïÉFin-comm ùïù x i )) i
--   RElim.comm-inv* w =
--    {!!}
--   RElim.commm* w = {!!}
--   RElim.commp* w = {!!}
--   RElim.hex* w = {!!}


 
--  module _ (isGroupoidA : isGroupoid A) where

--   ùïÉlook : (ùïù : FMSet2 A) ‚Üí (ùïÉFin (mapFM2 (idfun _) (Œª _ ‚Üí _) ùïù) ‚Üí A)
--   ùïÉlook = RElim.ff
--      w Œª _ _ ‚Üí isGroupoidŒ† Œª _ ‚Üí isGroupoidA
--    where

--    open RElim

--    w‚à∑ : (x : A) (xs : FMSet2C A) ‚Üí 
--          (ùïÉFin (mapFM2 (idfun Unit) (Œª _ ‚Üí tt) xs) ‚Üí A) ‚Üí
--           ùïÉFin (mapFM2 (idfun Unit) (Œª _ ‚Üí tt) (x ‚à∑2 xs)) ‚Üí A
--    w‚à∑ _ _ f ((false , bs) , p) = f (bs , p)
--    w‚à∑ a _ _ ((true , _) , _) = a

--    w-comm : (a a' : A) (xs : FMSet2C A) ‚Üí 
--          (f : ùïÉFin (mapFM2 (idfun Unit) (Œª _ ‚Üí tt) xs) ‚Üí A) ‚Üí
--           w‚à∑ a (a' ‚à∑2 xs) (w‚à∑ a' xs f) ‚â°
--           (Œª x ‚Üí
--             w‚à∑ a' (a ‚à∑2 xs) (w‚à∑ a xs f)
--             (ùïÉFin-swap01 (mapFM2 (idfun Unit) (Œª _ ‚Üí tt) xs) x))
--    w-comm a a' xs f i ((false , false , bs) , snd‚ÇÅ) = f (bs , snd‚ÇÅ)
--    w-comm a a' xs f i ((false , true , bs) , snd‚ÇÅ) = a'
--    w-comm a a' xs f i ((true , false , bs) , snd‚ÇÅ) = a


--    w : RElim (Œª z ‚Üí ùïÉFin (mapFM2 (idfun Unit) (Œª _ ‚Üí tt) z) ‚Üí A)
--    []* w ()
--    (w ‚à∑* x) {xs} = w‚à∑ x xs
--    comm* w a a' {ùïù} b =
--       w-comm a a' ùïù b
--        ‚óÅ (Œª i ‚Üí w‚à∑ a' (a ‚à∑2 ùïù) (w‚à∑ a ùïù b)
--             ‚àò (ùïÉFin-comm-unglue (mapFM2 (idfun Unit) (Œª _ ‚Üí _) ùïù) i)) 

--    comm-inv* w = {!!}
--    commm* w = {!!}
--    commp* w = {!!}
--    hex* w = {!!}

--   look-tab : section (uncurry ùïÉtab)
--       (Œª ùïù ‚Üí mapFM2 (idfun Unit) (Œª _ ‚Üí tt) ùïù , ùïÉlook ùïù)
--   look-tab = RElimSet.f w
--    where
--    w : RElimSet
--          (Œª z ‚Üí
--             uncurry ùïÉtab (mapFM2 (idfun Unit) (Œª _ ‚Üí tt) z , ùïÉlook z) ‚â° z)
--    RElimSet.[]* w = refl
--    (w RElimSet.‚à∑* a) x‚ÇÅ = cong (a ‚à∑2_) x‚ÇÅ
--    RElimSet.comm* w a a' {xs} b =
--      flipSquareP (
--        ({!!})
--        ‚óÅ Œª i j ‚Üí comm-inv a a' (b i) (~ i) j)
--    RElimSet.trunc* w _ = trunc _ _

--   tab-look-fst : (x : FM2‚ä§) ‚Üí (y : ùïÉFin x ‚Üí A) ‚Üí
--      mapFM2 (idfun Unit) (Œª _ ‚Üí tt) (uncurry ùïÉtab (x , y)) ‚â° x

--   tab-look-fst = RElimSet.f w
--    where
--    w : RElimSet
--          (Œª z ‚Üí
--             (y : ùïÉFin z ‚Üí A) ‚Üí
--             mapFM2 (idfun Unit) (Œª _ ‚Üí tt) (uncurry ùïÉtab (z , y)) ‚â° z)
--    RElimSet.[]* w _ = refl
--    (w RElimSet.‚à∑* x ) {xs} x‚ÇÅ y = cong (x ‚à∑2_) (x‚ÇÅ (y ‚àò ùïÉFin-suc xs)) 
--    RElimSet.comm* w x y {xs} b i f j =
--      {!!}
--    RElimSet.trunc* w = {!!}

-- --   tab-look-snd : (x : FM2‚ä§) ‚Üí (y : ùïÉFin x ‚Üí A) ‚Üí
-- --      PathP (Œª i ‚Üí ùïÉFin (tab-look-fst x y i) ‚Üí A)
-- --        (ùïÉlook (uncurry ùïÉtab (x , y))) y     

-- --   tab-look-snd = {!!}

   
-- --   Iso-look-tab : Iso (Œ£ FM2‚ä§ Œª ùïù ‚Üí (ùïÉFin ùïù ‚Üí A)) (FMSet2 A)
-- --   Iso.fun Iso-look-tab = uncurry ùïÉtab
-- --   Iso.inv Iso-look-tab =
-- --     Œª ùïù ‚Üí (mapFM2 (idfun _) (Œª _ ‚Üí _) ùïù) , ùïÉlook ùïù
-- --   Iso.rightInv Iso-look-tab = look-tab
-- --   fst (Iso.leftInv Iso-look-tab (x , y) i) = tab-look-fst x y i
-- --   snd (Iso.leftInv Iso-look-tab (x , y) i) = tab-look-snd x y i

-- -- -- --  -- ùïÉ : FMSet2C {B = ‚ä•.‚ä•} A' ‚Üí Type ‚Ñì
-- -- -- -- -- --  ùïÉ [] = Unit*
-- -- -- -- -- --  ùïÉ (x ‚à∑2 xs) = A √ó ùïÉ xs
-- -- -- -- -- --  ùïÉ (comm _ _ xs i) = ua (Œ£-swap-01-‚âÉ {A = A} {A} {ùïÉ xs}) i 
-- -- -- -- -- --  ùïÉ (comm-inv _ _ xs i i‚ÇÅ) = Œ£-swap-01-‚â°-invol {A = A} (Œª _ ‚Üí ùïÉ xs)  i i‚ÇÅ
-- -- -- -- -- --  ùïÉ (commm _ _ _ xs i) =
-- -- -- -- -- --        (ùëÆ (Œ£-swap-01-‚âÉ {A = A} {A} {A √ó ùïÉ xs})
-- -- -- -- -- --            refl (‚âÉ-√ó (idEquiv A) (Œ£-swap-01-‚âÉ {A = A} {A} {ùïÉ xs}))) i     
-- -- -- -- -- --  ùïÉ (commp _ _ _ xs i i‚ÇÅ) = Œ£-swap-012-‚â°-comp-ua (Œª _ ‚Üí A √ó A √ó A √ó ùïÉ xs) (~ i) i‚ÇÅ
-- -- -- -- -- --  ùïÉ (hex x y z xs i i‚ÇÅ) = hex.hexSq A (ùïÉ xs) i i‚ÇÅ

 


-- -- -- -- -- -- module _ {A' : Type ‚Ñì'} (A : Type ‚Ñì) where
-- -- -- -- -- --  ùïÉ : FMSet2C {B = ‚ä•.‚ä•} A' ‚Üí Type ‚Ñì
-- -- -- -- -- --  ùïÉ [] = Unit*
-- -- -- -- -- --  ùïÉ (x ‚à∑2 xs) = A √ó ùïÉ xs
-- -- -- -- -- --  ùïÉ (comm _ _ xs i) = ua (Œ£-swap-01-‚âÉ {A = A} {A} {ùïÉ xs}) i 
-- -- -- -- -- --  ùïÉ (comm-inv _ _ xs i i‚ÇÅ) = Œ£-swap-01-‚â°-invol {A = A} (Œª _ ‚Üí ùïÉ xs)  i i‚ÇÅ
-- -- -- -- -- --  ùïÉ (commm _ _ _ xs i) =
-- -- -- -- -- --        (ùëÆ (Œ£-swap-01-‚âÉ {A = A} {A} {A √ó ùïÉ xs})
-- -- -- -- -- --            refl (‚âÉ-√ó (idEquiv A) (Œ£-swap-01-‚âÉ {A = A} {A} {ùïÉ xs}))) i     
-- -- -- -- -- --  ùïÉ (commp _ _ _ xs i i‚ÇÅ) = Œ£-swap-012-‚â°-comp-ua (Œª _ ‚Üí A √ó A √ó A √ó ùïÉ xs) (~ i) i‚ÇÅ
-- -- -- -- -- --  ùïÉ (hex x y z xs i i‚ÇÅ) = hex.hexSq A (ùïÉ xs) i i‚ÇÅ


-- -- -- -- -- --  isOfHLevelùïÉ : ‚àÄ n ‚Üí isOfHLevel n A ‚Üí ‚àÄ ùïù ‚Üí isOfHLevel n (ùïÉ ùïù)
-- -- -- -- -- --  isOfHLevelùïÉ n Hl = RElimProp.f w
-- -- -- -- -- --   where
-- -- -- -- -- --   w : RElimProp (Œª z ‚Üí isOfHLevel n (ùïÉ z))
-- -- -- -- -- --   RElimProp.[]* w = isOfHLevelUnit* n
-- -- -- -- -- --   RElimProp._‚à∑*_ w x = isOfHLevel√ó n Hl
-- -- -- -- -- --   RElimProp.trunc* w _ = isPropIsOfHLevel n

-- -- -- -- -- -- module _ (A : Type ‚Ñì) where
-- -- -- -- -- --  ùïÉ' : FMSet2C A ‚Üí Type ‚Ñì
-- -- -- -- -- --  ùïÉ' = Œª ùïù ‚Üí ùïÉ A (mapFM2 {A' = A} (idfun _) (Œª _ ‚Üí tt) ùïù)

-- -- -- -- -- --  fromùïÉ : ‚àÄ ùïù ‚Üí ùïÉ' ùïù
-- -- -- -- -- --  fromùïÉ [] = tt*
-- -- -- -- -- --  fromùïÉ (x ‚à∑2 ùïù) = x , fromùïÉ ùïù
-- -- -- -- -- --  fromùïÉ (comm x y ùïù i) = glue-Œ£-swap-01 (Œª _ ‚Üí ùïÉ' ùïù) i (y , x , fromùïÉ ùïù)
-- -- -- -- -- --  fromùïÉ (comm-inv x y ùïù i i‚ÇÅ) = Œ£-swap-01-‚â°-invol-ua-glue i i‚ÇÅ (x , y , fromùïÉ ùïù)
-- -- -- -- -- --  fromùïÉ (commm x x' x'' ùïù i) = 
-- -- -- -- -- --     glue (Œª { (i = i1) ‚Üí _ ; (i = i0) ‚Üí _ })
-- -- -- -- -- --       (x' , x , x'' , fromùïÉ ùïù) 
-- -- -- -- -- --  fromùïÉ (commp x y z ùïù i i‚ÇÅ) =
-- -- -- -- -- --    glue (Œª { (i = i0)(i‚ÇÅ = i0) ‚Üí _
-- -- -- -- -- --         ; (i = i1) ‚Üí x , glue (Œª { (i‚ÇÅ = i0) ‚Üí _ ; (i‚ÇÅ = i1) ‚Üí _ }) ((z , y , fromùïÉ ùïù))
-- -- -- -- -- --         ; (i‚ÇÅ = i1) ‚Üí _ }) (x , z , y , fromùïÉ ùïù)     
-- -- -- -- -- --  fromùïÉ (hex x' x'' x ùïù i j) =
-- -- -- -- -- --   let z = fromùïÉ ùïù
-- -- -- -- -- --   in glue (Œª {(i = i0) ‚Üí _ , glue (Œª {(j = i0) ‚Üí _ ;(j = i1) ‚Üí _ }) (x'' , x' , z)
-- -- -- -- -- --       ;(i = i1) ‚Üí (glue (Œª {(j = i0) ‚Üí _ ;(j = i1) ‚Üí _ }) (x'' , x' , x , z))
-- -- -- -- -- --       }) (glue (Œª {(j = i0) ‚Üí _ ;(j = i1) ‚Üí _ }) (x'' , x , x' , z))


-- -- -- -- -- --  Œ£ùïÉ : Type ‚Ñì
-- -- -- -- -- --  Œ£ùïÉ = Œ£ _ (ùïÉ {A' = Unit} A)

-- -- -- -- -- --  fromùïÉŒ£ : FMSet2C A ‚Üí Œ£ùïÉ
-- -- -- -- -- --  fromùïÉŒ£ ùïù = mapFM2 {A' = A} (idfun _) (Œª _ ‚Üí tt) ùïù , fromùïÉ ùïù

-- -- -- -- -- -- module _ {A' : Type ‚Ñì'} {A : Type ‚Ñì} (isSetA : isSet A) where
-- -- -- -- -- --  hùïÉ‚ÇÇ : FMSet2 A' ‚Üí hSet ‚Ñì
-- -- -- -- -- --  hùïÉ‚ÇÇ = trunc‚Ñô‚ÇÇ _ isGroupoidHSet  Œª ùïù ‚Üí ùïÉ A ùïù , isOfHLevelùïÉ _ 2 isSetA ùïù 

-- -- -- -- -- --  ùïÉ‚ÇÇ : FMSet2 A' ‚Üí Type ‚Ñì
-- -- -- -- -- --  ùïÉ‚ÇÇ = fst ‚àò' hùïÉ‚ÇÇ 

-- -- -- -- -- --  -- ùïÉ‚ÇÇtest : ‚àÄ a' xs ‚Üí ùïÉ‚ÇÇ (a' ‚à∑2 xs) ‚Üí A
-- -- -- -- -- --  -- ùïÉ‚ÇÇtest a' xs x = {!!}


-- -- -- -- -- --   -- RElim.ff w Œª _ _ ‚Üí isGroupoidHSet 
-- -- -- -- -- --   -- where
-- -- -- -- -- --   -- w : RElimProp (Œª _ ‚Üí hSet ‚Ñì)
-- -- -- -- -- --   -- w = ?  
-- -- -- -- -- --  -- module  (isGrpA : isGroupoid A)

-- -- -- -- -- --  -- isEquivFromùïÉ : {!!}
-- -- -- -- -- --  -- -- ‚àÄ ùïù ‚Üí isEquiv {!Œª ùïù ‚Üí fromùïÉ ùïù!}
-- -- -- -- -- --  -- isEquivFromùïÉ = {!!}


-- -- -- -- -- -- -- commmL‚â°R : ‚àÄ (x : A) y z xs ‚Üí commmL x y z xs ‚â° commmR x y z xs 
-- -- -- -- -- -- -- commmL‚â°R x y z xs i j =
-- -- -- -- -- -- --   hcomp (Œª l ‚Üí
-- -- -- -- -- -- --     Œª { (i = i0) ‚Üí commpL x z y xs j l
-- -- -- -- -- -- --       ; (i = i1) ‚Üí commpR x y z xs j (~ l)
-- -- -- -- -- -- --       ; (j = i0) ‚Üí x ‚à∑2 comm-inv z y (xs) i l
-- -- -- -- -- -- --       ; (j = i1) ‚Üí comm-inv x z (y ‚à∑2 xs) i l
-- -- -- -- -- -- --       }) (x ‚à∑2 z ‚à∑2 y ‚à∑2 xs)
      
-- -- -- -- -- -- -- -- comm-invo : ‚àÄ (x y : A) ‚Üí ‚àÄ xs ‚Üí 
-- -- -- -- -- -- -- --             comm x y xs ‚àô comm _ _ xs ‚â° refl
-- -- -- -- -- -- -- -- comm-invo x y xs = cong (_‚àô comm y x xs) (comm-inv x y xs) ‚àô lCancel _


-- -- -- -- -- -- -- -- -- hexUpa : ‚àÄ (x y z : A) ‚Üí ‚àÄ xs ‚Üí comm _ _ _ ‚àô‚àô cong (y ‚à∑2_) (comm _ _ _) ‚àô‚àô comm _ _ _ ‚â° hexDiag x y z xs
-- -- -- -- -- -- -- -- -- hexUpa x y z xs  =
-- -- -- -- -- -- -- -- --     cong (_‚àô‚àô cong (y ‚à∑2_) (comm _ _ _) ‚àô‚àô comm _ _ _) (comm-inv _ _ _)
-- -- -- -- -- -- -- -- --      ‚óÅ Œª i j ‚Üí hcomp (Œª k ‚Üí Œª { (i = i1) ‚Üí hexDiag x y z xs j
-- -- -- -- -- -- -- -- --                   ; (j = i0) ‚Üí (hexU x y z xs (i ‚à® k) j)
-- -- -- -- -- -- -- -- --                   ; (j = i1) ‚Üí (hexU x y z xs (i ‚à® k) j)
-- -- -- -- -- -- -- -- --                   }) (hexU x y z xs i j)

-- -- -- -- -- -- -- -- -- hexLpa : ‚àÄ (x y z : A) ‚Üí ‚àÄ xs ‚Üí hexDiag x y z xs ‚â° cong (x ‚à∑2_) (comm _ _ _) ‚àô‚àô comm _ _ _ ‚àô‚àô cong (z ‚à∑2_) (comm _ _ _)
-- -- -- -- -- -- -- -- -- hexLpa x y z xs  = 
-- -- -- -- -- -- -- -- --     (Œª i j ‚Üí hcomp (Œª k ‚Üí Œª { (i = i0) ‚Üí hexDiag x y z xs j
-- -- -- -- -- -- -- -- --                   ; (j = i0) ‚Üí (hexL x y z xs (i ‚àß ~ k) j)
-- -- -- -- -- -- -- -- --                   ; (j = i1) ‚Üí (hexL x y z xs (i ‚àß ~ k) j)
-- -- -- -- -- -- -- -- --                   }) (hexL x y z xs i j))
-- -- -- -- -- -- -- -- --        ‚ñ∑ cong (Œª p ‚Üí cong (x ‚à∑2_) (comm _ _ _) ‚àô‚àô comm _ _ _ ‚àô‚àô cong (z ‚à∑2_) p) (sym (comm-inv _ _ _))


-- -- -- -- -- -- -- comm-braid : ‚àÄ (x y z : A) ‚Üí ‚àÄ xs ‚Üí 
-- -- -- -- -- -- --   cong (x ‚à∑2_) (comm z y xs)  ‚àô comm x y (z ‚à∑2 xs) ‚àô cong (y ‚à∑2_) (comm x z xs)
-- -- -- -- -- -- --     ‚â°
-- -- -- -- -- -- --   comm x z (y ‚à∑2 xs) ‚àô cong (z ‚à∑2_) (comm x y xs) ‚àô comm z y (x ‚à∑2 xs)
-- -- -- -- -- -- -- comm-braid x y z xs i j =
-- -- -- -- -- -- --    (commpL x z y xs i ‚àô hex x y z xs i ‚àô commpR y x z xs i) j
     
-- -- -- -- -- -- -- -- -- sym (doubleCompPath-elim' _ _ _)

-- -- -- -- -- -- -- -- --   sym (doubleCompPath-elim' _ _ _)
-- -- -- -- -- -- -- -- -- --    ‚àô (hexUpa _ _ _ _ ‚àô hexLpa _ _ _ _)
-- -- -- -- -- -- -- -- --    ‚àô doubleCompPath-elim' _ _ _

-- -- -- -- -- -- -- module _ {A : Type ‚Ñì} where

-- -- -- -- -- -- --   record RElim {‚Ñì'} (B : FMSet2 A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- --     field
-- -- -- -- -- -- --      []* : B []
-- -- -- -- -- -- --      _‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
-- -- -- -- -- -- --      comm* : (x y : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b))
-- -- -- -- -- -- --      comm-inv* : ‚àÄ x y {xs} (b : B xs) ‚Üí SquareP (Œª i j ‚Üí B (comm-inv x y xs i j))
-- -- -- -- -- -- --                         (comm* x y b ) (symP (comm* y x b))
-- -- -- -- -- -- --                         refl refl
-- -- -- -- -- -- --      commmL* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (commmL x y z xs i))
-- -- -- -- -- -- --               (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
-- -- -- -- -- -- --               (z ‚à∑* (x ‚à∑* (y ‚à∑* b)))
-- -- -- -- -- -- --      commmR* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (commmR x y z xs i))
-- -- -- -- -- -- --               (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
-- -- -- -- -- -- --               (z ‚à∑* (x ‚à∑* (y ‚à∑* b)))

-- -- -- -- -- -- --      commpL* : ‚àÄ x y z {xs : FMSet2 A} (b : B xs) ‚Üí
-- -- -- -- -- -- --                SquareP
-- -- -- -- -- -- --                ((Œª i j ‚Üí B (commpL x y z xs i j)))
-- -- -- -- -- -- --                        (congP (Œª _ ‚Üí x ‚à∑*_) (comm* y z b))
-- -- -- -- -- -- --                      (comm* x y (z ‚à∑* b))
-- -- -- -- -- -- --                      refl
-- -- -- -- -- -- --                      (commmL* x z y b)
-- -- -- -- -- -- --      commpR* : ‚àÄ x y z {xs : FMSet2 A} (b : B xs) ‚Üí
-- -- -- -- -- -- --                SquareP (Œª i j ‚Üí B (commpR x y z xs i j))
-- -- -- -- -- -- --                (congP (Œª _ ‚Üí x ‚à∑*_) (comm* _ _ _))
-- -- -- -- -- -- --                (comm* z x (y ‚à∑* b))
-- -- -- -- -- -- --                (commmR* x y z b)
-- -- -- -- -- -- --                refl
-- -- -- -- -- -- --      hex* : ‚àÄ x y z {xs : FMSet2 A} (b : B xs) ‚Üí
-- -- -- -- -- -- --                SquareP (Œª i j ‚Üí B (hex x y z xs i j))
-- -- -- -- -- -- --                (comm* x y (z ‚à∑* b))
-- -- -- -- -- -- --                (congP (Œª _ ‚Üí z ‚à∑*_) (comm* _ _ _))
-- -- -- -- -- -- --                (commmL* x y z b)
-- -- -- -- -- -- --                (commmR* y x z b)
                  

-- -- -- -- -- -- --      trunc* : (xs : FMSet2 A) ‚Üí isGroupoid (B xs)

-- -- -- -- -- -- --     f : (xs : FMSet2 A) ‚Üí B xs
-- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- --     f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- --     f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- --     f (comm-inv x y xs i j) =
-- -- -- -- -- -- --        comm-inv* x y (f xs) i j
-- -- -- -- -- -- --     f (commmL x y z xs i) = commmL* x y z (f xs) i
-- -- -- -- -- -- --     f (commmR x y z xs i) = commmR* x y z (f xs) i
-- -- -- -- -- -- --     f (commpL x y z xs i j) = commpL* x y z (f xs) i j 
-- -- -- -- -- -- --     f (commpR x y z xs i j) = commpR* x y z (f xs) i j 
-- -- -- -- -- -- --     f (hex x y z xs i j) = hex* x y z (f xs) i j 
-- -- -- -- -- -- --     f (trunc xs ys p q r s i j k) =
-- -- -- -- -- -- --       isOfHLevel‚ÜíisOfHLevelDep 3 (Œª a ‚Üí trunc* a)
-- -- -- -- -- -- --          _ _ _ _
-- -- -- -- -- -- --          (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) 
-- -- -- -- -- -- --            (trunc xs ys p q r s) i j k


-- -- -- -- -- -- --   -- record RElim' {‚Ñì'} (B : FMSet2 A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- --   --   no-eta-equality
-- -- -- -- -- -- --   --   field
-- -- -- -- -- -- --   --    []* : B []
-- -- -- -- -- -- --   --    _‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
-- -- -- -- -- -- --   --    comm* : (x y : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- --   --          ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b))
-- -- -- -- -- -- --   --    comm-inv* : ‚àÄ x y {xs} (b : B xs) ‚Üí SquareP (Œª i j ‚Üí B (comm-inv x y xs i j))
-- -- -- -- -- -- --   --                       (comm* x y b ) (symP (comm* y x b))
-- -- -- -- -- -- --   --                       refl refl                  

-- -- -- -- -- -- --   --    trunc* : (xs : FMSet2 A) ‚Üí isGroupoid (B xs)

-- -- -- -- -- -- --   --   fR : RElim (Œª z ‚Üí B z)
-- -- -- -- -- -- --   --   RElim.[]* fR = []*
-- -- -- -- -- -- --   --   RElim._‚à∑*_ fR = _‚à∑*_
-- -- -- -- -- -- --   --   RElim.comm* fR = comm*
-- -- -- -- -- -- --   --   RElim.comm-inv* fR = comm-inv*
-- -- -- -- -- -- --   --   RElim.commmL* fR = {!!}
-- -- -- -- -- -- --   --   RElim.commmR* fR = {!!}
-- -- -- -- -- -- --   --   RElim.commpL* fR = {!!}
-- -- -- -- -- -- --   --   RElim.commpR* fR = {!!}
-- -- -- -- -- -- --   --   RElim.hex* fR = {!!}
-- -- -- -- -- -- --   --   RElim.trunc* fR = {!!}

-- -- -- -- -- -- --   --   f : (xs : FMSet2 A) ‚Üí B xs
-- -- -- -- -- -- --   --   f = RElim.f fR

-- -- -- -- -- -- --   record RRec {‚Ñì'} {B : Type ‚Ñì'} (BType : isGroupoid B) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- --     field
-- -- -- -- -- -- --      []* : B
-- -- -- -- -- -- --      _‚à∑*_ : A ‚Üí B ‚Üí B
-- -- -- -- -- -- --      comm* : (x y : A) (b : B) ‚Üí x ‚à∑* (y ‚à∑* b) ‚â° y ‚à∑* (x ‚à∑* b)
-- -- -- -- -- -- --      comm-inv* : ‚àÄ x y b ‚Üí comm* x y b ‚â° sym (comm* y x b) 
-- -- -- -- -- -- --      commmL* : (x y z : A) ‚Üí ‚àÄ b
-- -- -- -- -- -- --            ‚Üí (x ‚à∑* (y ‚à∑* (z ‚à∑* b))) ‚â°  (z ‚à∑* (x ‚à∑* (y ‚à∑* b)))
-- -- -- -- -- -- --      commmR* : (x y z : A) ‚Üí ‚àÄ b
-- -- -- -- -- -- --            ‚Üí (x ‚à∑* (y ‚à∑* (z ‚à∑* b))) ‚â° (z ‚à∑* (x ‚à∑* (y ‚à∑* b)))

-- -- -- -- -- -- --      commpL* : ‚àÄ x y z ‚Üí ‚àÄ b ‚Üí 
-- -- -- -- -- -- --                Square
-- -- -- -- -- -- --                  (cong (x ‚à∑*_) (comm* y z b))
-- -- -- -- -- -- --                  (comm* x y (z ‚à∑* b))
-- -- -- -- -- -- --                  refl
-- -- -- -- -- -- --                  (commmL* x z y b)
-- -- -- -- -- -- --      commpR* : ‚àÄ x y z ‚Üí ‚àÄ b ‚Üí
-- -- -- -- -- -- --                Square 
-- -- -- -- -- -- --                (cong (x ‚à∑*_) (comm* _ _ _))
-- -- -- -- -- -- --                (comm* z x (y ‚à∑* b))
-- -- -- -- -- -- --                (commmR* x y z b)
-- -- -- -- -- -- --                refl
-- -- -- -- -- -- --      hex* : ‚àÄ x y z ‚Üí ‚àÄ b ‚Üí
-- -- -- -- -- -- --                Square
-- -- -- -- -- -- --                (comm* x y (z ‚à∑* b))
-- -- -- -- -- -- --                (cong (z ‚à∑*_) (comm* _ _ _))
-- -- -- -- -- -- --                (commmL* x y z b)
-- -- -- -- -- -- --                (commmR* y x z b)


-- -- -- -- -- -- --     f : FMSet2 A ‚Üí B
-- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- --     f (x ‚à∑2 x‚ÇÅ) = x ‚à∑* f x‚ÇÅ
-- -- -- -- -- -- --     f (comm x y x‚ÇÅ i) = comm* x y (f x‚ÇÅ) i
-- -- -- -- -- -- --     f (comm-inv x y x‚ÇÅ i i‚ÇÅ) = comm-inv* x y (f x‚ÇÅ) i i‚ÇÅ
-- -- -- -- -- -- --     f (commmL x y z xs i) = commmL* x y z (f xs) i
-- -- -- -- -- -- --     f (commmR x y z xs i) = commmR* x y z (f xs) i
-- -- -- -- -- -- --     f (commpL x y z xs i j) = commpL* x y z (f xs) i j 
-- -- -- -- -- -- --     f (commpR x y z xs i j) = commpR* x y z (f xs) i j 
-- -- -- -- -- -- --     f (hex x y z xs i j) = hex* x y z (f xs) i j     
-- -- -- -- -- -- --     f (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) =
-- -- -- -- -- -- --        BType _ _ _ _
-- -- -- -- -- -- --         (cong (cong f) x‚ÇÉ)
-- -- -- -- -- -- --         (cong  (cong f) y‚ÇÅ) i i‚ÇÅ x‚ÇÑ


-- -- -- -- -- -- --   record RElimSet' {‚Ñì'} (B : FMSet2 A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- --     field
-- -- -- -- -- -- --      []* : B []
-- -- -- -- -- -- --      _‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
-- -- -- -- -- -- --      comm* : (x y : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b))
-- -- -- -- -- -- --      trunc* : (xs : FMSet2 A) ‚Üí isSet (B xs)

-- -- -- -- -- -- --     fR : RElim B
-- -- -- -- -- -- --     RElim.[]* fR = []*
-- -- -- -- -- -- --     RElim._‚à∑*_ fR = _‚à∑*_
-- -- -- -- -- -- --     RElim.comm* fR = comm*
-- -- -- -- -- -- --     RElim.comm-inv* fR x y b =
-- -- -- -- -- -- --       isSet‚ÜíSquareP (Œª _ _  ‚Üí trunc* _) _ _ _ _
-- -- -- -- -- -- --     RElim.commmL* fR x y z {xs} b i =
-- -- -- -- -- -- --       comp (Œª l ‚Üí B (commpL x z y xs i l))
-- -- -- -- -- -- --        (Œª l ‚Üí Œª { (i = i0) ‚Üí x ‚à∑* comm* z y b l
-- -- -- -- -- -- --                 ; (i = i1) ‚Üí comm* x z (y ‚à∑* b) l
-- -- -- -- -- -- --                 })
-- -- -- -- -- -- --        (x ‚à∑* (z ‚à∑* (y ‚à∑* b)))
-- -- -- -- -- -- --     RElim.commmR* fR x y z {xs} b i =
-- -- -- -- -- -- --        comp (Œª l ‚Üí B (commpR x y z xs i (~ l)))
-- -- -- -- -- -- --        (Œª l ‚Üí Œª { (i = i0) ‚Üí x ‚à∑* comm* y z b (~ l)
-- -- -- -- -- -- --                 ; (i = i1) ‚Üí comm* z x (y ‚à∑* b) (~ l)
-- -- -- -- -- -- --                 })
-- -- -- -- -- -- --        (x ‚à∑* (z ‚à∑* (y ‚à∑* b)))
-- -- -- -- -- -- --     RElim.commpL* fR x y z b =
-- -- -- -- -- -- --       isSet‚ÜíSquareP (Œª _ _  ‚Üí trunc* _) _ _ _ _
-- -- -- -- -- -- --     RElim.commpR* fR x y z b =
-- -- -- -- -- -- --       isSet‚ÜíSquareP (Œª _ _  ‚Üí trunc* _) _ _ _ _
-- -- -- -- -- -- --     RElim.hex* fR x y z b =
-- -- -- -- -- -- --       isSet‚ÜíSquareP (Œª _ _  ‚Üí trunc* _) _ _ _ _
-- -- -- -- -- -- --     RElim.trunc* fR = isSet‚ÜíisGroupoid ‚àò trunc*

-- -- -- -- -- -- --     f : ‚àÄ xs ‚Üí B xs
-- -- -- -- -- -- --     f = RElim.f fR

-- -- -- -- -- -- --     -- f : ‚àÄ xs ‚Üí B xs
-- -- -- -- -- -- --     -- f [] = []*
-- -- -- -- -- -- --     -- f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- --     -- f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- --     -- f (comm-inv x y xs i j) =
-- -- -- -- -- -- --     --    isOfHLevel‚ÜíisOfHLevelDep 2 trunc*
-- -- -- -- -- -- --     --        (x ‚à∑* (y ‚à∑* f xs)) (y ‚à∑* (x ‚à∑* f xs))
-- -- -- -- -- -- --     --        (comm* x y (f xs)) (symP (comm* y x (f xs)))
-- -- -- -- -- -- --     --        (comm-inv x y xs) i j
-- -- -- -- -- -- --     -- f (commmL x y z xs i) =
-- -- -- -- -- -- --     --   comp (Œª l ‚Üí B (commpL x z y xs i l))
-- -- -- -- -- -- --     --    (Œª l ‚Üí Œª { (i = i0) ‚Üí x ‚à∑* comm* z y (f xs) l
-- -- -- -- -- -- --     --             ; (i = i1) ‚Üí comm* x z (y ‚à∑* (f xs)) l
-- -- -- -- -- -- --     --             })
-- -- -- -- -- -- --     --    (x ‚à∑* (z ‚à∑* (y ‚à∑* f xs)))
-- -- -- -- -- -- --     -- f (commmR x y z xs i) =
-- -- -- -- -- -- --     --    comp (Œª l ‚Üí B (commpR x y z xs i (~ l)))
-- -- -- -- -- -- --     --    (Œª l ‚Üí Œª { (i = i0) ‚Üí x ‚à∑* comm* y z (f xs) (~ l)
-- -- -- -- -- -- --     --             ; (i = i1) ‚Üí comm* z x (y ‚à∑* (f xs)) (~ l)
-- -- -- -- -- -- --     --             })
-- -- -- -- -- -- --     --    (x ‚à∑* (z ‚à∑* (y ‚à∑* f xs)))
-- -- -- -- -- -- --     -- f (commpL x y z xs i j) =
-- -- -- -- -- -- --     --   {!isOfHLevel‚ÜíisOfHLevelDep 2 trunc*
-- -- -- -- -- -- --     --        ? ? ? ?
-- -- -- -- -- -- --     --        (commpL x y z xs) i j!}
-- -- -- -- -- -- --     -- f (commpR x y z xs i i‚ÇÅ) = {!!}
-- -- -- -- -- -- --     -- f (hex x y z xs i i‚ÇÅ) = {!!}
-- -- -- -- -- -- --     -- f (trunc xs xs‚ÇÅ x y x‚ÇÅ y‚ÇÅ i i‚ÇÅ x‚ÇÇ) = {!!}

-- -- -- -- -- -- -- --     hexDiag* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (hexDiag x y z xs i)) (x ‚à∑* (y ‚à∑* (z ‚à∑* b))) (z ‚à∑* (y ‚à∑* (x ‚à∑* b)))
-- -- -- -- -- -- -- --     hexDiag* x y z {xs} b i =
-- -- -- -- -- -- -- --       comp (Œª j ‚Üí B (hexU x y z xs j i))
-- -- -- -- -- -- -- --         (Œª j ‚Üí
-- -- -- -- -- -- -- --           Œª { (i = i0) ‚Üí comm* y x {(z ‚à∑2 xs)} (z ‚à∑* b) j
-- -- -- -- -- -- -- --             ; (i = i1) ‚Üí comm* y z (x ‚à∑* b) j
-- -- -- -- -- -- -- --             }) (y ‚à∑* comm* x z b i) 

-- -- -- -- -- -- -- --     f : (xs : FMSet2 A) ‚Üí B xs
-- -- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- -- --     f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- -- --     f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- -- --     f (comm-inv x y xs i j) =
-- -- -- -- -- -- -- --        isOfHLevel‚ÜíisOfHLevelDep 2 trunc*
-- -- -- -- -- -- -- --            (x ‚à∑* (y ‚à∑* f xs)) (y ‚à∑* (x ‚à∑* f xs))
-- -- -- -- -- -- -- --            (comm* x y (f xs)) (symP (comm* y x (f xs)))
-- -- -- -- -- -- -- --            (comm-inv x y xs) i j
-- -- -- -- -- -- -- --     f (hexDiag x y z xs i) = 
-- -- -- -- -- -- -- --        hexDiag* x y z (f xs) i
-- -- -- -- -- -- -- --     f (hexU x y z xs i j) = 
-- -- -- -- -- -- -- --       isSet‚ÜíSquareP 
-- -- -- -- -- -- -- --          (Œª i j ‚Üí trunc* (hexU x y z xs i j))
-- -- -- -- -- -- -- --          (Œª j ‚Üí y ‚à∑* comm* x z (f xs) j)
-- -- -- -- -- -- -- --          (hexDiag* x y z (f xs))
-- -- -- -- -- -- -- --          (comm* y x (z ‚à∑* f xs))
-- -- -- -- -- -- -- --          (comm* y z (x ‚à∑* f xs)) i j
-- -- -- -- -- -- -- --     f (hexL x y z xs i j) = 
-- -- -- -- -- -- -- --          isSet‚ÜíSquareP 
-- -- -- -- -- -- -- --          (Œª i j ‚Üí trunc* (hexL x y z xs i j))
-- -- -- -- -- -- -- --          (hexDiag* x y z (f xs))
-- -- -- -- -- -- -- --          (comm* x z (y ‚à∑* f xs))
-- -- -- -- -- -- -- --          (Œª i‚ÇÅ ‚Üí x ‚à∑* comm* y z (f xs) i‚ÇÅ)
-- -- -- -- -- -- -- --          (Œª i‚ÇÅ ‚Üí z ‚à∑* comm* y x (f xs) i‚ÇÅ) i j
-- -- -- -- -- -- -- --     f (trunc xs zs p q r s i j k) =
-- -- -- -- -- -- -- --         isOfHLevel‚ÜíisOfHLevelDep 3 (Œª x ‚Üí isSet‚ÜíisGroupoid (trunc* x))
-- -- -- -- -- -- -- --             _ _ _ _ (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) (trunc xs zs p q r s) i j k


-- -- -- -- -- -- -- --     f : (xs : FMSet2 A B xs
-- -- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- -- --     f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- -- --     f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- -- --     f (comm-inv x y xs i j) =
-- -- -- -- -- -- -- --        comm-inv* x y (f xs) i j
-- -- -- -- -- -- -- --     f (commmL x y z xs i) = commmL* x y z (f xs) i
-- -- -- -- -- -- -- --     f (commmR x y z xs i) = commmR* x y z (f xs) i
-- -- -- -- -- -- -- --     f (commpL x y z xs i j) = commpL* x y z (f xs) i j 
-- -- -- -- -- -- -- --     f (commpR x y z xs i j) = commpR* x y z (f xs) i j 
-- -- -- -- -- -- -- --     f (hex x y z xs i j) = hex* x y z (f xs) i j 
-- -- -- -- -- -- -- --     f (trunc xs ys p q r s i j k) = ?
-- -- -- -- -- -- -- --       -- isOfHLevel‚ÜíisOfHLevelDep 3 (Œª a ‚Üí trunc* a)
-- -- -- -- -- -- -- --       --    _ _ _ _
-- -- -- -- -- -- -- --       --    (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) 
-- -- -- -- -- -- -- --       --      (trunc xs ys p q r s) i j k



-- -- -- -- -- -- -- --   -- module ElimSet {‚Ñì'} {B : FMSet2 A ‚Üí Type ‚Ñì'}
-- -- -- -- -- -- -- --   --   ([]* : B []) (_‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs))
-- -- -- -- -- -- -- --   --   (comm* : (x y : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- --   --          ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b)))
-- -- -- -- -- -- -- --   --        comm-inv* : ‚àÄ x y {xs} (b : B xs) ‚Üí SquareP (Œª i j ‚Üí B (comm-inv x y xs i j))
-- -- -- -- -- -- -- --   --                       (comm* x y b ) (symP (comm* y x b))
-- -- -- -- -- -- -- --   --                       refl refl 
-- -- -- -- -- -- -- --   --   (commmL* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- --   --          ‚Üí PathP (Œª i ‚Üí B (commmL x y z xs i))
-- -- -- -- -- -- -- --   --             (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
-- -- -- -- -- -- -- --   --             (z ‚à∑* (x ‚à∑* (y ‚à∑* b))))
-- -- -- -- -- -- -- --   --   (commmR* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- --   --          ‚Üí PathP (Œª i ‚Üí B (commmR x y z xs i))
-- -- -- -- -- -- -- --   --             (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
-- -- -- -- -- -- -- --   --             (z ‚à∑* (x ‚à∑* (y ‚à∑* b))))
-- -- -- -- -- -- -- --   --   (trunc* : (xs : FMSet2 A) ‚Üí isSet (B xs)) where

-- -- -- -- -- -- -- --   --   f : (xs : FMSet2 A) ‚Üí B xs
-- -- -- -- -- -- -- --   --   f [] = []*
-- -- -- -- -- -- -- --   --   f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- -- --   --   f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- -- --   --   f (comm-inv x y xs i j) = {!!}
-- -- -- -- -- -- -- --   --      -- isOfHLevel‚ÜíisOfHLevelDep 2 trunc*
-- -- -- -- -- -- -- --   --      --     (x ‚à∑* (y ‚à∑* f xs)) (y ‚à∑* (x ‚à∑* f xs))
-- -- -- -- -- -- -- --   --      --     (comm* x y (f xs)) (symP (comm* y x (f xs)))
-- -- -- -- -- -- -- --   --      --     (comm-inv x y xs) i j
-- -- -- -- -- -- -- --   --   f (commmL x y z xs i) = {!!}
-- -- -- -- -- -- -- --   --   f (commmR x y z xs i) = {!!}
-- -- -- -- -- -- -- --   --   f (commpL x y z xs i i‚ÇÅ) = {!!}
-- -- -- -- -- -- -- --   --   f (commpR x y z xs i i‚ÇÅ) = {!!}
-- -- -- -- -- -- -- --   --   f (hex x y z xs i i‚ÇÅ) = {!!}    
-- -- -- -- -- -- -- --   --   f (trunc xs zs p q r s i j k) = {!!}
-- -- -- -- -- -- -- --   --       -- isOfHLevel‚ÜíisOfHLevelDep 3 (Œª x ‚Üí isSet‚ÜíisGroupoid (trunc* x))
-- -- -- -- -- -- -- --   --       --     _ _ _ _ (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) (trunc xs zs p q r s) i j k

-- -- -- -- -- -- -- -- --   module ElimSet {‚Ñì'} {B : FMSet2 A ‚Üí Type ‚Ñì'}
-- -- -- -- -- -- -- -- --     ([]* : B []) (_‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs))
-- -- -- -- -- -- -- -- --     (comm* : (x y : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b)))
-- -- -- -- -- -- -- -- --     (commmL* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (commmL x y z xs i))
-- -- -- -- -- -- -- -- --               (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
-- -- -- -- -- -- -- -- --               (z ‚à∑* (x ‚à∑* (y ‚à∑* b))))
-- -- -- -- -- -- -- -- --     (commmR* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (commmR x y z xs i))
-- -- -- -- -- -- -- -- --               (x ‚à∑* (y ‚à∑* (z ‚à∑* b)))
-- -- -- -- -- -- -- -- --               (z ‚à∑* (x ‚à∑* (y ‚à∑* b))))
-- -- -- -- -- -- -- -- --     (trunc* : (xs : FMSet2 A) ‚Üí isSet (B xs)) where

-- -- -- -- -- -- -- -- --     f : (xs : FMSet2 A) ‚Üí B xs
-- -- -- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- -- -- --     f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- -- -- --     f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- -- -- --     f (comm-inv x y xs i j) =
-- -- -- -- -- -- -- -- --        isOfHLevel‚ÜíisOfHLevelDep 2 trunc*
-- -- -- -- -- -- -- -- --            (x ‚à∑* (y ‚à∑* f xs)) (y ‚à∑* (x ‚à∑* f xs))
-- -- -- -- -- -- -- -- --            (comm* x y (f xs)) (symP (comm* y x (f xs)))
-- -- -- -- -- -- -- -- --            (comm-inv x y xs) i j
-- -- -- -- -- -- -- -- --     f (commmL x y z xs i) = {!!}
-- -- -- -- -- -- -- -- --     f (commmR x y z xs i) = {!!}
-- -- -- -- -- -- -- -- --     f (commpL x y z xs i i‚ÇÅ) = {!!}
-- -- -- -- -- -- -- -- --     f (commpR x y z xs i i‚ÇÅ) = {!!}
-- -- -- -- -- -- -- -- --     f (hex x y z xs i i‚ÇÅ) = {!!}    
-- -- -- -- -- -- -- -- --     -- f (hexDiag x y z xs i) = hexDiag* x y z (f xs) i
-- -- -- -- -- -- -- -- --     -- f (hexU x y z xs i j) =
-- -- -- -- -- -- -- -- --     --   isSet‚ÜíSquareP 
-- -- -- -- -- -- -- -- --     --      (Œª i j ‚Üí trunc* (hexU x y z xs i j))
-- -- -- -- -- -- -- -- --     --      (Œª j ‚Üí y ‚à∑* comm* x z (f xs) j)
-- -- -- -- -- -- -- -- --     --      (hexDiag* x y z (f xs))
-- -- -- -- -- -- -- -- --     --      (comm* y x (z ‚à∑* f xs))
-- -- -- -- -- -- -- -- --     --      (comm* y z (x ‚à∑* f xs)) i j
-- -- -- -- -- -- -- -- --     -- f (hexL x y z xs i j) =
-- -- -- -- -- -- -- -- --     --      isSet‚ÜíSquareP 
-- -- -- -- -- -- -- -- --     --      (Œª i j ‚Üí trunc* (hexL x y z xs i j))
-- -- -- -- -- -- -- -- --     --      (hexDiag* x y z (f xs))
-- -- -- -- -- -- -- -- --     --      (comm* x z (y ‚à∑* f xs))
-- -- -- -- -- -- -- -- --     --      (Œª i‚ÇÅ ‚Üí x ‚à∑* comm* y z (f xs) i‚ÇÅ)
-- -- -- -- -- -- -- -- --     --      (Œª i‚ÇÅ ‚Üí z ‚à∑* comm* y x (f xs) i‚ÇÅ) i j
-- -- -- -- -- -- -- -- --     f (trunc xs zs p q r s i j k) =
-- -- -- -- -- -- -- -- --         isOfHLevel‚ÜíisOfHLevelDep 3 (Œª x ‚Üí isSet‚ÜíisGroupoid (trunc* x))
-- -- -- -- -- -- -- -- --             _ _ _ _ (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) (trunc xs zs p q r s) i j k


-- -- -- -- -- -- -- -- -- --   record RElimSet {‚Ñì'} (B : FMSet2 A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- -- -- -- --     field
-- -- -- -- -- -- -- -- -- --      []* : B []
-- -- -- -- -- -- -- -- -- --      _‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
-- -- -- -- -- -- -- -- -- --      comm* : (x y : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b))
-- -- -- -- -- -- -- -- -- --      hexDiag* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (hexDiag x y z xs i)) (x ‚à∑* (y ‚à∑* (z ‚à∑* b))) (z ‚à∑* (y ‚à∑* (x ‚à∑* b)))
-- -- -- -- -- -- -- -- -- --      trunc* : (xs : FMSet2 A) ‚Üí isSet (B xs)

-- -- -- -- -- -- -- -- -- --     f : (xs : FMSet2 A) ‚Üí B xs
-- -- -- -- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- -- -- -- --     f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- -- -- -- --     f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- -- -- -- --     f (comm-inv x y xs i j) =
-- -- -- -- -- -- -- -- -- --        isOfHLevel‚ÜíisOfHLevelDep 2 trunc*
-- -- -- -- -- -- -- -- -- --            (x ‚à∑* (y ‚à∑* f xs)) (y ‚à∑* (x ‚à∑* f xs))
-- -- -- -- -- -- -- -- -- --            (comm* x y (f xs)) (symP (comm* y x (f xs)))
-- -- -- -- -- -- -- -- -- --            (comm-inv x y xs) i j
-- -- -- -- -- -- -- -- -- --     f (hexDiag x y z xs i) = hexDiag* x y z (f xs) i
-- -- -- -- -- -- -- -- -- --     f (hexU x y z xs i j) =
-- -- -- -- -- -- -- -- -- --       isSet‚ÜíSquareP 
-- -- -- -- -- -- -- -- -- --          (Œª i j ‚Üí trunc* (hexU x y z xs i j))
-- -- -- -- -- -- -- -- -- --          (Œª j ‚Üí y ‚à∑* comm* x z (f xs) j)
-- -- -- -- -- -- -- -- -- --          (hexDiag* x y z (f xs))
-- -- -- -- -- -- -- -- -- --          (comm* y x (z ‚à∑* f xs))
-- -- -- -- -- -- -- -- -- --          (comm* y z (x ‚à∑* f xs)) i j
-- -- -- -- -- -- -- -- -- --     f (hexL x y z xs i j) =
-- -- -- -- -- -- -- -- -- --          isSet‚ÜíSquareP 
-- -- -- -- -- -- -- -- -- --          (Œª i j ‚Üí trunc* (hexL x y z xs i j))
-- -- -- -- -- -- -- -- -- --          (hexDiag* x y z (f xs))
-- -- -- -- -- -- -- -- -- --          (comm* x z (y ‚à∑* f xs))
-- -- -- -- -- -- -- -- -- --          (Œª i‚ÇÅ ‚Üí x ‚à∑* comm* y z (f xs) i‚ÇÅ)
-- -- -- -- -- -- -- -- -- --          (Œª i‚ÇÅ ‚Üí z ‚à∑* comm* y x (f xs) i‚ÇÅ) i j
-- -- -- -- -- -- -- -- -- --     f (trunc xs zs p q r s i j k) =
-- -- -- -- -- -- -- -- -- --         isOfHLevel‚ÜíisOfHLevelDep 3 (Œª x ‚Üí isSet‚ÜíisGroupoid (trunc* x))
-- -- -- -- -- -- -- -- -- --             _ _ _ _ (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) (trunc xs zs p q r s) i j k


-- -- -- -- -- -- -- -- -- --   record RElimSet' {‚Ñì'} (B : FMSet2 A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- -- -- -- --     field
-- -- -- -- -- -- -- -- -- --      []* : B []
-- -- -- -- -- -- -- -- -- --      _‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
-- -- -- -- -- -- -- -- -- --      comm* : (x y : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b))
-- -- -- -- -- -- -- -- -- --      trunc* : (xs : FMSet2 A) ‚Üí isSet (B xs)

-- -- -- -- -- -- -- -- -- --     hexDiag* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (hexDiag x y z xs i)) (x ‚à∑* (y ‚à∑* (z ‚à∑* b))) (z ‚à∑* (y ‚à∑* (x ‚à∑* b)))
-- -- -- -- -- -- -- -- -- --     hexDiag* x y z {xs} b i =
-- -- -- -- -- -- -- -- -- --       comp (Œª j ‚Üí B (hexU x y z xs j i))
-- -- -- -- -- -- -- -- -- --         (Œª j ‚Üí
-- -- -- -- -- -- -- -- -- --           Œª { (i = i0) ‚Üí comm* y x {(z ‚à∑2 xs)} (z ‚à∑* b) j
-- -- -- -- -- -- -- -- -- --             ; (i = i1) ‚Üí comm* y z (x ‚à∑* b) j
-- -- -- -- -- -- -- -- -- --             }) (y ‚à∑* comm* x z b i) 

-- -- -- -- -- -- -- -- -- --     f : (xs : FMSet2 A) ‚Üí B xs
-- -- -- -- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- -- -- -- --     f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- -- -- -- --     f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- -- -- -- --     f (comm-inv x y xs i j) =
-- -- -- -- -- -- -- -- -- --        isOfHLevel‚ÜíisOfHLevelDep 2 trunc*
-- -- -- -- -- -- -- -- -- --            (x ‚à∑* (y ‚à∑* f xs)) (y ‚à∑* (x ‚à∑* f xs))
-- -- -- -- -- -- -- -- -- --            (comm* x y (f xs)) (symP (comm* y x (f xs)))
-- -- -- -- -- -- -- -- -- --            (comm-inv x y xs) i j
-- -- -- -- -- -- -- -- -- --     f (hexDiag x y z xs i) = 
-- -- -- -- -- -- -- -- -- --        hexDiag* x y z (f xs) i
-- -- -- -- -- -- -- -- -- --     f (hexU x y z xs i j) = 
-- -- -- -- -- -- -- -- -- --       isSet‚ÜíSquareP 
-- -- -- -- -- -- -- -- -- --          (Œª i j ‚Üí trunc* (hexU x y z xs i j))
-- -- -- -- -- -- -- -- -- --          (Œª j ‚Üí y ‚à∑* comm* x z (f xs) j)
-- -- -- -- -- -- -- -- -- --          (hexDiag* x y z (f xs))
-- -- -- -- -- -- -- -- -- --          (comm* y x (z ‚à∑* f xs))
-- -- -- -- -- -- -- -- -- --          (comm* y z (x ‚à∑* f xs)) i j
-- -- -- -- -- -- -- -- -- --     f (hexL x y z xs i j) = 
-- -- -- -- -- -- -- -- -- --          isSet‚ÜíSquareP 
-- -- -- -- -- -- -- -- -- --          (Œª i j ‚Üí trunc* (hexL x y z xs i j))
-- -- -- -- -- -- -- -- -- --          (hexDiag* x y z (f xs))
-- -- -- -- -- -- -- -- -- --          (comm* x z (y ‚à∑* f xs))
-- -- -- -- -- -- -- -- -- --          (Œª i‚ÇÅ ‚Üí x ‚à∑* comm* y z (f xs) i‚ÇÅ)
-- -- -- -- -- -- -- -- -- --          (Œª i‚ÇÅ ‚Üí z ‚à∑* comm* y x (f xs) i‚ÇÅ) i j
-- -- -- -- -- -- -- -- -- --     f (trunc xs zs p q r s i j k) =
-- -- -- -- -- -- -- -- -- --         isOfHLevel‚ÜíisOfHLevelDep 3 (Œª x ‚Üí isSet‚ÜíisGroupoid (trunc* x))
-- -- -- -- -- -- -- -- -- --             _ _ _ _ (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) (trunc xs zs p q r s) i j k

-- -- -- -- -- -- -- -- -- --   record RElimProp' {‚Ñì'} (B : FMSet2 A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- -- -- -- --     field
-- -- -- -- -- -- -- -- -- --      []* : B []
-- -- -- -- -- -- -- -- -- --      _‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
-- -- -- -- -- -- -- -- -- --      trunc* : (xs : FMSet2 A) ‚Üí isProp (B xs)

-- -- -- -- -- -- -- -- -- --     res : RElimSet B
-- -- -- -- -- -- -- -- -- --     RElimSet.[]* res = []*
-- -- -- -- -- -- -- -- -- --     RElimSet._‚à∑*_ res = _‚à∑*_
-- -- -- -- -- -- -- -- -- --     RElimSet.comm* res = (Œª x y b ‚Üí isProp‚ÜíPathP (Œª _ ‚Üí trunc* _) _ _)
-- -- -- -- -- -- -- -- -- --     RElimSet.hexDiag* res = (Œª x y z b ‚Üí isProp‚ÜíPathP (Œª _ ‚Üí trunc* _) _ _)
-- -- -- -- -- -- -- -- -- --     RElimSet.trunc* res = isProp‚ÜíisSet ‚àò trunc*

-- -- -- -- -- -- -- -- -- --     f = RElimSet.f res

-- -- -- -- -- -- -- -- -- --   record RElimProp'' {‚Ñì'} (B : FMSet2 A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- -- -- -- --     field
-- -- -- -- -- -- -- -- -- --      []* : B []
-- -- -- -- -- -- -- -- -- --      _‚à∑*[_]_ : (x : A) (xs : FMSet2 A) ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
-- -- -- -- -- -- -- -- -- --      trunc* : (xs : FMSet2 A) ‚Üí isProp (B xs)

-- -- -- -- -- -- -- -- -- --     res : RElimSet B
-- -- -- -- -- -- -- -- -- --     RElimSet.[]* res = []*
-- -- -- -- -- -- -- -- -- --     (res RElimSet.‚à∑* x) {xs} x‚ÇÅ = x ‚à∑*[ xs ] x‚ÇÅ 
-- -- -- -- -- -- -- -- -- --     RElimSet.comm* res = (Œª x y b ‚Üí isProp‚ÜíPathP (Œª _ ‚Üí trunc* _) _ _)
-- -- -- -- -- -- -- -- -- --     RElimSet.hexDiag* res = (Œª x y z b ‚Üí isProp‚ÜíPathP (Œª _ ‚Üí trunc* _) _ _)
-- -- -- -- -- -- -- -- -- --     RElimSet.trunc* res = isProp‚ÜíisSet ‚àò trunc*

-- -- -- -- -- -- -- -- -- --     f = RElimSet.f res


-- -- -- -- -- -- -- -- -- --   record RElim {‚Ñì'} (B : FMSet2 A ‚Üí Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- -- -- -- --     field
-- -- -- -- -- -- -- -- -- --      []* : B []
-- -- -- -- -- -- -- -- -- --      _‚à∑*_ : (x : A) {xs : FMSet2 A} ‚Üí B xs ‚Üí B (x ‚à∑2 xs)
-- -- -- -- -- -- -- -- -- --      comm* : (x y : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (comm x y xs i)) (x ‚à∑* (y ‚à∑* b)) (y ‚à∑* (x ‚à∑* b))
-- -- -- -- -- -- -- -- -- --      comm-inv* : ‚àÄ x y {xs} (b : B xs) ‚Üí SquareP (Œª i j ‚Üí B (comm-inv x y xs i j))
-- -- -- -- -- -- -- -- -- --                         (comm* x y b ) (symP (comm* y x b))
-- -- -- -- -- -- -- -- -- --                         refl refl 
-- -- -- -- -- -- -- -- -- --      hexDiag* : (x y z : A) {xs : FMSet2 A} (b : B xs)
-- -- -- -- -- -- -- -- -- --            ‚Üí PathP (Œª i ‚Üí B (hexDiag x y z xs i)) (x ‚à∑* (y ‚à∑* (z ‚à∑* b))) (z ‚à∑* (y ‚à∑* (x ‚à∑* b)))
-- -- -- -- -- -- -- -- -- --      hexU* : ‚àÄ x y z {xs : FMSet2 A} (b : B xs) ‚Üí
-- -- -- -- -- -- -- -- -- --                SquareP
-- -- -- -- -- -- -- -- -- --                ((Œª i j ‚Üí B (hexU x y z xs i j)))
-- -- -- -- -- -- -- -- -- --                  (congP (Œª _ ‚Üí y ‚à∑*_) (comm* x z b))
-- -- -- -- -- -- -- -- -- --                  (hexDiag* x y z b)
-- -- -- -- -- -- -- -- -- --                  (comm* _ _ (z ‚à∑* b))
-- -- -- -- -- -- -- -- -- --                  (comm* _ _ (x ‚à∑* b))
                  
-- -- -- -- -- -- -- -- -- --      hexL* : ‚àÄ x y z {xs : FMSet2 A} (b : B xs)  ‚Üí
-- -- -- -- -- -- -- -- -- --                SquareP
-- -- -- -- -- -- -- -- -- --                  (Œª i j ‚Üí B (hexL x y z xs i j))
-- -- -- -- -- -- -- -- -- --                  (hexDiag* _ _ _ b)
-- -- -- -- -- -- -- -- -- --                  (comm* _ _ _)
-- -- -- -- -- -- -- -- -- --                  (congP (Œª _ ‚Üí _ ‚à∑*_) (comm* _ _ _))
-- -- -- -- -- -- -- -- -- --                  (congP (Œª _ ‚Üí _ ‚à∑*_) (comm* _ _ _))
                  

-- -- -- -- -- -- -- -- -- --      trunc* : (xs : FMSet2 A) ‚Üí isGroupoid (B xs)

-- -- -- -- -- -- -- -- -- --     f : (xs : FMSet2 A) ‚Üí B xs
-- -- -- -- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- -- -- -- --     f (x ‚à∑2 xs) = x ‚à∑* f xs
-- -- -- -- -- -- -- -- -- --     f (comm x y xs i) = comm* x y (f xs) i
-- -- -- -- -- -- -- -- -- --     f (comm-inv x y xs i j) =
-- -- -- -- -- -- -- -- -- --        comm-inv* x y (f xs) i j
-- -- -- -- -- -- -- -- -- --     f (hexDiag x y z xs i) = hexDiag* x y z (f xs) i
-- -- -- -- -- -- -- -- -- --     f (hexU x y z xs i j) = hexU* x y z (f xs) i j
-- -- -- -- -- -- -- -- -- --     f (hexL x y z xs i j) = hexL* x y z (f xs) i j

-- -- -- -- -- -- -- -- -- --     f (trunc xs ys p q r s i j k) =
-- -- -- -- -- -- -- -- -- --       isOfHLevel‚ÜíisOfHLevelDep 3 (Œª a ‚Üí trunc* a)
-- -- -- -- -- -- -- -- -- --          _ _ _ _
-- -- -- -- -- -- -- -- -- --          (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k)) 
-- -- -- -- -- -- -- -- -- --            (trunc xs ys p q r s) i j k


-- -- -- -- -- -- -- -- -- --   record RRec {‚Ñì'} {B : Type ‚Ñì'} (BType : isGroupoid B) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- -- -- -- --     no-eta-equality
-- -- -- -- -- -- -- -- -- --     field
-- -- -- -- -- -- -- -- -- --       []* : B
-- -- -- -- -- -- -- -- -- --       _‚à∑*_ : A ‚Üí B ‚Üí B
-- -- -- -- -- -- -- -- -- --       comm* : (x y : A) (b : B) ‚Üí x ‚à∑* (y ‚à∑* b) ‚â° y ‚à∑* (x ‚à∑* b)
-- -- -- -- -- -- -- -- -- --       comm-inv* : ‚àÄ x y b ‚Üí comm* x y b ‚â° sym (comm* y x b) 
-- -- -- -- -- -- -- -- -- --       hexDiag* : ‚àÄ x y z b ‚Üí x ‚à∑* (y ‚à∑* (z ‚à∑* b)) ‚â° z ‚à∑* (y ‚à∑* (x ‚à∑* b)) 
-- -- -- -- -- -- -- -- -- --       hexU* : ‚àÄ x y z b ‚Üí
-- -- -- -- -- -- -- -- -- --                Square (cong (_ ‚à∑*_) (comm* _ _ b)) (hexDiag* x y z b)
-- -- -- -- -- -- -- -- -- --                       (comm* _ _ _) (comm* _ _ _)
-- -- -- -- -- -- -- -- -- --       hexL* : ‚àÄ x y z b ‚Üí
-- -- -- -- -- -- -- -- -- --                Square (hexDiag* x y z b) (comm* _ _ _)
-- -- -- -- -- -- -- -- -- --                       (cong (_ ‚à∑*_) (comm* _ _ b)) (cong (_ ‚à∑*_) (comm* _ _ b))


-- -- -- -- -- -- -- -- -- --     f : FMSet2 A ‚Üí B
-- -- -- -- -- -- -- -- -- --     f [] = []*
-- -- -- -- -- -- -- -- -- --     f (x ‚à∑2 x‚ÇÅ) = x ‚à∑* f x‚ÇÅ
-- -- -- -- -- -- -- -- -- --     f (comm x y x‚ÇÅ i) = comm* x y (f x‚ÇÅ) i
-- -- -- -- -- -- -- -- -- --     f (comm-inv x y x‚ÇÅ i i‚ÇÅ) = comm-inv* x y (f x‚ÇÅ) i i‚ÇÅ
-- -- -- -- -- -- -- -- -- --     f (hexDiag x y z x‚ÇÅ i) = hexDiag* x y z (f x‚ÇÅ) i
-- -- -- -- -- -- -- -- -- --     f (hexU x y z x‚ÇÅ i i‚ÇÅ) = hexU* x y z (f x‚ÇÅ) i i‚ÇÅ
-- -- -- -- -- -- -- -- -- --     f (hexL x y z x‚ÇÅ i i‚ÇÅ) = hexL* x y z (f x‚ÇÅ) i i‚ÇÅ
-- -- -- -- -- -- -- -- -- --     f (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) =
-- -- -- -- -- -- -- -- -- --        BType _ _ _ _
-- -- -- -- -- -- -- -- -- --         (cong (cong f) x‚ÇÉ) (cong  (cong f) y‚ÇÅ) i i‚ÇÅ x‚ÇÑ




-- -- -- -- -- -- --   len2 : FMSet2 A ‚Üí ‚Ñï
-- -- -- -- -- -- --   len2 [] = zero
-- -- -- -- -- -- --   len2 (x ‚à∑2 x‚ÇÅ) = suc (len2 x‚ÇÅ)
-- -- -- -- -- -- --   len2 (comm x y x‚ÇÅ i) = suc (suc (len2 x‚ÇÅ))
-- -- -- -- -- -- --   len2 (comm-inv x y x‚ÇÅ i i‚ÇÅ) = suc (suc (len2 x‚ÇÅ))
-- -- -- -- -- -- --   len2 (commmL x y z x‚ÇÅ i) = suc (suc (suc (len2 x‚ÇÅ)))
-- -- -- -- -- -- --   len2 (commmR x y z x‚ÇÅ i) = suc (suc (suc (len2 x‚ÇÅ)))
-- -- -- -- -- -- --   len2 (commpL x y z x‚ÇÅ i i‚ÇÅ) = suc (suc (suc (len2 x‚ÇÅ)))
-- -- -- -- -- -- --   len2 (commpR x y z x‚ÇÅ i i‚ÇÅ) = suc (suc (suc (len2 x‚ÇÅ)))
-- -- -- -- -- -- --   len2 (hex x y z x‚ÇÅ i i‚ÇÅ) = suc (suc (suc (len2 x‚ÇÅ)))
-- -- -- -- -- -- --   len2 (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) = 
-- -- -- -- -- -- --      (isSet‚ÜíisGroupoid isSet‚Ñï) _ _ _ _
-- -- -- -- -- -- --         (cong (cong len2) x‚ÇÉ) (cong  (cong len2) y‚ÇÅ) i i‚ÇÅ x‚ÇÑ


-- -- -- -- -- -- -- -- -- -- --   -- paPerm : {xs ys : FMSet2 A} ‚Üí xs ‚â° ys
-- -- -- -- -- -- -- -- -- -- --   --    ‚Üí EM‚ÇÅ (SymData (len2 xs))
-- -- -- -- -- -- -- -- -- -- --   -- paPerm {xs} = J (Œª ys p ‚Üí EM‚ÇÅ (SymData (len2 xs)))
-- -- -- -- -- -- -- -- -- -- --   --    (Elim.f {B = Œª xs ‚Üí EM‚ÇÅ (SymData (len2 xs))}
-- -- -- -- -- -- -- -- -- -- --   --      embase
-- -- -- -- -- -- -- -- -- -- --   --      (Œª _ ‚Üí gh‚Üíem‚ÇÇ‚Üí _ (sucPermFDMorphism _))
-- -- -- -- -- -- -- -- -- -- --   --      (Œª x y {xs}
-- -- -- -- -- -- -- -- -- -- --   --        ‚Üí elimSet (SymData (len2 xs))
-- -- -- -- -- -- -- -- -- -- --   --          (Œª _ ‚Üí emsquash _ _) (emloop swap0and1‚âÉ)
-- -- -- -- -- -- -- -- -- -- --   --            Œª g ‚Üí 
-- -- -- -- -- -- -- -- -- -- --   --              ‚àô‚â°‚àô‚Üísquare
-- -- -- -- -- -- -- -- -- -- --   --              (emloop swap0and1‚âÉ)
-- -- -- -- -- -- -- -- -- -- --   --              (emloop (sucPerm (sucPerm g)))                              
-- -- -- -- -- -- -- -- -- -- --   --              (emloop (sucPerm (sucPerm g)))
-- -- -- -- -- -- -- -- -- -- --   --               (emloop swap0and1‚âÉ)
-- -- -- -- -- -- -- -- -- -- --   --              {!!}
-- -- -- -- -- -- -- -- -- -- --   --              )

-- -- -- -- -- -- -- -- -- -- --   --      {!!}
-- -- -- -- -- -- -- -- -- -- --   --      {!!}
-- -- -- -- -- -- -- -- -- -- --   --      {!!}
-- -- -- -- -- -- -- -- -- -- --   --      {!!}
-- -- -- -- -- -- -- -- -- -- --   --      (Œª _ ‚Üí emsquash)
-- -- -- -- -- -- -- -- -- -- --   --      xs)

-- -- -- -- -- -- -- -- -- -- -- --   inj‚à∑2 : (xs ys : FMSet2 A) ‚Üí (x : A)
-- -- -- -- -- -- -- -- -- -- -- --            ‚Üí x ‚à∑2 xs ‚â° x ‚à∑2 ys ‚Üí xs ‚â° ys
-- -- -- -- -- -- -- -- -- -- -- --   inj‚à∑2 = ElimSet.f
-- -- -- -- -- -- -- -- -- -- -- --     {!!}
-- -- -- -- -- -- -- -- -- -- -- --     -- (ElimSet.f
-- -- -- -- -- -- -- -- -- -- -- --     --    (Œª _ _ ‚Üí refl)
-- -- -- -- -- -- -- -- -- -- -- --     --    (Œª x x‚ÇÅ x‚ÇÇ ‚Üí {!!} ‚àò cong len2  )
-- -- -- -- -- -- -- -- -- -- -- --     --    {!!}
-- -- -- -- -- -- -- -- -- -- -- --     --    {!!}
-- -- -- -- -- -- -- -- -- -- -- --     --    Œª _ ‚Üí isSetŒ†2 Œª _ _ ‚Üí trunc _ _ )
-- -- -- -- -- -- -- -- -- -- -- --     (Œª x {xs} b ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --       ElimSet.f
-- -- -- -- -- -- -- -- -- -- -- --        {!!}
-- -- -- -- -- -- -- -- -- -- -- --        (Œª x' {ys} b' y' p ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --          {!!})
-- -- -- -- -- -- -- -- -- -- -- --          {!!} {!!}
-- -- -- -- -- -- -- -- -- -- -- --         Œª _ ‚Üí isSetŒ†2 Œª _ _ ‚Üí trunc _ _)
-- -- -- -- -- -- -- -- -- -- -- --     {!!}
-- -- -- -- -- -- -- -- -- -- -- --     {!!}
-- -- -- -- -- -- -- -- -- -- -- --     Œª _ ‚Üí isSetŒ†3 Œª _ _ _ ‚Üí trunc _ _ 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Rec.f
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (isSet‚ÜíisGroupoid isSet‚Ñï) zero (Œª _ ‚Üí suc)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (Œª _ _ _ ‚Üí refl) (Œª _ _ _ _ ‚Üí refl)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (Œª _ _ _ _ ‚Üí refl) (Œª _ _ _ _ ‚Üí refl) (Œª _ _ _ _ ‚Üí refl)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- RecSet.f isSet‚Ñï zero (Œª _ ‚Üí suc) (Œª _ _ _ ‚Üí refl) (Œª _ _ _ _ ‚Üí refl)

-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- open import Cubical.HITs.EilenbergMacLane1 as EM

-- -- -- -- -- -- -- -- -- -- fm2Map : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'} ‚Üí (A ‚Üí B) ‚Üí FMSet2 A ‚Üí FMSet2 B 
-- -- -- -- -- -- -- -- -- -- fm2Map f = f'
-- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- --   f' : FMSet2 _ ‚Üí FMSet2 _ 
-- -- -- -- -- -- -- -- -- --   f' [] = []
-- -- -- -- -- -- -- -- -- --   f' (x ‚à∑2 x‚ÇÅ) = f x ‚à∑2 (f' x‚ÇÅ)
-- -- -- -- -- -- -- -- -- --   f' (comm x y x‚ÇÅ i) = comm (f x) (f y) (f' x‚ÇÅ) i
-- -- -- -- -- -- -- -- -- --   f' (comm-inv x y x‚ÇÅ i i‚ÇÅ) = comm-inv (f x) (f y) (f' x‚ÇÅ) i i‚ÇÅ
-- -- -- -- -- -- -- -- -- --   f' (hexDiag x y z x‚ÇÅ i) = (hexDiag (f x) (f y) (f z) (f' x‚ÇÅ) i)
-- -- -- -- -- -- -- -- -- --   f' (hexU x y z x‚ÇÅ i i‚ÇÅ) = hexU (f x) (f y) (f z) (f' x‚ÇÅ) i i‚ÇÅ
-- -- -- -- -- -- -- -- -- --   f' (hexL x y z x‚ÇÅ i i‚ÇÅ) = hexL (f x) (f y) (f z) (f' x‚ÇÅ) i i‚ÇÅ
-- -- -- -- -- -- -- -- -- --   f' (trunc x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) =
-- -- -- -- -- -- -- -- -- --     trunc _ _ _ _ (Œª i j ‚Üí f' (x‚ÇÉ i j))
-- -- -- -- -- -- -- -- -- --       (Œª i j ‚Üí f' (y‚ÇÅ i j)) i i‚ÇÅ x‚ÇÑ

-- -- -- -- -- -- -- -- -- -- module _ (A : Type ‚Ñì) where
-- -- -- -- -- -- -- -- -- --   -- open import Cubical.Data.List.FinData


-- -- -- -- -- -- -- -- -- --   FMSet2OfLen : ‚Ñï ‚Üí Type ‚Ñì
-- -- -- -- -- -- -- -- -- --   FMSet2OfLen n = Œ£ (FMSet2 A) Œª x ‚Üí len2 x ‚â° n

-- -- -- -- -- -- -- -- -- --   _++2_ : FMSet2 A ‚Üí FMSet2 A ‚Üí FMSet2 A
-- -- -- -- -- -- -- -- -- --   [] ++2 ys = ys
-- -- -- -- -- -- -- -- -- --   (x ‚à∑2 xs) ++2 ys = x ‚à∑2 (xs ++2 ys)
-- -- -- -- -- -- -- -- -- --   comm x y xs i ++2 ys = comm x y (xs ++2 ys) i
-- -- -- -- -- -- -- -- -- --   comm-inv x y xs i i‚ÇÅ ++2 ys = comm-inv x y (xs ++2 ys) i i‚ÇÅ
-- -- -- -- -- -- -- -- -- --   hexDiag x y z xs i ++2 ys = hexDiag x y z (xs ++2 ys) i 
-- -- -- -- -- -- -- -- -- --   hexU x y z xs i i‚ÇÅ ++2 ys = hexU x y z (xs ++2 ys) i i‚ÇÅ 
-- -- -- -- -- -- -- -- -- --   hexL x y z xs i i‚ÇÅ ++2 ys = hexL x y z (xs ++2 ys) i i‚ÇÅ 
-- -- -- -- -- -- -- -- -- --   trunc _ _ _ _ r s i i‚ÇÅ i‚ÇÇ ++2 ys =
-- -- -- -- -- -- -- -- -- --    trunc _ _ _ _ (Œª i j ‚Üí r i j ++2 ys)
-- -- -- -- -- -- -- -- -- --     (Œª i j ‚Üí s i j ++2 ys) i i‚ÇÅ i‚ÇÇ


-- -- -- -- -- -- -- -- -- --   assoc++ : ‚àÄ xs ys zs ‚Üí xs ++2 (ys ++2 zs) ‚â° (xs ++2 ys) ++2 zs
-- -- -- -- -- -- -- -- -- --   assoc++ = RElimSet.f w
-- -- -- -- -- -- -- -- -- --     where
-- -- -- -- -- -- -- -- -- --      w : RElimSet _
-- -- -- -- -- -- -- -- -- --      RElimSet.[]* w _ _ = refl
-- -- -- -- -- -- -- -- -- --      RElimSet._‚à∑*_ w _ p ys zs = cong (_ ‚à∑2_) (p ys zs)
-- -- -- -- -- -- -- -- -- --      RElimSet.comm* w x y b = funExt‚ÇÇ Œª x' y' ‚Üí Œª i j ‚Üí comm x y (b x' y' j) i 
-- -- -- -- -- -- -- -- -- --      RElimSet.hexDiag* w x y z b = funExt‚ÇÇ Œª x' y' ‚Üí Œª i j ‚Üí hexDiag x y z (b x' y' j) i
-- -- -- -- -- -- -- -- -- --      RElimSet.trunc* w _ = isSetŒ†2 Œª _ _ ‚Üí trunc _ _


-- -- -- -- -- -- -- -- -- --   rUnit++ : ‚àÄ xs ‚Üí xs ‚â° xs ++2 []
-- -- -- -- -- -- -- -- -- --   rUnit++ = RElimSet.f w
-- -- -- -- -- -- -- -- -- --     where
-- -- -- -- -- -- -- -- -- --      w : RElimSet (Œª z ‚Üí z ‚â° (z ++2 []))
-- -- -- -- -- -- -- -- -- --      RElimSet.[]* w = refl
-- -- -- -- -- -- -- -- -- --      RElimSet._‚à∑*_ w a = cong (a ‚à∑2_)
-- -- -- -- -- -- -- -- -- --      RElimSet.comm* w x y b i j = comm x y (b j) i
-- -- -- -- -- -- -- -- -- --      RElimSet.hexDiag* w x y z b i j = hexDiag x y z (b j) i
-- -- -- -- -- -- -- -- -- --      RElimSet.trunc* w _ = trunc _ _

-- -- -- -- -- -- -- -- -- --   -- sym++2 : ‚àÄ xs ys ‚Üí xs ++2 ys ‚â° ys ++2 xs
-- -- -- -- -- -- -- -- -- --   -- sym++2 = RElimSet.f w
-- -- -- -- -- -- -- -- -- --   --   where
-- -- -- -- -- -- -- -- -- --   --     w : RElimSet (Œª xs ‚Üí ‚àÄ ys ‚Üí (xs ++2 ys) ‚â° (ys ++2 xs))
-- -- -- -- -- -- -- -- -- --   --     RElimSet.[]* w = rUnit++
-- -- -- -- -- -- -- -- -- --   --     (w RElimSet.‚à∑* a) {xs} p ys = {!p (a ‚à∑2 [])!}
-- -- -- -- -- -- -- -- -- --   --     -- cong (a ‚à∑2_) (p ys) ‚àô 
-- -- -- -- -- -- -- -- -- --   --     --         cong (_++2 xs) {!!} ‚àô sym (assoc++ ys (a ‚à∑2 []) xs) 
-- -- -- -- -- -- -- -- -- --   --     RElimSet.comm* w = {!!}
-- -- -- -- -- -- -- -- -- --   --     RElimSet.hexDiag* w = {!!}
-- -- -- -- -- -- -- -- -- --   --     RElimSet.trunc* w _ = isSetŒ† Œª _ ‚Üí trunc _ _
-- -- -- -- -- -- -- -- -- --   -- _++2_ = RRec.f w
-- -- -- -- -- -- -- -- -- --   --   where
-- -- -- -- -- -- -- -- -- --   --     w : RRec {B = FMSet2 A ‚Üí FMSet2 A} {!!}
-- -- -- -- -- -- -- -- -- --   --     w = {!!}

-- -- -- -- -- -- -- -- -- -- module _ {A : Type ‚Ñì} where
-- -- -- -- -- -- -- -- -- --   -- isSetLofLA : ‚àÄ n ‚Üí isSet (ListOfLen A n)
-- -- -- -- -- -- -- -- -- --   -- isSetLofLA n = isOfHLevelListOfLen 0 isSetA n 

-- -- -- -- -- -- -- -- -- --   FMSet2OfLen‚â° : ‚àÄ {n} ‚Üí {x y : FMSet2OfLen A n} ‚Üí fst x ‚â° fst y ‚Üí x ‚â° y 
-- -- -- -- -- -- -- -- -- --   FMSet2OfLen‚â° = Œ£‚â°Prop Œª _ ‚Üí isSet‚Ñï _ _

-- -- -- -- -- -- -- -- -- --   isGroupoidFMSet2OfLen : ‚àÄ n ‚Üí isGroupoid (FMSet2OfLen A n)
-- -- -- -- -- -- -- -- -- --   isGroupoidFMSet2OfLen n = 
-- -- -- -- -- -- -- -- -- --     (isOfHLevelŒ£ 3 trunc Œª _ ‚Üí isSet‚ÜíisGroupoid (isProp‚ÜíisSet (isSet‚Ñï _ _)))

-- -- -- -- -- -- -- -- -- -- module mkFunTest {CD : hSet ‚Ñì} where

-- -- -- -- -- -- -- -- -- --   hSet‚â° : {A B : Type ‚Ñì} {isSetA : isSet A} {isSetB : isSet B} ‚Üí A ‚â° B ‚Üí
-- -- -- -- -- -- -- -- -- --               Path (hSet ‚Ñì) (A , isSetA) (B , isSetB)  
-- -- -- -- -- -- -- -- -- --   fst (hSet‚â° p i) = p i
-- -- -- -- -- -- -- -- -- --   snd (hSet‚â°  {isSetA = isSetA} {isSetB} p i) =
-- -- -- -- -- -- -- -- -- --     isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- --      (Œª i ‚Üí isPropIsSet {A = p i})
-- -- -- -- -- -- -- -- -- --      isSetA
-- -- -- -- -- -- -- -- -- --      isSetB i

-- -- -- -- -- -- -- -- -- --   flipIso : {A B C : Type ‚Ñì} ‚Üí Iso (A ‚Üí B ‚Üí C) (B ‚Üí A ‚Üí C) 
-- -- -- -- -- -- -- -- -- --   Iso.fun flipIso = flip
-- -- -- -- -- -- -- -- -- --   Iso.inv flipIso = flip
-- -- -- -- -- -- -- -- -- --   Iso.rightInv flipIso b = refl
-- -- -- -- -- -- -- -- -- --   Iso.leftInv flipIso b = refl


-- -- -- -- -- -- -- -- -- --   flip‚âÉ : {A B C : Type ‚Ñì} ‚Üí (A ‚Üí B ‚Üí C) ‚âÉ (B ‚Üí A ‚Üí C) 
-- -- -- -- -- -- -- -- -- --   flip‚âÉ = isoToEquiv flipIso

-- -- -- -- -- -- -- -- -- --   diagIso : {A B C D : Type ‚Ñì} ‚Üí Iso (A ‚Üí B ‚Üí C ‚Üí D) (C ‚Üí B ‚Üí A ‚Üí D) 
-- -- -- -- -- -- -- -- -- --   Iso.fun diagIso x x‚ÇÅ x‚ÇÇ x‚ÇÉ = x x‚ÇÉ x‚ÇÇ x‚ÇÅ
-- -- -- -- -- -- -- -- -- --   Iso.inv diagIso x x‚ÇÅ x‚ÇÇ x‚ÇÉ = x x‚ÇÉ x‚ÇÇ x‚ÇÅ
-- -- -- -- -- -- -- -- -- --   Iso.rightInv diagIso b = refl
-- -- -- -- -- -- -- -- -- --   Iso.leftInv diagIso b = refl

-- -- -- -- -- -- -- -- -- --   zzR : RRec {A = Type ‚Ñì} (isGroupoidHSet {‚Ñì})
-- -- -- -- -- -- -- -- -- --   RRec.[]* zzR = CD
-- -- -- -- -- -- -- -- -- --   RRec._‚à∑*_ zzR A HS = (A ‚Üí fst HS) , isSet‚Üí (snd HS)
-- -- -- -- -- -- -- -- -- --   RRec.comm* zzR _ _ _ = hSet‚â° (ua flip‚âÉ) 
-- -- -- -- -- -- -- -- -- --   RRec.comm-inv* zzR _ _ _ =
-- -- -- -- -- -- -- -- -- --     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet)) (isInjectiveTransport refl)
-- -- -- -- -- -- -- -- -- --   RRec.hexDiag* zzR _ _ _ _ = hSet‚â° (ua (isoToEquiv diagIso))
-- -- -- -- -- -- -- -- -- --   RRec.hexU* zzR _ _ _ _ =
-- -- -- -- -- -- -- -- -- --    Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- --     (‚àô‚â°‚àô‚Üísquare _ _ _ _ (isInjectiveTransport refl))
-- -- -- -- -- -- -- -- -- --   RRec.hexL* zzR _ _ _ _ =
-- -- -- -- -- -- -- -- -- --    Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- --     (‚àô‚â°‚àô‚Üísquare _ _ _ _ (isInjectiveTransport refl))
  
-- -- -- -- -- -- -- -- -- --   zz : FMSet2 (Type ‚Ñì) ‚Üí hSet ‚Ñì
-- -- -- -- -- -- -- -- -- --   zz = RRec.f zzR

-- -- -- -- -- -- -- -- -- -- module mkRecTest (‚Ñì : Level) where

-- -- -- -- -- -- -- -- -- --   hSet‚â° : {A B : Type ‚Ñì} {isSetA : isSet A} {isSetB : isSet B} ‚Üí A ‚â° B ‚Üí
-- -- -- -- -- -- -- -- -- --               Path (hSet ‚Ñì) (A , isSetA) (B , isSetB)  
-- -- -- -- -- -- -- -- -- --   fst (hSet‚â° p i) = p i
-- -- -- -- -- -- -- -- -- --   snd (hSet‚â°  {isSetA = isSetA} {isSetB} p i) =
-- -- -- -- -- -- -- -- -- --     isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- --      (Œª i ‚Üí isPropIsSet {A = p i})
-- -- -- -- -- -- -- -- -- --      isSetA
-- -- -- -- -- -- -- -- -- --      isSetB i

-- -- -- -- -- -- -- -- -- --   swapIso : {A B C : Type ‚Ñì} ‚Üí Iso (A √ó B √ó C) (B √ó A √ó C) 
-- -- -- -- -- -- -- -- -- --   Iso.fun swapIso (x , y , z) = y , x , z
-- -- -- -- -- -- -- -- -- --   Iso.inv swapIso (x , y , z) = y , x , z
-- -- -- -- -- -- -- -- -- --   Iso.rightInv swapIso b = refl
-- -- -- -- -- -- -- -- -- --   Iso.leftInv swapIso b = refl

-- -- -- -- -- -- -- -- -- --   diagIso : {A B C D : Type ‚Ñì} ‚Üí Iso (A √ó B √ó C √ó D) (C √ó B √ó A √ó D) 
-- -- -- -- -- -- -- -- -- --   Iso.fun diagIso (x , y , z , w) = z , y , x , w
-- -- -- -- -- -- -- -- -- --   Iso.inv diagIso (x , y , z , w) = z , y , x , w
-- -- -- -- -- -- -- -- -- --   Iso.rightInv diagIso b = refl
-- -- -- -- -- -- -- -- -- --   Iso.leftInv diagIso b = refl


-- -- -- -- -- -- -- -- -- --   zzR : RRec {A = hSet ‚Ñì} (isGroupoidHSet {‚Ñì})
-- -- -- -- -- -- -- -- -- --   RRec.[]* zzR = Unit* , isSetUnit*
-- -- -- -- -- -- -- -- -- --   RRec._‚à∑*_ zzR A HS = fst A √ó (fst HS) , isSet√ó (snd A) (snd HS)
-- -- -- -- -- -- -- -- -- --   RRec.comm* zzR A B HS = hSet‚â° (ua (isoToEquiv swapIso))
-- -- -- -- -- -- -- -- -- --   RRec.comm-inv* zzR A B HS =
-- -- -- -- -- -- -- -- -- --     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet)) (isInjectiveTransport refl)
-- -- -- -- -- -- -- -- -- --   RRec.hexDiag* zzR A B C HS =
-- -- -- -- -- -- -- -- -- --     hSet‚â° (ua (isoToEquiv diagIso))
-- -- -- -- -- -- -- -- -- --   RRec.hexU* zzR _ _ _ _ =
-- -- -- -- -- -- -- -- -- --        Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- --     (‚àô‚â°‚àô‚Üísquare _ _ _ _ (isInjectiveTransport refl))

-- -- -- -- -- -- -- -- -- --   RRec.hexL* zzR _ _ _ _ =
-- -- -- -- -- -- -- -- -- --        Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- --     (‚àô‚â°‚àô‚Üísquare _ _ _ _ (isInjectiveTransport (
-- -- -- -- -- -- -- -- -- --        funExt Œª _ ‚Üí cong‚ÇÇ _,_ refl (cong‚ÇÇ _,_ refl (cong‚ÇÇ _,_ refl refl)))))

-- -- -- -- -- -- -- -- -- -- -- module sum (‚Ñì : Level) where

-- -- -- -- -- -- -- -- -- -- --   hSet‚â° : {A B : Type ‚Ñì} {isSetA : isSet A} {isSetB : isSet B} ‚Üí A ‚â° B ‚Üí
-- -- -- -- -- -- -- -- -- -- --               Path (hSet ‚Ñì) (A , isSetA) (B , isSetB)  
-- -- -- -- -- -- -- -- -- -- --   fst (hSet‚â° p i) = p i
-- -- -- -- -- -- -- -- -- -- --   snd (hSet‚â°  {isSetA = isSetA} {isSetB} p i) =
-- -- -- -- -- -- -- -- -- -- --     isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --      (Œª i ‚Üí isPropIsSet {A = p i})
-- -- -- -- -- -- -- -- -- -- --      isSetA
-- -- -- -- -- -- -- -- -- -- --      isSetB i

-- -- -- -- -- -- -- -- -- -- --   swapIso : {A B C : Type ‚Ñì} ‚Üí Iso (A √ó B √ó C) (B √ó A √ó C) 
-- -- -- -- -- -- -- -- -- -- --   Iso.fun swapIso (x , y , z) = y , x , z
-- -- -- -- -- -- -- -- -- -- --   Iso.inv swapIso (x , y , z) = y , x , z
-- -- -- -- -- -- -- -- -- -- --   Iso.rightInv swapIso b = refl
-- -- -- -- -- -- -- -- -- -- --   Iso.leftInv swapIso b = refl

-- -- -- -- -- -- -- -- -- -- --   diagIso : {A B C D : Type ‚Ñì} ‚Üí Iso (A √ó B √ó C √ó D) (C √ó B √ó A √ó D) 
-- -- -- -- -- -- -- -- -- -- --   Iso.fun diagIso (x , y , z , w) = z , y , x , w
-- -- -- -- -- -- -- -- -- -- --   Iso.inv diagIso (x , y , z , w) = z , y , x , w
-- -- -- -- -- -- -- -- -- -- --   Iso.rightInv diagIso b = refl
-- -- -- -- -- -- -- -- -- -- --   Iso.leftInv diagIso b = refl


-- -- -- -- -- -- -- -- -- -- --   zzR : RRec {A = hSet ‚Ñì} (isGroupoidHSet {‚Ñì})
-- -- -- -- -- -- -- -- -- -- --   RRec.[]* zzR = Unit* , isSetUnit*
-- -- -- -- -- -- -- -- -- -- --   RRec._‚à∑*_ zzR A HS = fst A √ó (fst HS) , isSet√ó (snd A) (snd HS)
-- -- -- -- -- -- -- -- -- -- --   RRec.comm* zzR A B HS = hSet‚â° (ua (isoToEquiv swapIso))
-- -- -- -- -- -- -- -- -- -- --   RRec.comm-inv* zzR A B HS =
-- -- -- -- -- -- -- -- -- -- --     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet)) (isInjectiveTransport refl)
-- -- -- -- -- -- -- -- -- -- --   RRec.hexDiag* zzR A B C HS =
-- -- -- -- -- -- -- -- -- -- --     hSet‚â° (ua (isoToEquiv diagIso))
-- -- -- -- -- -- -- -- -- -- --   RRec.hexU* zzR _ _ _ _ =
-- -- -- -- -- -- -- -- -- -- --        Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- -- --     (‚àô‚â°‚àô‚Üísquare _ _ _ _ (isInjectiveTransport refl))

-- -- -- -- -- -- -- -- -- -- --   RRec.hexL* zzR _ _ _ _ =
-- -- -- -- -- -- -- -- -- -- --        Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- -- --     (‚àô‚â°‚àô‚Üísquare _ _ _ _ (isInjectiveTransport (
-- -- -- -- -- -- -- -- -- -- --        funExt Œª _ ‚Üí cong‚ÇÇ _,_ refl (cong‚ÇÇ _,_ refl (cong‚ÇÇ _,_ refl refl)))))




-- -- -- -- -- -- -- -- -- -- --   zz : FMSet2 (hSet ‚Ñì) ‚Üí hSet ‚Ñì
-- -- -- -- -- -- -- -- -- -- --   zz = RRec.f zzR

-- -- -- -- -- -- -- -- -- -- --   -- uncR : RElim {A = hSet ‚Ñì} Œª S ‚Üí fst (zz S) ‚Üí FMSet2 (Œ£ (Type ‚Ñì) Œª X ‚Üí X) 
-- -- -- -- -- -- -- -- -- -- --   -- RElim.[]* uncR _ = []
-- -- -- -- -- -- -- -- -- -- --   -- (uncR RElim.‚à∑* x) {xs} x‚ÇÅ (a , r) = (_ , a) ‚à∑2 x‚ÇÅ r
-- -- -- -- -- -- -- -- -- -- --   -- RElim.comm* uncR x y b i =
-- -- -- -- -- -- -- -- -- -- --   --   (Œª b‚ÇÅ ‚Üí comm (fst x , fst (snd b‚ÇÅ)) (fst y , fst b‚ÇÅ) (b (snd (snd b‚ÇÅ))) i)
-- -- -- -- -- -- -- -- -- -- --   --     ‚àò ua-unglue (isoToEquiv swapIso) i
-- -- -- -- -- -- -- -- -- -- --   -- -- toPathP (funExt Œª z i ‚Üí comm {!!} {!!} {!!} i)
-- -- -- -- -- -- -- -- -- -- --   -- RElim.comm-inv* uncR x y b i j x‚ÇÅ =
-- -- -- -- -- -- -- -- -- -- --   --  let xx = {!!}
-- -- -- -- -- -- -- -- -- -- --   --  in comm-inv (fst x , {!fst x‚ÇÅ!}) {!!} {!!} i j
-- -- -- -- -- -- -- -- -- -- --   -- RElim.hexDiag* uncR = {!!}
-- -- -- -- -- -- -- -- -- -- --   -- RElim.hexU* uncR = {!!}
-- -- -- -- -- -- -- -- -- -- --   -- RElim.hexL* uncR = {!!}
-- -- -- -- -- -- -- -- -- -- --   -- RElim.trunc* uncR = {!!}

-- -- -- -- -- -- -- -- -- -- --   -- unc : ‚àÄ S ‚Üí fst (zz S) ‚Üí FMSet2 (Œ£ (Type ‚Ñì) Œª X ‚Üí X)
-- -- -- -- -- -- -- -- -- -- --   -- unc = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- module ‚äé' where
-- -- -- -- -- -- -- -- -- -- -- --   -- QL : Bool ‚Üí Type‚ÇÄ
-- -- -- -- -- -- -- -- -- -- -- --   -- QL false = ___+_++{!!}
-- -- -- -- -- -- -- -- -- -- -- --   -- QL true = {!!}

-- -- -- -- -- -- -- -- -- -- -- --   -- QR : Bool ‚Üí Type‚ÇÄ
-- -- -- -- -- -- -- -- -- -- -- --   -- QR x = {!!}

-- -- -- -- -- -- -- -- -- -- -- --   -- record _‚äé'_ {‚Ñì ‚Ñì'} (A : Type ‚Ñì)(B : Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where 
-- -- -- -- -- -- -- -- -- -- -- --   --   field
-- -- -- -- -- -- -- -- -- -- -- --   --     sw : Bool
-- -- -- -- -- -- -- -- -- -- -- --   --     ll : (Bool‚ÜíType sw ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --   --     rr : (Bool‚ÜíType (not sw) ‚Üí B)

-- -- -- -- -- -- -- -- -- -- -- --   _‚äé'_ : ‚àÄ {‚Ñì ‚Ñì'} (A : Type ‚Ñì)(B : Type ‚Ñì') ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
-- -- -- -- -- -- -- -- -- -- -- --   A ‚äé' B = Œ£ Bool Œª sw ‚Üí (Bool‚ÜíType sw ‚Üí A) √ó (Bool‚ÜíType (not sw) ‚Üí B)

-- -- -- -- -- -- -- -- -- -- -- --   ‚äé-swap-Path : ‚àÄ {‚Ñì ‚Ñì'} (A : Type ‚Ñì)(B : Type ‚Ñì') ‚Üí (A ‚äé' B) ‚â° (B ‚äé' A)
-- -- -- -- -- -- -- -- -- -- -- --   ‚äé-swap-Path A B i =
-- -- -- -- -- -- -- -- -- -- -- --    Œ£ (notEq i)
-- -- -- -- -- -- -- -- -- -- -- --      ((Œª b ‚Üí ua (Œ£-swap-‚âÉ {A = {!Bool‚ÜíType b ‚Üí A!}} {A' = Bool‚ÜíType b ‚Üí B}) i)
-- -- -- -- -- -- -- -- -- -- -- --        ‚àò ua-unglue notEquiv i)

-- -- -- -- -- -- -- -- -- -- -- --   -- ‚äé-swap-Iso : ‚àÄ {‚Ñì ‚Ñì'} (A : Type ‚Ñì)(B : Type ‚Ñì') ‚Üí Iso (A ‚äé' B) (B ‚äé' A)
-- -- -- -- -- -- -- -- -- -- -- --   -- Iso.fun (‚äé-swap-Iso A B) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --   -- Iso.inv (‚äé-swap-Iso A B) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --   -- Iso.rightInv (‚äé-swap-Iso A B) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --   -- Iso.leftInv (‚äé-swap-Iso A B) = {!!}


-- -- -- -- -- -- -- -- -- -- -- -- module ‚äé'2 where
-- -- -- -- -- -- -- -- -- -- -- --   -- QL : Bool ‚Üí Type‚ÇÄ
-- -- -- -- -- -- -- -- -- -- -- --   -- QL false = ___+_++{!!}
-- -- -- -- -- -- -- -- -- -- -- --   -- QL true = {!!}

-- -- -- -- -- -- -- -- -- -- -- --   -- QR : Bool ‚Üí Type‚ÇÄ
-- -- -- -- -- -- -- -- -- -- -- --   -- QR x = {!!}

-- -- -- -- -- -- -- -- -- -- -- --   record _‚äé'_ {‚Ñì ‚Ñì'} (A : Type ‚Ñì)(B : Type ‚Ñì') : Type (‚Ñì-max ‚Ñì ‚Ñì') where 
-- -- -- -- -- -- -- -- -- -- -- --     field
-- -- -- -- -- -- -- -- -- -- -- --       sw : Bool
-- -- -- -- -- -- -- -- -- -- -- --       ll : (Bool‚ÜíType sw ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --       rr : (Bool‚ÜíType (not sw) ‚Üí B)
