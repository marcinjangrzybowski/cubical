module Cubical.Experiments.HL.Glow.Abstract where


open import Cubical.Foundations.Everything
open import Cubical.Data.Bool renaming (Bool to ùüö) hiding (_‚â§_)
open import Cubical.Data.Nat
open import Cubical.Data.List
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe
open import Cubical.Data.Sum

open import Cubical.Data.Nat.Order.Recursive
open import Cubical.Relation.Nullary

open import Cubical.Experiments.HL.Platform.Base
open import Cubical.Experiments.HL.Glow.Base


module _
  (GExpr : Type)
  (Participant : Type) where


 data Effect : Type where
    depositE withdrawE : ‚Ñï ‚Üí Effect

 
 data GMonad : Type where
  action : Participant ‚Üí Effect ‚Üí GMonad
  require : GExpr ‚Üí GMonad
  expectPub : Participant ‚Üí GMonad
  bind : GMonad ‚Üí GMonad ‚Üí GMonad
  pure : GExpr ‚Üí GMonad
  branch : GExpr ‚Üí GMonad ‚Üí GMonad ‚Üí GMonad


 callMG : GMonad ‚Üí Type
 callMG (action x x‚ÇÅ) = {!!}
 callMG (require x) = {!!}
 callMG (expectPub x) = {!!}
 callMG (bind x x‚ÇÅ) = {!!}
 callMG (pure x) = {!!}
 callMG (branch x x‚ÇÅ x‚ÇÇ) = {!!}

 MonadicGlow : GlowLang
 GlowLang.Source MonadicGlow = GMonad
 GlowLang.Parameters MonadicGlow _ = GExpr
 GlowLang.Call MonadicGlow = callMG

 record MGlowState : Type where
  field
   publishedValues : List (Participant √ó GExpr)
   transaction : List (Participant √ó Effect)
   toExecute : GMonad

 MonadicGlowSemantics : GlowLang.AbstractSemantics MonadicGlow
 MonadicGlowSemantics = w
  where
  open GlowLang.AbstractSemantics
  w : GlowLang.AbstractSemantics MonadicGlow
  ConsensusState w = MGlowState
  semantics w = {!!}
