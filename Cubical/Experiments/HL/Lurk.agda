module Cubical.Experiments.HL.Lurk where

open import Cubical.Foundations.Everything
open import Cubical.Data.Bool renaming (Bool to ùüö) hiding (_‚â§_)
open import Cubical.Data.Nat
open import Cubical.Data.List
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe

open import Cubical.Data.Nat.Order.Recursive
open import Cubical.Relation.Nullary

open import Cubical.Experiments.HL.ZK

record LurkLanguage : Type‚ÇÅ where
 field
  LurkExpression : Type
  LurkEvaluator : LurkExpression ‚Üí LurkExpression
  -- LurkCompiler : LurkSource ‚Üí zk-SNARK

 record LurkCompiler (zks : zk-SNARK) : Type‚ÇÅ where
  open zk-SNARK zks
  field
   compile : LurkExpression ‚Üí Circuit
   translateInput : (le : LurkExpression) ‚Üí Input (compile le)
   translateOutput : ‚àÄ {le} ‚Üí Output (compile le) ‚Üí LurkExpression
   soundness : ‚àÄ (le : LurkExpression) ‚Üí
                  let c = compile le in
                  let i = translateInput le in
                  let o = computeOutput i in
                  let p = prove {c = c} i (generateProver c) in
                  LurkEvaluator le ‚â° translateOutput o
