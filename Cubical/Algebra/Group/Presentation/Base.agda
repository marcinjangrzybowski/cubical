{-# OPTIONS --safe --lossy-unification #-} 
module Cubical.Algebra.Group.Presentation.Base where

open import Cubical.Data.Sigma

open import Cubical.Foundations.Everything
-- open import Cubical.Foundations.Function
-- open import Cubical.Foundations.HLevels
-- open import Cubical.Foundations.Isomorphism
open import Cubical.Functions.FunExtEquiv

import Cubical.Data.Bool as ùüö
open import Cubical.Data.Bool using (false ; true) renaming (Bool to ùüö) 

open import Cubical.Algebra.Group.Base
open import Cubical.Algebra.Group.Properties

open import Cubical.HITs.EilenbergMacLane1

open import Cubical.HITs.GroupoidTruncation as GT


private
  variable
    ‚Ñì ‚Ñì' : Level

p‚àô'[p‚Åª‚àô'q]‚â°q : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí {x y : A} ‚Üí (p q : x ‚â° y) ‚Üí 
              p ‚àô' (sym p ‚àô' q) ‚â° q
p‚àô'[p‚Åª‚àô'q]‚â°q p q i j =
   hcomp ( Œª k ‚Üí 
          Œª { (j = i0) ‚Üí p (~ i ‚àß ~ k)
            ; (j = i1) ‚Üí q i1
            ; (i = i1) ‚Üí q j
            }) (compPath'-filler (sym p) q (~ i) j)


module hlp‚àô' {‚Ñì} {A : Type ‚Ñì} {a b c d e f : A}  {p : a ‚â° c} {q : b ‚â° d} {r : a ‚â° b} {s : c ‚â° d} {u : e ‚â° f} {v : d ‚â° e} {w : d ‚â° f} where

 sq : (S : Square r s p q) ‚Üí (Q : Square v w refl u)
         ‚Üí Square (p ‚àô' (s ‚àô' v))
                  (r ‚àô' (q ‚àô' w))
                 (Œª _ ‚Üí a)
                 u
 sq S Q  i = (Œª j' ‚Üí S (j' ‚àß ~ i) (j' ‚àß i))
           ‚àô' ((Œª j' ‚Üí S (j' ‚à® ~ i) (j' ‚à® i)) ‚àô' Q i)



module Pres (IxG : Type ‚Ñì) where

 data Fc : Type ‚Ñì where
  fc : ùüö ‚Üí IxG ‚Üí Fc
  cns : Fc

 mkFc‚â° : ‚àÄ {‚Ñìa} {A : Type ‚Ñìa} {base : A} (loop : IxG ‚Üí base ‚â° base)
        ‚Üí Fc ‚Üí base ‚â° base 
 mkFc‚â° loop (fc x x‚ÇÅ) = ùüö.if x then loop x‚ÇÅ else sym (loop x‚ÇÅ)
 mkFc‚â° loop cns = refl


 module FcCons {‚Ñì*} {XS : Type ‚Ñì*} (cons : (ùüö √ó IxG) ‚Üí XS ‚Üí XS) where
  fcCons : Fc ‚Üí XS ‚Üí XS
  fcCons (fc x x‚ÇÇ) x‚ÇÅ = cons (x , x‚ÇÇ) x‚ÇÅ
  fcCons cns x‚ÇÅ = x‚ÇÅ

 record Sq : Type ‚Ñì where
  constructor fc
  field
   fc‚ÇÄ‚Çã fc‚ÇÅ‚Çã fc‚Çã‚ÇÄ fc‚Çã‚ÇÅ : Fc

  module Faces' {A : Type (‚Ñì-max ‚Ñì ‚Ñì')} {base : A} (loop : IxG ‚Üí base ‚â° base) where
   pa : Fc ‚Üí base ‚â° base
   pa (fc x x‚ÇÅ) = ùüö.if x then loop x‚ÇÅ else sym (loop x‚ÇÅ)
   pa cns = refl

   pa‚ÇÄ‚Çã pa‚ÇÅ‚Çã pa‚Çã‚ÇÄ pa‚Çã‚ÇÅ : base ‚â° base
   pa‚ÇÄ‚Çã = pa fc‚ÇÄ‚Çã
   pa‚ÇÅ‚Çã = pa fc‚ÇÅ‚Çã
   pa‚Çã‚ÇÄ = pa fc‚Çã‚ÇÄ
   pa‚Çã‚ÇÅ = pa fc‚Çã‚ÇÅ

   SqTy : Type (‚Ñì-max ‚Ñì ‚Ñì')
   SqTy = Square pa‚ÇÄ‚Çã pa‚ÇÅ‚Çã pa‚Çã‚ÇÄ pa‚Çã‚ÇÅ
   
  module Faces {‚Ñìa} {A : Type ‚Ñìa} {base : A} (pa : Fc ‚Üí base ‚â° base) where


   pa‚ÇÄ‚Çã pa‚ÇÅ‚Çã pa‚Çã‚ÇÄ pa‚Çã‚ÇÅ : base ‚â° base
   pa‚ÇÄ‚Çã = pa fc‚ÇÄ‚Çã
   pa‚ÇÅ‚Çã = pa fc‚ÇÅ‚Çã
   pa‚Çã‚ÇÄ = pa fc‚Çã‚ÇÄ
   pa‚Çã‚ÇÅ = pa fc‚Çã‚ÇÅ

   SqTy : Type (‚Ñìa)
   SqTy = Square pa‚ÇÄ‚Çã pa‚ÇÅ‚Çã pa‚Çã‚ÇÄ pa‚Çã‚ÇÅ


 open Sq


   
 module _ {IxR : Type ‚Ñì'} (rels : IxR ‚Üí Sq) where

  

  data T : Type (‚Ñì-max ‚Ñì ‚Ñì') 

  infixr 5 _‚à∑_ _fc‚à∑_ 

  _fc‚à∑_ : Fc ‚Üí T ‚Üí T
 
  data T where
   Œµ : T
   _‚à∑_ : (ùüö √ó IxG) ‚Üí T ‚Üí T
   inv‚à∑ : ‚àÄ b ixG xs ‚Üí ((ùüö.not b) , ixG) ‚à∑ (b , ixG) ‚à∑ xs ‚â° xs
   rel : (ixR : IxR) ‚Üí ‚àÄ x ‚Üí
          fc‚Çã‚ÇÅ (rels ixR) fc‚à∑ fc‚ÇÄ‚Çã (rels ixR) fc‚à∑ x ‚â°
          fc‚ÇÅ‚Çã (rels ixR) fc‚à∑ fc‚Çã‚ÇÄ (rels ixR) fc‚à∑ x
   trunc : isSet T   

  _fc‚à∑_ = FcCons.fcCons _‚à∑_


  ‚à∑iso : IxG ‚Üí Iso T T
  Iso.fun (‚à∑iso x) = (true , x) ‚à∑_
  Iso.inv (‚à∑iso x) = (false , x) ‚à∑_
  Iso.rightInv (‚à∑iso x) = inv‚à∑ false x 
  Iso.leftInv (‚à∑iso x) = inv‚à∑ true x
  
  Œ∑ : IxG ‚Üí T
  Œ∑ = (_‚à∑ Œµ) ‚àò (true ,_)

  Œ∑‚Åª : IxG ‚Üí T
  Œ∑‚Åª = (_‚à∑ Œµ) ‚àò (false ,_)


  ‚à∑‚âÉ : IxG ‚Üí T ‚âÉ T
  ‚à∑‚âÉ = isoToEquiv ‚àò ‚à∑iso

  ‚à∑fcIso' : Fc ‚Üí Iso T T
  ‚à∑fcIso' (fc x x‚ÇÅ) = ùüö.if x then ‚à∑iso x‚ÇÅ else (invIso (‚à∑iso x‚ÇÅ)) 
  ‚à∑fcIso' cns = idIso

  notFC : Fc ‚Üí Fc
  notFC (fc x x‚ÇÅ) = fc (ùüö.not x) x‚ÇÅ
  notFC cns = cns

  invFC‚à∑ : ‚àÄ fc xs ‚Üí (notFC fc fc‚à∑ fc fc‚à∑ xs) ‚â° xs 
  invFC‚à∑ (fc x x‚ÇÅ) xs = inv‚à∑ _ _ _
  invFC‚à∑ cns xs = refl

  invFC‚à∑' : ‚àÄ fc xs ‚Üí (fc fc‚à∑ (notFC fc) fc‚à∑ xs) ‚â° xs 
  invFC‚à∑' (fc false x‚ÇÅ) xs = inv‚à∑ _ _ _
  invFC‚à∑' (fc true x‚ÇÅ) xs = inv‚à∑ _ _ _
  invFC‚à∑' cns xs = refl
  
  relInv : (ixR : IxR) ‚Üí 
         notFC (fc‚ÇÄ‚Çã (rels ixR)) fc‚à∑ notFC (fc‚Çã‚ÇÅ (rels ixR)) fc‚à∑ Œµ ‚â°
         notFC (fc‚Çã‚ÇÄ (rels ixR)) fc‚à∑ notFC (fc‚ÇÅ‚Çã (rels ixR)) fc‚à∑ Œµ
  relInv ixR = 
      sym (invFC‚à∑ (fc‚Çã‚ÇÄ (rels ixR)) _) ‚àô‚àô
       cong (notFC (fc‚Çã‚ÇÄ (rels ixR)) fc‚à∑_)
         (sym (invFC‚à∑ (fc‚ÇÅ‚Çã (rels ixR)) _))
       ‚àô‚àô cong ((notFC (fc‚Çã‚ÇÄ (rels ixR)) fc‚à∑_) ‚àò'
          (notFC (fc‚ÇÅ‚Çã (rels ixR)) fc‚à∑_)) (sym (rel ixR
            (notFC (fc‚ÇÄ‚Çã (rels ixR)) fc‚à∑ (notFC (fc‚Çã‚ÇÅ (rels ixR)) fc‚à∑ Œµ)))) ‚àô‚àô
       cong ((notFC (fc‚Çã‚ÇÄ (rels ixR)) fc‚à∑_)
            ‚àò' ((notFC (fc‚ÇÅ‚Çã (rels ixR)) fc‚à∑_)
              ‚àò' ((fc‚Çã‚ÇÅ (rels ixR)) fc‚à∑_)))
              (invFC‚à∑' (fc‚ÇÄ‚Çã (rels ixR)) _) ‚àô‚àô
         cong ((notFC (fc‚Çã‚ÇÄ (rels ixR)) fc‚à∑_)
            ‚àò' ((notFC (fc‚ÇÅ‚Çã (rels ixR)) fc‚à∑_)))
             (invFC‚à∑' (fc‚Çã‚ÇÅ (rels ixR)) _)
  
  ‚à∑fcIso : Fc ‚Üí Iso T T
  Iso.fun (‚à∑fcIso x) = x fc‚à∑_
  Iso.inv (‚à∑fcIso x) = notFC x fc‚à∑_
  Iso.rightInv (‚à∑fcIso (fc false x‚ÇÅ)) = inv‚à∑ _ _
  Iso.rightInv (‚à∑fcIso (fc true x‚ÇÅ)) = inv‚à∑ _ _
  Iso.rightInv (‚à∑fcIso cns) _ = refl
  Iso.leftInv (‚à∑fcIso (fc x x‚ÇÅ)) = inv‚à∑ _ _
  Iso.leftInv (‚à∑fcIso cns) _ = refl

 
  ‚à∑fc‚âÉ : Fc ‚Üí T ‚âÉ T
  ‚à∑fc‚âÉ = isoToEquiv ‚àò ‚à∑fcIso

  ‚à∑inv‚âÉP : ‚àÄ b ‚Üí (ixG : IxG) ‚Üí
            PathP (Œª i ‚Üí T ‚Üí ua (‚à∑fc‚âÉ (fc (ùüö.not b) ixG)) i)
               (Œª x ‚Üí (b , ixG) ‚à∑ x)
               (Œª x ‚Üí x) 
  ‚à∑inv‚âÉP b ixG = funExt (ua-gluePath _ ‚àò (inv‚à∑ b ixG))
 

  rel‚âÉ : ‚àÄ ixR ‚Üí ‚à∑fc‚âÉ (fc‚ÇÄ‚Çã (rels ixR)) ‚àô‚Çë ‚à∑fc‚âÉ (fc‚Çã‚ÇÅ (rels ixR))
               ‚â° ‚à∑fc‚âÉ (fc‚Çã‚ÇÄ (rels ixR)) ‚àô‚Çë ‚à∑fc‚âÉ (fc‚ÇÅ‚Çã (rels ixR))
  rel‚âÉ ixR  = equivEq (funExt (rel ixR))

  

  module _ (f : Sq) where
   module F‚âÉ = Faces f (ua ‚àò ‚à∑fc‚âÉ)

  module _ (f : Sq) where
   module F‚â° = Faces f (mkFc‚â° (ua ‚àò ‚à∑‚âÉ))

  mkFc‚â°uaLem : ‚àÄ fc ‚Üí  mkFc‚â° (ua ‚àò ‚à∑‚âÉ) fc ‚â° ua (‚à∑fc‚âÉ fc) 
  mkFc‚â°uaLem (fc false x‚ÇÅ) = sym (uaInvEquiv _) ‚àô cong ua (equivEq refl)
  mkFc‚â°uaLem (fc true x‚ÇÅ) = cong ua (equivEq refl)
  mkFc‚â°uaLem cns =  sym uaIdEquiv ‚àô cong ua (equivEq refl)

  rel‚â°Sq : ‚àÄ ixR ‚Üí F‚â°.SqTy (rels ixR)
  rel‚â°Sq ixR = flipSquare (compPath‚ÜíSquare
    (
       ((cong‚ÇÇ _‚àô_
         (mkFc‚â°uaLem (fc‚ÇÄ‚Çã (rels ixR)))
         (mkFc‚â°uaLem (fc‚Çã‚ÇÅ (rels ixR)))
         ‚àô sym (uaCompEquiv _ _))
        ‚óÅ cong ua (  (rel‚âÉ ixR)) ‚ñ∑
         (uaCompEquiv _ _ ‚àô
           cong‚ÇÇ _‚àô_
            (sym (mkFc‚â°uaLem (fc‚Çã‚ÇÄ (rels ixR))))
            (sym (mkFc‚â°uaLem (fc‚ÇÅ‚Çã (rels ixR))))
                     ))))
    
    -- {!!} ‚óÅ  {!!} ‚ñ∑ {!!} 
    -- Glue (ua (rel‚âÉ ixR i) j)
    -- -- Glue T {i ‚à® ~ i ‚à® j ‚à® ~ j}
    --   Œª { (i = i0) ‚Üí pa‚ÇÄ‚Çã j , {!!}
    --      ; (i = i1) ‚Üí pa‚ÇÅ‚Çã j , {!!}
    --      ; (j = i0) ‚Üí pa‚Çã‚ÇÄ i , {!!}
    --      ; (j = i1) ‚Üí pa‚Çã‚ÇÅ i , {!!}
    --      }
    where
    open F‚â° (rels ixR)

    
  module FcConsDep {‚Ñì*} {XS : T ‚Üí Type ‚Ñì*}
            (cons : ‚àÄ {xs} ‚Üí (x : (ùüö √ó IxG)) ‚Üí XS xs ‚Üí XS (x ‚à∑ xs)) where
   fcConsDep : ‚àÄ {xs} ‚Üí (x : Fc) ‚Üí XS xs ‚Üí XS (x fc‚à∑ xs)
   fcConsDep (fc x x‚ÇÇ) x‚ÇÅ = cons (x , x‚ÇÇ) x‚ÇÅ
   fcConsDep cns x‚ÇÅ = x‚ÇÅ


  record RecT {‚Ñì*} (A : Type ‚Ñì*) : Type (‚Ñì-max ‚Ñì* (‚Ñì-max ‚Ñì ‚Ñì')) where
   no-eta-equality
   field
    isSetA : isSet A
    ŒµA : A
    ‚à∑A : ùüö ‚Üí IxG ‚Üí A ‚Üí A
    inv‚à∑A : ‚àÄ b ixG a ‚Üí ‚à∑A (ùüö.not b) ixG (‚à∑A b ixG a) ‚â° a

   infixr 5 _fc‚à∑A_ 

   _fc‚à∑A_ : Fc ‚Üí A ‚Üí A
   _fc‚à∑A_ = FcCons.fcCons (uncurry ‚à∑A) 
   field
    relA : ‚àÄ ixR a ‚Üí
          fc‚Çã‚ÇÅ (rels ixR) fc‚à∑A fc‚ÇÄ‚Çã (rels ixR) fc‚à∑A a ‚â°
          fc‚ÇÅ‚Çã (rels ixR) fc‚à∑A fc‚Çã‚ÇÄ (rels ixR) fc‚à∑A a

   

   f : T ‚Üí A
   f Œµ = ŒµA
   f (x ‚à∑ x‚ÇÅ) = ‚à∑A (fst x) (snd x) (f x‚ÇÅ)
   f (inv‚à∑ b ixG x i) = inv‚à∑A b ixG (f x) i
   f (rel ixR x i) with fc‚Çã‚ÇÄ (rels ixR) | fc‚Çã‚ÇÅ (rels ixR) | fc‚ÇÄ‚Çã (rels ixR) | fc‚ÇÅ‚Çã (rels ixR) | relA ixR (f x)
   ... | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | fc x‚ÇÖ x‚ÇÜ | fc x‚Çá x‚Çà | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | fc x‚ÇÖ x‚ÇÜ | cns | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | cns | fc x‚ÇÖ x‚ÇÜ | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | cns | cns | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | cns | fc x‚ÇÉ x‚ÇÑ | fc x‚ÇÖ x‚ÇÜ | q = q i 
   ... | fc x‚ÇÅ x‚ÇÇ | cns | fc x‚ÇÉ x‚ÇÑ | cns | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | cns | cns | fc x‚ÇÉ x‚ÇÑ | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | cns | cns | cns | q = q i
   ... | cns | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | fc x‚ÇÖ x‚ÇÜ | q = q i
   ... | cns | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | cns | q = q i
   ... | cns | fc x‚ÇÅ x‚ÇÇ | cns | fc x‚ÇÉ x‚ÇÑ | q = q i
   ... | cns | fc x‚ÇÅ x‚ÇÇ | cns | cns | q = q i
   ... | cns | cns | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | q = q i
   ... | cns | cns | fc x‚ÇÅ x‚ÇÇ | cns | q = q i
   ... | cns | cns | cns | fc x‚ÇÅ x‚ÇÇ | q = q i
   ... | cns | cns | cns | cns | q = q i
   f (trunc _ _ p q i i‚ÇÅ) =
     isSetA _ _ (cong f p) (cong f q) i i‚ÇÅ


  record ElimT {‚Ñì*} (A : T ‚Üí Type ‚Ñì*) : Type (‚Ñì-max ‚Ñì* (‚Ñì-max ‚Ñì ‚Ñì')) where
   no-eta-equality
   field
    isSetA : ‚àÄ x ‚Üí isSet (A x)
    ŒµA : A Œµ
    ‚à∑A : ‚àÄ {xs} ‚Üí ‚àÄ b x ‚Üí A xs ‚Üí A ((b , x) ‚à∑ xs)

    inv‚à∑A : ‚àÄ b ixG ‚Üí ‚àÄ {xs} a ‚Üí
      PathP (Œª i ‚Üí A (inv‚à∑ b ixG xs i))
       (‚à∑A (ùüö.not b) ixG (‚à∑A b ixG a)) a

   infixr 5 _fc‚à∑A_ 

   _fc‚à∑A_ = FcConsDep.fcConsDep (Œª {xs} ‚Üí uncurry (‚à∑A {xs}))
   
   field
    relA : ‚àÄ ixR {xs} (a : A xs) ‚Üí
          PathP (Œª i ‚Üí A (rel ixR xs i ))
          (fc‚Çã‚ÇÅ (rels ixR) fc‚à∑A fc‚ÇÄ‚Çã (rels ixR) fc‚à∑A a)
          (fc‚ÇÅ‚Çã (rels ixR) fc‚à∑A fc‚Çã‚ÇÄ (rels ixR) fc‚à∑A a)

   

   f : ‚àÄ x ‚Üí A x
   f Œµ = ŒµA
   f (x ‚à∑ x‚ÇÅ) = ‚à∑A (fst x) (snd x) (f x‚ÇÅ)
   f (inv‚à∑ b ixG x i) = inv‚à∑A b ixG (f x) i
   f (rel ixR x i) with fc‚Çã‚ÇÄ (rels ixR) | fc‚Çã‚ÇÅ (rels ixR) | fc‚ÇÄ‚Çã (rels ixR) | fc‚ÇÅ‚Çã (rels ixR) | relA ixR (f x)
   ... | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | fc x‚ÇÖ x‚ÇÜ | fc x‚Çá x‚Çà | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | fc x‚ÇÖ x‚ÇÜ | cns | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | cns | fc x‚ÇÖ x‚ÇÜ | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | cns | cns | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | cns | fc x‚ÇÉ x‚ÇÑ | fc x‚ÇÖ x‚ÇÜ | q = q i 
   ... | fc x‚ÇÅ x‚ÇÇ | cns | fc x‚ÇÉ x‚ÇÑ | cns | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | cns | cns | fc x‚ÇÉ x‚ÇÑ | q = q i
   ... | fc x‚ÇÅ x‚ÇÇ | cns | cns | cns | q = q i
   ... | cns | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | fc x‚ÇÖ x‚ÇÜ | q = q i
   ... | cns | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | cns | q = q i
   ... | cns | fc x‚ÇÅ x‚ÇÇ | cns | fc x‚ÇÉ x‚ÇÑ | q = q i
   ... | cns | fc x‚ÇÅ x‚ÇÇ | cns | cns | q = q i
   ... | cns | cns | fc x‚ÇÅ x‚ÇÇ | fc x‚ÇÉ x‚ÇÑ | q = q i
   ... | cns | cns | fc x‚ÇÅ x‚ÇÇ | cns | q = q i
   ... | cns | cns | cns | fc x‚ÇÅ x‚ÇÇ | q = q i
   ... | cns | cns | cns | cns | q = q i
   f (trunc _ _ p q i i‚ÇÅ) =
     isSet‚ÜíSquareP (Œª i j ‚Üí isSetA (trunc _ _ p q i j))
       (cong f p) (cong f q) refl refl  i i‚ÇÅ 
     


  record ElimPropT {‚Ñì*} (A : T ‚Üí Type ‚Ñì*) : Type (‚Ñì-max ‚Ñì* (‚Ñì-max ‚Ñì ‚Ñì')) where
   no-eta-equality
   field
    isPropA : ‚àÄ x ‚Üí isProp (A x)
    ŒµA : A Œµ
    ‚à∑A : ‚àÄ {xs} ‚Üí ‚àÄ b x ‚Üí A xs ‚Üí A ((b , x) ‚à∑ xs)

   r : ElimT A
   ElimT.isSetA r = isProp‚ÜíisSet ‚àò isPropA
   ElimT.ŒµA r = ŒµA
   ElimT.‚à∑A r = ‚à∑A
   ElimT.inv‚à∑A r _ _ _ =
    isProp‚ÜíPathP (Œª i ‚Üí isPropA _)
     _ _
   ElimT.relA r _ _ =
    isProp‚ÜíPathP (Œª i ‚Üí isPropA _)
     _ _

   f : ‚àÄ x ‚Üí A x
   f = ElimT.f r
   
  ¬∑R : T ‚Üí RecT T
  RecT.isSetA (¬∑R y) = trunc
  RecT.ŒµA (¬∑R y) = y
  RecT.‚à∑A (¬∑R y) = curry _‚à∑_
  RecT.inv‚à∑A (¬∑R y) = inv‚à∑
  RecT.relA (¬∑R y) = rel
  
  _¬∑_ : T ‚Üí T ‚Üí T
  x ¬∑ y = RecT.f (¬∑R y) x


  ¬∑IdR : ‚àÄ x ‚Üí x ¬∑ Œµ ‚â° x
  ¬∑IdR = ElimPropT.f w
   where
   w : ElimPropT (Œª z ‚Üí (z ¬∑ Œµ) ‚â° z)
   ElimPropT.isPropA w _ = trunc _ _
   ElimPropT.ŒµA w = refl
   ElimPropT.‚à∑A w b x = cong ((b , x) ‚à∑_)
   
  ¬∑IdL : ‚àÄ x ‚Üí Œµ ¬∑ x ‚â° x
  ¬∑IdL _ = refl

  ¬∑assoc : (x y z : T) ‚Üí (x ¬∑ (y ¬∑ z)) ‚â° ((x ¬∑ y) ¬∑ z)
  ¬∑assoc = ElimPropT.f w
   where
   w : ElimPropT _
   ElimPropT.isPropA w _ = isPropŒ†2 Œª _ _ ‚Üí trunc _ _
   ElimPropT.ŒµA w _ _ = refl
   ElimPropT.‚à∑A w _ _ q = ElimPropT.f w'
    where
    w' : ElimPropT _
    ElimPropT.isPropA w' _ = isPropŒ† Œª _ ‚Üí trunc _ _
    ElimPropT.ŒµA w' _ = cong ((_ , _) ‚à∑_) (q _ _)
    ElimPropT.‚à∑A w' b x x‚ÇÅ x‚ÇÇ =
      cong ((_ , _) ‚à∑_) (q _ _)

  fc‚ÜíT : Fc ‚Üí T
  fc‚ÜíT (fc x x‚ÇÅ) = (x , x‚ÇÅ) ‚à∑ Œµ
  fc‚ÜíT cns = Œµ
  
  _fc‚à∑'_ : Fc ‚Üí T ‚Üí T
  x fc‚à∑' x‚ÇÅ = fc‚ÜíT x ¬∑ x‚ÇÅ

  fc‚à∑‚â°fc‚à∑' : ‚àÄ fc ‚Üí Path (T ‚Üí T) (Œª x ‚Üí fc fc‚à∑ x) (Œª x ‚Üí fc fc‚à∑' x)  
  fc‚à∑‚â°fc‚à∑' (fc x‚ÇÅ x‚ÇÇ) i x = (x‚ÇÅ , x‚ÇÇ) ‚à∑ x
  fc‚à∑‚â°fc‚à∑' cns i x = x

  invRLem : FcCons.fcCons (uncurry (Œª b x xs ‚Üí xs ¬∑ ((ùüö.not b , x) ‚à∑ Œµ)))
             ‚â° Œª fc t ‚Üí t ¬∑ fc‚ÜíT (notFC fc)
  invRLem i (fc x x‚ÇÇ) x‚ÇÅ = RecT.f (¬∑R ((ùüö.not x , x‚ÇÇ) ‚à∑ Œµ)) x‚ÇÅ
  invRLem i cns x‚ÇÅ = ¬∑IdR x‚ÇÅ (~ i)

  invRLem' : ‚àÄ x x' ‚Üí (fc‚ÜíT x ¬∑ fc‚ÜíT x')
      ‚â° x fc‚à∑ x' fc‚à∑ Œµ
  invRLem' (fc x x‚ÇÅ) (fc x‚ÇÇ x‚ÇÉ) = refl
  invRLem' (fc x x‚ÇÅ) cns = refl
  invRLem' cns (fc x x‚ÇÅ) = refl
  invRLem' cns cns = refl


  

  rel' : ‚àÄ ixR ‚Üí (fc‚ÜíT (notFC (fc‚ÇÄ‚Çã (rels ixR))) ¬∑
        fc‚ÜíT (notFC (fc‚Çã‚ÇÅ (rels ixR))))
       ‚â° (fc‚ÜíT (notFC (fc‚Çã‚ÇÄ (rels ixR))) ¬∑ fc‚ÜíT (notFC (fc‚ÇÅ‚Çã (rels ixR))))
  rel' ixR =
     invRLem' (notFC (fc‚ÇÄ‚Çã (rels ixR))) (notFC (fc‚Çã‚ÇÅ (rels ixR)))
      ‚àô‚àô  (relInv ixR) ‚àô‚àô
      sym (invRLem' ((notFC (fc‚Çã‚ÇÄ (rels ixR))))
           ((notFC (fc‚ÇÅ‚Çã (rels ixR)))))


  invR : RecT T
  RecT.isSetA invR = trunc
  RecT.ŒµA invR = Œµ
  RecT.‚à∑A invR b x xs = xs ¬∑ ((ùüö.not b , x) ‚à∑ Œµ)
  RecT.inv‚à∑A invR b ixG a  =
     (Œª i ‚Üí (¬∑assoc a ((ùüö.not b , ixG) ‚à∑ Œµ)
              ((ùüö.notnot b i , ixG) ‚à∑ Œµ)) (~ i)) ‚àô‚àô
      cong (a ¬∑_)
        (inv‚à∑ b ixG Œµ)
        ‚àô‚àô ¬∑IdR _
  RecT.relA invR ixR a =
    (Œª i ‚Üí
      invRLem i (fc‚Çã‚ÇÅ (rels ixR)) (invRLem i (fc‚ÇÄ‚Çã (rels ixR)) a)) 
     ‚àô‚àô sym (¬∑assoc a _ _) ‚àô‚àô
       cong (a ¬∑_) (rel' ixR)
       ‚àô‚àô (¬∑assoc a _ _) ‚àô‚àô
    (Œª i ‚Üí
      invRLem (~ i) (fc‚ÇÅ‚Çã (rels ixR)) (invRLem (~ i) (fc‚Çã‚ÇÄ (rels ixR)) a))

  inv : T ‚Üí T
  inv = RecT.f invR

  ¬∑InvR : ‚àÄ x ‚Üí x ¬∑ inv x ‚â° Œµ
  ¬∑InvR = ElimPropT.f w
   where
   w : ElimPropT _
   ElimPropT.isPropA w _ = trunc _ _
   ElimPropT.ŒµA w = refl
   ElimPropT.‚à∑A w {xs} b x  p = ¬∑assoc ((b , x) ‚à∑ xs ) (inv xs) _ ‚àô‚àô
    (Œª i ‚Üí ((ùüö.notnot b (~ i) , x) ‚à∑ p i) ¬∑ ((ùüö.not b , x) ‚à∑ Œµ)) ‚àô‚àô
     (inv‚à∑ (ùüö.not b) x Œµ) 

  ¬∑InvL : ‚àÄ x ‚Üí inv x ¬∑ x ‚â° Œµ
  ¬∑InvL = ElimPropT.f w
   where
   w : ElimPropT _
   ElimPropT.isPropA w _ = trunc _ _
   ElimPropT.ŒµA w = refl
   ElimPropT.‚à∑A w {xs} b x p =
      sym (¬∑assoc (inv xs) _ _) ‚àô‚àô
       cong ((inv xs) ¬∑_) (inv‚à∑ b x _) ‚àô‚àô p 


  GroupT : Group (‚Ñì-max ‚Ñì ‚Ñì')
  GroupT = makeGroup
    Œµ
    _¬∑_
    inv trunc
     ¬∑assoc ¬∑IdR ¬∑IdL ¬∑InvR ¬∑InvL



  data ùîπT : Type (‚Ñì-max ‚Ñì ‚Ñì')

  base' : ùîπT
  loop' : IxG ‚Üí base' ‚â° base'


  module _ (f : Sq) where
   open Faces f (mkFc‚â° loop') public
   
  data ùîπT where
   base : ùîπT
   loop : IxG ‚Üí base ‚â° base
   relSq : (r : IxR) ‚Üí
     Square {A = ùîπT}
       (pa‚ÇÄ‚Çã (rels r))
       (pa‚ÇÅ‚Çã (rels r))
       (pa‚Çã‚ÇÄ (rels r))
       (pa‚Çã‚ÇÅ (rels r))
   trunc : isGroupoid ùîπT

  base' = base
  loop' = loop


  record RecùîπT' {‚Ñìa} (A : Type ‚Ñìa) : Type (‚Ñì-max ‚Ñìa (‚Ñì-max ‚Ñì ‚Ñì')) where
   no-eta-equality
   field
    baseA : A
    loopA : IxG ‚Üí baseA ‚â° baseA

   fcA : Fc ‚Üí baseA ‚â° baseA
   fcA = mkFc‚â° {A = A} {base = baseA} loopA 
   field
    relSqA : (r : IxR) ‚Üí
      Square {A = A}
        (Faces.pa‚ÇÄ‚Çã (rels r) {base = baseA} fcA)
        (Faces.pa‚ÇÅ‚Çã (rels r) {base = baseA} fcA)
        (Faces.pa‚Çã‚ÇÄ (rels r) {base = baseA} fcA)
        (Faces.pa‚Çã‚ÇÅ (rels r) {base = baseA} fcA)


  record RecùîπT {‚Ñìa} (A : Type ‚Ñìa) : Type (‚Ñì-max ‚Ñìa (‚Ñì-max ‚Ñì ‚Ñì')) where
   no-eta-equality
   field
    isGroupoidA : isGroupoid A 
    baseA : A
    loopA : IxG ‚Üí baseA ‚â° baseA

   fcA : Fc ‚Üí baseA ‚â° baseA
   fcA = mkFc‚â° {A = A} {base = baseA} loopA 
   field
    relSqA : (r : IxR) ‚Üí
      Square {A = A}
        (Faces.pa‚ÇÄ‚Çã (rels r) {base = baseA} fcA)
        (Faces.pa‚ÇÅ‚Çã (rels r) {base = baseA} fcA)
        (Faces.pa‚Çã‚ÇÄ (rels r) {base = baseA} fcA)
        (Faces.pa‚Çã‚ÇÅ (rels r) {base = baseA} fcA)
                
   f : ùîπT ‚Üí A
   f base = baseA
   f (loop x i) = loopA x i
   -- f (loopSym b ixG i i‚ÇÅ) = loopSymA b ixG i i‚ÇÅ
   f (relSq ixR i j) with fc‚Çã‚ÇÄ (rels ixR) | fc‚Çã‚ÇÅ (rels ixR) | fc‚ÇÄ‚Çã (rels ixR) | fc‚ÇÅ‚Çã (rels ixR) | relSqA ixR
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | cns | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | cns | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | cns | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | cns | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | cns | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | cns | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | cns | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | cns | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | fc false x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | fc true x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | fc false x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | fc true x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | fc false x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | fc true x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | fc false x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | fc true x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | cns | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | cns | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | cns | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | cns | q = q i j
   ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | cns | q = q i j
   ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | cns | q = q i j
   ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | cns | q = q i j
   ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | cns | q = q i j
   ... | fc false x‚ÇÅ | cns | cns | fc false x‚ÇÉ | q = q i j
   ... | fc false x‚ÇÅ | cns | cns | fc true x‚ÇÉ | q = q i j
   ... | fc true x‚ÇÅ | cns | cns | fc false x‚ÇÉ | q = q i j
   ... | fc true x‚ÇÅ | cns | cns | fc true x‚ÇÉ | q = q i j
   ... | fc false x‚ÇÅ | cns | cns | cns | q = q i j
   ... | fc true x‚ÇÅ | cns | cns | cns | q = q i j
   ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | q = q i j
   ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | q = q i j
   ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | q = q i j
   ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | q = q i j
   ... | cns | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | q = q i j
   ... | cns | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | q = q i j
   ... | cns | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | q = q i j
   ... | cns | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | q = q i j
   ... | cns | fc false x‚ÇÅ | cns | cns | q = q i j
   ... | cns | fc true x‚ÇÅ | cns | cns | q = q i j
   ... | cns | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | q = q i j
   ... | cns | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | q = q i j
   ... | cns | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | q = q i j
   ... | cns | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | q = q i j
   ... | cns | cns | fc false x‚ÇÅ | cns | q = q i j
   ... | cns | cns | fc true x‚ÇÅ | cns | q = q i j
   ... | cns | cns | cns | fc false x‚ÇÅ | q = q i j
   ... | cns | cns | cns | fc true x‚ÇÅ | q = q i j
   ... | cns | cns | cns | cns | q = q i j

   f (trunc x y p q r s i i‚ÇÅ i‚ÇÇ) =
     isGroupoidA _ _ _ _
       (Œª i j ‚Üí f (r i j)) (Œª i j ‚Üí f (s i j))
       i i‚ÇÅ i‚ÇÇ 

  record ElimùîπT {‚Ñìa} (A : ùîπT ‚Üí Type ‚Ñìa) : Type (‚Ñì-max ‚Ñìa (‚Ñì-max ‚Ñì ‚Ñì')) where
   no-eta-equality
   field
    isGroupoidA : ‚àÄ x ‚Üí isGroupoid (A x) 
    baseA : A base
    loopA : ‚àÄ ixG ‚Üí PathP (Œª i ‚Üí A (loop ixG i) ) baseA baseA

   fcA : ‚àÄ fc ‚Üí PathP (Œª i ‚Üí A (mkFc‚â° loop fc i))
               baseA baseA
   fcA = Œª { (fc false x‚ÇÅ) ‚Üí  symP (loopA x‚ÇÅ)
            ; (fc true x‚ÇÅ) ‚Üí (loopA x‚ÇÅ)
            ; cns ‚Üí refl }
   
   field
    relSqA : (r : IxR) ‚Üí
      SquareP (Œª i j ‚Üí A (relSq r i j))
        (fcA (fc‚ÇÄ‚Çã (rels r)))
        (fcA (fc‚ÇÅ‚Çã (rels r)))
        (fcA (fc‚Çã‚ÇÄ (rels r)))
        (fcA (fc‚Çã‚ÇÅ (rels r)))
        
   f : ‚àÄ x ‚Üí A x
   f base = baseA
   f (loop x i) = loopA x i
   -- f (loopSym b ixG i i‚ÇÅ) = loopSymA b ixG i i‚ÇÅ
   f (relSq ixR i j) with fc‚Çã‚ÇÄ (rels ixR) | fc‚Çã‚ÇÅ (rels ixR) | fc‚ÇÄ‚Çã (rels ixR) | fc‚ÇÅ‚Çã (rels ixR) |  relSqA ixR
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | cns | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | cns | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | cns | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | cns | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | cns | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | cns | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | cns | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | cns | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | fc false x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | fc true x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | fc false x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | fc true x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | fc false x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | fc true x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | fc false x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | fc true x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | cns | q = q i j
   ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | cns | q = q i j
   ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | cns | q = q i j
   ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | cns | q = q i j
   ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | cns | q = q i j
   ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | cns | q = q i j
   ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | cns | q = q i j
   ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | cns | q = q i j
   ... | fc false x‚ÇÅ | cns | cns | fc false x‚ÇÉ | q = q i j
   ... | fc false x‚ÇÅ | cns | cns | fc true x‚ÇÉ | q = q i j
   ... | fc true x‚ÇÅ | cns | cns | fc false x‚ÇÉ | q = q i j
   ... | fc true x‚ÇÅ | cns | cns | fc true x‚ÇÉ | q = q i j
   ... | fc false x‚ÇÅ | cns | cns | cns | q = q i j
   ... | fc true x‚ÇÅ | cns | cns | cns | q = q i j
   ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | q = q i j
   ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | q = q i j
   ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | q = q i j
   ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | q = q i j
   ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | q = q i j
   ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | q = q i j
   ... | cns | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | q = q i j
   ... | cns | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | q = q i j
   ... | cns | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | q = q i j
   ... | cns | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | q = q i j
   ... | cns | fc false x‚ÇÅ | cns | cns | q = q i j
   ... | cns | fc true x‚ÇÅ | cns | cns | q = q i j
   ... | cns | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | q = q i j
   ... | cns | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | q = q i j
   ... | cns | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | q = q i j
   ... | cns | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | q = q i j
   ... | cns | cns | fc false x‚ÇÅ | cns | q = q i j
   ... | cns | cns | fc true x‚ÇÅ | cns | q = q i j
   ... | cns | cns | cns | fc false x‚ÇÅ | q = q i j
   ... | cns | cns | cns | fc true x‚ÇÅ | q = q i j
   ... | cns | cns | cns | cns | q = q i j

   f (trunc x y p q r s i i‚ÇÅ i‚ÇÇ) =
     isOfHLevel‚ÜíisOfHLevelDep 3 isGroupoidA
       (f x) (f y) (cong f p) (cong f q)
         (Œª i j ‚Üí f (r i j)) (Œª i j ‚Üí f (s i j))
        (trunc x y p q r s)
        i i‚ÇÅ i‚ÇÇ 


  record ElimSetùîπT {‚Ñìa} (A : ùîπT ‚Üí Type ‚Ñìa) : Type (‚Ñì-max ‚Ñìa (‚Ñì-max ‚Ñì ‚Ñì')) where
   no-eta-equality
   field
    isSetA : ‚àÄ x ‚Üí isSet (A x) 
    baseA : A base
    loopA : ‚àÄ ixG ‚Üí PathP (Œª i ‚Üí A (loop ixG i) ) baseA baseA

   r : ElimùîπT (Œª z ‚Üí A z)
   ElimùîπT.isGroupoidA r = isSet‚ÜíisGroupoid ‚àò isSetA
   ElimùîπT.baseA r = baseA
   ElimùîπT.loopA r = loopA
   ElimùîπT.relSqA r ixR =
     isSet‚ÜíSquareP (Œª _ _ ‚Üí isSetA _)
       _ _ _ _
               
   f : ‚àÄ x ‚Üí A x
   f = ElimùîπT.f r


  record ElimPropùîπT {‚Ñìa} (A : ùîπT ‚Üí Type ‚Ñìa) : Type (‚Ñì-max ‚Ñìa (‚Ñì-max ‚Ñì ‚Ñì')) where
   no-eta-equality
   field
    isPropA : ‚àÄ x ‚Üí isProp (A x) 
    baseA : A base

   r : ElimSetùîπT (Œª z ‚Üí A z)
   ElimSetùîπT.isSetA r = isProp‚ÜíisSet ‚àò isPropA
   ElimSetùîπT.baseA r = baseA
   ElimSetùîπT.loopA r _ = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _
               
   f : ‚àÄ x ‚Üí A x
   f = ElimSetùîπT.f r



  module ùîπT‚ÜíhSet {‚Ñì*} (f‚ÇÉ : ùîπT ‚Üí ‚à• Type ‚Ñì*  ‚à•‚ÇÉ) where

   isSet‚ÇÉ : ‚à• Type ‚Ñì*  ‚à•‚ÇÉ ‚Üí hProp ‚Ñì*
   isSet‚ÇÉ = GT.rec (isSet‚ÜíisGroupoid isSetHProp)
      (Œª x ‚Üí isSet x , isPropIsSet) 
      
   module _ (isSet‚ÇÉ-base : ‚ü® isSet‚ÇÉ (f‚ÇÉ base) ‚ü©) where
   
    p'r : ElimPropùîπT Œª bt ‚Üí ‚ü® isSet‚ÇÉ (f‚ÇÉ bt) ‚ü©  
    ElimPropùîπT.isPropA p'r = snd ‚àò isSet‚ÇÉ ‚àò f‚ÇÉ
    ElimPropùîπT.baseA p'r = isSet‚ÇÉ-base

    p' : ‚àÄ bt ‚Üí ‚ü® isSet‚ÇÉ (f‚ÇÉ bt) ‚ü©  
    p' = ElimPropùîπT.f p'r

    hSet‚ÇÉ : (x : ‚à• Type ‚Ñì* ‚à•‚ÇÉ) ‚Üí (fst (isSet‚ÇÉ x)) ‚Üí hSet ‚Ñì*
    fst (hSet‚ÇÉ ‚à£ x ‚à£‚ÇÉ x‚ÇÅ) = x
    snd (hSet‚ÇÉ ‚à£ x ‚à£‚ÇÉ x‚ÇÅ) = x‚ÇÅ
    hSet‚ÇÉ (squash‚ÇÉ x y p q r s i i‚ÇÅ i‚ÇÇ) =
      isOfHLevel‚ÜíisOfHLevelDep 3 {‚à• Type ‚Ñì* ‚à•‚ÇÉ}
        {Œª Ty‚ÇÉ ‚Üí ‚ü® isSet‚ÇÉ Ty‚ÇÉ ‚ü© ‚Üí hSet ‚Ñì*}
         (Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí isGroupoidHSet)
        _ _
         _ _ (Œª i‚ÇÉ i‚ÇÑ ‚Üí hSet‚ÇÉ (r i‚ÇÉ i‚ÇÑ)) (Œª i‚ÇÉ i‚ÇÑ ‚Üí hSet‚ÇÉ (s i‚ÇÉ i‚ÇÑ))
         (squash‚ÇÉ x y p q r s) i i‚ÇÅ i‚ÇÇ

    f' : ùîπT ‚Üí hSet ‚Ñì*
    f' bt =  hSet‚ÇÉ (f‚ÇÉ bt) (p' bt)


  CodeHR : RecùîπT (‚à• Type (‚Ñì-max ‚Ñì ‚Ñì') ‚à•‚ÇÉ)
  RecùîπT.isGroupoidA CodeHR = squash‚ÇÉ
  RecùîπT.baseA CodeHR = ‚à£ T ‚à£‚ÇÉ
  RecùîπT.loopA CodeHR = (cong ‚à£_‚à£‚ÇÉ) ‚àò ua ‚àò ‚à∑‚âÉ  
  RecùîπT.relSqA CodeHR ixR i j with fc‚Çã‚ÇÄ (rels ixR) | fc‚Çã‚ÇÅ (rels ixR) | fc‚ÇÄ‚Çã (rels ixR) | fc‚ÇÅ‚Çã (rels ixR) | (rel‚â°Sq ixR)
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc false x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | fc true x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc false x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | fc true x‚Çá | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | cns | fc false x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | cns | fc true x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | cns | fc false x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | cns | fc true x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc false x‚ÇÅ | cns | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | fc true x‚ÇÅ | cns | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | fc false x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | fc true x‚ÇÖ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | cns | fc false x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | cns | fc true x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | cns | fc false x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | cns | fc true x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc false x‚ÇÅ | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | fc true x‚ÇÅ | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | fc false x‚ÇÅ | fc false x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | fc false x‚ÇÅ | fc true x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | fc true x‚ÇÅ | fc false x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | fc true x‚ÇÅ | fc true x‚ÇÉ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | fc false x‚ÇÅ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | fc true x‚ÇÅ | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | cns | fc false x‚ÇÅ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | cns | fc true x‚ÇÅ | q = ‚à£ q i j ‚à£‚ÇÉ
  ... | cns | cns | cns | cns | q = ‚à£ q i j ‚à£‚ÇÉ
  


  CodeH‚ÇÉ : ùîπT ‚Üí ‚à• Type (‚Ñì-max ‚Ñì ‚Ñì') ‚à•‚ÇÉ
  
  CodeH‚ÇÉ = RecùîπT.f CodeHR

  CodeH : ùîπT ‚Üí hSet (‚Ñì-max ‚Ñì ‚Ñì')
  CodeH = ùîπT‚ÜíhSet.f' CodeH‚ÇÉ trunc

  Code : ùîπT ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
  Code = fst ‚àò CodeH

  encode : ‚àÄ x ‚Üí base ‚â° x ‚Üí Code x
  encode _ p = subst Code p Œµ


  dbr‚à∑ : ùüö ‚Üí IxG ‚Üí base ‚â° base ‚Üí base ‚â° base
  dbr‚à∑ x y = mkFc‚â° (sym ‚àò loop) (fc x y) ‚àô'_

  drb-lem : ‚àÄ x x' ‚Üí (a : (base ‚â° base)) ‚Üí
      FcCons.fcCons (uncurry dbr‚à∑)
      x
      (FcCons.fcCons (uncurry dbr‚à∑) x'
       a) ‚â°
        (sym (mkFc‚â° loop x) ‚àô' (sym (mkFc‚â° loop x') ‚àô' a ))
  drb-lem (fc false x‚ÇÅ) (fc false x‚ÇÉ) a = refl
  drb-lem (fc false x‚ÇÅ) (fc true x‚ÇÉ) a = refl
  drb-lem (fc true x‚ÇÅ) (fc false x‚ÇÉ) a = refl
  drb-lem (fc true x‚ÇÅ) (fc true x‚ÇÉ) a = refl
  drb-lem (fc false x‚ÇÅ) cns a =
    cong ((loop x‚ÇÅ) ‚àô'_) (doubleCompPath-filler _ _ _)
  drb-lem (fc true x‚ÇÅ) cns a =
   cong (sym (loop x‚ÇÅ) ‚àô'_) (doubleCompPath-filler refl a refl)
  drb-lem cns (fc false x‚ÇÅ) a = doubleCompPath-filler _ _ _
  drb-lem cns (fc true x‚ÇÅ) a = doubleCompPath-filler _ _ _
  drb-lem cns cns a =
   doubleCompPath-filler _ _ _ ‚àô doubleCompPath-filler _ _ _

  decode-baseR : RecT (base ‚â° base)
  RecT.isSetA decode-baseR = trunc _ _
  RecT.ŒµA decode-baseR = refl
  RecT.‚à∑A decode-baseR = dbr‚à∑
  RecT.inv‚à∑A decode-baseR false _ _ =
    p‚àô'[p‚Åª‚àô'q]‚â°q _ _ 
  RecT.inv‚à∑A decode-baseR true _ _ =
    p‚àô'[p‚Åª‚àô'q]‚â°q _ _
  RecT.relA decode-baseR ixR a =
     drb-lem (fc‚Çã‚ÇÅ (rels ixR)) (fc‚ÇÄ‚Çã (rels ixR)) a
      ‚àô‚àô (hlp‚àô'.sq ((Œª i i‚ÇÅ ‚Üí relSq ixR (~ i) (~ i‚ÇÅ))) Œª _ ‚Üí a) ‚àô‚àô
      sym (drb-lem (fc‚ÇÅ‚Çã (rels ixR)) (fc‚Çã‚ÇÄ (rels ixR)) a)
    
  decodeLoop : ‚àÄ ixG ‚Üí
      PathP (Œª i ‚Üí (Code (loop ixG i)) ‚Üí base ‚â° loop ixG i)
        (symP ‚àò (RecT.f decode-baseR))
        (symP ‚àò (RecT.f decode-baseR))
  decodeLoop ixG = ua‚Üí (ElimPropT.f w)
   where
   w : ElimPropT Œª z ‚Üí
            PathP (Œª v ‚Üí base ‚â° loop ixG v) ((symP ‚àò RecT.f decode-baseR) z)
            ((symP ‚àò RecT.f decode-baseR) (isoToEquiv (‚à∑iso ixG) .fst z))
   ElimPropT.isPropA w _ =
     isOfHLevelPathP' 1
      (trunc _ _)
       _ _
   ElimPropT.ŒµA w = doubleCompPath-filler _ _ _       
   ElimPropT.‚à∑A w b x x‚ÇÅ = doubleCompPath-filler _ _ _
     

  decode : (x : ùîπT) ‚Üí Code x ‚Üí base ‚â° x
  decode = ElimSetùîπT.f w
   where
   w : ElimSetùîπT (Œª z ‚Üí Code z ‚Üí base ‚â° z)
   ElimSetùîπT.isSetA w _ = isSet‚Üí (trunc _ _)
   ElimSetùîπT.baseA w = sym ‚àò RecT.f decode-baseR
   ElimSetùîπT.loopA w = decodeLoop 


  decode‚à∑true : ‚àÄ x xs ‚Üí decode base ((true , x) ‚à∑ xs)
                     ‚â° (decode base xs) ‚àô (loop x)
  decode‚à∑true x xs = refl
  

  decodeEncode : section (encode base) (decode base)
  decodeEncode = ElimPropT.f w
   where
   w : ElimPropT (Œª z ‚Üí encode base (decode base z) ‚â° z)
   ElimPropT.isPropA w _ = trunc _ _
   ElimPropT.ŒµA w = refl
   ElimPropT.‚à∑A w {xs} false x p =
         substComposite Code (decode base xs) (sym (loop x)) Œµ
        ‚àô cong ((false , x) ‚à∑_) (transportRefl _ ‚àô p)


   ElimPropT.‚à∑A w {xs} true x p =
     substComposite Code (decode base xs) (loop x) Œµ
        ‚àô transportRefl _ ‚àô cong ((true , x) ‚à∑_) (p)
    
  encodeDecode : ‚àÄ {x} ‚Üí retract (encode x) (decode x)
  encodeDecode = J (Œª (y : ùîπT) (p : base ‚â° y) ‚Üí
       decode y (encode y p) ‚â° p) refl

  encodeDecodeIso : Iso T (base ‚â° base)
  Iso.fun encodeDecodeIso = decode base
  Iso.inv encodeDecodeIso = encode base
  Iso.rightInv encodeDecodeIso = encodeDecode {base}
  Iso.leftInv encodeDecodeIso = decodeEncode
