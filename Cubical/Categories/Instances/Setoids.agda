{-# OPTIONS --safe #-}

module Cubical.Categories.Instances.Setoids where

open import Cubical.Foundations.Prelude
open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Function renaming (_‚àò_ to _‚àòf_)
open import Cubical.Data.Unit
open import Cubical.Data.Sigma
open import Cubical.Categories.Category
open import Cubical.Categories.Functor
open import Cubical.Categories.NaturalTransformation

open import Cubical.Relation.Binary

open import Cubical.Categories.Instances.Sets

open import Cubical.Categories.Limits

open import Cubical.HITs.SetQuotients renaming ([_] to [_]/)

import Cubical.HITs.PropositionalTruncation as PT


open import Cubical.Categories.Adjoint

open import Cubical.Data.Unit

open import Cubical.Categories.NaturalTransformation

open Category

record Setoid (‚Ñì ‚ÑìR : Level) : Type (‚Ñì-suc (‚Ñì-max ‚Ñì ‚ÑìR)) where
  constructor st
  field
    Carrier : Type ‚Ñì
    rel : EquivSetRel Carrier ‚ÑìR
    is-set : isSet Carrier
    

open Setoid

record SetoidMor {‚Ñì ‚ÑìR ‚Ñì' ‚ÑìR' : Level} (A : Setoid ‚Ñì ‚ÑìR) (B : Setoid ‚Ñì' ‚ÑìR') :
          Type (‚Ñì-max (‚Ñì-max ‚Ñì ‚ÑìR) (‚Ñì-max ‚Ñì' ‚ÑìR')) where
  constructor sm
  field
    f : Carrier A ‚Üí Carrier B
    r : ‚àÄ a a' ‚Üí fst (fst (rel A)) a a' ‚Üí fst (fst (rel B)) (f a) (f a') 

compSetoidMor : {‚Ñì ‚ÑìR ‚Ñì' ‚ÑìR' ‚Ñì'' ‚ÑìR'' : Level} {A : Setoid ‚Ñì ‚ÑìR} {B : Setoid ‚Ñì' ‚ÑìR'}
                     {C : Setoid ‚Ñì'' ‚ÑìR''} ‚Üí
                      SetoidMor  A B ‚Üí SetoidMor B C ‚Üí SetoidMor A C
SetoidMor.f (compSetoidMor (sm f r) (sm f‚ÇÅ r‚ÇÅ)) = f‚ÇÅ ‚àòf f
SetoidMor.r (compSetoidMor (sm f r) (sm f‚ÇÅ r‚ÇÅ)) _ _ = (r‚ÇÅ _ _) ‚àòf (r _ _)

module _ {‚Ñì : Level} where
  SETOID : Category (‚Ñì-suc ‚Ñì) ‚Ñì
  ob SETOID = Setoid ‚Ñì ‚Ñì
  Hom[_,_] SETOID = SetoidMor
  id SETOID = sm (idfun _) (Œª _ _ ‚Üí idfun _)
  _‚ãÜ_ SETOID = compSetoidMor
  ‚ãÜIdL SETOID f = refl 
  ‚ãÜIdR SETOID f = refl
  ‚ãÜAssoc SETOID f g h = refl
  isSetHom SETOID = {!!}


-- record Setoid' (‚ÑìV ‚ÑìE : Level) : Type (‚Ñì-suc (‚Ñì-max ‚ÑìV ‚ÑìE)) where
--   constructor st
--   field
--     V : hSet ‚ÑìV
--     E : hSet ‚ÑìE
--     s t : fst E ‚Üí fst V
--     reflE : fst V ‚Üí fst E
--     symE : fst E ‚Üí fst E
--     reflS : ‚àÄ a ‚Üí s (reflE a) ‚â° a
--     reflT : ‚àÄ a ‚Üí t (reflE a) ‚â° a
--     symST : ‚àÄ e ‚Üí (s e) ‚â° t (symE e)
--     symTS : ‚àÄ e ‚Üí (s e) ‚â° t (symE e)
--     -- z : 
--     -- rel : EquivSetRel Carrier ‚ÑìR
--     -- is-set : isSet Carrier
    






-- private
--   variable
--     ‚Ñì ‚Ñì' : Level

  open Functor

  
  idRel : ((A , _) : hSet ‚Ñì) ‚Üí EquivSetRel A ‚Ñì
  fst (fst (idRel A)) = _‚â°_
  snd (fst (idRel A)) a b = isProp‚ÜíisSet (snd A _ _)
  BinaryRelation.isEquivRel.reflexive (snd (idRel A)) a = refl
  BinaryRelation.isEquivRel.symmetric (snd (idRel A)) a b = sym
  BinaryRelation.isEquivRel.transitive (snd (idRel A)) a b c = _‚àô_

  fullRel : ((A , _) : hSet ‚Ñì) ‚Üí EquivSetRel A ‚Ñì
  fst (fst (fullRel _)) = Œª _ _ ‚Üí Unit*
  snd (fst (fullRel _)) = Œª _ _ ‚Üí isSetUnit*
  snd (fullRel _) = BinaryRelation.equivRel
   (Œª a ‚Üí tt*) (Œª a b _ ‚Üí tt*) (Œª a b c _ _ ‚Üí tt*)

  -- fullRel' : (A : hSet ‚Ñì) ‚Üí EquivSetRel (Unit* {‚Ñì = ‚Ñì}) ‚Ñì
  -- fst (fst (fullRel' A)) = Œª _ _ ‚Üí fst A
  -- snd (fst (fullRel' A)) = Œª _ _ ‚Üí snd A
  -- BinaryRelation.isEquivRel.reflexive (snd (fullRel' A)) = {!!}
  -- BinaryRelation.isEquivRel.symmetric (snd (fullRel' A)) = {!!}
  -- BinaryRelation.isEquivRel.transitive (snd (fullRel' A)) = {!!}

  Disc : Functor (SET ‚Ñì) SETOID
  F-ob Disc x = st (fst x) (idRel x) (snd x)
  F-hom Disc x = sm x Œª _ _ ‚Üí cong _
  F-id Disc = refl
  F-seq Disc f g = refl

  Codisc : Functor (SET ‚Ñì) SETOID
  F-ob Codisc x = st (fst x) (fullRel x) (snd x)
  F-hom Codisc x = sm x (Œª a a' _ ‚Üí tt*)
  F-id Codisc = refl
  F-seq Codisc f g = cong‚ÇÇ sm refl Œª _ _ _ _ ‚Üí tt* 

  -- Codisc' : Functor (SET ‚Ñì) SETOID
  -- F-ob Codisc' x = st ({!!} ‚Üí fst x) ((fullRel ((_ ‚Üí fst x) , {!!}))) {!!}
  -- F-hom Codisc' = {!!}
  -- F-id Codisc' = {!!}
  -- F-seq Codisc' = {!!}

  Œ† : Functor SETOID (SET ‚Ñì) 
  F-ob Œ† x = ( Carrier x / fst (fst (rel x))) , squash/
  F-hom Œ† (sm f r) = rec squash/ ([_]/ ‚àòf f) Œª _ _ ‚Üí eq/ _ _ ‚àòf r _ _
  F-id Œ† {x = x} = funExt (elimProp (Œª _ ‚Üí squash/ _ _) Œª _ ‚Üí refl)
  F-seq Œ† {x} {y} {z} f g = funExt (elimProp (Œª _ ‚Üí squash/ _ _) Œª _ ‚Üí refl)

  Œì : Functor SETOID (SET ‚Ñì) 
  F-ob Œì x = Carrier x , is-set x
  F-hom Œì (sm f _) = f
  F-id Œì = refl
  F-seq Œì _ _ = refl

  Œì' : Functor SETOID (SET ‚Ñì) 
  F-ob Œì' x = Œ£ (Carrier x) (Œª c ‚Üí fst (fst (rel x)) c c ) , isSetŒ£ (is-set x) Œª _ ‚Üí snd (fst (rel x)) _ _
  F-hom Œì' (sm f r) (c , e) = (f c) , r c c e
  F-id Œì' = refl
  F-seq Œì' _ _ = refl


  open Cubical.Categories.Adjoint.NaturalBijection --UnitCounit

  module _ (C : Setoid ‚Ñì ‚Ñì) (D : hSet ‚Ñì) where
    aI : Iso (SET ‚Ñì [ Œ† ‚üÖ C ‚üÜ , D ]) ( SETOID [ C , Disc ‚üÖ D ‚üÜ ])
    Iso.fun aI f = sm _ Œª _ _ ‚Üí cong f ‚àòf eq/ _ _
    Iso.inv aI _ = rec (snd D) _ _
    Iso.rightInv aI b = refl
    Iso.leftInv aI a = funExt (elimProp (Œª _ ‚Üí snd D _ _) Œª _ ‚Üí refl)
    
  Œ†‚ä£Disc : Œ† ‚ä£ Disc
  _‚ä£_.adjIso Œ†‚ä£Disc {c} {d} = aI c d
  _‚ä£_.adjNatInD Œ†‚ä£Disc f k = refl
  _‚ä£_.adjNatInC Œ†‚ä£Disc {d = d} g h = funExt (elimProp (Œª _ ‚Üí snd d _ _) Œª _ ‚Üí refl)


  module _ (C : hSet ‚Ñì) (D : Setoid ‚Ñì ‚Ñì)  where
    open BinaryRelation.isEquivRel ((snd (D .rel)))
    
    aI'' : Iso (SETOID [ Disc ‚üÖ C ‚üÜ , D ]) (SET ‚Ñì [ C , Œì' ‚üÖ D ‚üÜ ])
    Iso.fun aI'' (sm f r) c = (f c) , r c c refl
    Iso.inv aI'' x = sm ( fst ‚àòf x) Œª a a' x‚ÇÅ ‚Üí  subst (fst (D .rel) .fst (fst (x a))) (cong (fst ‚àòf x) x‚ÇÅ) (snd (x a)) 
    Iso.rightInv aI'' _ = funExt Œª _ ‚Üí Œ£PathP (refl , (transportRefl _))
    Iso.leftInv aI'' (sm f r) = congP‚ÇÇ (Œª _ ‚Üí sm) refl
     (funExt Œª a  ‚Üí funExt Œª a' ‚Üí funExt
       (J (Œª a' (x : a ‚â° a') ‚Üí
      subst (Œª zz ‚Üí fst (D .rel) .fst (f a) (f zz)) x
      (r a a (Œª _ ‚Üí a))
      ‚â° r a a' x) (transportRefl _))) 
     

  Disc‚ä£Œì' : Disc ‚ä£ Œì'
  _‚ä£_.adjIso Disc‚ä£Œì' {c} {d} = aI'' c d
  _‚ä£_.adjNatInD Disc‚ä£Œì' f k = refl
  _‚ä£_.adjNatInC Disc‚ä£Œì' g h = refl


  module _ (C : Setoid ‚Ñì ‚Ñì) (D : hSet ‚Ñì)  where
    open BinaryRelation.isEquivRel ((snd (C .rel)))
    
    aI''' : Iso (SET ‚Ñì [ Œì ‚üÖ C ‚üÜ , D ]) (SETOID [ C , Codisc ‚üÖ D ‚üÜ ])
    Iso.fun aI''' x = sm x (Œª a a' x‚ÇÅ ‚Üí tt*)
    Iso.inv aI''' (sm f r) = f
    Iso.rightInv aI''' b = refl
    Iso.leftInv aI''' a = refl

  Œì‚ä£Codisc : Œì ‚ä£ Codisc 
  _‚ä£_.adjIso Œì‚ä£Codisc {c} {d} = aI''' c d 
  _‚ä£_.adjNatInD Œì‚ä£Codisc _ _ = refl
  _‚ä£_.adjNatInC Œì‚ä£Codisc _ _ = refl


--   module _ (C : hSet ‚Ñì) (D : Setoid ‚Ñì ‚Ñì)  where
--     open BinaryRelation.isEquivRel ((snd (D .rel)))
    
--     aI' : Iso (SETOID [ Disc ‚üÖ C ‚üÜ , D ]) (SET ‚Ñì [ C , Œì ‚üÖ D ‚üÜ ])
--     Iso.fun aI' (sm f r) = f
--     Iso.inv aI' x = sm x Œª a a' x‚ÇÅ ‚Üí subst (fst (D .rel) .fst (x a)) (cong x x‚ÇÅ) (reflexive (x a))
--     Iso.rightInv aI' _ = refl
--     Iso.leftInv aI' (sm f r) = 
--      congP‚ÇÇ (Œª _ ‚Üí sm) refl
--       (funExt Œª a  ‚Üí funExt Œª a' ‚Üí funExt 
--         (J (Œª a' x ‚Üí
--                 subst (fst (D .rel) .fst (f a))
--                (cong f x) (reflexive (f a))
--                ‚â° r a a' x)
--           (transportRefl _ ‚àô {!!})))

--   Disc‚ä£Œì : Disc ‚ä£ Œì
--   _‚ä£_.adjIso Disc‚ä£Œì {c} {d} = {!!}
--   _‚ä£_.adjNatInD Disc‚ä£Œì = {!!}
--   _‚ä£_.adjNatInC Disc‚ä£Œì = {!!}


--   -- l1 : NatTrans ùüô‚ü® SETOID ‚ü© (funcComp Disc Œ†)
--   -- SetoidMor.f (NatTrans.N-ob l1 x) = [_]
--   -- SetoidMor.r (NatTrans.N-ob l1 x) a a'  = eq/ _ _
--   -- NatTrans.N-hom l1 f = cong‚ÇÇ sm refl refl

--   -- Œ†‚ä£Disc : Œ† ‚ä£ Disc
--   -- _‚ä£_.Œ∑ Œ†‚ä£Disc = natTrans (Œª _ ‚Üí sm [_] eq/) Œª _ ‚Üí refl
--   -- _‚ä£_.Œµ Œ†‚ä£Disc =
--   --   natTrans (Œª x ‚Üí rec (snd x) (idfun _) Œª _ _ ‚Üí idfun _ )
--   --             Œª {_} {y} _ ‚Üí funExt (elimProp (Œª _ ‚Üí snd y _ _) Œª _ ‚Üí refl )
--   -- NatTrans.N-ob (_‚ä£_.Œî‚ÇÅ Œ†‚ä£Disc i) = {!!}
--   -- NatTrans.N-hom (_‚ä£_.Œî‚ÇÅ Œ†‚ä£Disc i) = {!!}
--   --   -- cong‚ÇÇ natTrans (funExt (Œª x ‚Üí funExt Œª y ‚Üí {!!})) {!!}
--   -- _‚ä£_.Œî‚ÇÇ Œ†‚ä£Disc = {!!}
    


-- -- -- -- Hom functors
-- -- -- _[-,_] : (C : Category ‚Ñì ‚Ñì') ‚Üí (c : C .ob) ‚Üí Functor (C ^op) (SET ‚Ñì')
-- -- -- (C [-, c ]) .F-ob x    = (C [ x , c ]) , C .isSetHom
-- -- -- (C [-, c ]) .F-hom f k = f ‚ãÜ‚ü® C ‚ü© k
-- -- -- (C [-, c ]) .F-id      = funExt Œª _ ‚Üí C .‚ãÜIdL _
-- -- -- (C [-, c ]) .F-seq _ _ = funExt Œª _ ‚Üí C .‚ãÜAssoc _ _ _

-- -- -- _[_,-] : (C : Category ‚Ñì ‚Ñì') ‚Üí (c : C .ob)‚Üí Functor C (SET ‚Ñì')
-- -- -- (C [ c ,-]) .F-ob x    = (C [ c , x ]) , C .isSetHom
-- -- -- (C [ c ,-]) .F-hom f k = k ‚ãÜ‚ü® C ‚ü© f
-- -- -- (C [ c ,-]) .F-id      = funExt Œª _ ‚Üí C .‚ãÜIdR _
-- -- -- (C [ c ,-]) .F-seq _ _ = funExt Œª _ ‚Üí sym (C .‚ãÜAssoc _ _ _)

-- -- -- module _ {C : Category ‚Ñì ‚Ñì'} {F : Functor C (SET ‚Ñì')} where
-- -- --   open NatTrans

-- -- --   -- natural transformations by pre/post composition
-- -- --   preComp : {x y : C .ob}
-- -- --           ‚Üí (f : C [ x , y ])
-- -- --           ‚Üí C [ x ,-] ‚áí F
-- -- --           ‚Üí C [ y ,-] ‚áí F
-- -- --   preComp f Œ± .N-ob c k = (Œ± ‚ü¶ c ‚üß) (f ‚ãÜ‚ü® C ‚ü© k)
-- -- --   preComp f Œ± .N-hom {x = c} {d} k
-- -- --     = (Œª l ‚Üí (Œ± ‚ü¶ d ‚üß) (f ‚ãÜ‚ü® C ‚ü© (l ‚ãÜ‚ü® C ‚ü© k)))
-- -- --     ‚â°[ i ]‚ü® (Œª l ‚Üí (Œ± ‚ü¶ d ‚üß) (‚ãÜAssoc C f l k (~ i))) ‚ü©
-- -- --       (Œª l ‚Üí (Œ± ‚ü¶ d ‚üß) (f ‚ãÜ‚ü® C ‚ü© l ‚ãÜ‚ü® C ‚ü© k))
-- -- --     ‚â°[ i ]‚ü® (Œª l ‚Üí (Œ± .N-hom k) i (f ‚ãÜ‚ü® C ‚ü© l)) ‚ü©
-- -- --       (Œª l ‚Üí (F ‚ü™ k ‚ü´) ((Œ± ‚ü¶ c ‚üß) (f ‚ãÜ‚ü® C ‚ü© l)))
-- -- --     ‚àé

-- -- -- -- properties
-- -- -- -- TODO: move to own file
-- -- -- open isIso renaming (inv to cInv)
-- -- -- open Iso

-- -- -- module _ {A B : (SET ‚Ñì) .ob } where

-- -- --   Iso‚ÜíCatIso : Iso (fst A) (fst B)
-- -- --              ‚Üí CatIso (SET ‚Ñì) A B
-- -- --   Iso‚ÜíCatIso is .fst = is .fun
-- -- --   Iso‚ÜíCatIso is .snd .cInv = is .inv
-- -- --   Iso‚ÜíCatIso is .snd .sec = funExt Œª b ‚Üí is .rightInv b -- is .rightInv
-- -- --   Iso‚ÜíCatIso is .snd .ret = funExt Œª b ‚Üí is .leftInv b -- is .rightInv

-- -- --   CatIso‚ÜíIso : CatIso (SET ‚Ñì) A B
-- -- --              ‚Üí Iso (fst A) (fst B)
-- -- --   CatIso‚ÜíIso cis .fun = cis .fst
-- -- --   CatIso‚ÜíIso cis .inv = cis .snd .cInv
-- -- --   CatIso‚ÜíIso cis .rightInv = funExt‚Åª Œª b ‚Üí cis .snd .sec b
-- -- --   CatIso‚ÜíIso cis .leftInv  = funExt‚Åª Œª b ‚Üí cis .snd .ret b


-- -- --   Iso-Iso-CatIso : Iso (Iso (fst A) (fst B)) (CatIso (SET ‚Ñì) A B)
-- -- --   fun Iso-Iso-CatIso = Iso‚ÜíCatIso
-- -- --   inv Iso-Iso-CatIso = CatIso‚ÜíIso
-- -- --   rightInv Iso-Iso-CatIso b = refl
-- -- --   fun (leftInv Iso-Iso-CatIso a i) = fun a
-- -- --   inv (leftInv Iso-Iso-CatIso a i) = inv a
-- -- --   rightInv (leftInv Iso-Iso-CatIso a i) = rightInv a
-- -- --   leftInv (leftInv Iso-Iso-CatIso a i) = leftInv a

-- -- --   Iso-CatIso-‚â° : Iso (CatIso (SET ‚Ñì) A B) (A ‚â° B)
-- -- --   Iso-CatIso-‚â° = compIso (invIso Iso-Iso-CatIso) (hSet-Iso-Iso-‚â° _ _)

-- -- -- -- SET is univalent

-- -- -- isUnivalentSET : isUnivalent {‚Ñì' = ‚Ñì} (SET _)
-- -- -- isUnivalent.univ isUnivalentSET (A , isSet-A) (B , isSet-B)  =
-- -- --    precomposesToId‚ÜíEquiv
-- -- --       pathToIso _ (funExt w) (isoToIsEquiv Iso-CatIso-‚â°)
-- -- --    where
-- -- --      w : _
-- -- --      w ci =
-- -- --        invEq
-- -- --          (congEquiv (isoToEquiv (invIso Iso-Iso-CatIso)))
-- -- --          (SetsIso‚â°-ext isSet-A isSet-B
-- -- --             (Œª x i ‚Üí transp (Œª _ ‚Üí B) i (ci .fst (transp (Œª _ ‚Üí A) i x)))
-- -- --             (Œª x i ‚Üí transp (Œª _ ‚Üí A) i (ci .snd .cInv (transp (Œª _ ‚Üí B) i x))))

-- -- -- -- SET is complete

-- -- -- open LimCone
-- -- -- open Cone

-- -- -- completeSET : ‚àÄ {‚ÑìJ ‚ÑìJ'} ‚Üí Limits {‚ÑìJ} {‚ÑìJ'} (SET (‚Ñì-max ‚ÑìJ ‚ÑìJ'))
-- -- -- lim (completeSET J D) = Cone D (Unit* , isOfHLevelLift 2 isSetUnit) , isSetCone D _
-- -- -- coneOut (limCone (completeSET J D)) j e = coneOut e j tt*
-- -- -- coneOutCommutes (limCone (completeSET J D)) j i e = coneOutCommutes e j i tt*
-- -- -- univProp (completeSET J D) c cc =
-- -- --   uniqueExists
-- -- --     (Œª x ‚Üí cone (Œª v _ ‚Üí coneOut cc v x) (Œª e i _ ‚Üí coneOutCommutes cc e i x))
-- -- --     (Œª _ ‚Üí funExt (Œª _ ‚Üí refl))
-- -- --     (Œª x ‚Üí isPropIsConeMor cc (limCone (completeSET J D)) x)
-- -- --     (Œª x hx ‚Üí funExt (Œª d ‚Üí cone‚â° Œª u ‚Üí funExt (Œª _ ‚Üí sym (funExt‚Åª (hx u) d))))
