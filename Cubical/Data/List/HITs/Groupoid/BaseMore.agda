{-# OPTIONS --safe --lossy-unification #-}

module Cubical.Data.List.HITs.Groupoid.BaseMore where

open import Cubical.Foundations.Everything
open import Cubical.Foundations.CartesianKanOps

open import Cubical.Data.Nat
open import Cubical.Data.Nat.Order
open import Cubical.Data.Sum
open import Cubical.Data.Unit
open import Cubical.Data.Bool
open import Cubical.Data.Sigma hiding (Œ£-assoc-‚âÉ)
open import Cubical.Data.Maybe as Mb
open import Cubical.Data.Empty renaming (elim to ‚ä•elim ; rec to ‚ä•rec)

open import Cubical.Functions.FunExtEquiv

open import Cubical.Relation.Nullary


import Cubical.Data.List.Base as B renaming (ind' to elimL)
import Cubical.Data.List.Properties as BP


import Cubical.Functions.Logic as L


open import Cubical.Data.List.HITs.Groupoid.Base
open import Cubical.Data.List.HITs.Groupoid.Properties

open import Cubical.Data.Nat.Order.Recursive


‚Ñï‚Çê = List Unit

isSet‚Ñï‚Çê : isSet ‚Ñï‚Çê
isSet‚Ñï‚Çê = isOfHLevelRetractFromIso 2 (compIso (isoList (isSet‚ÜíisGroupoid isSetUnit)) BP.IsoListUnit‚Ñï) isSet‚Ñï


-- module _ {‚Ñì : Level}{A : Type ‚Ñì} where
--  ùïù4 : A ‚Üí A ‚Üí A ‚Üí A ‚Üí {!!}
--  ùïù4 = {!!}

-- Shape : ‚Ñï ‚Üí Type‚ÇÄ
-- Shape n = Œ£ (List Unit) (Œª x ‚Üí n ‚â° length x)


-- isContrList‚ä§ofLen : ‚àÄ n ‚Üí isContr (Œ£ (B.List Unit) (Œª xs ‚Üí n ‚â° B.length xs))
-- isContrList‚ä§ofLen = {!!}

-- isContrShape : ‚àÄ n ‚Üí isContr (Shape n)
-- isContrShape n =
--          isOfHLevelRetractFromIso 0
--             (List-IsoL (isOfHLevelUnit 3) n)
--             (isContrList‚ä§ofLen n)

-- Shape‚â°' : ‚àÄ {n} ‚Üí {x y : Shape n} ‚Üí x ‚â° y
-- Shape‚â°' = isContr‚ÜíisProp (isContrShape _) _ _



-- toShape : {!!}
-- toShape = {!!}

module _ {‚Ñì : Level}{A B : Type ‚Ñì} where
 congEquivSq : {x y x' y' : A} {p : x ‚â° y} {p' : x' ‚â° y'}
                {r : _}{s : _} (e : A ‚âÉ B) ‚Üí
                               (Square (cong (fst e) p)
                    (cong (fst e) p')
                    (cong (fst e) r)
                    (cong (fst e) s))
                    ‚Üí (Square p p' r s)

 congEquivSq {p = p} {p'} {r} {s} e sq = 
    whiskSq.sq' _
      (congSq (invEq e) sq)
      (Œª i ‚Üí retEq e (p i))
      (Œª i ‚Üí retEq e (p' i))
      (Œª i ‚Üí retEq e (r i))
      (Œª i ‚Üí retEq e (s i))

 congIsoSq : {x y x' y' : A} {p : x ‚â° y} {p' : x' ‚â° y'}
                {r : _}{s : _}
                (e : Iso A B) ‚Üí
                               (Square (cong (Iso.fun e) p)
                    (cong (Iso.fun e) p')
                    (cong (Iso.fun e) r)
                    (cong (Iso.fun e) s))
                    ‚Üí (Square p p' r s)

 congIsoSq {p = p} {p'} {r} {s} e sq i j =
   hcomp (Œª k ‚Üí Œª { (i = i0) ‚Üí (Iso.leftInv e) (p j) k
                  ; (i = i1) ‚Üí (Iso.leftInv e) (p' j) k
                  ; (j = i0) ‚Üí (Iso.leftInv e) (r i) k
                  ; (j = i1) ‚Üí (Iso.leftInv e) (s i) k
                  }) (Iso.inv e (sq i j))


module _ {‚Ñì : Level}{A : Type ‚Ñì} (isGroupoidA : isGroupoid A) where

 tabuRecFun : ‚àÄ k ‚Üí (Œ£ (B.List A) (Œª xs ‚Üí k ‚â° B.length xs)) ‚Üí (A √ó^ k)
 tabuRecFun zero x = tt*
 tabuRecFun (suc k) (B.[] , snd‚ÇÅ) = ‚ä•rec (snotz snd‚ÇÅ)
 tabuRecFun (suc k) (x B.‚à∑ fst‚ÇÅ , snd‚ÇÅ) = x , tabuRecFun k (fst‚ÇÅ , injSuc snd‚ÇÅ)

 tabuRecInv : ‚àÄ k  ‚Üí (A √ó^ k) ‚Üí (Œ£ (B.List A) (Œª xs ‚Üí k ‚â° B.length xs))
 tabuRecInv zero x = B.[] , refl
 tabuRecInv (suc k) (x , xs) =
   let (l , p) = tabuRecInv k xs
   in (x B.‚à∑ l) , cong suc p

 tabuRecSec : ‚àÄ k ‚Üí section (tabuRecFun k) (tabuRecInv k)
 tabuRecSec zero b i = tt*
 tabuRecSec (suc k) b = Œ£PathP (refl , tabuRecSec k (snd b)) 

 tabuRecRet : ‚àÄ k ‚Üí retract (tabuRecFun k) (tabuRecInv k)
 tabuRecRet zero (B.[] , snd‚ÇÅ) = Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñï _ _) refl
 tabuRecRet (suc k) (B.[] , snd‚ÇÅ) = ‚ä•rec (snotz snd‚ÇÅ)
 tabuRecRet zero (x B.‚à∑ fst‚ÇÅ , snd‚ÇÅ) = ‚ä•rec (znots snd‚ÇÅ)
 tabuRecRet (suc k) (x B.‚à∑ fst‚ÇÅ , snd‚ÇÅ) =
  let p = tabuRecRet k (fst‚ÇÅ , injSuc snd‚ÇÅ)
  in Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñï _ _) (cong (x B.‚à∑_) (cong fst p))

 tabuRec : ‚àÄ k ‚Üí Iso (Œ£ (B.List A) (Œª xs ‚Üí k ‚â° B.length xs)) (A √ó^ k)
 Iso.fun (tabuRec k) = tabuRecFun k
 Iso.inv (tabuRec k) = tabuRecInv k
 Iso.rightInv (tabuRec k) = tabuRecSec k
 Iso.leftInv (tabuRec k) = tabuRecRet k


 tabuRec' : ‚àÄ k ‚Üí Iso (Œ£ (List A) (Œª xs ‚Üí k ‚â° length xs)) (A √ó^ k)
 tabuRec' k = compIso (List-IsoL isGroupoidA k) (tabuRec k)

 -- viaTabu : ‚àÄ k ‚Üí (v : A √ó^ k) ‚Üí (xs ys : List A)
 --                 ‚Üí (p : k ‚â° length xs) ‚Üí (q : k ‚â° length ys)
 --                 ‚Üí v ‚â° Iso.fun (tabuRec' k) (xs , p)
 --                 ‚Üí v ‚â° Iso.fun (tabuRec' k) (ys , q)
 --                 ‚Üí xs ‚â° ys
 -- viaTabu k v xs ys p q p' q' =
 --   cong fst (invEq (congEquiv {x = xs , p} {y = ys , q}
 --        (isoToEquiv (tabuRec' k))) (sym p' ‚àô q'))



 yyy : Square {A = List ‚Ñï}

           (++-pentagon-diag [ 0 ] [ 1 ] [ 2 ] [ 3 ])
           (++-assoc _ _ _)
           (cong (_++ [ 3 ]) (++-assoc _ _ _))           
           (sym (cong ([ 0 ] ++_) (++-assoc _ _ _)))

 yyy  = congIsoSq (isoList (isSet‚ÜíisGroupoid isSet‚Ñï))
                  Œª i i‚ÇÅ ‚Üí 0 B.‚à∑ 1 B.‚à∑ 2 B.‚à∑ 3 B.‚à∑ B.[]


 yyy' : (xs ys zs ws : List A) ‚Üí
         Square (++-pentagon-diag xs ys zs ws)
            (++-assoc _ _ _)
            (cong (_++ ws) (++-assoc _ _ _))           
            (sym (cong (xs ++_) (++-assoc _ _ _)))

 yyy' xs ys zs ws =
   congSq (flip bind g) yyy
  where
  g : ‚Ñï ‚Üí List A
  g zero = xs
  g (suc zero) = ys
  g (suc (suc zero)) = zs
  g (suc (suc (suc x))) = ws

 fL : B.List A ‚Üí ‚Ñï ‚Üí List A
 fL B.[] x‚ÇÅ = []
 fL (x B.‚à∑ x‚ÇÇ) zero = [ x ]
 fL (x B.‚à∑ x‚ÇÇ) (suc x‚ÇÅ) = fL x‚ÇÇ x‚ÇÅ

 List‚Çê-sqHlp : (g : ‚Ñï ‚Üí List A) ‚Üí
               {a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ : List ‚Ñï} {a‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ}
                 {a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ : List ‚Ñï} {a‚ÇÅ‚Çã : a‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ}
              {a‚Çã‚ÇÄ : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ} {a‚Çã‚ÇÅ : a‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ}
        ‚Üí Square
             (cong (Iso.fun (isoList (isSet‚ÜíisGroupoid isSet‚Ñï))) a‚ÇÄ‚Çã)
             (cong (Iso.fun (isoList (isSet‚ÜíisGroupoid isSet‚Ñï))) a‚ÇÅ‚Çã)
             (cong (Iso.fun (isoList (isSet‚ÜíisGroupoid isSet‚Ñï))) a‚Çã‚ÇÄ)
             (cong (Iso.fun (isoList (isSet‚ÜíisGroupoid isSet‚Ñï))) a‚Çã‚ÇÅ)
        ‚Üí Square
             (cong (flip bind g) a‚ÇÄ‚Çã)
             (cong (flip bind g) a‚ÇÅ‚Çã)
             (cong (flip bind g) a‚Çã‚ÇÄ)
             (cong (flip bind g) a‚Çã‚ÇÅ)
 List‚Çê-sqHlp g x =
   congSq (flip bind g) (congIsoSq (isoList (isSet‚ÜíisGroupoid isSet‚Ñï)) x)
 
--   -- bind



-- -- yyy : Square (Œª i ‚Üí 1 , 2 , 3 , 4 , tt*) (Œª i ‚Üí 1 , 2 , 3 , 4 , tt*)
-- --              (Œª i ‚Üí 1 , 2 , 3 , 4 , tt*) (Œª i ‚Üí 1 , 2 , 3 , 4 , tt*)
-- --     ‚Üí Square {A = List ‚Ñï}
-- --           {(([ 1 ] ++ [ 2 ]) ++ [ 3 ]) ++ [ 4 ]}
-- --           {[ 1 ] ++ [ 2 ] ++ [ 3 ] ++ [ 4 ]}
-- --           (++-pentagon-diag [ 1 ] [ 2 ] [ 3 ] [ 4 ])
-- --           {([ 1 ] ++ [ 2 ] ++ [ 3 ]) ++ [ 4 ]}
-- --           {[ 1 ] ++ ([ 2 ] ++ [ 3 ]) ++ [ 4 ]}
-- --           (++-assoc _ _ _)
-- --           (cong (_++ [ 4 ]) (++-assoc _ _ _))           
-- --           (sym (cong ([ 1 ] ++_) (++-assoc _ _ _)))

-- -- yyy pp i j =  fst (congEquivSq
-- --              {x = (([ 1 ] ++ [ 2 ]) ++ [ 3 ]) ++ [ 4 ] , refl}
-- --              {[ 1 ] ++ [ 2 ] ++ [ 3 ] ++ [ 4 ] , refl}
-- --              {([ 1 ] ++ [ 2 ] ++ [ 3 ]) ++ [ 4 ] , refl}
-- --              {[ 1 ] ++ ([ 2 ] ++ [ 3 ]) ++ [ 4 ] , refl}
-- --              {p = Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñï _ _) (++-pentagon-diag [ 1 ] [ 2 ] [ 3 ] [ 4 ])}
-- --              {Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñï _ _) (++-assoc _ _ _)}
-- --              {Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñï _ _) (cong (_++ [ 4 ]) (++-assoc _ _ _))}
-- --              {Œ£‚â°Prop (Œª _ ‚Üí isSet‚Ñï _ _) (sym (cong ([ 1 ] ++_) (++-assoc _ _ _)))}
-- --              (isoToEquiv (tabuRec' (isSet‚ÜíisGroupoid isSet‚Ñï) 4))
-- --                 pp i j
-- --                 --(Œª _ _ ‚Üí 1 , 2 , 3 , 4 , tt*) 
-- --                -- (isSet‚ÜíisSet' (isOfHLevel√ó^ 4 2 isSet‚Ñï)
-- --                --   {!refl!}
-- --                --   {!!}
-- --                --   {!!}
-- --                --   {!!})
-- --                  )



