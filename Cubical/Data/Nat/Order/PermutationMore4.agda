{-# OPTIONS --safe #-}
module Cubical.Data.Nat.Order.PermutationMore4 where

open import Cubical.Data.Nat.Base as ‚Ñï hiding (_¬∑_)
open import Cubical.Data.Nat.Properties


-- open import Cubical.Data.Fin.Properties as FP
open import Cubical.Data.Empty as ‚ä•

open import Cubical.Functions.Involution

open import Cubical.Foundations.Everything
-- open import Cubical.Data.Empty as ‚ä•
-- open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_)
-- open import Cubical.Data.Nat.Order
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe
import Cubical.Data.Bool as ùüö
open import Cubical.Data.Sum as ‚äé


open import Cubical.Data.Nat.Order.Recursive

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.Algebra.Group

open import Cubical.Algebra.SymmetricGroup

import Cubical.Functions.Logic as L

open import Cubical.Functions.Embedding

open import Cubical.Data.List as Li

import Cubical.Data.Nat.FinGenAut2 as A

import Cubical.HITs.PropositionalTruncation as Prop

open import Cubical.HITs.GroupoidQuotients as GQ
  renaming ([_] to [_]// ; RelimProp to  RelimProp// ; Rrec to Rrec//)


open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties

-- open import Cubical.Algebra.Group.Generators

open import Cubical.Functions.FunExtEquiv

open import Cubical.HITs.SequentialColimit as SC

open import Cubical.Data.Nat.Order.Permutation

-- open import Cubical.Data.FinData.GTrun

open import Cubical.HITs.EilenbergMacLane1 renaming (elim to elimEM)

open import Cubical.HITs.ListedFiniteSet.Base2

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì




-- -- mkCube' : ‚àÄ {‚Ñì} {A A' : Type ‚Ñì}
-- --    {a‚ÇÄ‚ÇÄ‚Çã : A ‚â° A}
-- --    {a‚ÇÄ‚ÇÅ‚Çã : A ‚â° A}
-- --    {a‚ÇÄ‚Çã‚ÇÄ : A ‚â° A} {a‚ÇÄ‚Çã‚ÇÅ : A ‚â° A}
-- --    (a‚ÇÄ‚Çã‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÄ‚ÇÅ‚Çã a‚ÇÄ‚Çã‚ÇÄ a‚ÇÄ‚Çã‚ÇÅ)
-- --    {a‚ÇÅ‚ÇÄ‚Çã : A' ‚â° A'}
-- --    {a‚ÇÅ‚ÇÅ‚Çã : A' ‚â° A'}
-- --    {a‚ÇÅ‚Çã‚ÇÄ : A' ‚â° A'} {a‚ÇÅ‚Çã‚ÇÅ : A' ‚â° A'}
-- --    (a‚ÇÅ‚Çã‚Çã : Square a‚ÇÅ‚ÇÄ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚ÇÅ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÅ)
-- --    {a‚Çã‚ÇÄ‚ÇÄ : A ‚â° A'} {a‚Çã‚ÇÄ‚ÇÅ : A ‚â° A'}
-- --    (a‚Çã‚ÇÄ‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÅ‚ÇÄ‚Çã a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÄ‚ÇÅ)
-- --    {a‚Çã‚ÇÅ‚ÇÄ : A ‚â° A'} {a‚Çã‚ÇÅ‚ÇÅ : A ‚â° A'}
-- --    (a‚Çã‚ÇÅ‚Çã : Square a‚ÇÄ‚ÇÅ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚Çã‚ÇÅ‚ÇÄ a‚Çã‚ÇÅ‚ÇÅ)
-- --    (a‚Çã‚Çã‚ÇÄ : Square a‚ÇÄ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÄ a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÅ‚ÇÄ)
-- --    (a‚Çã‚Çã‚ÇÅ : Square a‚ÇÄ‚Çã‚ÇÅ a‚ÇÅ‚Çã‚ÇÅ a‚Çã‚ÇÄ‚ÇÅ a‚Çã‚ÇÅ‚ÇÅ)
-- --    ‚Üí _
-- --    ‚Üí Cube a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ
-- -- mkCube' a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ x =
-- --  toPathP (invEq (congEquiv (PathP‚âÉPath _ _ _))
-- --     (invEq (congEquiv ((congEquiv (
-- --       (PathP‚âÉPath (Œª i ‚Üí Type _) (a‚Çã‚Çã‚ÇÄ i1 i1) _)
-- --        ‚àô‚Çë univalence))))
-- --      (Œ£SquareSet (isProp‚ÜíisSet ‚àò isPropIsEquiv)
-- --       (comm‚ÜíPathP
-- --        (invEq (congEquiv (invEquiv funExtEquiv))
-- --         (funExt x))))))

-- -- mkCube :
-- --  ‚àÄ {a‚ÇÄ‚ÇÄ‚Çã : A ‚â° A}
-- --    {a‚ÇÄ‚ÇÅ‚Çã : A ‚â° A}
-- --    {a‚ÇÄ‚Çã‚ÇÄ : A ‚â° A} {a‚ÇÄ‚Çã‚ÇÅ : A ‚â° A}
-- --    (a‚ÇÄ‚Çã‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÄ‚ÇÅ‚Çã a‚ÇÄ‚Çã‚ÇÄ a‚ÇÄ‚Çã‚ÇÅ)
-- --    {a‚ÇÅ‚ÇÄ‚Çã : A ‚â° A}
-- --    {a‚ÇÅ‚ÇÅ‚Çã : A ‚â° A}
-- --    {a‚ÇÅ‚Çã‚ÇÄ : A ‚â° A} {a‚ÇÅ‚Çã‚ÇÅ : A ‚â° A}
-- --    (a‚ÇÅ‚Çã‚Çã : Square a‚ÇÅ‚ÇÄ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚ÇÅ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÅ)
-- --    {a‚Çã‚ÇÄ‚ÇÄ : A ‚â° A} {a‚Çã‚ÇÄ‚ÇÅ : A ‚â° A}
-- --    (a‚Çã‚ÇÄ‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÅ‚ÇÄ‚Çã a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÄ‚ÇÅ)
-- --    {a‚Çã‚ÇÅ‚ÇÄ : A ‚â° A} {a‚Çã‚ÇÅ‚ÇÅ : A ‚â° A}
-- --    (a‚Çã‚ÇÅ‚Çã : Square a‚ÇÄ‚ÇÅ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚Çã‚ÇÅ‚ÇÄ a‚Çã‚ÇÅ‚ÇÅ)
-- --    (a‚Çã‚Çã‚ÇÄ : Square a‚ÇÄ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÄ a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÅ‚ÇÄ)
-- --    (a‚Çã‚Çã‚ÇÅ : Square a‚ÇÄ‚Çã‚ÇÅ a‚ÇÅ‚Çã‚ÇÅ a‚Çã‚ÇÄ‚ÇÅ a‚Çã‚ÇÅ‚ÇÅ)
-- --    ‚Üí SquareP (Œª i j ‚Üí (a‚ÇÄ‚Çã‚Çã i j) ‚Üí (a‚ÇÅ‚Çã‚Çã i j))
-- --        (Œª j ‚Üí transport (flipSquare a‚Çã‚ÇÄ‚Çã j))
-- --        (Œª j ‚Üí transport (flipSquare a‚Çã‚ÇÅ‚Çã j))
-- --        (Œª i ‚Üí transport (flipSquare a‚Çã‚Çã‚ÇÄ i))
-- --        (Œª i ‚Üí transport (flipSquare a‚Çã‚Çã‚ÇÅ i))
-- --    ‚Üí Cube a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ
-- -- mkCube a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ x k i j =
-- --   hcomp
-- --    (Œª l ‚Üí Œª {
-- --      (i = i0) ‚Üí {!!}
-- --     ;(i = i1) ‚Üí {!!}
-- --     ;(j = i0) ‚Üí {!!}
-- --     ;(j = i1) ‚Üí {!!}
-- --     ;(k = i0) ‚Üí a‚ÇÄ‚Çã‚Çã i j
-- --     ;(k = i1) ‚Üí a‚ÇÅ‚Çã‚Çã i j
-- --     })
-- --    (ua (x i j , {!!}) k)

‚Ñôrm' : ‚Ñï ‚Üí Type
‚Ñôrm' n = EM‚ÇÅ (PermG n)



Flooop : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí Fin n ‚â° Fin n
Flooop n k l i =
  Glue (Fin n)
    Œª {(i = i0) ‚Üí _ , adjT'‚âÉ {n = n} k
      ;(i = i1) ‚Üí _ , adjT'‚âÉ {n = n} l
       }

-- ‚Ñïlooop' : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚â° ‚Ñï
-- ‚Ñïlooop' n k i = 
--   Glue ‚Ñï
--     Œª {(i = i0) ‚Üí _ , {!A.adjTransposition‚âÉ k!}
--       ;(i = i1) ‚Üí _ , {!!}
--        }


Flooop-comp : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
  ‚Üí Square
       (ua (adjT'‚âÉ {n = n} k))
       (ua (adjT'‚âÉ {n = n} l))
       (Flooop n k l)
       refl
Flooop-comp n k l i j =
    Glue (Fin n)
    Œª {(j = i0) (i = i0) ‚Üí _ , adjT'‚âÉ {n = n} k
      ;(j = i0) (i = i1) ‚Üí _ , adjT'‚âÉ {n = n} l
      ;(j = i1) ‚Üí _ , idEquiv _
       }

Flooop-comm-sqL' : ‚àÄ n k l ‚Üí commT (fst k) (fst l)
  ‚Üí (x : Fin n) ‚Üí
      PathP (Œª z‚ÇÅ ‚Üí ua (adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n}  k) z‚ÇÅ)
        (fst (adjT'‚âÉ {n = n} k) x)
      (fst (adjT'‚âÉ {n = n} l) x)
Flooop-comm-sqL' n k l z x i =
  glue (Œª {(i = i0) ‚Üí (fst (adjT'‚âÉ {n = n} k) x)
         ; (i = i1) ‚Üí (fst (adjT'‚âÉ {n = n} l) x) })           
       (‚â°Fin {n = n}
         {(fst (adjT'‚âÉ {n = n} k ‚àô‚Çë adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n} k) x)}
         {(fst (adjT'‚âÉ {n = n} l) x)}
             (funExt‚Åª (A.adjTranspositionComm' (fst k) (fst l) z) (fst x)) i)

Flooop-comm-sqL : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
   ‚Üí commT (fst k) (fst l)
   ‚Üí PathP (Œª j ‚Üí Fin n ‚âÉ ua (adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n} k) j)
      (adjT'‚âÉ {n = n} k)
      (adjT'‚âÉ {n = n} l)
Flooop-comm-sqL n k l z =
 Œ£PathPProp isPropIsEquiv
   (funExt (Flooop-comm-sqL' n k l z ))  

Flooop-comm-sqR : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
   ‚Üí PathP (Œª j ‚Üí Fin n ‚âÉ ua (adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n} k) j)
      (adjT'‚âÉ {n = n} l)
      (adjT'‚âÉ {n = n} k)
Flooop-comm-sqR n k l =
   Œ£PathPProp isPropIsEquiv
   (Œª i x ‚Üí
       glue (Œª {(i = i0) ‚Üí (fst (adjT'‚âÉ {n = n} l) x)
               ; (i = i1) ‚Üí (fst (adjT'‚âÉ {n = n} k) x) })
           (fst (adjT'‚âÉ {n = n} k)
             (isInvolution-adjT n l x i)))
  


Flooop-comm : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
   ‚Üí commT (fst k) (fst l)
   ‚Üí Square (Flooop n k l) (Flooop n l k)  refl refl
Flooop-comm n k l z j i =
    Glue (ua (adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n} k) j)
    Œª {(i = i0) ‚Üí Fin n , Flooop-comm-sqL n k l z j
      ;(i = i1) ‚Üí Fin n , Flooop-comm-sqR n k l j }


-- floop-braid-0 : ‚àÄ n k k< ‚Üí 
--    PathP (Œª j ‚Üí ua (adjT'‚âÉ {n = n} (suc k , k<)) j ‚âÉ
--         (ua ((adjT'‚âÉ {n = n} (suc k , k<)) ‚àô‚Çë
--                   (adjT'‚âÉ {n = n} ((k , <-weaken {n = n} k<))) ‚àô‚Çë
--                   (adjT'‚âÉ {n = n} (suc k , k<))) (~ j)))
--       (adjT'‚âÉ {n = n} (k , <-weaken {n = n} k<))
--       (adjT'‚âÉ {n = n} (k , <-weaken {n = n} k<))
-- floop-braid-0 n k k< =
--    Œ£PathPProp isPropIsEquiv 
--               ( {!!}
--      ‚óÅ (Œª j ‚Üí
--        ua-gluePathExt (((adjT'‚âÉ {n = n} (suc k , k<)) ‚àô‚Çë
--                   (adjT'‚âÉ {n = n} ((k , <-weaken {n = n} k<))) ‚àô‚Çë
--                   (adjT'‚âÉ {n = n} (suc k , k<)))) (~ j) ‚àò'
--          ua-ungluePathExt ((adjT'‚âÉ {n = n} (suc k , k<))) j) ‚ñ∑
--          {!!})


-- floop-braid-1 : ‚àÄ n k k< ‚Üí 
--    PathP (Œª j ‚Üí ua (adjT'‚âÉ {n = n} (k , <-weaken {n = n} k<)) j ‚âÉ {!!})
--       (adjT'‚âÉ {n = n} (suc k , k<))
--       (adjT'‚âÉ {n = n} (suc k , k<))
-- floop-braid-1 n k k< j = {!!}

Flooop-sq : ‚àÄ n {k‚ÇÄ} {k‚ÇÅ} {k‚ÇÇ} {k‚ÇÉ} ‚Üí
    Square
      (Flooop n k‚ÇÄ k‚ÇÅ)
      (Flooop n k‚ÇÇ k‚ÇÉ)
      (Flooop n k‚ÇÄ k‚ÇÇ)
      (Flooop n k‚ÇÅ k‚ÇÉ)
Flooop-sq n {k‚ÇÄ} {k‚ÇÅ} {k‚ÇÇ} {k‚ÇÉ} i j =
  Glue (Fin n)
   Œª {  (i = i0)(j = i0) ‚Üí _ , adjT'‚âÉ {n = n} k‚ÇÄ
      ; (i = i0)(j = i1) ‚Üí _ , adjT'‚âÉ {n = n} k‚ÇÅ
      ; (i = i1)(j = i0) ‚Üí _ , adjT'‚âÉ {n = n} k‚ÇÇ
      ; (i = i1)(j = i1) ‚Üí _ , adjT'‚âÉ {n = n} k‚ÇÉ
      }

data ‚Ñôrm (n : ‚Ñï) : Type‚ÇÄ where 
  ùï°base : ‚Ñôrm n
  ùï°loop : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ùï°base ‚â° ùï°base  
  ùï°looop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ùï°base ‚â° ùï°base
  -- ùï°comp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
  --    Square
  --      (ùï°loop k)
  --      (ùï°loop l)
  --      refl
  --      (ùï°looop k l)

  ùï°comp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     Square
       (ùï°loop k)
       (ùï°loop l)
       (ùï°looop k l)
       refl
         
  ùï°invol : ‚àÄ k ‚Üí ùï°loop k ‚â° sym (ùï°loop k)
  ùï°comm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     commT (fst k) (fst l) ‚Üí
       Square
         refl
         refl
       (ùï°looop k l)
       (ùï°looop l k)

  ùï°braid : ‚àÄ k k<  ‚Üí        
         Square
         (ùï°loop (suc k , k<))
         (ùï°loop (k , <-weaken {n = n} k<))
         (ùï°looop (k , <-weaken {n = n} k<) (suc k , k<))
         (ùï°looop (k , <-weaken {n = n} k<) (suc k , k<))


  ùï°squash : isGroupoid (‚Ñôrm n)

ùï°comp' : ‚àÄ {n} ‚Üí (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
   Square {A = ‚Ñôrm n}
     (ùï°loop k)
     (ùï°loop l)
     refl
     (ùï°looop k l)
ùï°comp' k l =
   (ùï°invol k) ‚óÅ
   (Œª i j ‚Üí (ùï°comp k l i (~ j)))
   ‚ñ∑ sym (ùï°invol l)

ùï°looop-invol : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
    ùï°looop {n = n} k l ‚â° sym (ùï°looop l k)
ùï°looop-invol n k l i j =
   hcomp
      (Œª l' ‚Üí Œª {
        (i = i0) ‚Üí ùï°comp k l j (~ l')
       ;(i = i1) ‚Üí ùï°comp l k (~ j) (~ l')
       ;(j = i0) ‚Üí ùï°loop k (~ l')
       ;(j = i1) ‚Üí ùï°loop l (~ l')
       }) ùï°base

record Rùï°rec {n} (A : Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   abase : A
   aloop : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase
   alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase
   acomp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
      Square
        (aloop k)
        (aloop l)
        (alooop k l)
        refl

   ainvol : ‚àÄ k ‚Üí aloop k ‚â° sym (aloop k)
   acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
      commT (fst k) (fst l) ‚Üí
        Square
          refl
          refl
        (alooop k l)
        (alooop l k)

   abraid : ‚àÄ k k<  ‚Üí        
          Square
          (aloop (suc k , k<))
          (aloop (k , <-weaken {n = n} k<))
          (alooop (k , <-weaken {n = n} k<) (suc k , k<))
          (alooop (k , <-weaken {n = n} k<) (suc k , k<))
   asquash : isGroupoid A


 f : ‚Ñôrm n ‚Üí A
 f ùï°base = abase
 f (ùï°loop x i) = aloop x i
 f (ùï°looop k l i) = alooop k l i
 f (ùï°comp k l i i‚ÇÅ) = acomp k l i i‚ÇÅ
 -- f (ùï°comp' k l i i‚ÇÅ) = acomp' k l i i‚ÇÅ
 f (ùï°invol k i i‚ÇÅ) = ainvol k i i‚ÇÅ
 f (ùï°comm k l x i i‚ÇÅ) = acomm k l x i i‚ÇÅ
 f (ùï°braid k k< i i‚ÇÅ) = abraid k k< i i‚ÇÅ
 f (ùï°squash _ _ _ _ r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) =
   asquash _ _ _ _
     (Œª i j ‚Üí (f (r i j)))
     (Œª i j ‚Üí (f (s i j)))
     i‚ÇÄ i‚ÇÅ i‚ÇÇ

record Rùï°elim {n} (A : ‚Ñôrm n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   isGroupoidA : ‚àÄ x ‚Üí isGroupoid (A x)
   abase : A ùï°base
   aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
   alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
   acomp : ‚àÄ k l ‚Üí
     SquareP (Œª j i ‚Üí A (ùï°comp k l j i))
       (aloop k)
       (aloop l)
       (alooop k l)
       refl
   ainvol : ‚àÄ k ‚Üí
     SquareP (Œª i j ‚Üí A (ùï°invol k i j))
       (aloop k)
       (symP (aloop k))
       refl refl
   acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ‚àÄ x ‚Üí     
       SquareP (Œª i j ‚Üí A (ùï°comm k l x i j))
         refl
         refl
       (alooop k l)
       (alooop l k)
   abraid : ‚àÄ k k<  ‚Üí        
         SquareP (Œª i j ‚Üí A (ùï°braid k k< i j))
         (aloop (suc k , k<))
         (aloop (k , <-weaken {n = n} k<))
         (alooop (k , <-weaken {n = n} k<) (suc k , k<))
         (alooop (k , <-weaken {n = n} k<) (suc k , k<))
  


 f : ‚àÄ x ‚Üí A x
 f ùï°base = abase
 f (ùï°loop x i) = aloop x i
 f (ùï°looop k l i) = alooop k l i
 f (ùï°comp k l j i) = acomp k l j i
   
 f (ùï°invol k i j) = ainvol k i j
 
 f (ùï°comm k l x i j) = acomm k l x i j
    
 
 f (ùï°braid k k< i j) = abraid k k< i j
 f (ùï°squash x y p q r s i j k) =
   isOfHLevel‚ÜíisOfHLevelDep 3 isGroupoidA
     _ _ _ _
     (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k))
     (ùï°squash x y p q r s) i j k


record Rùï°elimSet {n} (A : ‚Ñôrm n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   isSetA : ‚àÄ x ‚Üí isSet (A x)
   abase : A ùï°base
   aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
   alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
   -- (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase

 fR : Rùï°elim (Œª z ‚Üí A z)
 Rùï°elim.isGroupoidA fR = isSet‚ÜíisGroupoid ‚àò isSetA
 Rùï°elim.abase fR = abase
 Rùï°elim.aloop fR = aloop
 Rùï°elim.alooop fR = alooop
 Rùï°elim.acomp fR k l = 
   isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°comp k l j i)) _ _ _ _
 Rùï°elim.ainvol fR k =
  isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°invol k j i)) _ _ _ _
 Rùï°elim.acomm fR k l x =
  isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°comm k l x j i)) _ _ _ _
 Rùï°elim.abraid fR k k< =
  isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°braid k k< j i)) _ _ _ _

 f : ‚àÄ x ‚Üí A x
 f = Rùï°elim.f fR

record Rùï°elimSet' {n} (A : ‚Ñôrm n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   isSetA : ‚àÄ x ‚Üí isSet (A x)
   abase : A ùï°base
   aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase

 fR : Rùï°elimSet (Œª z ‚Üí A z)
 Rùï°elimSet.isSetA fR = isSetA
 Rùï°elimSet.abase fR = abase
 Rùï°elimSet.aloop fR = aloop
 Rùï°elimSet.alooop fR k l i =
   comp (Œª j ‚Üí A (ùï°comp k l i (~ j)))
     (Œª j ‚Üí Œª { (i = i0) ‚Üí aloop k (~ j) ; (i = i1) ‚Üí aloop l (~ j) })
     abase

 f : ‚àÄ x ‚Üí A x
 f = Rùï°elimSet.f fR



record Rùï°elimProp {n} (A : ‚Ñôrm n ‚Üí Type ‚Ñì) : Type ‚Ñì where
 no-eta-equality
 field
   isPropA : ‚àÄ x ‚Üí isProp (A x)
   abase : A ùï°base

 fR : Rùï°elimSet (Œª z ‚Üí A z)
 Rùï°elimSet.isSetA fR = isProp‚ÜíisSet ‚àò isPropA
 Rùï°elimSet.abase fR = abase
 Rùï°elimSet.aloop fR k = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _
 Rùï°elimSet.alooop fR k l = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _

 f : ‚àÄ x ‚Üí A x
 f = Rùï°elimSet.f fR



to‚ÑôrmR‚â° : ‚àÄ n ‚Üí Rrec {n = n} (Path (‚Ñôrm n) ùï°base ùï°base)
Rrec.isSetA (to‚ÑôrmR‚â° n) = ùï°squash _ _
Rrec.ŒµA (to‚ÑôrmR‚â° n) = refl
Rrec.‚à∑A (to‚ÑôrmR‚â° n) k = ùï°loop k ‚àô_ 
Rrec.invoA (to‚ÑôrmR‚â° n) k x i j = 
  hcomp (Œª l ‚Üí
       Œª { (i = i1) ‚Üí x (j ‚àß l)
         ; (j = i0) ‚Üí ùï°base
         ; (j = i1) ‚Üí (hcomp (Œª l' ‚Üí
                 Œª { (i = i1) ‚Üí x (l' ‚àß l)
                   ; (l = i0) ‚Üí ùï°invol k l' i
                   ; (l = i1) ‚Üí x l'
                   }) (ùï°loop k (l ‚à® i)))
         }) (ùï°loop k (~ i ‚àß j))

Rrec.braidA (to‚ÑôrmR‚â° n) k k< x i =
    ùï°comp' (k , <-weaken {n = n} k<) (suc k , k<) i
  ‚àô ùï°braid k k< i
  ‚àô ùï°comp (k , <-weaken {n = n} k<) (suc k , k<) i ‚àô x

Rrec.commA (to‚ÑôrmR‚â° n) k l z x i =
    ùï°comp' k l i
    ‚àô (ùï°comm k l z i ‚àô‚àô ùï°comp l k i ‚àô‚àô x)
  

to‚ÑôrmRsq : ‚àÄ n ‚Üí (h : Perm n) ‚Üí RelimProp
      (Œª z ‚Üí
         
         Square (Rrec.f (to‚ÑôrmR‚â° n) z)
         (Rrec.f (to‚ÑôrmR‚â° n) ((snd (PermG n) GroupStr.¬∑ z) h)) refl
         (Rrec.f (to‚ÑôrmR‚â° n) h))
RelimProp.isPropA (to‚ÑôrmRsq n h) _ =
  isOfHLevelRetractFromIso
    1 (invIso PathP‚Üícomm-Iso) (ùï°squash _ _ _ _)
RelimProp.ŒµA (to‚ÑôrmRsq n h) i j = (Rrec.f (to‚ÑôrmR‚â° n) h) (i ‚àß j)
RelimProp.‚à∑A (to‚ÑôrmRsq n h) k x i = ùï°loop k ‚àô x i

to‚ÑôrmR : ‚àÄ n ‚Üí EMrec (PermG n) {B = ‚Ñôrm n} ùï°squash
EMrec.b (to‚ÑôrmR n) = ùï°base
EMrec.bloop (to‚ÑôrmR n) = Rrec.f (to‚ÑôrmR‚â° n)
EMrec.bComp (to‚ÑôrmR n) g h = RelimProp.f (to‚ÑôrmRsq n h) g 


to‚Ñôrm : ‚àÄ n ‚Üí ‚Ñôrm' n ‚Üí ‚Ñôrm n
to‚Ñôrm n = EMrec.f (to‚ÑôrmR n)


commSq : ‚àÄ n ‚Üí ‚àÄ k xs ‚Üí Square {A = ‚Ñôrm' n}
           (emloop (Œ∑ k))
           (emloop xs)
           refl
           (emloop (Œ∑ k ¬∑ xs))
commSq n k xs i j =
  hcomp (Œª l' ‚Üí Œª {
       (i = i0) ‚Üí emloop (Œ∑ k) j
      ;(i = i1) ‚Üí emloop (invo k xs l') j
      ;(j = i0) ‚Üí embase
      ;(j = i1) ‚Üí emloop (k ‚à∑ xs) i
      }) (emcomp (Œ∑ k) (Œ∑ k ¬∑ xs) i j)

-- commSq' : ‚àÄ n ‚Üí ‚àÄ k l ‚Üí Square {A = ‚Ñôrm' n}
--            (emloop (Œ∑ l))
--            (emloop (Œ∑ k))
--            refl
--            (emloop (Œ∑ l ¬∑ Œ∑ k))
           
-- commSq' n k l i j = {!!}
--   -- hcomp (Œª l' ‚Üí Œª {
--   --      (i = i0) ‚Üí emloop (Œ∑ k) j
--   --     ;(i = i1) ‚Üí emloop (invo k (Œ∑ l) l') j
--   --     ;(j = i0) ‚Üí embase
--   --     ;(j = i1) ‚Üí emloop (k ‚à∑ Œ∑ l) i
--   --     }) (emcomp (Œ∑ k) (Œ∑ k ¬∑ Œ∑ l) i j)

involSq : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
      emloop (Œ∑ {n = n} k) ‚â° sym (emloop (Œ∑ k))
involSq n k i j =
  hcomp (Œª l ‚Üí Œª {
       (i = i0) ‚Üí emcomp (Œ∑ k) (Œ∑ k) j l
      ;(i = i1) ‚Üí emcomp Œµ (Œ∑ k) (~ j) l
      ;(j = i0) ‚Üí emloop (k ‚à∑ Œµ) l
      ;(j = i1) ‚Üí emloop {Group = PermG n} ((invo {n = n} k Œµ) i) l
      }) embase


braidSq : ‚àÄ n k l ‚Üí
   Square {A = ‚Ñôrm' n}
     (emloop (Œ∑ k))
     (emloop (Œ∑ k))
     (emloop (Œ∑ l))
     (emloop (k  ‚à∑ l ‚à∑ k ‚à∑ Œµ))
braidSq n k l =
    (involSq n k) ‚óÅ
      emloop-doubleCompFill (PermG n) (Œ∑ k) (Œ∑ l) (Œ∑ k)
braidSq' : ‚àÄ n k l ‚Üí
   Square {A = ‚Ñôrm' n}
     (sym (emloop (Œ∑ l)))
     (sym (emloop (Œ∑ l)))
     (emloop (l ‚à∑ k ‚à∑ l ‚à∑ Œµ))
     (emloop (Œ∑ k))
braidSq' n k l =
  (sym (involSq n l)) ‚óÅ
     Œª i j ‚Üí emloop-doubleCompFill (PermG n) (Œ∑ l) (Œ∑ k) (Œ∑ l) i (~ j)


braidSqC : ‚àÄ n k k< ‚Üí
   Square {A = ‚Ñôrm' n}
     refl
     refl
     (emloop ((k , <-weaken {n = n} k<)
         ‚à∑ (suc k , k<) ‚à∑ (k , <-weaken  {n = n} k<) ‚à∑ Œµ))
     (emloop ((suc k , k<) ‚à∑ (k , <-weaken  {n = n} k<) ‚à∑ (suc k , k<) ‚à∑ Œµ))
      
braidSqC n k k< i j = emloop (braid k k< Œµ j ) i
  -- (braidSqC0 n k k< j
  --   ‚àô‚àô (Œª i ‚Üí emloop (braid k k< Œµ i ) j)
  --   ‚àô‚àô
  --   braidSqC1 n k k< j) i

Rfrom‚Ñôrm : ‚àÄ n ‚Üí Rùï°rec {n = n} (‚Ñôrm' n)
Rùï°rec.abase (Rfrom‚Ñôrm n) = embase
Rùï°rec.aloop (Rfrom‚Ñôrm n) = emloop ‚àò Œ∑
Rùï°rec.alooop (Rfrom‚Ñôrm n) k l i =
  hcomp (Œª z ‚Üí Œª {(i = i0) ‚Üí emloop (Œ∑ k) (~ z)
                ; (i = i1) ‚Üí emloop (Œ∑ l) (~ z)} ) embase

Rùï°rec.acomp (Rfrom‚Ñôrm n) k l i j =
  doubleCompPath-filler (emloop (Œ∑ k)) refl (sym (emloop (Œ∑ l))) (~ j) i
Rùï°rec.ainvol (Rfrom‚Ñôrm n) = involSq n
    
Rùï°rec.acomm (Rfrom‚Ñôrm n) k l x i j =
  (commSq n k (Œ∑ l) j ‚àô‚àô
    (Œª i ‚Üí emloop (comm k l x Œµ i ) j)
   ‚àô‚àô sym (commSq n l (Œ∑ k) j)) i
Rùï°rec.abraid (Rfrom‚Ñôrm n) k k< i j =
  (braidSq n (k , (<-weaken {n = n} k<) ) (suc k , k<) j ‚àô‚àô
   (braidSqC n k k< j)
   ‚àô‚àô braidSq' n (k , (<-weaken {n = n} k<) ) (suc k , k<) j) i

Rùï°rec.asquash (Rfrom‚Ñôrm n) = emsquash

from‚Ñôrm : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí ‚Ñôrm' n
from‚Ñôrm n = Rùï°rec.f (Rfrom‚Ñôrm n)

emloop-Œµ : ‚àÄ n ‚Üí refl ‚â° emloop {Group = PermG n} Œµ 
emloop-Œµ n i j =
  hcomp (Œª l ‚Üí
    primPOr i (~ i ‚à® j ‚à® ~ j)
      (Œª _ ‚Üí emcomp Œµ Œµ j l)
       Œª _ ‚Üí emloop Œµ l)
    embase 

RelimProp‚â° : ‚àÄ n ‚Üí RelimProp
      Œª z ‚Üí
        Square
         (Œª j ‚Üí from‚Ñôrm n (Rrec.f (to‚ÑôrmR‚â° n) z j))
         (emloop z)
        refl
        refl
RelimProp.isPropA (RelimProp‚â° n) x = emsquash _ _ _ _
RelimProp.ŒµA (RelimProp‚â° n) = emloop-Œµ n
RelimProp.‚à∑A (RelimProp‚â° n) k {xs} X =
  (cong-‚àô (from‚Ñôrm n) (ùï°loop k) (cong (to‚Ñôrm n) (emloop xs))
    ‚àô cong (emloop (Œ∑ k) ‚àô_) X) ‚àô sym (emloop-comp _ (Œ∑ k) xs)
   
RfromTo‚Ñôrm : ‚àÄ n ‚Üí EMelimSet (PermG n) (Œª z ‚Üí from‚Ñôrm n (to‚Ñôrm n z) ‚â° z)
EMelimSet.isSetB (RfromTo‚Ñôrm n) x = emsquash _ _
EMelimSet.b (RfromTo‚Ñôrm n) = refl
EMelimSet.bPathP (RfromTo‚Ñôrm n) = flipSquare ‚àò RelimProp.f (RelimProp‚â° n)

fromTo‚Ñôrm : ‚àÄ n ‚Üí section (from‚Ñôrm n) (to‚Ñôrm n)
fromTo‚Ñôrm n = EMelimSet.f (RfromTo‚Ñôrm n)


RtoFrom‚Ñôrm : ‚àÄ n ‚Üí 
     Rùï°elimSet {n = n} (Œª z ‚Üí to‚Ñôrm n (from‚Ñôrm n z) ‚â° z)
Rùï°elimSet.isSetA (RtoFrom‚Ñôrm n) _ = ùï°squash _ _
Rùï°elimSet.abase (RtoFrom‚Ñôrm n) = refl
Rùï°elimSet.aloop (RtoFrom‚Ñôrm n) k i j =
   (compPath-filler (ùï°loop k) refl) (~ j) i
Rùï°elimSet.alooop (RtoFrom‚Ñôrm n) k l i j = 
  
   hcomp (Œª l' ‚Üí Œª {
       (i = i0) ‚Üí compPath-filler (ùï°loop k) refl (~ j) (~ l')
      ;(i = i1) ‚Üí compPath-filler (ùï°loop l) refl (~ j) (~ l')
      ;(j = i0) ‚Üí to‚Ñôrm n
         (doubleCompPath-filler
            (emloop (Œ∑ k)) refl
             (sym (emloop (Œ∑ l))) l' i)
      ;(j = i1) ‚Üí ùï°comp k l i (~ l')
      }) ùï°base

toFrom‚Ñôrm : ‚àÄ n ‚Üí retract (from‚Ñôrm n) (to‚Ñôrm n)
toFrom‚Ñôrm n = Rùï°elimSet.f (RtoFrom‚Ñôrm n)

IsoEm‚Ñôrm : ‚àÄ n ‚Üí  Iso (‚Ñôrm n) (‚Ñôrm' n)
Iso.fun (IsoEm‚Ñôrm n) = from‚Ñôrm n
Iso.inv (IsoEm‚Ñôrm n) = to‚Ñôrm n
Iso.rightInv (IsoEm‚Ñôrm n) = fromTo‚Ñôrm n
Iso.leftInv (IsoEm‚Ñôrm n) = toFrom‚Ñôrm n

RùîΩin : ‚àÄ n ‚Üí Rùï°rec {n = n} (hSet ‚Ñì-zero)
Rùï°rec.abase (RùîΩin n) = Fin n , isSetFin {n = n}
Rùï°rec.aloop (RùîΩin n) k =
  Œ£‚â°Prop (Œª _ ‚Üí isPropIsOfHLevel 2) (ua (adjT'‚âÉ {n = n} k))
Rùï°rec.alooop (RùîΩin n) k l =
  Œ£‚â°Prop (Œª _ ‚Üí isPropIsOfHLevel 2) (Flooop n k l)
Rùï°rec.acomp (RùîΩin n) k l =
      Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
        (Flooop-comp n k l)

Rùï°rec.ainvol (RùîΩin n) k =
    Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
        (involPathSym _)

Rùï°rec.acomm (RùîΩin n) k l x =
      Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
       (flipSquare (Flooop-comm n k l x))
Rùï°rec.abraid (RùîΩin n) k k< =
  Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
    (comm‚ÜíPathP (isInjectiveTransport
      (funExt Œª x ‚Üí ‚â°Fin {n = n}
        (funExt‚Åª (A.adjTranspositionBraid k ) (fst x) ))))
Rùï°rec.asquash (RùîΩin n) = isGroupoidHSet

ùîΩinH : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí hSet ‚Ñì-zero
ùîΩinH n = Rùï°rec.f {n = n} (RùîΩin n)

ùîΩin : ‚àÄ {n} ‚Üí ‚Ñôrm n ‚Üí Type
ùîΩin {n} = fst ‚àò' ùîΩinH n

Rsuc‚Ñôrm : ‚àÄ n ‚Üí Rùï°rec {n = n} (‚Ñôrm (suc n))
Rùï°rec.abase (Rsuc‚Ñôrm n) = ùï°base
Rùï°rec.aloop (Rsuc‚Ñôrm n) k = ùï°loop (suc (fst k) , (snd k))
Rùï°rec.alooop (Rsuc‚Ñôrm n) k l =
  ùï°looop _ _
Rùï°rec.acomp (Rsuc‚Ñôrm n) k l =
  ùï°comp _ _
Rùï°rec.ainvol (Rsuc‚Ñôrm n) k =
  ùï°invol _
Rùï°rec.acomm (Rsuc‚Ñôrm n) k l x =
  ùï°comm _ _ (suc-commT (fst k) (fst l) x)
Rùï°rec.abraid (Rsuc‚Ñôrm n) k k< =
  ùï°braid _ _
Rùï°rec.asquash (Rsuc‚Ñôrm n) = ùï°squash

suc‚Ñôrm : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí ‚Ñôrm (suc n)
suc‚Ñôrm n = Rùï°rec.f {n = n} (Rsuc‚Ñôrm n)

fm2base : ‚Ñï ‚Üí FMSet2 Unit
fm2base zero = []
fm2base (suc x) = _ ‚à∑2 (fm2base x)

fm2loop : ‚àÄ n ‚Üí ‚Ñï ‚Üí fm2base n ‚â° fm2base n
fm2loop (suc n) (suc x) = cong (tt ‚à∑2_) (fm2loop n x)
fm2loop zero x = refl
fm2loop (suc zero) zero = refl
fm2loop (suc (suc n)) zero = comm _ _ _

RtoFM2‚ä§ : ‚àÄ n ‚Üí Rùï°rec {n = n} (FMSet2 Unit)
Rùï°rec.abase (RtoFM2‚ä§ n) = fm2base n
Rùï°rec.aloop (RtoFM2‚ä§ n) (k , _) = fm2loop n k
--   cong (tt ‚à∑2_) (Rùï°rec.aloop (RtoFM2‚ä§ n) (k , k<) )
-- Rùï°rec.aloop (RtoFM2‚ä§ (suc (suc n))) (zero , k<) = comm _ _ _

Rùï°rec.alooop (RtoFM2‚ä§ n) (zero , k<) (zero , l<) = refl
Rùï°rec.alooop (RtoFM2‚ä§ (suc n)) (suc k , k<) (suc l , l<) =
    cong (tt ‚à∑2_) (Rùï°rec.alooop (RtoFM2‚ä§ n) (k , k<) (l , l<))
Rùï°rec.alooop (RtoFM2‚ä§ (suc (suc n))) (zero , k<) (suc (suc l) , l<) i =
  comm _ _ (Rùï°rec.aloop (RtoFM2‚ä§ n) (l , l<) (~ i)) (i)
Rùï°rec.alooop (RtoFM2‚ä§ (suc (suc n))) (suc (suc k) , k<) (zero , l<) i =
  comm _ _ (Rùï°rec.aloop (RtoFM2‚ä§ n) (k , k<) i) (~ i)
  
Rùï°rec.alooop (RtoFM2‚ä§ (suc (suc (suc n)))) (zero , k<) (suc zero , l<) =
   comm _ _ _ ‚àô‚àô refl ‚àô‚àô cong (_ ‚à∑2_) (sym (comm _ _ _)) 
Rùï°rec.alooop (RtoFM2‚ä§ (suc (suc (suc n)))) (suc zero , k<) (zero , l<) =
  cong (_ ‚à∑2_) (comm _ _ _) ‚àô‚àô refl ‚àô‚àô sym (comm _ _ _)
  
Rùï°rec.acomp (RtoFM2‚ä§ (suc n)) (zero , k<) (zero , l<) i j =
  Rùï°rec.aloop (RtoFM2‚ä§ (suc n)) (0 , isProp‚â§ {m = 1} {n = n} k< l< i) j
 
Rùï°rec.acomp (RtoFM2‚ä§ (suc (suc (suc n)))) (zero , k<) (suc zero , l<) i j =
    doubleCompPath-filler  (comm _ _ _) refl
      (sym (cong (_ ‚à∑2_) (comm _ _ (Rùï°rec.abase (RtoFM2‚ä§ n))))) (~ j) i
Rùï°rec.acomp (RtoFM2‚ä§ (suc (suc (suc n)))) (zero , k<) (suc (suc l) , l<) i j =
  comm _ _ ((Rùï°rec.aloop (RtoFM2‚ä§ (suc n)) (l , l<) (~ i ‚à® j))) (i ‚à® j)
Rùï°rec.acomp (RtoFM2‚ä§ (suc (suc (suc n)))) (suc zero , k<) (zero , l<) i j =
  doubleCompPath-filler (cong (_ ‚à∑2_) (comm _ _
    (Rùï°rec.abase (RtoFM2‚ä§ n))))
      refl (sym (comm _ _ _)) (~ j) i
Rùï°rec.acomp (RtoFM2‚ä§ (suc (suc (suc n)))) (suc (suc k) , k<) (zero , l<) i j =
    comm _ _ (Rùï°rec.aloop (RtoFM2‚ä§ (suc n)) (k , k<) (i ‚à® j)) (~ i ‚à®  j)

Rùï°rec.acomp (RtoFM2‚ä§ (suc n)) (suc k , k<) (suc l , l<) i j =
 tt ‚à∑2 Rùï°rec.acomp (RtoFM2‚ä§ n) (k , k<) (l , l<) i j
Rùï°rec.ainvol (RtoFM2‚ä§ (suc (suc n))) (zero , k<) = comm-inv _ _ _
Rùï°rec.ainvol (RtoFM2‚ä§ (suc (suc (suc n)))) (suc k , k<) =
  cong (cong (tt  ‚à∑2_)) (Rùï°rec.ainvol (RtoFM2‚ä§ (suc (suc n))) (k , k<))
Rùï°rec.acomm (RtoFM2‚ä§ (suc (suc (suc n)))) (zero , k<) (suc (suc l) , l<) x i j =
  comm-inv tt tt
    (Rùï°rec.ainvol (RtoFM2‚ä§ (suc n)) (l , l<) (~ j) i) (~ j) (~ i)
Rùï°rec.acomm (RtoFM2‚ä§ (suc n)) (suc k , k<) (suc l , l<) x i j = 
  tt ‚à∑2 Rùï°rec.acomm (RtoFM2‚ä§ (n)) (k , k<) (l , l<)
    (pred-commT k l x) i j

Rùï°rec.abraid (RtoFM2‚ä§ (suc (suc (suc n)))) zero k< i j =
  ((Œª i ‚Üí hexU _ _ _ ((Rùï°rec.abase (RtoFM2‚ä§ n))) i j)
    ‚àô‚àô refl ‚àô‚àô
     (sym (cong (cong (tt ‚à∑2_)) (comm-inv _ _ _))
       ‚óÅ flipSquare (hexL _ _ _ (Rùï°rec.abase (RtoFM2‚ä§ n))) ‚ñ∑
       cong (cong (tt ‚à∑2_)) (comm-inv _ _ _)) j
       ) i 

Rùï°rec.abraid (RtoFM2‚ä§ (suc (suc (suc (suc n))))) (suc k) k< i j =
 tt ‚à∑2 Rùï°rec.abraid (RtoFM2‚ä§ (suc (suc (suc n)))) k k< i j
Rùï°rec.asquash (RtoFM2‚ä§ n) = trunc


toFM2‚ä§ : Œ£ _ ‚Ñôrm ‚Üí FMSet2 Unit
toFM2‚ä§ x = Rùï°rec.f {n = (fst x)} (RtoFM2‚ä§ (fst x)) (snd x)


comp0 : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
     Square
       (ùï°looop {n = suc (suc n)}(zero , tt) (suc (suc (fst k)) , snd k))
       (ùï°loop (zero , tt))
       (sym (ùï°loop (suc (suc (fst k)) , snd k)))
       refl
comp0 n k i j =
  hcomp
    (Œª l ‚Üí Œª {
       (i = i0) ‚Üí ùï°comm (zero , tt) (suc (suc (fst k)) , snd k) _ j (~ l)
     ; (i = i1) ‚Üí ùï°loop (zero , tt) (j ‚àß l)
     ; (j = i0) ‚Üí ùï°invol (suc (suc (fst k)) , snd k) l i
     ; (j = i1) ‚Üí ùï°loop (0 , tt) (~ i ‚à® l)
     }) ((ùï°comp (suc (suc (fst k)) , snd k) (zero , tt) ‚ñ∑ ùï°invol (zero , tt)) j i)

comp1 : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
     Square
       (ùï°looop {n = n} k l)
       (ùï°loop k)
       refl
       (ùï°loop l)
comp1 n k l i j =
  hcomp
    (Œª l' ‚Üí Œª {
       (i = i0) ‚Üí (ùï°looop {n = n} k l) j
     ; (i = i1) ‚Üí (ùï°loop k) (j ‚à® ~ l')
     ; (j = i0) ‚Üí ùï°loop k (~ l' ‚àß i)
     ; (j = i1) ‚Üí (ùï°loop l) i
     }) ((ùï°comp {n = n} k l) j i)


aloopcommm : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
      PathP
      (Œª i ‚Üí
         suc‚Ñôrm (suc n) (suc‚Ñôrm n (ùï°loop k i)) ‚â°
         suc‚Ñôrm (suc n) (suc‚Ñôrm n (ùï°loop k i)))
      (ùï°loop (zero , tt)) (ùï°loop (zero , tt)) 
aloopcommm n (k , k<) i j =
     hcomp (Œª l ‚Üí Œª {
    (i = i0) ‚Üí comp0 n (k , k<) l j
   ;(i = i1) ‚Üí comp1 (suc (suc n)) (zero , _) (suc (suc k) , k<) l j
   ;(j = i0) ‚Üí ùï°loop (suc (suc k) , k<) (i ‚à® ~ l)
   ;(j = i1) ‚Üí ùï°loop (suc (suc k) , k<) (i ‚àß l)
   }) (ùï°looop (zero , _) (suc (suc k) , k<) j)

fromFM2comm-diag : ‚àÄ n ‚Üí ‚àÄ l l< ‚Üí Square {A = ‚Ñôrm (2 + n)}
       (Œª i ‚Üí
         aloopcommm n (l , l<) (~ i) i)
      (ùï°looop (zero , _) (suc (suc l) , l<))
      refl
      refl
fromFM2comm-diag n l l< =
  symP-fromGoal (compPath-filler (ùï°looop (zero , _) (suc (suc l) , l<)) refl)

fromFM2comm-diag' : ‚àÄ n ‚Üí ‚àÄ l l< ‚Üí Square {A = ‚Ñôrm (2 + n)}
       (Œª i ‚Üí
         aloopcommm n (l , l<) (i) (~ i))
      (ùï°looop (suc (suc l) , l<) (zero , _))
      refl
      refl
fromFM2comm-diag' n k k< =
  congP (Œª _ ‚Üí sym) (fromFM2comm-diag n k k<) ‚àô
   sym (ùï°looop-invol _ _ _)





fromFM2comm : (n : ‚Ñï) ‚Üí Rùï°elimSet {n = n} (Œª (y : ‚Ñôrm n) ‚Üí
      (suc‚Ñôrm (suc n) (suc‚Ñôrm n y)) ‚â°
      (suc‚Ñôrm (suc n) (suc‚Ñôrm n y)))
Rùï°elimSet.isSetA (fromFM2comm n) _ = ùï°squash _ _
Rùï°elimSet.abase (fromFM2comm n) = ùï°loop (zero , _)
Rùï°elimSet.aloop (fromFM2comm n) = aloopcommm n
Rùï°elimSet.alooop (fromFM2comm n) k l i j =
 hcomp
   (Œª l' ‚Üí Œª {
     (i = i0) ‚Üí aloopcommm n k (~ l') j
    ;(i = i1) ‚Üí aloopcommm n l (~ l') j
    ;(j = i0) ‚Üí suc‚Ñôrm (suc n) (suc‚Ñôrm n (ùï°comp k l i (~ l')))
    ;(j = i1) ‚Üí suc‚Ñôrm (suc n) (suc‚Ñôrm n (ùï°comp k l i (~ l')))
     }) (ùï°loop (zero , tt) j)


fromFM2comm-inv : (n : ‚Ñï) ‚Üí Rùï°elimProp {n = n}
  (Œª (p : ‚Ñôrm n) ‚Üí
     Rùï°elimSet.f (fromFM2comm n) p
  ‚â° sym (Rùï°elimSet.f (fromFM2comm n) p))
Rùï°elimProp.isPropA (fromFM2comm-inv n) _ = ùï°squash _ _ _ _
Rùï°elimProp.abase (fromFM2comm-inv n) = ùï°invol _


-- hex-lem : ‚àÄ n ‚Üí Rùï°elimProp {n = n}
--       (Œª z‚ÇÅ ‚Üí
--          Square
--          {!!}
--          {!!}
--          {!!}
--          {!!})
-- hex-lem = {!!}

RfromFM2‚ä§' : RElim {A = Unit} Œª xs ‚Üí ‚Ñôrm (len2 xs)
RElim.[]* RfromFM2‚ä§' = ùï°base
RElim._‚à∑*_ RfromFM2‚ä§' _ = suc‚Ñôrm _
RElim.comm* RfromFM2‚ä§' _ _ = (Rùï°elimSet.f (fromFM2comm _))
RElim.comm-inv* RfromFM2‚ä§' _ _ = Rùï°elimProp.f (fromFM2comm-inv _)
RElim.hexDiag* RfromFM2‚ä§' _ _ _ p =
      (cong‚Ä≤ (suc‚Ñôrm _) (((Rùï°elimSet.f (fromFM2comm _)) p))
      ‚àô‚àô ((Rùï°elimSet.f (fromFM2comm _)) (suc‚Ñôrm _ p))
      ‚àô‚àô cong‚Ä≤ (suc‚Ñôrm _) (sym ((Rùï°elimSet.f (fromFM2comm _)) p)) )
RElim.hexU* RfromFM2‚ä§' _ _ _ =
  Rùï°elimProp.f (record { isPropA =
    Œª _ ‚Üí isOfHLevelRetractFromIso 1 (invIso PathP‚Üícomm-Iso)
      (ùï°squash _ _ _ _) ;
    abase = Œª i j ‚Üí
      hcomp (Œª l ‚Üí
        primPOr (~ i) (j ‚à® ~ j) (Œª _ ‚Üí ùï°loop (1 , tt) j)
          Œª _ ‚Üí hcomp
              (Œª l' ‚Üí Œª {
                  (i = i0) ‚Üí ùï°loop (zero , tt) (~ l' ‚àß l)
                 ;(i = i1) ‚Üí ùï°invol (1 , tt) l' l
                 ;(l = i0) ‚Üí ùï°looop (zero , tt) (1 , tt) i
                 ;(l = i1) ‚Üí ùï°loop (zero , tt) (i ‚à® (~ l'))
                 }) (ùï°comp (zero , tt) (1 , tt) i l))
       (ùï°braid zero tt i j) })
  
RElim.hexL* RfromFM2‚ä§' _ _ _ p =
  symP-fromGoal (doubleCompPath-filler _ _ _)
RElim.trunc* RfromFM2‚ä§' _ = ùï°squash

fromFM2‚ä§ : FMSet2 Unit ‚Üí Œ£ ‚Ñï ‚Ñôrm
fromFM2‚ä§ xs = (len2 xs) , (RElim.f RfromFM2‚ä§' xs )


Rsuc‚Ñôrm-lem : ‚àÄ n ‚Üí Rùï°elimSet {n = n}
  Œª p ‚Üí toFM2‚ä§ (suc n , suc‚Ñôrm n p) ‚â° tt ‚à∑2 toFM2‚ä§ (n , p)
Rùï°elimSet.isSetA (Rsuc‚Ñôrm-lem n) _ = trunc _ _
Rùï°elimSet.abase (Rsuc‚Ñôrm-lem n) = refl
Rùï°elimSet.aloop (Rsuc‚Ñôrm-lem n) k _ = refl
Rùï°elimSet.alooop (Rsuc‚Ñôrm-lem n) k l _ = refl

suc‚Ñôrm-lem : ‚àÄ n p ‚Üí toFM2‚ä§ (suc n , suc‚Ñôrm n p) ‚â° tt ‚à∑2 toFM2‚ä§ (n , p)
suc‚Ñôrm-lem n = Rùï°elimSet.f (Rsuc‚Ñôrm-lem n)

comm*-lem : ‚àÄ n ‚Üí Rùï°elimProp {n = n}
               (Œª p ‚Üí Square {A = FMSet2 Unit}
        (suc‚Ñôrm-lem (suc n) (suc‚Ñôrm n p) ‚àô cong‚Ä≤ (tt ‚à∑2_) (suc‚Ñôrm-lem n p))
        (suc‚Ñôrm-lem (suc n) (suc‚Ñôrm n p) ‚àô cong‚Ä≤ (tt ‚à∑2_) (suc‚Ñôrm-lem n p))
        (Œª i ‚Üí toFM2‚ä§ (suc (suc n) , (Rùï°elimSet.f {n = n} (fromFM2comm n)) p i))
        (comm tt tt (toFM2‚ä§ (n , p))))
Rùï°elimProp.isPropA (comm*-lem n) _ =
   isOfHLevelRetractFromIso 1 (invIso PathP‚Üícomm-Iso) (trunc _ _ _ _)
Rùï°elimProp.abase (comm*-lem n) i = refl ‚àô‚àô refl ‚àô‚àô refl

RfromToFM2‚ä§ : RElimSet' (Œª z ‚Üí toFM2‚ä§ (fromFM2‚ä§ z) ‚â° z) 
RElimSet'.[]* RfromToFM2‚ä§ = refl
(RfromToFM2‚ä§ RElimSet'.‚à∑* tt) {xs} X =
  uncurry suc‚Ñôrm-lem (fromFM2‚ä§ xs) ‚àô cong (tt ‚à∑2_) X
  
RElimSet'.comm* RfromToFM2‚ä§ tt tt {xs} X i j =
 hcomp
   (Œª l ‚Üí primPOr (j ‚à® ~ j) ((i ‚à® ~ i))
      (primPOr j (~ j) (Œª _ ‚Üí comm tt tt (X l) i)
        Œª _ ‚Üí toFM2‚ä§ (fromFM2‚ä§ (comm tt tt xs i)))
      Œª _ ‚Üí (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (tt ‚à∑2 xs)) ‚àô
         cong‚Ä≤ (tt ‚à∑2_) (compPath-filler (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ xs))
                    (cong‚Ä≤ (tt ‚à∑2_) X) l)) j)

  (Rùï°elimProp.f {n = (fst (fromFM2‚ä§ xs))}
    (comm*-lem (fst (fromFM2‚ä§ xs))) (snd (fromFM2‚ä§ xs)) i j)

-- RElimSet.hexDiag* RfromToFM2‚ä§ _ _ _ b i j = 
--   hcomp
--     (Œª l ‚Üí Œª {
--       (i = i0) ‚Üí {!!}
--      ;(i = i1) ‚Üí {!!}
--      ;(j = i0) ‚Üí {!!}
--      ;(j = i1) ‚Üí hexDiag _ _ _ (b l) i
--        })
--     {!!}

-- i = i0 ‚ä¢ (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (y ‚à∑2 z ‚à∑2 xs)) ‚àô
--           (Œª i‚ÇÅ ‚Üí
--              tt ‚à∑2
--              (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (z ‚à∑2 xs)) ‚àô
--               (Œª i‚ÇÇ ‚Üí
--                  tt ‚à∑2 (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ xs) ‚àô (Œª i‚ÇÉ ‚Üí tt ‚à∑2 b i‚ÇÉ)) i‚ÇÇ))
--              i‚ÇÅ))
--          j
-- i = i1 ‚ä¢ (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (y ‚à∑2 x ‚à∑2 xs)) ‚àô
--           (Œª i‚ÇÅ ‚Üí
--              tt ‚à∑2
--              (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (x ‚à∑2 xs)) ‚àô
--               (Œª i‚ÇÇ ‚Üí
--                  tt ‚à∑2 (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ xs) ‚àô (Œª i‚ÇÉ ‚Üí tt ‚à∑2 b i‚ÇÉ)) i‚ÇÇ))
--              i‚ÇÅ))
--          j
-- j = i0 ‚ä¢ toFM2‚ä§ (fromFM2‚ä§ (hexDiag x y z xs i))
-- j = i1 ‚ä¢ hexDiag x y z xs i
-- b  : toFM2‚ä§ (fromFM2‚ä§ xs) ‚â° xs

RElimSet'.trunc* RfromToFM2‚ä§ _ = trunc _ _

fromToFM2‚ä§ : retract fromFM2‚ä§ toFM2‚ä§
fromToFM2‚ä§ = RElimSet'.f RfromToFM2‚ä§

dccf-lem : ‚àÄ {a a' : A} ‚Üí (p : a ‚â° a') ‚Üí
             Square p p (refl ‚àô‚àô refl ‚àô‚àô refl) refl
dccf-lem {a = a} {a'} p i j = 
   hcomp
     (Œª l ‚Üí Œª {
       (i = i0) ‚Üí p j
      ;(i = i1) ‚Üí p j
      ;(j = i1) ‚Üí a'
       })
     (p j)



RtoFromFM2‚ä§-fst : ‚àÄ n ‚Üí Rùï°elimSet {n = n} (Œª z ‚Üí len2 (toFM2‚ä§ (n , z)) ‚â° n)
Rùï°elimSet.isSetA (RtoFromFM2‚ä§-fst n) _ = isProp‚ÜíisSet (isSet‚Ñï _ _)
Rùï°elimSet.abase (RtoFromFM2‚ä§-fst zero) = refl
Rùï°elimSet.abase (RtoFromFM2‚ä§-fst (suc n)) =
  cong suc (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n))
Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (suc n)) (suc k , k<) i j =
  suc (Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (n)) (k , k<) i j)
Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (suc (suc n))) (zero , k<) = refl

Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc n)) (suc k , k<) (suc l , l<) i j =
  suc (Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst n) (k , k<) (l , l<) i j)
Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc n)) (zero , k<) (zero , l<) = refl
Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc (suc (suc n)))) (zero , k<) (suc zero , l<) i j =
 suc (suc (suc (dccf-lem (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n)) i j)))
Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc (suc (suc (suc n))))) (zero , k<) (suc (suc l) , l<) i j = suc (suc (Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (suc (suc n))) (l , l<) (~ i) j))
Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc (suc (suc n)))) (suc zero , k<) (zero , l<) i j =
  suc (suc (suc (dccf-lem (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n)) i j)))
Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc (suc (suc (suc n))))) (suc (suc k) , k<) (zero , l<) i j = suc (suc ((Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (suc (suc n))) (k , k<) i j)))


-- ‚à∑2-lem-fst : ‚àÄ xs ‚Üí (fromFM2‚ä§ (tt ‚à∑2 xs)) ‚â°
--    (suc (fst (fromFM2‚ä§ xs)) , uncurry suc‚Ñôrm (fromFM2‚ä§ xs))

base‚â° : ‚àÄ n ‚Üí PathP (Œª i ‚Üí ‚Ñôrm (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) i))
      (RElim.f RfromFM2‚ä§' (fm2base n)) ùï°base
base‚â° zero _ = ùï°base
base‚â° (suc n) = congP (Œª _ ‚Üí suc‚Ñôrm _) (base‚â° n)



loop‚â° : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
      PathP
      (Œª i ‚Üí
         PathP (Œª i‚ÇÅ ‚Üí ‚Ñôrm (Rùï°elimSet.f (RtoFromFM2‚ä§-fst n) (ùï°loop k i) i‚ÇÅ))
         (snd (fromFM2‚ä§ (toFM2‚ä§ (n , ùï°loop k i)))) (ùï°loop k i))
      (base‚â° n) (base‚â° n)
loop‚â° (suc n) (suc k , k<) i j = suc‚Ñôrm _ (loop‚â° n (k , k<) i j) 
loop‚â° (suc (suc n)) (zero , k<) i j =
        (Rùï°elim.f
          (Rùï°elimSet.fR (fromFM2comm (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j)))
         ((base‚â° n) j ) i)

looop‚â° : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
      PathP
      (Œª i ‚Üí
         PathP
         (Œª i‚ÇÅ ‚Üí ‚Ñôrm (Rùï°elimSet.f (RtoFromFM2‚ä§-fst n) (ùï°looop k l i) i‚ÇÅ))
                           (snd (fromFM2‚ä§ (toFM2‚ä§ (n , ùï°looop k l i))))
         (ùï°looop k l i))
      (base‚â° n) (base‚â° n)
looop‚â° (suc n) (suc k , k<) (suc l , l<) i j =
   suc‚Ñôrm _ (looop‚â° n (k , k<) (l , l<) i j)      
looop‚â° (suc (suc n)) (zero , k<) (zero , l<) i j =
  hcomp (Œª l' ‚Üí primPOr j (i ‚à® ~ i ‚à® ~ j)
             (Œª _ ‚Üí ùï°comp (zero , _) (zero , _) i (~ l'))
             Œª _ ‚Üí loop‚â° (suc (suc n)) (zero , _) (~ l') j)
        (suc‚Ñôrm _ (suc‚Ñôrm _ (base‚â° n j)))
looop‚â° (suc (suc (suc n))) (zero , k<) (suc zero , l<) i j = 
  comp (Œª l' ‚Üí  ‚Ñôrm (3 +
           hfill
          (Œª { l (i = i0) ‚Üí Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j
             ; l (i = i1) ‚Üí Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j
             ; l (j = i1) ‚Üí n
             }) (inS (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j)) l'))
     (Œª l' ‚Üí Œª {
         (i = i0) ‚Üí loop‚â° (suc (suc (suc n))) (zero , _) (~ l') j
        ;(i = i1) ‚Üí loop‚â° (suc (suc (suc n))) (1 , _) (~ l') j
        ;(j = i1) ‚Üí ùï°comp (zero , _) (1 , _) i (~ l')
        })
        ((suc‚Ñôrm _ (suc‚Ñôrm _ (suc‚Ñôrm _ (base‚â° n j)))))

looop‚â° (suc (suc (suc (suc n)))) kk@(zero , k<) ll@(suc (suc l) , l<) =
  flipSquareP ((Œª j i ‚Üí
      (((Rùï°elim.f
            (Rùï°elimSet.fR (fromFM2comm _))
            (loop‚â° (suc (suc n)) (l , l<) (~ i) j) i))) ) ‚ñ∑
             fromFM2comm-diag (suc (suc n)) l l<)
   
looop‚â° (suc (suc (suc n))) (suc zero , k<) (zero , l<) i j =
     comp (Œª l' ‚Üí  ‚Ñôrm (3 +
           hfill
          (Œª { l (i = i1) ‚Üí Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j
             ; l (i = i0) ‚Üí Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j
             ; l (j = i1) ‚Üí n
             }) (inS (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j)) l'))
     (Œª l' ‚Üí Œª {
         (i = i1) ‚Üí loop‚â° (suc (suc (suc n))) (zero , _) (~ l') j
        ;(i = i0) ‚Üí loop‚â° (suc (suc (suc n))) (1 , _) (~ l') j
        ;(j = i1) ‚Üí ùï°comp (1 , _) (zero , _) i (~ l')
        })
        ((suc‚Ñôrm _ (suc‚Ñôrm _ (suc‚Ñôrm _ (base‚â° n j)))))

looop‚â° (suc (suc (suc (suc n)))) (suc (suc k) , k<) (zero , l<) =
    flipSquareP ((Œª j i ‚Üí
      (((Rùï°elim.f
            (Rùï°elimSet.fR (fromFM2comm _))
            (loop‚â° (suc (suc n)) (k , k<) (i) j) (~ i)))) ) ‚ñ∑
             fromFM2comm-diag' (suc (suc n)) k k<)


RtoFromFM2‚ä§ : ‚àÄ n ‚Üí Rùï°elimSet {n = n} (Œª z ‚Üí
       PathP (Œª i ‚Üí ‚Ñôrm ((Rùï°elimSet.f (RtoFromFM2‚ä§-fst n) z i)))
           (snd (fromFM2‚ä§ (toFM2‚ä§ (n , z)))) z)
Rùï°elimSet.isSetA (RtoFromFM2‚ä§ n) _ =
 isOfHLevelRetractFromIso 2 (PathPIsoPath _ _ _) (ùï°squash _ _)
Rùï°elimSet.abase (RtoFromFM2‚ä§ n) = base‚â° n
Rùï°elimSet.aloop (RtoFromFM2‚ä§ n) = loop‚â° n
Rùï°elimSet.alooop (RtoFromFM2‚ä§ n) = looop‚â° n

toFromFM2‚ä§ : section fromFM2‚ä§ toFM2‚ä§
toFromFM2‚ä§ (n , p) = Œ£PathP (_  , Rùï°elimSet.f {n = n} (RtoFromFM2‚ä§ n) p)

Iso-FM2‚ä§-Œ£‚Ñôrm : Iso (FMSet2 Unit) (Œ£ _ ‚Ñôrm)
Iso.fun Iso-FM2‚ä§-Œ£‚Ñôrm = fromFM2‚ä§
Iso.inv Iso-FM2‚ä§-Œ£‚Ñôrm = toFM2‚ä§
Iso.rightInv Iso-FM2‚ä§-Œ£‚Ñôrm = toFromFM2‚ä§
Iso.leftInv Iso-FM2‚ä§-Œ£‚Ñôrm = fromToFM2‚ä§


module _ {A : Type ‚Ñì} where


-- --  -- pci = preCompInvol.e' {f = f} (B j i) fInvol
--  ‚ÜíadjT : ‚àÄ n (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n))  ‚Üí (Fin n ‚Üí A) ‚âÉ (Fin n ‚Üí A)
--  ‚ÜíadjT n k = preCompInvol.e' {f = adjT n k} A (isInvolution-adjT n  k)
 
--  ùîΩ‚Üílooop : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n))  ‚Üí (Fin n ‚Üí A) ‚â° (Fin n ‚Üí A)
--  ùîΩ‚Üílooop n k l i =
--    Glue (Fin n ‚Üí A)
--      Œª { (i = i0) ‚Üí (Fin n ‚Üí A) , ‚ÜíadjT n k
--        ; (i = i1) ‚Üí (Fin n ‚Üí A) , ‚ÜíadjT n l } 

--  ùîΩ‚Üílooop-comp-si : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
--       Square
--          (Œª i ‚Üí Flooop n k l i ‚Üí A)
--          (ùîΩ‚Üílooop n k l)
--          refl
--          refl
--  ùîΩ‚Üílooop-comp-si n k l j i =
--    Glue (Flooop n k l (i ‚à® j) ‚Üí A)
--      Œª { (i = i0) ‚Üí {!!}
--        ; (i = i1) ‚Üí {!!}
--        ; (j = i0) ‚Üí _ , idEquiv _
--        }

--  ùîΩ‚Üílooop-comp : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
--      Square
--        (ua (‚ÜíadjT n k))
--        (ua (‚ÜíadjT n l))
--        (ùîΩ‚Üílooop n k l)
--        refl
--  ùîΩ‚Üílooop-comp = {!!}

--  RùîΩ‚Üí : ‚àÄ n ‚Üí Rùï°elim {n = n} Œª p ‚Üí singl (ùîΩin p ‚Üí A)
--  Rùï°elim.isGroupoidA (RùîΩ‚Üí n) _ = isOfHLevelPlus 3 (isContrSingl _)
--  Rùï°elim.abase (RùîΩ‚Üí n) = _ , refl
--  Rùï°elim.aloop (RùîΩ‚Üí n) k i = _ ,
--    Œª j ‚Üí preCompInvol.eq {f = adjT n k} A (isInvolution-adjT n  k) j i   
--  fst (Rùï°elim.alooop (RùîΩ‚Üí n) k l i) = ùîΩ‚Üílooop n k l i
--  snd (Rùï°elim.alooop (RùîΩ‚Üí n) k l i) j = ùîΩ‚Üílooop-comp-si n k l j i
--  Rùï°elim.acomp (RùîΩ‚Üí n) = {!!}
--  Rùï°elim.ainvol (RùîΩ‚Üí n) = {!!}
--  Rùï°elim.acomm (RùîΩ‚Üí n) = {!!}
--  Rùï°elim.abraid (RùîΩ‚Üí n) = {!!}
--  -- Rùï°elim.isGroupoidA (Rùïç n) p =
--  --    isOfHLevelPlus 3 (isContrSingl _)
--  -- Rùï°elim.abase (RùîΩ‚Üí n) = (ùîΩin p ‚Üí A) , ua (tabEquiv n)
--  -- Rùï°elim.aloop (Rùïç n) k = Œ£PathP (ua (adjT√ó^‚âÉ (fst k)) , ua-adj-law n k)
--  -- Rùï°elim.alooop (Rùïç n) k l = Œ£PathP (ùïçlooop n (fst k) (fst l) , ùïçloopSi n k l )
--  -- fst (Rùï°elim.acomp (Rùïç n) (k , _) (l , _) i j) = ùïçcomp n k l i j

--  -- snd (Rùï°elim.acomp (Rùïç n) k l i j) m = ùïçcompSi n k l m i j
--  -- fst (Rùï°elim.ainvol (Rùïç n) k i j) = ùïçinvol n (fst k) i j
--  -- snd (Rùï°elim.ainvol (Rùïç n) k i j) = {!!}
--  -- Rùï°elim.acomm (Rùïç n) = {!!}
--  -- Rùï°elim.abraid (Rùïç n) = {!!}


sucF'-fst : ‚àÄ n k k< ‚Üí PathP (Œª i ‚Üí ua (adjT'‚âÉ {n = n} (k , k<)) i ‚Üí ‚Ñï)
                  (fst ‚àò fst (adjT'‚âÉ {suc n} (suc k , k<)) ‚àò sucF)
                  (suc ‚àò fst)
sucF'-fst n k k< i x = suc (fst (unglue (i ‚à® ~ i) x))

sucF'-snd : ‚àÄ n k k< ‚Üí PathP (Œª i ‚Üí (x : ua (adjT'‚âÉ {n = n} (k , k<)) i) ‚Üí
                                (sucF'-fst n k k< i x) ‚â§ n)
                 (Œª x ‚Üí adjT< (suc n) (suc k) (fst (sucF {n = n} x))
                         k< (snd (sucF {n = n} x)))
                 Œª x ‚Üí snd x
sucF'-snd n k k< =
  isProp‚ÜíPathP (Œª i ‚Üí isPropŒ† Œª x ‚Üí isProp‚â§ {m = sucF'-fst n k k< i x} {n = n})
    (Œª x ‚Üí adjT< (suc n) (suc k) (suc (fst x)) k< (snd x)) snd

sucF' : ‚àÄ n k k< ‚Üí PathP (Œª i ‚Üí ua (adjT'‚âÉ {n = n} (k , k<)) i ‚Üí Fin (suc n))
                  (fst (adjT'‚âÉ {suc n} (suc k , k<)) ‚àò sucF)
                  sucF
sucF' n k k< i x =
  sucF'-fst n k k< i x ,
   sucF'-snd n k k< i x


-- module _ {A : Type ‚Ñì} where

 
--  swap-01-√ó : ‚àÄ {n} ‚Üí (A √ó^ n) ‚Üí (A √ó^ n)
--  swap-01-√ó {zero} = idfun _
--  swap-01-√ó {suc zero} = idfun _
--  swap-01-√ó {suc (suc n)} = swap-01

--  invo-swap-01-√ó : ‚àÄ n ‚Üí isInvolution (swap-01-√ó {n})
--  invo-swap-01-√ó zero x = refl
--  invo-swap-01-√ó (suc zero) x = refl
--  invo-swap-01-√ó (suc (suc n)) x = refl

--  adjT√ó^ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí
--               (A √ó^ n) ‚Üí (A √ó^ n)
--  adjT√ó^ zero = swap-01-√ó
--  adjT√ó^ {suc n} (suc k) (x , xs) = x , (adjT√ó^ k xs)
--  adjT√ó^ {zero} (suc k) = idfun _
 
--  isEquiv-adjT√ó^ : ‚àÄ n k ‚Üí isEquiv (adjT√ó^ {n} k)
--  isEquiv-adjT√ó^ (suc n) (suc k) =
--    snd (‚âÉ-√ó (_ , idIsEquiv _) (_ , isEquiv-adjT√ó^ n k))
--  isEquiv-adjT√ó^ zero zero = idIsEquiv _
--  isEquiv-adjT√ó^ (suc zero) zero = idIsEquiv _
--  isEquiv-adjT√ó^ (suc (suc n)) zero = snd Œ£-swap-01-‚âÉ
--  isEquiv-adjT√ó^ zero (suc k) = idIsEquiv _

--  adjT√ó^‚âÉ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí (A √ó^ n) ‚âÉ (A √ó^ n)
--  adjT√ó^‚âÉ k = adjT√ó^ k , isEquiv-adjT√ó^ _ k

--  isInvo-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k ‚Üí isInvolution (adjT√ó^ {n} k)
--  isInvo-adjT√ó^ zero = invo-swap-01-√ó _
--  isInvo-adjT√ó^ {zero} (suc k) _ = refl
--  isInvo-adjT√ó^ {suc n} (suc k) (x , xs) =
--    cong‚Ä≤ (x ,_) (isInvo-adjT√ó^ {n} k xs)

--  braid-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k ‚Üí  suc (suc k) < n ‚Üí ‚àÄ v ‚Üí 
--    (adjT√ó^  {n} k ‚àò adjT√ó^  {n} (suc k) ‚àò adjT√ó^  {n} (k)) v
--    ‚â° (adjT√ó^  {n} (suc k) ‚àò adjT√ó^  {n} (k) ‚àò adjT√ó^  {n} (suc k)) v
--  braid-adjT√ó^ {suc n} (suc k) x (v , vs) = cong‚Ä≤ (v ,_) (braid-adjT√ó^ {n} k x vs)
--  braid-adjT√ó^ {suc (suc (suc n))} zero x v = refl
 

--  comm-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k l ‚Üí (k< : (suc k) < n) (l< : (suc l) < n) ‚Üí 
--    A.commT k l ‚Üí ‚àÄ v ‚Üí  
--    (adjT√ó^  {n} l
--      ‚àò adjT√ó^  {n} k ) v
--    ‚â° (adjT√ó^  {n} k
--      ‚àò adjT√ó^  {n} l ) v
--  comm-adjT√ó^ {n = suc n} (suc k) (suc l) k< l< x (v , vs) =
--     cong (v ,_) (comm-adjT√ó^ {n = n} k l k< l< (A.pred-commT k l x) vs)
--  comm-adjT√ó^ {n = suc (suc n)} zero (suc (suc l)) k< l< x v = refl



--  tabEquiv : ‚àÄ n ‚Üí (Fin n ‚Üí A) ‚âÉ (A √ó^ n)
--  tabEquiv n = isoToEquiv (invIso (Iso-√ó^-F‚Üí n))

    
--  zz : ‚àÄ n k ‚Üí PathP (Œª i ‚Üí (ua (adjT'‚âÉ {n} k) i ‚Üí A) ‚Üí (A √ó^ n))
--         (adjT√ó^ (fst k) ‚àò tabulate)
--         (tabulate)           

--  zz (suc n) (suc k , k<) i x =
--    x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí zero , tt }) (0 , tt)) ,
--    zz n (k , k<) i
--        (x ‚àò (Œª y ‚Üí glue (Œª { (i = i0) ‚Üí sucF y ; (i = i1) ‚Üí sucF y })
--          (sucF' n k k< i y)))   
--  zz (suc (suc n)) (zero , k<) i x =
--    (x (glue (Œª { (i = i0) ‚Üí suc zero , tt ; (i = i1) ‚Üí zero , tt }) (0 , tt)) ,
--     x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí suc zero , tt }) (1 , tt)) ,
--    tabulate Œª y ‚Üí x (glue (Œª { (i = i0) ‚Üí sucF (sucF y)
--                              ; (i = i1) ‚Üí sucF (sucF y) })
--                (sucF (sucF y))))

--  ua-adj-lawP : ‚àÄ n k ‚Üí
--        PathP (Œª i ‚Üí (ua (adjT'‚âÉ {n = n} k) i ‚Üí A) ‚âÉ ua (adjT√ó^‚âÉ {n = n} (fst k)) i)
--                  (tabEquiv n)
--                  (tabEquiv n)
--  ua-adj-lawP n k = Œ£PathPProp isPropIsEquiv
--    Œª i x ‚Üí glue (Œª { (i = i0) ‚Üí tabulate x
--                    ; (i = i1) ‚Üí tabulate x }) (zz n k i x) 

--  ua-adj-law : ‚àÄ n k ‚Üí
--    Square
--        (ua (tabEquiv n))
--        (ua (tabEquiv n))
--        (Œª i ‚Üí ua (adjT'‚âÉ {n = n} k) i ‚Üí A)
--        (ua (adjT√ó^‚âÉ {n = n} (fst k)))
       
--  ua-adj-law n k i j =
--    Glue (ua (adjT√ó^‚âÉ {n = n} (fst k)) i)
--         Œª {  (j = i0) ‚Üí (ua (adjT'‚âÉ {n = n} k) i ‚Üí A) , ua-adj-lawP n k i
--            ; (j = i1) ‚Üí ua (adjT√ó^‚âÉ {n = n} (fst k)) i , idEquiv _
--            }


-- -- -- -- --  braid-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k ‚Üí  suc (suc k) < n ‚Üí ‚àÄ v ‚Üí 
-- -- -- -- --    (adjT√ó^  {n} k ‚àò adjT√ó^  {n} (suc k) ‚àò adjT√ó^  {n} (k)) v
-- -- -- -- --    ‚â° (adjT√ó^  {n} (suc k) ‚àò adjT√ó^  {n} (k) ‚àò adjT√ó^  {n} (suc k)) v
-- -- -- -- --  braid-adjT√ó^ {n = suc (suc (suc n))} zero x _ = refl
-- -- -- -- --  braid-adjT√ó^ {n = suc (suc n)} (suc k) x (v , vs) =
-- -- -- -- --    cong (v ,_) (braid-adjT√ó^ k x vs)

-- -- -- -- --  comm-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k l ‚Üí (k< : (suc k) < n) (l< : (suc l) < n) ‚Üí 
-- -- -- -- --    A.commT k l ‚Üí ‚àÄ v ‚Üí  
-- -- -- -- --    (adjT√ó^  {n} l
-- -- -- -- --      ‚àò adjT√ó^  {n} k ) v
-- -- -- -- --    ‚â° (adjT√ó^  {n} k
-- -- -- -- --      ‚àò adjT√ó^  {n} l ) v
-- -- -- -- --  comm-adjT√ó^ {n = suc (suc (suc n))} zero (suc (suc l)) k< l< x v = refl
-- -- -- -- --  comm-adjT√ó^ {n = suc (suc n)} (suc k) (suc (suc l)) k< l< x (v , vs) =
-- -- -- -- --     cong (v ,_) (comm-adjT√ó^
-- -- -- -- --      {n = suc n} k (suc l) k< l< x vs)


-- -- -- -- --  adjT√ó^ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí
-- -- -- -- --    Iso (A √ó^ n)
-- -- -- -- --        (A √ó^ n)
-- -- -- -- --  adjT√ó^ {n} k =
-- -- -- -- --   involIso {f = adjT√ó^ {n} k} (isInvo-adjT√ó^ {n} k)

-- -- -- -- --  adjT√ó^‚âÉ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí
-- -- -- -- --        (A √ó^ n) ‚âÉ (A √ó^ n)
-- -- -- -- --  adjT√ó^‚âÉ {n} k =
-- -- -- -- --   involEquiv {f = adjT√ó^ {n} k} (isInvo-adjT√ó^ {n} k)



-- -- -- -- --  tabEquiv : ‚àÄ n ‚Üí (Fin n ‚Üí A) ‚âÉ (A √ó^ n)
-- -- -- -- --  tabEquiv n = isoToEquiv (invIso (Iso-√ó^-F‚Üí n))

-- -- -- -- --  -- zz' : ‚àÄ n k k< ‚Üí PathP (Œª i ‚Üí ua (adjT'‚âÉ {n = n} (k , k<)) i ‚Üí
-- -- -- -- --  --                               ua (adjT'‚âÉ {n = suc n} (suc k , k<)) i)
-- -- -- -- --  --         sucF
-- -- -- -- --  --         sucF
-- -- -- -- --  -- zz' (suc (suc n)) k k< i x =
-- -- -- -- --  --   glue (Œª { (i = i0) ‚Üí sucF x ; (i = i1) ‚Üí sucF x }) (sucF (unglue (i ‚à® ~ i) x))
   
-- -- -- -- --  zz : ‚àÄ n k ‚Üí PathP (Œª i ‚Üí (ua (adjT'‚âÉ {n} k) i ‚Üí A) ‚Üí (A √ó^ n))
-- -- -- -- --         (adjT√ó^ (fst k) ‚àò tabulate)
-- -- -- -- --         (tabulate)           
-- -- -- -- --  zz (suc (suc n)) (zero , k<) i x =
-- -- -- -- --    (x (glue (Œª { (i = i0) ‚Üí suc zero , tt ; (i = i1) ‚Üí zero , tt }) (0 , tt)) ,
-- -- -- -- --     x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí suc zero , tt }) (1 , tt)) ,
-- -- -- -- --    tabulate Œª y ‚Üí x (glue (Œª { (i = i0) ‚Üí sucF (sucF y)
-- -- -- -- --                              ; (i = i1) ‚Üí sucF (sucF y) })
-- -- -- -- --                (sucF (sucF y))) )
-- -- -- -- --  zz (suc (suc (suc n))) (suc k , k<) i x =
-- -- -- -- --    x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí zero , tt }) (0 , tt)) ,
-- -- -- -- --    zz (suc (suc n)) (k , k<) i
-- -- -- -- --        (x ‚àò (Œª y ‚Üí glue (Œª { (i = i0) ‚Üí sucF y ; (i = i1) ‚Üí sucF y })
-- -- -- -- --          (sucF (unglue (i ‚à® ~ i) y))))   

-- -- -- -- --  ua-adj-lawP : ‚àÄ n k ‚Üí
-- -- -- -- --        PathP (Œª i ‚Üí (ua (adjT'‚âÉ {n = n} k) i ‚Üí A) ‚âÉ ua (adjT√ó^‚âÉ {n = n} (fst k)) i)
-- -- -- -- --                  (tabEquiv n)
-- -- -- -- --                  (tabEquiv n)
-- -- -- -- --  ua-adj-lawP n k = Œ£PathPProp isPropIsEquiv
-- -- -- -- --    Œª i x ‚Üí glue (Œª { (i = i0) ‚Üí tabulate x
-- -- -- -- --                    ; (i = i1) ‚Üí tabulate x }) (zz n k i x) 

-- -- -- -- --  ua-adj-law : ‚àÄ n k ‚Üí
-- -- -- -- --    Square
-- -- -- -- --        (ua (tabEquiv n))
-- -- -- -- --        (ua (tabEquiv n))
-- -- -- -- --        (Œª i ‚Üí ua (adjT'‚âÉ {n = n} k) i ‚Üí A)
-- -- -- -- --        (ua (adjT√ó^‚âÉ {n = n} (fst k)))
       
-- -- -- -- --  ua-adj-law n k i j =
-- -- -- -- --    Glue (ua (adjT√ó^‚âÉ {n = n} (fst k)) i)
-- -- -- -- --         Œª {  (j = i0) ‚Üí (ua (adjT'‚âÉ {n = n} k) i ‚Üí A) , ua-adj-lawP n k i
-- -- -- -- --            ; (j = i1) ‚Üí ua (adjT√ó^‚âÉ {n = n} (fst k)) i , idEquiv _
-- -- -- -- --            }

-- -- -- -- --  ùïçlooop : ‚àÄ n ‚Üí (k l : ‚Ñï) ‚Üí
-- -- -- -- --     (A √ó^ n) ‚â° (A √ó^ n)
-- -- -- -- --  ùïçlooop n k l i =
-- -- -- -- --    Glue (A √ó^ n)
-- -- -- -- --       Œª { (i = i0) ‚Üí _ , adjT√ó^‚âÉ k
-- -- -- -- --         ; (i = i1) ‚Üí _ , adjT√ó^‚âÉ l
-- -- -- -- --          }

-- -- -- -- --  zz-oo-lem : ‚àÄ n l l< ‚Üí PathP (Œª i ‚Üí ua (adjT'‚âÉ {n = suc (suc n)} (l , l<)) (~ i) ‚Üí
-- -- -- -- --       Flooop (suc (suc (suc (suc n)))) (zero , tt) (suc (suc l) , l<) i)
-- -- -- -- --         (sucF ‚àò sucF)
-- -- -- -- --         (sucF ‚àò sucF)
-- -- -- -- --  zz-oo-lem n l l< i x =
-- -- -- -- --    glue (Œª { (i = i0) ‚Üí sucF (sucF x) ; (i = i1) ‚Üí sucF (sucF x) })
-- -- -- -- --      (sucF (sucF (unglue (i ‚à® ~ i) x)))

-- -- -- -- --  zz-oo : ‚àÄ n k l ‚Üí PathP (Œª i ‚Üí (Flooop n k l i ‚Üí A) ‚Üí (A √ó^ n))
-- -- -- -- --         (adjT√ó^ (fst k) ‚àò tabulate)
-- -- -- -- --         (adjT√ó^ (fst l) ‚àò tabulate)
-- -- -- -- --  zz-oo (suc (suc n)) (zero , k<) (zero , l<) i x =
-- -- -- -- --    (x (glue (Œª { (i = i0) ‚Üí suc zero , tt ; (i = i1) ‚Üí suc zero , tt }) (0 , tt)) ,
-- -- -- -- --     x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí zero , tt }) (1 , tt)) ,
-- -- -- -- --    tabulate Œª y ‚Üí x (glue (Œª { (i = i0) ‚Üí sucF (sucF y)
-- -- -- -- --                              ; (i = i1) ‚Üí sucF (sucF y) })
-- -- -- -- --                (sucF (sucF y))) )
 
-- -- -- -- --  zz-oo (suc (suc (suc n))) (zero , k<) (suc zero , l<) i x =
-- -- -- -- --    (x (glue (Œª { (i = i0) ‚Üí 1 , tt ; (i = i1) ‚Üí zero , tt }) (zero , tt)) ,
-- -- -- -- --      x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí 2 , tt }) (1 , tt)) ,
-- -- -- -- --      x (glue (Œª { (i = i0) ‚Üí 2 , tt ; (i = i1) ‚Üí 1 , tt }) (2 , tt)) ,
-- -- -- -- --    tabulate Œª y ‚Üí x (glue (Œª { (i = i0) ‚Üí sucF (sucF (sucF y))
-- -- -- -- --                              ; (i = i1) ‚Üí sucF (sucF (sucF y)) })
-- -- -- -- --                (sucF (sucF (sucF y)))) )
-- -- -- -- --  zz-oo (suc (suc (suc (suc n)))) (zero , k<) (suc (suc l) , l<) i x =
-- -- -- -- --    (x (glue (Œª { (i = i0) ‚Üí suc zero , tt ; (i = i1) ‚Üí zero , tt }) (0 , tt)) ,
-- -- -- -- --     x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí suc zero , tt }) (1 , tt)) ,
-- -- -- -- --     zz (suc (suc n)) (l , l<) (~ i) (x ‚àò' zz-oo-lem n l l< i))
-- -- -- -- --  zz-oo (suc (suc (suc n))) (suc zero , k<) (zero , l<) i x =
-- -- -- -- --     (x (glue (Œª { (i = i1) ‚Üí 1 , tt ; (i = i0) ‚Üí zero , tt }) (zero , tt)) ,
-- -- -- -- --      x (glue (Œª { (i = i1) ‚Üí zero , tt ; (i = i0) ‚Üí 2 , tt }) (1 , tt)) ,
-- -- -- -- --      x (glue (Œª { (i = i1) ‚Üí 2 , tt ; (i = i0) ‚Üí 1 , tt }) (2 , tt)) ,
-- -- -- -- --    tabulate Œª y ‚Üí x (glue (Œª { (i = i0) ‚Üí sucF (sucF (sucF y))
-- -- -- -- --                              ; (i = i1) ‚Üí sucF (sucF (sucF y)) })
-- -- -- -- --                (sucF (sucF (sucF y)))) )
-- -- -- -- --  zz-oo (suc (suc (suc (suc n)))) (suc (suc k) , k<) (zero , l<) i x =
-- -- -- -- --       (x (glue (Œª { (i = i1) ‚Üí suc zero , tt ; (i = i0) ‚Üí zero , tt }) (0 , tt)) ,
-- -- -- -- --     x (glue (Œª { (i = i1) ‚Üí zero , tt ; (i = i0) ‚Üí suc zero , tt }) (1 , tt)) ,
-- -- -- -- --     zz (suc (suc n)) (k , k<) (i) (x ‚àò' zz-oo-lem n k k< (~ i)))
-- -- -- -- --  zz-oo (suc (suc (suc n))) (suc k , k<) (suc l , l<) i x =
-- -- -- -- --   x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí zero , tt }) (0 , tt)) ,
-- -- -- -- --    zz-oo (suc (suc n)) (k , k<) (l , l<) i
-- -- -- -- --        (x ‚àò (Œª y ‚Üí glue (Œª { (i = i0) ‚Üí sucF y ; (i = i1) ‚Üí sucF y })
-- -- -- -- --          (sucF (unglue (i ‚à® ~ i) y))))   



-- -- -- -- --  adj-lawP-oo : ‚àÄ n k l ‚Üí
-- -- -- -- --        PathP (Œª i ‚Üí (Flooop n k l i ‚Üí A) ‚âÉ ùïçlooop n (fst k) (fst l) i)
-- -- -- -- --                  (tabEquiv n)
-- -- -- -- --                  (tabEquiv n)
-- -- -- -- --  adj-lawP-oo n k l = Œ£PathPProp isPropIsEquiv
-- -- -- -- --    Œª i x ‚Üí glue (Œª { (i = i0) ‚Üí tabulate x
-- -- -- -- --                    ; (i = i1) ‚Üí tabulate x }) (zz-oo n k l i x) 


-- -- -- -- --  ùïçlooopSi : ‚àÄ n k l ‚Üí Square
-- -- -- -- --      (ua (tabEquiv n))
-- -- -- -- --      (ua (tabEquiv n))
-- -- -- -- --      (Œª i ‚Üí Flooop n k l i ‚Üí A)
-- -- -- -- --      (ùïçlooop n (fst k) (fst l))
-- -- -- -- --  ùïçlooopSi n k l i j =
-- -- -- -- --     Glue (ùïçlooop n (fst k) (fst l) i)
-- -- -- -- --         Œª { (j = i0) ‚Üí (Flooop n k l i ‚Üí A) , adj-lawP-oo n k l i
-- -- -- -- --           ; (j = i1) ‚Üí ùïçlooop n (fst k) (fst l) i , idEquiv _ }

-- -- -- -- --  ùïçcomp : ‚àÄ n k l ‚Üí Square {A = Type ‚Ñì}
-- -- -- -- --                  (ua (adjT√ó^‚âÉ k))
-- -- -- -- --                  (ua (adjT√ó^‚âÉ l))
-- -- -- -- --                  (ùïçlooop n k l)
-- -- -- -- --                  refl 
-- -- -- -- --  ùïçcomp n k l i j =
-- -- -- -- --   Glue (A √ó^ n) {(~ i ‚àß ~ j) ‚à® (i ‚àß ~ j) ‚à® j}
-- -- -- -- --     Œª {(j = i0) (i = i0) ‚Üí _ , adjT√ó^‚âÉ (k)
-- -- -- -- --       ;(j = i0) (i = i1) ‚Üí _ , adjT√ó^‚âÉ (l)
-- -- -- -- --       ;(j = i1) ‚Üí _ , idEquiv _ }
      
-- -- -- -- --  postulate
-- -- -- -- --   ùïçcompSi : ‚àÄ n k l ‚Üí Cube {A = Type ‚Ñì}
-- -- -- -- --                     (Œª i j ‚Üí Flooop-comp n k l i j ‚Üí A)
-- -- -- -- --                     (ùïçcomp n (fst k) (fst l))
-- -- -- -- --                     (flipSquare (ua-adj-law n k))
-- -- -- -- --                     (flipSquare (ua-adj-law n l))
-- -- -- -- --                     (flipSquare (ùïçlooopSi n k l))
-- -- -- -- --                     (Œª i ‚Üí refl {x = ua (tabEquiv n) i})

-- -- -- -- --   -- ùïçcompSi = {!!}

-- -- -- -- -- -- mkCube' _ _ _ _ _ _
-- -- -- -- -- --    {!!}
  
-- -- -- -- --   -- w : {!!}
-- -- -- -- --   -- w = {!!}
-- -- -- -- --    -- Glue (A √ó^ n)
-- -- -- -- --    --  (Œª { (i = i0) ‚Üí ua-adj-law n k j m , {!!}
-- -- -- -- --    --     ; (i = i1) ‚Üí ua-adj-law n l j m , {!!}
-- -- -- -- --    --     ; (j = i0) ‚Üí ùïçloopSi n k l i m , {!!}
-- -- -- -- --    --     ; (j = i1) ‚Üí ua (tabEquiv n) m , {!!} --ua-unglueEquiv (tabEquiv n) m
-- -- -- -- --    --     ; (m = i0) ‚Üí (ùîΩin (ùï°comp {n = n} k l i j) ‚Üí A) , {!!}
-- -- -- -- --    --     ; (m = i1) ‚Üí ùïçcomp n (fst k) (fst l) i j ,
-- -- -- -- --    --          unglueEquiv _ ((~ i ‚àß ~ j) ‚à® (i ‚àß ~ j) ‚à® j)
-- -- -- -- --    --            (Œª {(j = i0) (i = i0) ‚Üí _ , adjT√ó^‚âÉ (fst k)
-- -- -- -- --    --               ;(j = i0) (i = i1) ‚Üí _ , adjT√ó^‚âÉ (fst l)
-- -- -- -- --    --               ;(j = i1) ‚Üí _ , idEquiv _ }) 
-- -- -- -- --    --     })

-- -- -- -- --  ùïçinvol : ‚àÄ n k ‚Üí Square
-- -- -- -- --          (ua (adjT√ó^‚âÉ {n = n} k))
-- -- -- -- --          (sym (ua (adjT√ó^‚âÉ {n = n} k)))
-- -- -- -- --          refl refl
-- -- -- -- --  ùïçinvol n k = involPathSym (isInvo-adjT√ó^ k) 

-- -- -- -- --  postulate
-- -- -- -- --   ùïçinvolSi : ‚àÄ n k ‚Üí Cube
-- -- -- -- --           (Œª i j ‚Üí involPathSym {f = adjT n k} (isInvolution-adjT n k) i j ‚Üí A)
-- -- -- -- --           (ùïçinvol n (fst k))
-- -- -- -- --           (flipSquare (ua-adj-law n k))
-- -- -- -- --           (Œª i j ‚Üí (ua-adj-law n k) (~ j) i)
-- -- -- -- --           (Œª _ ‚Üí refl)
-- -- -- -- --           (Œª _ ‚Üí refl)



-- -- -- -- --  ùïçcomm-sideF : ‚àÄ n k l 
-- -- -- -- --      ‚Üí (x : A √ó^ n) ‚Üí
-- -- -- -- --       PathP (Œª z ‚Üí ua (adjT√ó^‚âÉ {n = n} k ‚àô‚Çë adjT√ó^‚âÉ {n = n} l) z)
-- -- -- -- --       (fst (adjT√ó^‚âÉ {n = n} k) x)
-- -- -- -- --       (fst (adjT√ó^‚âÉ {n = n} l) x)
-- -- -- -- --  ùïçcomm-sideF n k l x =
-- -- -- -- --     ua-gluePath ((adjT√ó^‚âÉ {n = n} k ‚àô‚Çë adjT√ó^‚âÉ {n = n} l))
-- -- -- -- --      (cong (adjT√ó^ l) (isInvo-adjT√ó^ {n} k x))

-- -- -- -- --  ùïçcomm-side : ‚àÄ n k l 
-- -- -- -- --     ‚Üí PathP (Œª i ‚Üí  (A √ó^ n) ‚âÉ ua (adjT√ó^‚âÉ {n = n} k ‚àô‚Çë adjT√ó^‚âÉ {n = n} l) i)
-- -- -- -- --         (adjT√ó^‚âÉ {n = n} k)
-- -- -- -- --         (adjT√ó^‚âÉ {n = n} l)
-- -- -- -- --  ùïçcomm-side n k l =
-- -- -- -- --    Œ£PathPProp
-- -- -- -- --    isPropIsEquiv (funExt (ùïçcomm-sideF n k l))

-- -- -- -- --  ùïçcomm : ‚àÄ n k l (k< : (suc k) < n) (l< : (suc l) < n) ‚Üí (x : A.commT k l)
-- -- -- -- --      ‚Üí ùïçlooop n k l ‚â° ùïçlooop n l k
-- -- -- -- --  ùïçcomm n k l k< l< x i j =
-- -- -- -- --    Glue (ua (equivEq
-- -- -- -- --                 {e = (adjT√ó^‚âÉ {n = n} k) ‚àô‚Çë (adjT√ó^‚âÉ {n = n} l)}
-- -- -- -- --                 {f = (adjT√ó^‚âÉ {n = n} l) ‚àô‚Çë (adjT√ó^‚âÉ {n = n} k)}
-- -- -- -- --                 (funExt (comm-adjT√ó^ {n} k l k< l< x)) j) i)
-- -- -- -- --         Œª { (j = i0) ‚Üí (A √ó^ n) , ùïçcomm-side n k l i
-- -- -- -- --           ; (j = i1) ‚Üí (A √ó^ n) , ùïçcomm-side n l k i }

-- -- -- -- --  postulate
-- -- -- -- --   ùïçcommSi : ‚àÄ n k l (k< : (suc k) < n) (l< : (suc l) < n) ‚Üí (x : A.commT k l)
-- -- -- -- --           ‚Üí  Cube
-- -- -- -- --           (Œª i j ‚Üí Flooop-comm n (k , k<) (l , l<) x i j ‚Üí A)
-- -- -- -- --           (ùïçcomm n k l k< l< x)
-- -- -- -- --           (flipSquare (ùïçlooopSi n (k , k<) (l , l<)))
-- -- -- -- --           (flipSquare (ùïçlooopSi n (l , l<) (k , k<)))
-- -- -- -- --           (Œª _ ‚Üí refl)
-- -- -- -- --           (Œª _ ‚Üí refl)
          


-- -- -- -- --  ùïçbraid-side-f : ‚àÄ n k l ‚Üí
-- -- -- -- --    PathP (Œª j ‚Üí ua (adjT√ó^‚âÉ {n = n} l) j ‚Üí
-- -- -- -- --      ua (adjT√ó^‚âÉ {n = n} k ‚àô‚Çë adjT√ó^‚âÉ l ‚àô‚Çë adjT√ó^‚âÉ k) j)
-- -- -- -- --      (fst (adjT√ó^‚âÉ k))
-- -- -- -- --      (fst (adjT√ó^‚âÉ k))
-- -- -- -- --  ùïçbraid-side-f n k l =
-- -- -- -- --     Œª i x ‚Üí glue (Œª { (i = i0) ‚Üí adjT√ó^ k x
-- -- -- -- --                     ; (i = i1) ‚Üí adjT√ó^ {n = n} k x
-- -- -- -- --            })
-- -- -- -- --     (zzzz i x)
-- -- -- -- --   where
-- -- -- -- --    zzzz : PathP (Œª j ‚Üí ua (adjT√ó^‚âÉ {n = n} l) j ‚Üí A √ó^ n)
-- -- -- -- --            (fst (adjT√ó^‚âÉ {n = n} k ‚àô‚Çë adjT√ó^‚âÉ {n = n} k ‚àô‚Çë
-- -- -- -- --                     adjT√ó^‚âÉ l ‚àô‚Çë adjT√ó^‚âÉ k)
-- -- -- -- --                    ) (adjT√ó^ {n = n} k)
-- -- -- -- --    zzzz = 
-- -- -- -- --       funExt (Œª x ‚Üí cong ((adjT√ó^ k ‚àò (adjT√ó^ l)))
-- -- -- -- --         (isInvo-adjT√ó^ {n} k x)) ‚óÅ (Œª j ‚Üí fst (adjT√ó^‚âÉ k)
-- -- -- -- --     ‚àò ua-ungluePathExt (adjT√ó^‚âÉ {n = n} l) j)
      
     

-- -- -- -- --  ùïçbraid-side : ‚àÄ n k l ‚Üí
-- -- -- -- --    PathP (Œª j ‚Üí ua (adjT√ó^‚âÉ {n = n} l) j ‚âÉ
-- -- -- -- --         ua (adjT√ó^‚âÉ {n = n} k ‚àô‚Çë adjT√ó^‚âÉ l ‚àô‚Çë adjT√ó^‚âÉ k) j)
-- -- -- -- --      (adjT√ó^‚âÉ k)
-- -- -- -- --      (adjT√ó^‚âÉ k)
-- -- -- -- --  ùïçbraid-side n k l = Œ£PathPProp
-- -- -- -- --    isPropIsEquiv (ùïçbraid-side-f n k l)
 
-- -- -- -- --  ùïçbraid : ‚àÄ n k (k< : (suc (suc k)) < n) 
-- -- -- -- --      ‚Üí Square
-- -- -- -- --           (ua (adjT√ó^‚âÉ {n = n} (suc k)))
-- -- -- -- --           (ua (adjT√ó^‚âÉ {n = n} k))
-- -- -- -- --           (ùïçlooop n k (suc k))
-- -- -- -- --           (ùïçlooop n k (suc k))
-- -- -- -- --  ùïçbraid n k k< i j =
-- -- -- -- --     Glue (ua (equivEq
-- -- -- -- --            {e = adjT√ó^‚âÉ {n = n} k ‚àô‚Çë adjT√ó^‚âÉ (suc k) ‚àô‚Çë adjT√ó^‚âÉ k}
-- -- -- -- --            {f = adjT√ó^‚âÉ {n = n} (suc k) ‚àô‚Çë adjT√ó^‚âÉ k ‚àô‚Çë adjT√ó^‚âÉ (suc k) }
-- -- -- -- --              (funExt (braid-adjT√ó^ {n} k k<)) i) j)
-- -- -- -- --       Œª { (i = i0) ‚Üí ua (adjT√ó^‚âÉ {n = n} (suc k)) j
-- -- -- -- --           , ùïçbraid-side n k (suc k) j
-- -- -- -- --         ; (i = i1) ‚Üí ua (adjT√ó^‚âÉ {n = n} k) j
-- -- -- -- --           , ùïçbraid-side n (suc k) k j 
-- -- -- -- --          }

-- -- -- -- --  postulate
-- -- -- -- --   ùïçbraidSi : ‚àÄ n k (k< : (suc (suc k)) < n) 
-- -- -- -- --           ‚Üí Cube
-- -- -- -- --           (Œª i j ‚Üí ùîΩin {n = n} (ùï°braid k k< i j) ‚Üí A)
-- -- -- -- --           (ùïçbraid n k k<)
-- -- -- -- --           (flipSquare (ua-adj-law n (suc k , k<)))
-- -- -- -- --           (flipSquare (ua-adj-law n (k , <-weaken {n = n} k<) ))
-- -- -- -- --           (flipSquare (ùïçlooopSi n (k , <-weaken {n = n} k<) (suc k , k<)))
-- -- -- -- --           (flipSquare (ùïçlooopSi n (k , <-weaken {n = n} k<) (suc k , k<)))
          

-- -- -- -- --  -- ùïçbraid (suc (suc (suc n))) zero k< = {!!}
-- -- -- -- --  -- ùïçbraid (suc (suc n)) (suc k) k< = 
-- -- -- -- --  --   comm‚ÜíPathP (isInjectiveTransport
-- -- -- -- --  --        (funExt Œª a ‚Üí Œ£PathP (refl , {!!})))

-- -- -- -- --   -- Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- --   --   (comm‚ÜíPathP (isInjectiveTransport
-- -- -- -- --   --     (funExt Œª x ‚Üí ‚â°Fin {n = n}
-- -- -- -- --   --       (funExt‚Åª (A.adjTranspositionBraid k ) (fst x) ))))

-- -- -- -- --  Rùïç : ‚àÄ n ‚Üí Rùï°elim {n = n} Œª p ‚Üí singl (ùîΩin p ‚Üí A)
-- -- -- -- --  Rùï°elim.isGroupoidA (Rùïç n) p =
-- -- -- -- --     isOfHLevelPlus 3 (isContrSingl _)
-- -- -- -- --  Rùï°elim.abase (Rùïç n) = (A √ó^ n) , ua (tabEquiv n)
-- -- -- -- --  Rùï°elim.aloop (Rùïç n) k = Œ£PathP (ua (adjT√ó^‚âÉ (fst k)) , ua-adj-law n k)
-- -- -- -- --  Rùï°elim.alooop (Rùïç n) k l = Œ£PathP (ùïçlooop n (fst k) (fst l) , ùïçlooopSi n k l )
-- -- -- -- --  fst (Rùï°elim.acomp (Rùïç n) (k , _) (l , _) i j) = ùïçcomp n k l i j

-- -- -- -- --  snd (Rùï°elim.acomp (Rùïç n) k l i j) m = ùïçcompSi n k l m i j
-- -- -- -- --  fst (Rùï°elim.ainvol (Rùïç n) k i j) = ùïçinvol n (fst k) i j
-- -- -- -- --  snd (Rùï°elim.ainvol (Rùïç n) k i j) m = ùïçinvolSi n k m i j
-- -- -- -- --  fst (Rùï°elim.acomm (Rùïç n) k l x i j) =
-- -- -- -- --     ùïçcomm n (fst k) (fst l) (snd k) (snd l) x j i
-- -- -- -- --  snd (Rùï°elim.acomm (Rùïç n) k l x i j) m =
-- -- -- -- --    ùïçcommSi n (fst k) (fst l) (snd k) (snd l) x m j i
-- -- -- -- --  fst (Rùï°elim.abraid (Rùïç n) k k< i j) = ùïçbraid n k k< i j
-- -- -- -- --  snd (Rùï°elim.abraid (Rùïç n) k k< i j) m = ùïçbraidSi n k k< m i j

-- -- -- -- --  ùïç : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí Type ‚Ñì
-- -- -- -- --  ùïç n = fst ‚àò Rùï°elim.f (Rùïç n) 


-- -- -- -- --  shp : (xs : FMSet2 A) ‚Üí ‚Ñôrm _
-- -- -- -- --  shp xs = snd (fromFM2‚ä§ (fm2Map (Œª _ ‚Üí tt) xs))

-- -- -- -- --  ùïç' : FMSet2 A ‚Üí Type ‚Ñì
-- -- -- -- --  ùïç' xs = uncurry ùïç (fromFM2‚ä§ (fm2Map (Œª _ ‚Üí tt) xs) ) 



-- -- -- -- --  ‚à∑ùïçR : ‚àÄ n ‚Üí A ‚Üí Rùï°elim {n = n} Œª (p : ‚Ñôrm n) ‚Üí ùïç n p ‚Üí ùïç (suc n) (suc‚Ñôrm n p) 
-- -- -- -- --  Rùï°elim.isGroupoidA (‚à∑ùïçR n a) = {!!}
-- -- -- -- --  Rùï°elim.abase (‚à∑ùïçR n a) = a ,_
-- -- -- -- --  Rùï°elim.aloop (‚à∑ùïçR (suc (suc n)) a) (k , k<) i x =
-- -- -- -- --    ua-glue (adjT√ó^‚âÉ {n = 3 + n} (suc k)) i (Œª { (i = i0) ‚Üí a , x })
-- -- -- -- --     (inS (a , ua-unglue (adjT√ó^‚âÉ {n = 2 + n} k) i x))
-- -- -- -- --  Rùï°elim.alooop (‚à∑ùïçR (suc n) a) k l i x =
-- -- -- -- --     glue (Œª { (i = i0) ‚Üí a , x
-- -- -- -- --             ; (i = i1) ‚Üí a , x
-- -- -- -- --             }) (a , unglue (i ‚à® ~ i) x) 
-- -- -- -- --  Rùï°elim.acomp (‚à∑ùïçR (suc (suc n)) a) k l i j x =
-- -- -- -- --     glue (Œª { (i = i0) (j = i0) ‚Üí a , x
-- -- -- -- --             ; (i = i1) (j = i0) ‚Üí a , x
-- -- -- -- --             ; (j = i1) ‚Üí a , x
-- -- -- -- --             }) (a , unglue ((i ‚àß ~ j) ‚à® (~ i ‚àß ~ j) ‚à® j) x)
-- -- -- -- --  Rùï°elim.ainvol (‚à∑ùïçR n a) = {!!}
-- -- -- -- --  Rùï°elim.acomm (‚à∑ùïçR n a) = {!!}
-- -- -- -- --  Rùï°elim.abraid (‚à∑ùïçR n a) = {!!}

-- -- -- -- --  ‚à∑ùïç : ‚àÄ n ‚Üí A ‚Üí (p : ‚Ñôrm n) ‚Üí ùïç n p ‚Üí ùïç (suc n) (suc‚Ñôrm n p) 
-- -- -- -- --  ‚à∑ùïç n a = Rùï°elim.f (‚à∑ùïçR n a)

-- -- -- -- --  module _ (isGroupoidA : isGroupoid A) where

-- -- -- -- --   FMtoùïç'R : RElim ùïç'
-- -- -- -- --   RElim.[]* FMtoùïç'R = tt*
-- -- -- -- --   RElim._‚à∑*_ FMtoùïç'R a {xs} = ‚à∑ùïç _ a (shp xs) 
-- -- -- -- --   RElim.comm* FMtoùïç'R x y b = {!!}
-- -- -- -- --   RElim.comm-inv* FMtoùïç'R = {!!}
-- -- -- -- --   RElim.hexDiag* FMtoùïç'R = {!!}
-- -- -- -- --   RElim.hexU* FMtoùïç'R = {!!}
-- -- -- -- --   RElim.hexL* FMtoùïç'R = {!!}
-- -- -- -- --   RElim.trunc* FMtoùïç'R = {!!}

-- -- -- -- --   FMtoùïç : (xs : FMSet2 A) ‚Üí ùïç' xs 
-- -- -- -- --   FMtoùïç = {!!}


-- -- -- -- -- -- -- from‚Ñôrm n ùï°base = embase
-- -- -- -- -- -- -- from‚Ñôrm n (ùï°loop x i) = emloop (Œ∑ x) i
-- -- -- -- -- -- -- from‚Ñôrm n (ùï°looop k l i) = emloop (Œ∑ k ¬∑ Œ∑ l) i
-- -- -- -- -- -- -- from‚Ñôrm n (ùï°comp k l i j) =
-- -- -- -- -- -- --     hcomp (Œª l' ‚Üí Œª {
-- -- -- -- -- -- --        (i = i0) ‚Üí {!!} --emloop (Œ∑ k) j
-- -- -- -- -- -- --       ;(i = i1) ‚Üí emloop (Œ∑ l) (l' ‚àß j)
-- -- -- -- -- -- --       ;(j = i0) ‚Üí embase 
-- -- -- -- -- -- --       ;(j = i1) ‚Üí emcomp (Œ∑ k) (Œ∑ l) l' i 
-- -- -- -- -- -- --       }) (emloop (Œ∑ k) (i ‚à® ~ j))


-- -- -- -- -- -- -- -- i = i0 ‚ä¢ emloop (Œ∑ k) j
-- -- -- -- -- -- -- -- i = i1 ‚ä¢ emloop (Œ∑ l) j
-- -- -- -- -- -- -- -- j = i0 ‚ä¢ embase
-- -- -- -- -- -- -- -- j = i1 ‚ä¢ emloop (k ‚à∑ Œ∑ l) i

-- -- -- -- -- -- -- from‚Ñôrm n (ùï°comp' k l i j) =
-- -- -- -- -- -- --       hcomp (Œª l' ‚Üí Œª {
-- -- -- -- -- -- --        (i = i0) ‚Üí {!emloop (Œ∑ k) (l' ‚àß j)!} --emloop (Œ∑ k) j
-- -- -- -- -- -- --       ;(i = i1) ‚Üí {!emloop (Œ∑ l) (l' ‚à® j) !}
-- -- -- -- -- -- --       ;(j = i0) ‚Üí emcomp (Œ∑ k) (Œ∑ l) l' i  
-- -- -- -- -- -- --       ;(j = i1) ‚Üí embase
-- -- -- -- -- -- --       }) {!!}


-- -- -- -- -- -- -- -- i = i0 ‚ä¢ emloop (Œ∑ k) j
-- -- -- -- -- -- -- -- i = i1 ‚ä¢ emloop (Œ∑ l) j
-- -- -- -- -- -- -- -- j = i0 ‚ä¢ emloop (k ‚à∑ Œ∑ l) i
-- -- -- -- -- -- -- -- j = i1 ‚ä¢ embase

-- -- -- -- -- -- -- from‚Ñôrm n (ùï°invol k i j) = 
-- -- -- -- -- -- --   hcomp (Œª l ‚Üí Œª {
-- -- -- -- -- -- --        (i = i0) ‚Üí emcomp (Œ∑ k) (Œ∑ k) j l
-- -- -- -- -- -- --       ;(i = i1) ‚Üí emcomp Œµ (Œ∑ k) (~ j) l
-- -- -- -- -- -- --       ;(j = i0) ‚Üí emloop (k ‚à∑ Œµ) l
-- -- -- -- -- -- --       ;(j = i1) ‚Üí emloop ((invo k Œµ) i) l
-- -- -- -- -- -- --       }) embase

-- -- -- -- -- -- -- from‚Ñôrm n (ùï°comm k l x i i‚ÇÅ) = emloop (comm k l x Œµ i‚ÇÅ) i
-- -- -- -- -- -- -- from‚Ñôrm n (ùï°braid k k< i i‚ÇÅ) = {!!}
-- -- -- -- -- -- -- from‚Ñôrm n (ùï°squash _ _ _ _ r s i i‚ÇÅ i‚ÇÇ) =
-- -- -- -- -- -- --   emsquash _ _ _ _
-- -- -- -- -- -- --     (Œª i j ‚Üí from‚Ñôrm n (r i j))
-- -- -- -- -- -- --     (Œª i j ‚Üí from‚Ñôrm n (s i j))
-- -- -- -- -- -- --      i i‚ÇÅ i‚ÇÇ

-- -- -- -- -- -- -- -- -- -- -- infixr 30 _‚Çë‚àô‚Çö_

-- -- -- -- -- -- -- -- -- -- -- _‚Çë‚àô‚Çö_ : ‚àÄ {‚Ñì} {A B C : Type ‚Ñì} ‚Üí A ‚âÉ B ‚Üí B ‚â° C ‚Üí A ‚â° C 
-- -- -- -- -- -- -- -- -- -- -- (e ‚Çë‚àô‚Çö p) i = Glue (p i) 
-- -- -- -- -- -- -- -- -- -- --     Œª { (i = i0) ‚Üí _ , e
-- -- -- -- -- -- -- -- -- -- --       ; (i = i1) ‚Üí _ , idEquiv _
-- -- -- -- -- -- -- -- -- -- --       }

-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-ua : ‚àÄ {‚Ñì} {A B C : Type ‚Ñì} ‚Üí (e : A ‚âÉ B) ‚Üí (p : B ‚â° C) ‚Üí
-- -- -- -- -- -- -- -- -- -- --           Square
-- -- -- -- -- -- -- -- -- -- --              (ua e)
-- -- -- -- -- -- -- -- -- -- --              (e ‚Çë‚àô‚Çö p)             
-- -- -- -- -- -- -- -- -- -- --              refl
-- -- -- -- -- -- -- -- -- -- --              p
-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-ua  e p j i =
-- -- -- -- -- -- -- -- -- -- --   Glue (p (j ‚àß i) ) 
-- -- -- -- -- -- -- -- -- -- --     Œª { (i = i0) ‚Üí A , e 
-- -- -- -- -- -- -- -- -- -- --       ; (i = i1) ‚Üí p j , idEquiv (p j)
-- -- -- -- -- -- -- -- -- -- --       }

-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-fill : ‚àÄ {‚Ñì} {A B C : Type ‚Ñì} ‚Üí (e : A ‚âÉ B) ‚Üí (p : B ‚â° C) ‚Üí
-- -- -- -- -- -- -- -- -- -- --           Square
-- -- -- -- -- -- -- -- -- -- --              (e ‚Çë‚àô‚Çö p)
-- -- -- -- -- -- -- -- -- -- --              p
-- -- -- -- -- -- -- -- -- -- --              (ua e)
-- -- -- -- -- -- -- -- -- -- --              refl
-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-fill  e p j i =
-- -- -- -- -- -- -- -- -- -- --     Glue
-- -- -- -- -- -- -- -- -- -- --        (p i)
-- -- -- -- -- -- -- -- -- -- --        Œª { (j = i0)(i = i0) ‚Üí _ , e
-- -- -- -- -- -- -- -- -- -- --           ; (i = i1) ‚Üí _ , idEquiv (p i1)
-- -- -- -- -- -- -- -- -- -- --           ; (j = i1) ‚Üí _ , idEquiv (p i)
-- -- -- -- -- -- -- -- -- -- --           }
  
-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-compSq :  ‚àÄ {‚Ñì} {A B C : Type ‚Ñì} ‚Üí (e : A ‚âÉ B) ‚Üí (f : B ‚âÉ C)
-- -- -- -- -- -- -- -- -- -- --             ‚Üí PathP (Œª j ‚Üí A ‚âÉ ua f j)
-- -- -- -- -- -- -- -- -- -- --                    e
-- -- -- -- -- -- -- -- -- -- --                   (e ‚àô‚Çë f)
-- -- -- -- -- -- -- -- -- -- -- fst (‚Çë‚àô‚Çö-compSq e f j) = ua-gluePathExt f j ‚àò fst e
-- -- -- -- -- -- -- -- -- -- -- snd (‚Çë‚àô‚Çö-compSq e f j) = isProp‚ÜíPathP (Œª j ‚Üí isPropIsEquiv (ua-gluePathExt f j ‚àò fst e))
-- -- -- -- -- -- -- -- -- -- --     (snd e) (snd (e ‚àô‚Çë f)) j

-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp :  ‚àÄ {‚Ñì} {A B C D : Type ‚Ñì} ‚Üí (e : A ‚âÉ B) ‚Üí (f : B ‚âÉ C) ‚Üí (p : C ‚â° D) ‚Üí
-- -- -- -- -- -- -- -- -- -- --                   e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö p ‚â° (e ‚àô‚Çë f) ‚Çë‚àô‚Çö p  
-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp  {B} {C} {D} e f p j i =
-- -- -- -- -- -- -- -- -- -- --    Glue (‚Çë‚àô‚Çö-fill f p j i) 
-- -- -- -- -- -- -- -- -- -- --     Œª { (i = i0) ‚Üí A , ‚Çë‚àô‚Çö-compSq e f j
-- -- -- -- -- -- -- -- -- -- --       ; (i = i1) ‚Üí D , idEquiv D
-- -- -- -- -- -- -- -- -- -- --       }


-- -- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≥eq-fill :  ‚àÄ {‚Ñì} {A B : Type ‚Ñì}
-- -- -- -- -- -- -- -- -- -- -- --             ‚Üí (e : A ‚âÉ A) ‚Üí (f : A ‚âÉ A) ‚Üí (p : A ‚â° B)
-- -- -- -- -- -- -- -- -- -- -- --             ‚Üí e ‚àô‚Çë f ‚àô‚Çë e ‚â° f ‚àô‚Çë e ‚àô‚Çë f 
-- -- -- -- -- -- -- -- -- -- -- --             ‚Üí Square (f ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö p)
-- -- -- -- -- -- -- -- -- -- -- --                       (e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö p)
-- -- -- -- -- -- -- -- -- -- -- --                       {!ua!}
-- -- -- -- -- -- -- -- -- -- -- --                       {!!}
            
-- -- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≥eq-fill = {!!}


-- -- -- -- -- -- -- -- -- -- -- unglue-‚Çë‚àôp : ‚àÄ {‚Ñì} {A B C : Type ‚Ñì} ‚Üí (e : A ‚âÉ B) ‚Üí (X : B ‚â° C)
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí PathP (Œª i ‚Üí (e ‚Çë‚àô‚Çö X) i ‚âÉ X i) e (idEquiv _) 
-- -- -- -- -- -- -- -- -- -- -- unglue-‚Çë‚àôp e X =
-- -- -- -- -- -- -- -- -- -- --   Œ£PathPProp (Œª _ ‚Üí isPropIsEquiv _)
-- -- -- -- -- -- -- -- -- -- --    Œª i x ‚Üí unglue (i ‚à® ~ i) x 

-- -- -- -- -- -- -- -- -- -- -- glue-‚Çë‚àôp-comp : ‚àÄ {‚Ñì} {A B C : Type ‚Ñì} ‚Üí (e : A ‚âÉ B) (f : B ‚âÉ C) 
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí PathP (Œª i ‚Üí A ‚Üí (e ‚Çë‚àô‚Çö (f ‚Çë‚àô‚Çö refl)) i) (idfun _)
-- -- -- -- -- -- -- -- -- -- --                     (fst  (e ‚àô‚Çë f)) 
-- -- -- -- -- -- -- -- -- -- -- glue-‚Çë‚àôp-comp e f i x =
-- -- -- -- -- -- -- -- -- -- --   glue (Œª { (i = i0) ‚Üí x
-- -- -- -- -- -- -- -- -- -- --            ; (i = i1) ‚Üí fst (e ‚àô‚Çë f) x }  )
-- -- -- -- -- -- -- -- -- -- --               (glue (Œª { (i = i0) ‚Üí fst e x
-- -- -- -- -- -- -- -- -- -- --                         ; (i = i1) ‚Üí fst (e ‚àô‚Çë f) x }  ) (fst (e ‚àô‚Çë f) x))


-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≤eq-sides :
-- -- -- -- -- -- -- -- -- -- --    ‚àÄ {‚Ñì} {A B : Type ‚Ñì}
-- -- -- -- -- -- -- -- -- -- --             ‚Üí (e : A ‚âÉ A) ‚Üí (f : A ‚âÉ A) ‚Üí (p : A ‚â° B) 
-- -- -- -- -- -- -- -- -- -- --             ‚Üí f ‚àô‚Çë e ‚â° e ‚àô‚Çë f ‚Üí ‚àÄ j i
-- -- -- -- -- -- -- -- -- -- --             ‚Üí Partial (j ‚à® ~ j ‚à® i ‚à® ~ i) (Œ£ (Type ‚Ñì) (Œª T ‚Üí T ‚âÉ p i))
-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≤eq-sides  {B} e f p x j i =
-- -- -- -- -- -- -- -- -- -- --       Œª {
-- -- -- -- -- -- -- -- -- -- --         (i = i0) ‚Üí A , x j
-- -- -- -- -- -- -- -- -- -- --       ; (i = i1) ‚Üí B , (idEquiv B ‚àô‚Çë idEquiv B)
-- -- -- -- -- -- -- -- -- -- --       ; (j = i0) ‚Üí (f ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö p) i ,
-- -- -- -- -- -- -- -- -- -- --               unglue-‚Çë‚àôp f (e ‚Çë‚àô‚Çö p) i
-- -- -- -- -- -- -- -- -- -- --             ‚àô‚Çë unglue-‚Çë‚àôp e p i
-- -- -- -- -- -- -- -- -- -- --       ; (j = i1) ‚Üí ( e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö p) i ,
-- -- -- -- -- -- -- -- -- -- --             unglue-‚Çë‚àôp e (f ‚Çë‚àô‚Çö p) i
-- -- -- -- -- -- -- -- -- -- --             ‚àô‚Çë unglue-‚Çë‚àôp f p i
-- -- -- -- -- -- -- -- -- -- --       }


-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≤eq :  ‚àÄ {‚Ñì} {A B : Type ‚Ñì}
-- -- -- -- -- -- -- -- -- -- --             ‚Üí (e : A ‚âÉ A) ‚Üí (f : A ‚âÉ A) ‚Üí (p : A ‚â° B) 
-- -- -- -- -- -- -- -- -- -- --             ‚Üí f ‚àô‚Çë e ‚â° e ‚àô‚Çë f 
-- -- -- -- -- -- -- -- -- -- --             ‚Üí  f ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö p ‚â° e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö p  
-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≤eq  {B} e f p x j i =
-- -- -- -- -- -- -- -- -- -- --    Glue (p i) (‚Çë‚àô‚Çö-comp¬≤eq-sides e f p x j i)


-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≥eq-sides :
-- -- -- -- -- -- -- -- -- -- --    ‚àÄ {‚Ñì} {A B : Type ‚Ñì}
-- -- -- -- -- -- -- -- -- -- --             ‚Üí (e : A ‚âÉ A) ‚Üí (f : A ‚âÉ A) ‚Üí (p : A ‚â° B) 
-- -- -- -- -- -- -- -- -- -- --             ‚Üí e ‚àô‚Çë f ‚àô‚Çë e ‚â° f ‚àô‚Çë e ‚àô‚Çë f  ‚Üí ‚àÄ j i
-- -- -- -- -- -- -- -- -- -- --             ‚Üí Partial (j ‚à® ~ j ‚à® i ‚à® ~ i) (Œ£ (Type ‚Ñì) (Œª T ‚Üí T ‚âÉ p i))
-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≥eq-sides  {B} e f p x j i =
-- -- -- -- -- -- -- -- -- -- --       Œª {
-- -- -- -- -- -- -- -- -- -- --         (i = i0) ‚Üí A , x j
-- -- -- -- -- -- -- -- -- -- --       ; (i = i1) ‚Üí B , compEquiv (idEquiv B) (idEquiv B ‚àô‚Çë idEquiv B)
-- -- -- -- -- -- -- -- -- -- --       ; (j = i0) ‚Üí ( e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö p) i ,
-- -- -- -- -- -- -- -- -- -- --               unglue-‚Çë‚àôp e (f ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö p) i
-- -- -- -- -- -- -- -- -- -- --             ‚àô‚Çë unglue-‚Çë‚àôp f (e ‚Çë‚àô‚Çö p) i
-- -- -- -- -- -- -- -- -- -- --             ‚àô‚Çë unglue-‚Çë‚àôp e p i
-- -- -- -- -- -- -- -- -- -- --       ; (j = i1) ‚Üí ( f ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö p) i ,
-- -- -- -- -- -- -- -- -- -- --             unglue-‚Çë‚àôp f (e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö p) i
-- -- -- -- -- -- -- -- -- -- --             ‚àô‚Çë unglue-‚Çë‚àôp e (f ‚Çë‚àô‚Çö p) i
-- -- -- -- -- -- -- -- -- -- --             ‚àô‚Çë unglue-‚Çë‚àôp f p i
-- -- -- -- -- -- -- -- -- -- --       }


-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≥eq :  ‚àÄ {‚Ñì} {A B : Type ‚Ñì}
-- -- -- -- -- -- -- -- -- -- --             ‚Üí (e : A ‚âÉ A) ‚Üí (f : A ‚âÉ A) ‚Üí (p : A ‚â° B) 
-- -- -- -- -- -- -- -- -- -- --             ‚Üí e ‚àô‚Çë f ‚àô‚Çë e ‚â° f ‚àô‚Çë e ‚àô‚Çë f 
-- -- -- -- -- -- -- -- -- -- --             ‚Üí  e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö p ‚â° f ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö f ‚Çë‚àô‚Çö p  
-- -- -- -- -- -- -- -- -- -- -- ‚Çë‚àô‚Çö-comp¬≥eq  {B} e f p x j i =
-- -- -- -- -- -- -- -- -- -- --    Glue (p i)
-- -- -- -- -- -- -- -- -- -- --      (‚Çë‚àô‚Çö-comp¬≥eq-sides  {B} e f p x j i)




-- -- -- -- -- -- -- -- -- -- -- -- glue-invol-‚Çë‚àô‚Çö : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} ‚Üí (f : A ‚Üí A) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --     (fInvol : isInvolution f)  ‚Üí (X : A ‚â° B)
-- -- -- -- -- -- -- -- -- -- -- --         ‚Üí PathP (Œª i ‚Üí X i ‚âÉ (involEquiv {f = f} fInvol ‚Çë‚àô‚Çö X) i)
           
-- -- -- -- -- -- -- -- -- -- -- --            (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- -- --            (idEquiv _)
-- -- -- -- -- -- -- -- -- -- -- -- glue-invol-‚Çë‚àô‚Çö f fInvol X =
-- -- -- -- -- -- -- -- -- -- -- --    Œ£PathP ( ({!!} ‚óÅ
-- -- -- -- -- -- -- -- -- -- -- --               Œª i ‚Üí Œª x ‚Üí glue (Œª {(i = i0) ‚Üí f x ; (i = i1) ‚Üí x })
-- -- -- -- -- -- -- -- -- -- -- --                 {!x!})
-- -- -- -- -- -- -- -- -- -- -- --     , {!!})
-- -- -- -- -- -- -- -- -- -- --   -- e' i ,
-- -- -- -- -- -- -- -- -- -- --   --        isProp‚ÜíPathP (Œª i ‚Üí isPropIsEquiv (e' i))
-- -- -- -- -- -- -- -- -- -- --   --          (snd e)
-- -- -- -- -- -- -- -- -- -- --   --          (idIsEquiv _) i


-- -- -- -- -- -- -- -- -- -- -- glue-invol-‚Çë‚àôp : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} ‚Üí (e : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- --     (fInvol : isInvolution (fst e))  ‚Üí (X : A ‚â° B)
-- -- -- -- -- -- -- -- -- -- --         ‚Üí PathP (Œª i ‚Üí X i ‚âÉ (e ‚Çë‚àô‚Çö X) i) e (idEquiv _)
-- -- -- -- -- -- -- -- -- -- -- glue-invol-‚Çë‚àôp e eInvol X i =
-- -- -- -- -- -- -- -- -- -- --   e' i ,
-- -- -- -- -- -- -- -- -- -- --          isProp‚ÜíPathP (Œª i ‚Üí isPropIsEquiv (e' i))
-- -- -- -- -- -- -- -- -- -- --            (snd e)
-- -- -- -- -- -- -- -- -- -- --            (idIsEquiv _) i

-- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- --     e' : ‚àÄ i ‚Üí X i ‚Üí (e ‚Çë‚àô‚Çö X) i
-- -- -- -- -- -- -- -- -- -- --     e' i = (Œª x ‚Üí glue (Œª { (i = i0) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --           ; (i = i1) ‚Üí _ })
-- -- -- -- -- -- -- -- -- -- --        (hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí eInvol x (~ k)
-- -- -- -- -- -- -- -- -- -- --                        ;(i = i1) ‚Üí x
-- -- -- -- -- -- -- -- -- -- --             }) x))




-- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôpSides : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} ‚Üí (e : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- --     (fInvol : isInvolution (fst e))  ‚Üí (X : A ‚â° B)
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí ‚àÄ j i ‚Üí Partial (j ‚à® ~ j ‚à® i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- --                  (Œ£ (Type ‚Ñì) (Œª T ‚Üí T ‚âÉ X i))
-- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôpSides  {B = B} e eInvol X j i =
-- -- -- -- -- -- -- -- -- -- --          (Œª { (i = i0) ‚Üí A ,
-- -- -- -- -- -- -- -- -- -- --                 equivEq {e = e ‚àô‚Çë e} {f = idEquiv _} (funExt eInvol) j

-- -- -- -- -- -- -- -- -- -- --           ; (i = i1) ‚Üí B , equivEq
-- -- -- -- -- -- -- -- -- -- --                {e = idEquiv _ ‚àô‚Çë idEquiv _}
-- -- -- -- -- -- -- -- -- -- --                {f = idEquiv _} refl j
-- -- -- -- -- -- -- -- -- -- --           ; (j = i0) ‚Üí _ ,
-- -- -- -- -- -- -- -- -- -- --              (unglue-‚Çë‚àôp e (e ‚Çë‚àô‚Çö X) i) ‚àô‚Çë (unglue-‚Çë‚àôp e X i)

-- -- -- -- -- -- -- -- -- -- --           ; (j = i1) ‚Üí X i , idEquiv _
-- -- -- -- -- -- -- -- -- -- --           })


-- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôp : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} ‚Üí (e : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- --     (fInvol : isInvolution (fst e))  ‚Üí (X : A ‚â° B)
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí Square
-- -- -- -- -- -- -- -- -- -- --                    (e ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö X )
-- -- -- -- -- -- -- -- -- -- --                    X
-- -- -- -- -- -- -- -- -- -- --                    (Œª _ ‚Üí A)
-- -- -- -- -- -- -- -- -- -- --                    (Œª _ ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôp  {B = B} e eInvol X j i =
-- -- -- -- -- -- -- -- -- -- --  Glue (X i) (invol-‚Çë‚àôpSides e eInvol X j i)


-- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôpSq-reflTy : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí (f : A ‚Üí A) ‚Üí
-- -- -- -- -- -- -- -- -- -- --     (fInvol : isInvolution f)
-- -- -- -- -- -- -- -- -- -- --      ‚Üí Type (‚Ñì-suc ‚Ñì)
-- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôpSq-reflTy  f fInvol =
-- -- -- -- -- -- -- -- -- -- --  let e = (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --  in Cube
-- -- -- -- -- -- -- -- -- -- --      (invol-‚Çë‚àôp e fInvol refl)
-- -- -- -- -- -- -- -- -- -- --      (ua-CompFill‚àô‚Çë e e)
-- -- -- -- -- -- -- -- -- -- --      (symP-fromGoal (‚Çë‚àô‚Çö-ua e (e ‚Çë‚àô‚Çö refl)))
-- -- -- -- -- -- -- -- -- -- --      (Œª i j ‚Üí Glue A
-- -- -- -- -- -- -- -- -- -- --        Œª {  (j = i0) ‚Üí A , equivEq {e = idEquiv _} {f = e ‚àô‚Çë e} (sym (funExt fInvol)) i
-- -- -- -- -- -- -- -- -- -- --           ; (j = i1) ‚Üí A , idEquiv _
-- -- -- -- -- -- -- -- -- -- --           ; (i = i0) ‚Üí A , idEquiv _
-- -- -- -- -- -- -- -- -- -- --           })
-- -- -- -- -- -- -- -- -- -- --      (Œª _ _ ‚Üí A)
-- -- -- -- -- -- -- -- -- -- --      Œª j i ‚Üí ua (involEquiv {f = f} fInvol) (i ‚à® ~ j)

   


-- -- -- -- -- -- -- -- -- -- -- -- sqInv : (e : A ‚âÉ A) ‚Üí isInvolution (fst e) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --            PathP (Œª j ‚Üí A ‚âÉ ua e j) e (idEquiv A)
-- -- -- -- -- -- -- -- -- -- -- -- sqInv e eInvol j = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôp-refl : (e : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --     (fInvol : isInvolution (fst e))
-- -- -- -- -- -- -- -- -- -- -- --                 ‚Üí Square
-- -- -- -- -- -- -- -- -- -- -- --                    (e ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö refl)
-- -- -- -- -- -- -- -- -- -- -- --                    refl
-- -- -- -- -- -- -- -- -- -- -- --                    (Œª _ ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --                    (Œª _ ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôp-refl  e fInvol j i =
-- -- -- -- -- -- -- -- -- -- -- --    Glue (‚Çë‚àô‚Çö-fill e refl j i)
-- -- -- -- -- -- -- -- -- -- -- --      Œª {(i = i0) ‚Üí A , ‚Çë‚àô‚Çö-compSq e e j
-- -- -- -- -- -- -- -- -- -- -- --        ;(i = i1) ‚Üí A , idEquiv A
-- -- -- -- -- -- -- -- -- -- -- --        ;(j = i1) ‚Üí A , equivEq {e = (e ‚àô‚Çë e)} {idEquiv A} (funExt fInvol) i
-- -- -- -- -- -- -- -- -- -- -- --         }

-- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôpSq : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} ‚Üí (e : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- --     (eInvol : isInvolution (fst e))  ‚Üí (X : A ‚â° B)
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí PathP (Œª l ‚Üí
-- -- -- -- -- -- -- -- -- -- --                      Square
-- -- -- -- -- -- -- -- -- -- --                    (e ‚Çë‚àô‚Çö e ‚Çë‚àô‚Çö Œª i ‚Üí X (i ‚àß l))
-- -- -- -- -- -- -- -- -- -- --                    (Œª i ‚Üí X (i ‚àß l))
-- -- -- -- -- -- -- -- -- -- --                    (Œª _ ‚Üí A)
-- -- -- -- -- -- -- -- -- -- --                    (Œª _ ‚Üí X l))
-- -- -- -- -- -- -- -- -- -- --                      (invol-‚Çë‚àôp e eInvol refl) (invol-‚Çë‚àôp e eInvol X)
-- -- -- -- -- -- -- -- -- -- -- invol-‚Çë‚àôpSq  {B = B} e eInvol X
-- -- -- -- -- -- -- -- -- -- --   = Œª l ‚Üí invol-‚Çë‚àôp e eInvol Œª i ‚Üí X (i ‚àß l)



-- -- -- -- -- -- -- -- -- -- -- unglue-invol-‚Çë‚àôp : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} ‚Üí (e : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- --     (fInvol : isInvolution (fst e))  ‚Üí (X : A ‚â° B)
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí  SquareP (Œª j i ‚Üí invol-‚Çë‚àôp e fInvol X j i ‚âÉ X i)
-- -- -- -- -- -- -- -- -- -- --                      (Œª i ‚Üí unglue-‚Çë‚àôp e (e ‚Çë‚àô‚Çö X) i ‚àô‚Çë unglue-‚Çë‚àôp e X i)
-- -- -- -- -- -- -- -- -- -- --                      (Œª _ ‚Üí idEquiv _)
-- -- -- -- -- -- -- -- -- -- --                      (equivEq (funExt fInvol))
-- -- -- -- -- -- -- -- -- -- --                      (equivEq refl)
                     
-- -- -- -- -- -- -- -- -- -- -- fst (unglue-invol-‚Çë‚àôp e eInvol X j i) x =
-- -- -- -- -- -- -- -- -- -- --  unglue (j ‚à® ~ j ‚à® i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- --    {e = Œª o ‚Üí snd (invol-‚Çë‚àôpSides e eInvol X j i o)} x
 
-- -- -- -- -- -- -- -- -- -- -- snd (unglue-invol-‚Çë‚àôp e eInvol X j i) =
-- -- -- -- -- -- -- -- -- -- --  let z = (Œª j i ‚Üí isPropIsEquiv
-- -- -- -- -- -- -- -- -- -- --          (Œª x ‚Üí unglue (j ‚à® ~ j ‚à® i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- --             {e = Œª o ‚Üí snd (invol-‚Çë‚àôpSides e eInvol X j i o)} x))

-- -- -- -- -- -- -- -- -- -- --  in isProp‚ÜíSquareP z
-- -- -- -- -- -- -- -- -- -- --     (isProp‚ÜíPathP (Œª j ‚Üí z j i0) _ _)
-- -- -- -- -- -- -- -- -- -- --     (isProp‚ÜíPathP (Œª j ‚Üí z j i1) _ _)
-- -- -- -- -- -- -- -- -- -- --     (Œª i ‚Üí snd (unglue-‚Çë‚àôp e (e ‚Çë‚àô‚Çö X) i ‚àô‚Çë unglue-‚Çë‚àôp e X i))
-- -- -- -- -- -- -- -- -- -- --     (Œª i ‚Üí idIsEquiv _)
-- -- -- -- -- -- -- -- -- -- --     j i



-- -- -- -- -- -- -- -- -- -- -- w‚à∑ : ‚àÄ n ‚Üí Œ£ ‚Ñï (Œª k ‚Üí suc k < n) ‚Üí Fin n ‚â° Fin n ‚Üí Fin n ‚â° Fin n
-- -- -- -- -- -- -- -- -- -- -- w‚à∑ n k = (adjT'‚âÉ {n = n} k) ‚Çë‚àô‚Çö_

-- -- -- -- -- -- -- -- -- -- -- w‚à∑‚âÉ : ‚àÄ n k ‚Üí (X : Fin n ‚â° Fin n) 
-- -- -- -- -- -- -- -- -- -- --        ‚Üí ‚àÄ j ‚Üí w‚à∑ n k X j ‚âÉ X j
-- -- -- -- -- -- -- -- -- -- -- w‚à∑‚âÉ n k X j = unglue-‚Çë‚àôp (adjT'‚âÉ {n = n} k) X j


-- -- -- -- -- -- -- -- -- -- -- w‚à∑invo : ‚àÄ n k X ‚Üí w‚à∑ n k (w‚à∑ n k X) ‚â° X  
-- -- -- -- -- -- -- -- -- -- -- w‚à∑invo n k X i j = invol-‚Çë‚àôp (adjT'‚âÉ {n = n} k) (isInvolution-adjT n k) X i j 

-- -- -- -- -- -- -- -- -- -- -- w‚à∑invo-unglue‚âÉ : ‚àÄ n k X ‚Üí ‚àÄ i j ‚Üí w‚à∑invo n k X i j ‚âÉ X j
-- -- -- -- -- -- -- -- -- -- -- w‚à∑invo-unglue‚âÉ n k X i j =
-- -- -- -- -- -- -- -- -- -- --    unglue-invol-‚Çë‚àôp (adjT'‚âÉ {n = n} k) (isInvolution-adjT n k) X i j 

-- -- -- -- -- -- -- -- -- -- -- permFin : ‚àÄ n ‚Üí Perm n ‚Üí Fin n ‚â° Fin n 
-- -- -- -- -- -- -- -- -- -- -- permFin n = Rrec.f (w)
-- -- -- -- -- -- -- -- -- -- --  where


-- -- -- -- -- -- -- -- -- -- --  w : Rrec {n = n} (Fin n ‚â° Fin n)
-- -- -- -- -- -- -- -- -- -- --  Rrec.isSetA (w) = isOfHLevel‚â° 2 (isSetFin {n = n}) (isSetFin {n = n})
-- -- -- -- -- -- -- -- -- -- --  Rrec.ŒµA w = refl
-- -- -- -- -- -- -- -- -- -- --  Rrec.‚à∑A (w) = w‚à∑ n
-- -- -- -- -- -- -- -- -- -- --  Rrec.invoA (w) = w‚à∑invo n      
-- -- -- -- -- -- -- -- -- -- --  Rrec.braidA (w) k k< _ =
-- -- -- -- -- -- -- -- -- -- --        ‚Çë‚àô‚Çö-comp¬≥eq _ _ _
-- -- -- -- -- -- -- -- -- -- --     (equivEq (cong (Iso.fun ‚àò permuteIso n) (braid k k< Œµ)))
-- -- -- -- -- -- -- -- -- -- --  Rrec.commA w k l x X =
-- -- -- -- -- -- -- -- -- -- --      ‚Çë‚àô‚Çö-comp¬≤eq _ _ _
-- -- -- -- -- -- -- -- -- -- --        ((equivEq (cong (Iso.fun ‚àò permuteIso n) (comm k l x Œµ))))

-- -- -- -- -- -- -- -- -- -- -- ‚Ñôrm : ‚Ñï ‚Üí Type
-- -- -- -- -- -- -- -- -- -- -- ‚Ñôrm n = EM‚ÇÅ (Symmetric-Group (Fin n) (isSetFin {n}))

-- -- -- -- -- -- -- -- -- -- -- ‚Ñôrm' : ‚Ñï ‚Üí Type
-- -- -- -- -- -- -- -- -- -- -- ‚Ñôrm' n = EM‚ÇÅ (PermG n)



-- -- -- -- -- -- -- -- -- -- -- hùîΩin' : ‚àÄ n ‚Üí ‚Ñôrm' n ‚Üí hSet ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- hùîΩin' n = EMrec.f w
-- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- --   w : EMrec _ isGroupoidHSet
-- -- -- -- -- -- -- -- -- -- --   EMrec.b w = _ , isSetFin {n}
-- -- -- -- -- -- -- -- -- -- --   EMrec.bloop w g = 
-- -- -- -- -- -- -- -- -- -- --     TypeOfHLevel‚â° 2 (permFin n g)
-- -- -- -- -- -- -- -- -- -- --   EMrec.bComp w g h = 
-- -- -- -- -- -- -- -- -- -- --     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- -- --       (RelimProp.f {n = n} w‚à∑compR g)

-- -- -- -- -- -- -- -- -- -- --    where
-- -- -- -- -- -- -- -- -- -- --    w‚à∑compR : RelimProp
-- -- -- -- -- -- -- -- -- -- --       (Œª z ‚Üí Square (permFin n z) (permFin n (z ¬∑ h)) refl (permFin n h))
-- -- -- -- -- -- -- -- -- -- --    RelimProp.isPropA w‚à∑compR _ =
-- -- -- -- -- -- -- -- -- -- --       isOfHLevelRetractFromIso
-- -- -- -- -- -- -- -- -- -- --          1
-- -- -- -- -- -- -- -- -- -- --          (invIso PathP‚Üícomm-Iso)
-- -- -- -- -- -- -- -- -- -- --            (isOfHLevel‚â° 2 (isSetFin {n = n}) (isSetFin {n = n})
-- -- -- -- -- -- -- -- -- -- --              _ _ )
-- -- -- -- -- -- -- -- -- -- --    RelimProp.ŒµA w‚à∑compR i j = permFin n h (i ‚àß j)
-- -- -- -- -- -- -- -- -- -- --    RelimProp.‚à∑A w‚à∑compR k {xs} X j = (adjT'‚âÉ {n = n} k) ‚Çë‚àô‚Çö (X j)


-- -- -- -- -- -- -- -- -- -- -- ùîΩin' : ‚àÄ n ‚Üí ‚Ñôrm' n ‚Üí Type ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- ùîΩin'  n = fst ‚àò hùîΩin' n 

-- -- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àôp : ‚àÄ {‚Ñì ‚Ñì'} {A A' : Type ‚Ñì} {B : ‚àÄ j i ‚Üí Type ‚Ñì'}
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f)
-- -- -- -- -- -- -- -- -- -- -- --                 {X : (A ‚Üí B i1 i0) ‚â° (A' ‚Üí B i1 i1)}
-- -- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A'} 
                                
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : Square
-- -- -- -- -- -- -- -- -- -- -- --                       (Œª i ‚Üí X' i ‚Üí B i0 i)
-- -- -- -- -- -- -- -- -- -- -- --                       X
-- -- -- -- -- -- -- -- -- -- -- --                       (Œª j ‚Üí A ‚Üí B j i0)-
-- -- -- -- -- -- -- -- -- -- -- --                       (Œª j ‚Üí A' ‚Üí B j i1))
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí Square  
-- -- -- -- -- -- -- -- -- -- -- --                   (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --                     {!!} ‚Üí B i0 i)
-- -- -- -- -- -- -- -- -- -- -- --                   (Œª i ‚Üí ((preCompInvol.e' {f = f} (B i1 i) fInvol) ‚Çë‚àô‚Çö Œª i' ‚Üí {!X i'!}) i)
-- -- -- -- -- -- -- -- -- -- -- --                   {!!}
-- -- -- -- -- -- -- -- -- -- -- --                   {!!}
-- -- -- -- -- -- -- -- -- -- -- --               -- ‚Üí (Œª i ‚Üí  ((involEquiv {f = f} fInvol) ‚Çë‚àô‚Çö X') i ‚Üí B )
-- -- -- -- -- -- -- -- -- -- -- --               --   ‚â° ((preCompInvol.e' {f = f} B fInvol) ‚Çë‚àô‚Çö X)
-- -- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àôp  {A'} {B = B} f fInvol {X} {X' = X'} P j i = {!!}



-- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àôp-sides : ‚àÄ {‚Ñì ‚Ñì'} {A A' : Type ‚Ñì} {B : ‚àÄ j i ‚Üí Type ‚Ñì'}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f)
-- -- -- -- -- -- -- -- -- -- --                 {X : (A ‚Üí B i1 i0) ‚â° (A' ‚Üí B i1 i1)}
-- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A'} 
                                
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : Square
-- -- -- -- -- -- -- -- -- -- --                       (Œª i ‚Üí X' i ‚Üí B i0 i)
-- -- -- -- -- -- -- -- -- -- --                       X
-- -- -- -- -- -- -- -- -- -- --                       (Œª j ‚Üí A ‚Üí B j i0)
-- -- -- -- -- -- -- -- -- -- --                       (Œª j ‚Üí A' ‚Üí B j i1))
-- -- -- -- -- -- -- -- -- -- --               ‚Üí ‚àÄ j i
-- -- -- -- -- -- -- -- -- -- --               ‚Üí Partial (~ j ‚à® i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- --                   (Œ£ (Type (‚Ñì-max ‚Ñì ‚Ñì')) (Œª T ‚Üí T ‚âÉ P j i)) 
-- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àôp-sides  {A'} {B = B} f fInvol {X} {X' = X'} P j i = 
-- -- -- -- -- -- -- -- -- -- --    let e = (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --   in Œª {
-- -- -- -- -- -- -- -- -- -- --       (i = i0) ‚Üí (A ‚Üí B j i0) , preCompInvol.e' {f = f} (B j i) fInvol
-- -- -- -- -- -- -- -- -- -- --     ; (i = i1) ‚Üí (A' ‚Üí B j i1) , idEquiv _
-- -- -- -- -- -- -- -- -- -- --     ; (j = i0) ‚Üí ((e ‚Çë‚àô‚Çö X') i ‚Üí B i0 i) ,
-- -- -- -- -- -- -- -- -- -- --             (Œª x y ‚Üí x (fst (glue-invol-‚Çë‚àôp e fInvol X' i) y)) ,
-- -- -- -- -- -- -- -- -- -- --             isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --               (Œª i ‚Üí isPropIsEquiv {A = (e ‚Çë‚àô‚Çö X') i ‚Üí B j i} {B = X' i ‚Üí B i0 i}
-- -- -- -- -- -- -- -- -- -- --                 (Œª x y ‚Üí x (fst (glue-invol-‚Çë‚àôp e fInvol X' i) y)))
-- -- -- -- -- -- -- -- -- -- --               (snd (preCompInvol.e' {f = f} (B j i0) fInvol))
-- -- -- -- -- -- -- -- -- -- --               (idIsEquiv _) i
-- -- -- -- -- -- -- -- -- -- --       }


-- -- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àôp-sides : ‚àÄ {‚Ñì ‚Ñì'} {A A' : Type ‚Ñì} {B : Type ‚Ñì'}
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f) 
-- -- -- -- -- -- -- -- -- -- -- --                 {X : (A ‚Üí B) ‚â° (A' ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A'}
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : (Œª i ‚Üí X' i ‚Üí B) ‚â° X)
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí ‚àÄ j i
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí Partial (~ j ‚à® i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- -- --                   (Œ£ (Type (‚Ñì-max ‚Ñì ‚Ñì')) (Œª T ‚Üí T ‚âÉ P j i)) 
-- -- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àôp-sides  {A'} {B = B} f fInvol {X} {X' = X'} P j i =
-- -- -- -- -- -- -- -- -- -- -- --    let e = (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- -- --   in Œª {
-- -- -- -- -- -- -- -- -- -- -- --       (i = i0) ‚Üí (A ‚Üí B) , preCompInvol.e' {f = f} B fInvol
-- -- -- -- -- -- -- -- -- -- -- --     ; (i = i1) ‚Üí (A' ‚Üí B) , idEquiv _
-- -- -- -- -- -- -- -- -- -- -- --     ; (j = i0) ‚Üí ((e ‚Çë‚àô‚Çö X') i ‚Üí B) ,
-- -- -- -- -- -- -- -- -- -- -- --             (Œª x y ‚Üí x (fst (glue-invol-‚Çë‚àôp e fInvol X' i) y)) ,
-- -- -- -- -- -- -- -- -- -- -- --             isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- -- --               (Œª i ‚Üí isPropIsEquiv {A = (e ‚Çë‚àô‚Çö X') i ‚Üí B} {B = X' i ‚Üí B}
-- -- -- -- -- -- -- -- -- -- -- --                 (Œª x y ‚Üí x (fst (glue-invol-‚Çë‚àôp e fInvol X' i) y)))
-- -- -- -- -- -- -- -- -- -- -- --               (snd (preCompInvol.e' {f = f} B fInvol))
-- -- -- -- -- -- -- -- -- -- -- --               (idIsEquiv _) i
-- -- -- -- -- -- -- -- -- -- -- --       }

-- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àôp : ‚àÄ {‚Ñì ‚Ñì'} {A A' : Type ‚Ñì} {B : Type ‚Ñì'}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f) 
-- -- -- -- -- -- -- -- -- -- --                 {X : (A ‚Üí B) ‚â° (A' ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A'}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : (Œª i ‚Üí X' i ‚Üí B) ‚â° X)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (Œª i ‚Üí  ((involEquiv {f = f} fInvol) ‚Çë‚àô‚Çö X') i ‚Üí B )
-- -- -- -- -- -- -- -- -- -- --                 ‚â° ((preCompInvol.e' {f = f} B fInvol) ‚Çë‚àô‚Çö X)
-- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àôp  {A'} {B = B} f fInvol {X} {X' = X'} P j i = 
-- -- -- -- -- -- -- -- -- -- --   let e = (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --   in Glue (P j i) (dom-‚Çë‚àôp-sides  {A'} {B = Œª _ _ ‚Üí B} f fInvol {X} {X' = X'} P j i)



-- -- -- -- -- -- -- -- -- -- -- unglue-dom-‚Çë‚àôp : ‚àÄ {‚Ñì ‚Ñì'} {A A' : Type ‚Ñì} {B : Type ‚Ñì'}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f) 
-- -- -- -- -- -- -- -- -- -- --                 {X : (A ‚Üí B) ‚â° (A' ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A'}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : (Œª i ‚Üí X' i ‚Üí B) ‚â° X)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí SquareP
-- -- -- -- -- -- -- -- -- -- --                 (Œª j i ‚Üí
-- -- -- -- -- -- -- -- -- -- --                 dom-‚Çë‚àôp  {A'} {B = B} f fInvol {X} {X' = X'} P j i
-- -- -- -- -- -- -- -- -- -- --                  ‚âÉ  P j i)
-- -- -- -- -- -- -- -- -- -- --                      (Œª i ‚Üí (Œª x y ‚Üí x (fst (glue-invol-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                           (involEquiv {f = f} fInvol) fInvol X' i) y))
-- -- -- -- -- -- -- -- -- -- --                        , unglueIsEquiv (X' i ‚Üí B) i1
-- -- -- -- -- -- -- -- -- -- --                           (dom-‚Çë‚àôp-sides {B = Œª _ _ ‚Üí B} f fInvol {X} {X'} P i0 i))
-- -- -- -- -- -- -- -- -- -- --                      (Œª i ‚Üí 
-- -- -- -- -- -- -- -- -- -- --                         fst (unglue-‚Çë‚àôp (preCompInvol.e' {f = f} B fInvol) X i) ,
-- -- -- -- -- -- -- -- -- -- --                        unglueIsEquiv (X i) (i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- --                           (dom-‚Çë‚àôp-sides {B = Œª _ _ ‚Üí B} f fInvol {X} {X'} P i1 i) )
-- -- -- -- -- -- -- -- -- -- --                      refl 
-- -- -- -- -- -- -- -- -- -- --                      refl

-- -- -- -- -- -- -- -- -- -- -- unglue-dom-‚Çë‚àôp  {A'} {B = B} f fInvol {X} {X' = X'} P j i =
-- -- -- -- -- -- -- -- -- -- --   unglueEquiv (P j i) _
-- -- -- -- -- -- -- -- -- -- --     (dom-‚Çë‚àôp-sides  {A'} {B = Œª _ _ ‚Üí B} f fInvol {X} {X' = X'} P j i)


-- -- -- -- -- -- -- -- -- -- -- -- unglue-dom-‚Çë‚àôp : ‚àÄ {‚Ñì ‚Ñì'} {A A' : Type ‚Ñì} {B : Type ‚Ñì'}
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f) 
-- -- -- -- -- -- -- -- -- -- -- --                 {X : (A ‚Üí B) ‚â° (A' ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A'}
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : (Œª i ‚Üí X' i ‚Üí B) ‚â° X)
-- -- -- -- -- -- -- -- -- -- -- --               ‚Üí SquareP
-- -- -- -- -- -- -- -- -- -- -- --                 (Œª j i ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --                 dom-‚Çë‚àôp  {A'} {B = B} f fInvol {X} {X' = X'} P j i
-- -- -- -- -- -- -- -- -- -- -- --                  ‚Üí P j i)
-- -- -- -- -- -- -- -- -- -- -- --                      ((Œª i x y ‚Üí x (fst (glue-invol-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- -- --                           (involEquiv {f = f} fInvol) fInvol X' i) y)))
-- -- -- -- -- -- -- -- -- -- -- --                      (congP (Œª _ ‚Üí fst)
-- -- -- -- -- -- -- -- -- -- -- --                       (unglue-‚Çë‚àôp (preCompInvol.e' {f = f} B fInvol) X))
-- -- -- -- -- -- -- -- -- -- -- --                      refl
-- -- -- -- -- -- -- -- -- -- -- --                      refl

-- -- -- -- -- -- -- -- -- -- -- -- unglue-dom-‚Çë‚àôp  {A'} {B = B} f fInvol {X} {X' = X'} P j i =
-- -- -- -- -- -- -- -- -- -- -- --   let e = (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- -- --   in fst (unglueEquiv (P j i) _
-- -- -- -- -- -- -- -- -- -- -- --          {!!})
-- -- -- -- -- -- -- -- -- -- -- --     -- Œª {
-- -- -- -- -- -- -- -- -- -- -- --     --   (i = i0) ‚Üí (A ‚Üí B) , preCompInvol.e' {f = f} B fInvol
-- -- -- -- -- -- -- -- -- -- -- --     -- ; (i = i1) ‚Üí (A' ‚Üí B) , idEquiv _
-- -- -- -- -- -- -- -- -- -- -- --     -- ; (j = i0) ‚Üí ((e ‚Çë‚àô‚Çö X') i ‚Üí B) ,
-- -- -- -- -- -- -- -- -- -- -- --     --         (Œª x y ‚Üí x (fst (glue-invol-‚Çë‚àôp e fInvol X' i) y)) ,
-- -- -- -- -- -- -- -- -- -- -- --     --         isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- -- --     --           (Œª i ‚Üí isPropIsEquiv {A = (e ‚Çë‚àô‚Çö X') i ‚Üí B} {B = X' i ‚Üí B}
-- -- -- -- -- -- -- -- -- -- -- --     --             (Œª x y ‚Üí x (fst (glue-invol-‚Çë‚àôp e fInvol X' i) y)))
-- -- -- -- -- -- -- -- -- -- -- --     --           (snd (preCompInvol.e' {f = f} B fInvol))
-- -- -- -- -- -- -- -- -- -- -- --     --           (idIsEquiv _) i
-- -- -- -- -- -- -- -- -- -- -- --     --   })


-- -- -- -- -- -- -- -- -- -- -- dom-invol-‚Çë‚àôp : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'} (isSetA : isSet A)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f) 
-- -- -- -- -- -- -- -- -- -- --                 {X : (A ‚Üí B) ‚â° (A ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : (Œª i ‚Üí X' i ‚Üí B) ‚â° X)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí Cube

-- -- -- -- -- -- -- -- -- -- --                   (Œª l j ‚Üí dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp f fInvol P ) l j)
-- -- -- -- -- -- -- -- -- -- --                   P
-- -- -- -- -- -- -- -- -- -- --                   (Œª i j ‚Üí invol-‚Çë‚àôp (involEquiv {f = f} fInvol) fInvol X' i j
-- -- -- -- -- -- -- -- -- -- --                           ‚Üí B)
-- -- -- -- -- -- -- -- -- -- --                   (Œª i j ‚Üí invol-‚Çë‚àôp (preCompInvol.e' {f = f} B fInvol)
-- -- -- -- -- -- -- -- -- -- --                       (Œª x ‚Üí funExt Œª y ‚Üí cong x (fInvol y)) X i j)
-- -- -- -- -- -- -- -- -- -- --                   (refl {x = Œª l ‚Üí dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp f fInvol P) l i0})
-- -- -- -- -- -- -- -- -- -- --                   (refl {x = Œª l ‚Üí dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp f fInvol P) l i1})
-- -- -- -- -- -- -- -- -- -- -- dom-invol-‚Çë‚àôp {‚Ñì = ‚Ñì} {‚Ñì'}  {B} isSetA f fInvol {X} {X'} P i l j =
-- -- -- -- -- -- -- -- -- -- --    Glue (P l j ) {i ‚à® ~ i ‚à® j ‚à® ~ j ‚à® l ‚à® ~ l}
-- -- -- -- -- -- -- -- -- -- --       Œª o ‚Üí T i l j o , e i l j o , isEqE i l j o

-- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- --     T : ‚àÄ i l j ‚Üí Partial (i ‚à® ~ i ‚à® j ‚à® ~ j ‚à® l ‚à® ~ l) (Type (‚Ñì-max ‚Ñì ‚Ñì'))
-- -- -- -- -- -- -- -- -- -- --     T i l j =
-- -- -- -- -- -- -- -- -- -- --      Œª { (i = i0) ‚Üí dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp f fInvol P ) l j 
-- -- -- -- -- -- -- -- -- -- --        ; (i = i1) ‚Üí P l j
-- -- -- -- -- -- -- -- -- -- --        ; (l = i0) ‚Üí (invol-‚Çë‚àôp (involEquiv {f = f} fInvol) fInvol X' i j ‚Üí B) 
-- -- -- -- -- -- -- -- -- -- --        ; (l = i1) ‚Üí invol-‚Çë‚àôp (preCompInvol.e' {f = f} B fInvol)
-- -- -- -- -- -- -- -- -- -- --                       (Œª x ‚Üí funExt Œª y ‚Üí cong x (fInvol y)) X i j
-- -- -- -- -- -- -- -- -- -- --        ; (j = i0) ‚Üí (A ‚Üí B)
-- -- -- -- -- -- -- -- -- -- --        ; (j = i1) ‚Üí (A ‚Üí B) }

-- -- -- -- -- -- -- -- -- -- --     isSetX' : ‚àÄ j ‚Üí isSet (X' j)
-- -- -- -- -- -- -- -- -- -- --     isSetX' j = isProp‚ÜíPathP (Œª j ‚Üí isPropIsSet {A = X' j})
-- -- -- -- -- -- -- -- -- -- --       isSetA isSetA j

-- -- -- -- -- -- -- -- -- -- --     isSetInvol : ‚àÄ i j ‚Üí
-- -- -- -- -- -- -- -- -- -- --           isSet (invol-‚Çë‚àôp (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --                          fInvol X' i j)
-- -- -- -- -- -- -- -- -- -- --     isSetInvol i j =
-- -- -- -- -- -- -- -- -- -- --       isOfHLevelRespectEquiv 2
-- -- -- -- -- -- -- -- -- -- --         (invEquiv (unglue-invol-‚Çë‚àôp (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --                          fInvol X' i j))
-- -- -- -- -- -- -- -- -- -- --         (isSetX' j)

-- -- -- -- -- -- -- -- -- -- --     ‚àòf = preCompInvol.e' {f = f} B fInvol

-- -- -- -- -- -- -- -- -- -- --     e : ‚àÄ i l j ‚Üí PartialP (i ‚à® ~ i ‚à® j ‚à® ~ j ‚à® l ‚à® ~ l)
-- -- -- -- -- -- -- -- -- -- --             Œª o ‚Üí T i l j o ‚Üí P l j 
-- -- -- -- -- -- -- -- -- -- --     e i l j =  Œª { (i = i0) ‚Üí fst (unglue-dom-‚Çë‚àôp f fInvol P l j) ‚àò
-- -- -- -- -- -- -- -- -- -- --                fst (unglue-dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp f fInvol P) l j) 
-- -- -- -- -- -- -- -- -- -- --        ; (i = i1) ‚Üí idfun _
-- -- -- -- -- -- -- -- -- -- --        ; (l = i0) ‚Üí _‚àò 
-- -- -- -- -- -- -- -- -- -- --                (isSet‚ÜíSquareP {A = Œª i j ‚Üí X' j ‚Üí 
-- -- -- -- -- -- -- -- -- -- --                 invol-‚Çë‚àôp (involEquiv {f = f} fInvol) fInvol X' i j} (Œª i j ‚Üí
-- -- -- -- -- -- -- -- -- -- --                     isSetŒ† Œª _ ‚Üí isSetInvol i j)
-- -- -- -- -- -- -- -- -- -- --                   (Œª j ‚Üí (fst (glue-invol-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                           (involEquiv {f = f} fInvol) fInvol
-- -- -- -- -- -- -- -- -- -- --                            (involEquiv {f = f} fInvol ‚Çë‚àô‚Çö X') j))
-- -- -- -- -- -- -- -- -- -- --                            ‚àò' (fst (glue-invol-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                           (involEquiv {f = f} fInvol) fInvol X' j)))
-- -- -- -- -- -- -- -- -- -- --                   (Œª _ ‚Üí idfun _)
-- -- -- -- -- -- -- -- -- -- --                   (Œª i y ‚Üí fInvol y i)
-- -- -- -- -- -- -- -- -- -- --                   (Œª _ ‚Üí idfun _) i j)

-- -- -- -- -- -- -- -- -- -- --        ; (l = i1) ‚Üí fst (unglue-invol-‚Çë‚àôp ‚àòf
-- -- -- -- -- -- -- -- -- -- --                       (Œª x ‚Üí funExt Œª y ‚Üí cong x (fInvol y)) X i j)
-- -- -- -- -- -- -- -- -- -- --        ; (j = i0) ‚Üí Œª x y ‚Üí x (fInvol y i)
-- -- -- -- -- -- -- -- -- -- --        ; (j = i1) ‚Üí idfun _
-- -- -- -- -- -- -- -- -- -- --        }

-- -- -- -- -- -- -- -- -- -- --     isEqEJ0 : (i l : I) ‚Üí isEquiv {A = A ‚Üí B} {B = A ‚Üí B} (Œª x y ‚Üí x (fInvol y i))
-- -- -- -- -- -- -- -- -- -- --     isEqEJ0 i l = isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --            (Œª i ‚Üí isPropIsEquiv (Œª x y ‚Üí x (fInvol y i)))
-- -- -- -- -- -- -- -- -- -- --            (snd (‚àòf ‚àô‚Çë ‚àòf))
-- -- -- -- -- -- -- -- -- -- --             (idIsEquiv _) i

-- -- -- -- -- -- -- -- -- -- --     isEqEJ1 : (i l : I) ‚Üí isEquiv {A = A ‚Üí B} (Œª x ‚Üí x)
-- -- -- -- -- -- -- -- -- -- --     isEqEJ1 _ _ = idIsEquiv _

-- -- -- -- -- -- -- -- -- -- --     isEqI0L0 : _
-- -- -- -- -- -- -- -- -- -- --     isEqI0L0 = isProp‚ÜíPathP (Œª j ‚Üí isPropIsEquiv (e i0 i0 j 1=1)) _ _

-- -- -- -- -- -- -- -- -- -- --     isEqI0L1 : _
-- -- -- -- -- -- -- -- -- -- --     isEqI0L1 = isProp‚ÜíPathP (Œª j ‚Üí isPropIsEquiv (e i0 i1 j 1=1)) _ _


-- -- -- -- -- -- -- -- -- -- --     isEqE : ‚àÄ i l j ‚Üí PartialP (i ‚à® ~ i ‚à® j ‚à® ~ j ‚à® l ‚à® ~ l)
-- -- -- -- -- -- -- -- -- -- --             Œª o ‚Üí isEquiv (e i l j o) 
-- -- -- -- -- -- -- -- -- -- --     isEqE i l j =
-- -- -- -- -- -- -- -- -- -- --      Œª { (i = i0) ‚Üí
-- -- -- -- -- -- -- -- -- -- --             isProp‚ÜíSquareP
-- -- -- -- -- -- -- -- -- -- --             (Œª l j ‚Üí isPropIsEquiv (e i0 l j 1=1))
-- -- -- -- -- -- -- -- -- -- --                  (Œª _ ‚Üí snd (compEquiv ‚àòf ‚àòf))
-- -- -- -- -- -- -- -- -- -- --                  (Œª _ ‚Üí idIsEquiv _)
-- -- -- -- -- -- -- -- -- -- --                  isEqI0L0
-- -- -- -- -- -- -- -- -- -- --                  isEqI0L1 l j 
-- -- -- -- -- -- -- -- -- -- --        ; (i = i1) ‚Üí idIsEquiv _
-- -- -- -- -- -- -- -- -- -- --        ; (l = i0) ‚Üí
-- -- -- -- -- -- -- -- -- -- --             isProp‚ÜíSquareP
-- -- -- -- -- -- -- -- -- -- --             (Œª i j ‚Üí isPropIsEquiv (e i i0 j 1=1))
-- -- -- -- -- -- -- -- -- -- --                  (Œª i ‚Üí isEqEJ0 i i0)
-- -- -- -- -- -- -- -- -- -- --                  (Œª _ ‚Üí idIsEquiv _)
-- -- -- -- -- -- -- -- -- -- --                  isEqI0L0
-- -- -- -- -- -- -- -- -- -- --                  (Œª _ ‚Üí idIsEquiv _) i j
-- -- -- -- -- -- -- -- -- -- --        ; (l = i1) ‚Üí
-- -- -- -- -- -- -- -- -- -- --                       isProp‚ÜíSquareP
-- -- -- -- -- -- -- -- -- -- --             (Œª i j ‚Üí isPropIsEquiv (e i i1 j 1=1))
-- -- -- -- -- -- -- -- -- -- --                  (Œª i ‚Üí isEqEJ0 i i1)
-- -- -- -- -- -- -- -- -- -- --                  (Œª i ‚Üí isEqEJ1 i i1)
-- -- -- -- -- -- -- -- -- -- --                  isEqI0L1
-- -- -- -- -- -- -- -- -- -- --                  (Œª _ ‚Üí idIsEquiv _) i j
-- -- -- -- -- -- -- -- -- -- --        ; (j = i0) ‚Üí isEqEJ0 i l            
-- -- -- -- -- -- -- -- -- -- --        ; (j = i1) ‚Üí isEqEJ1 i l      
-- -- -- -- -- -- -- -- -- -- --        }

-- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àô‚Çö-comp¬≤eq : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'} (isSetA : isSet A)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (g : A ‚Üí A) ‚Üí (gInvol : isInvolution g)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (fg-comm : f ‚àò g ‚â° g ‚àò f) ‚Üí 
-- -- -- -- -- -- -- -- -- -- --                 {X : (A ‚Üí B) ‚â° (A ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : (Œª i ‚Üí X' i ‚Üí B) ‚â° X)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí Cube
-- -- -- -- -- -- -- -- -- -- --                   (dom-‚Çë‚àôp g gInvol (dom-‚Çë‚àôp f fInvol P ))
-- -- -- -- -- -- -- -- -- -- --                   (dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp g gInvol P ))
-- -- -- -- -- -- -- -- -- -- --                   (Œª i j ‚Üí ‚Çë‚àô‚Çö-comp¬≤eq
-- -- -- -- -- -- -- -- -- -- --                      (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --                      (involEquiv {f = g} gInvol) X' (equivEq (fg-comm)) i j ‚Üí B)
-- -- -- -- -- -- -- -- -- -- --                   (‚Çë‚àô‚Çö-comp¬≤eq _ _ X (equivEq
-- -- -- -- -- -- -- -- -- -- --                     (funExt Œª x ‚Üí cong (x ‚àò'_) (sym fg-comm))) )
-- -- -- -- -- -- -- -- -- -- --                   refl
-- -- -- -- -- -- -- -- -- -- --                   refl

-- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àô‚Çö-comp¬≤eq {‚Ñì} {‚Ñì'} {B = B} isSetA f fInvol g gInvol fg-comm {X} {X'} P =
-- -- -- -- -- -- -- -- -- -- --    Œª i l j ‚Üí
-- -- -- -- -- -- -- -- -- -- --         Glue (P l j) Œª o ‚Üí T i l j o , E i l j o ,
-- -- -- -- -- -- -- -- -- -- --           isEquivE i l j o  

-- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- --    T : ‚àÄ i l j ‚Üí Partial (l ‚à® ~ l ‚à® i ‚à® ~ i ‚à® j ‚à® ~ j)
-- -- -- -- -- -- -- -- -- -- --                (Type (‚Ñì-max ‚Ñì ‚Ñì'))
-- -- -- -- -- -- -- -- -- -- --    T i l j = Œª {
-- -- -- -- -- -- -- -- -- -- --      (i = i0) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(i = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(l = i0) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(l = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(j = i0) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(j = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     }

-- -- -- -- -- -- -- -- -- -- --    isSetX' : ‚àÄ j ‚Üí isSet (X' j)
-- -- -- -- -- -- -- -- -- -- --    isSetX' j = isProp‚ÜíPathP (Œª j ‚Üí isPropIsSet {A = X' j})
-- -- -- -- -- -- -- -- -- -- --      isSetA isSetA j

-- -- -- -- -- -- -- -- -- -- --    isSet-‚Çë‚àô‚Çö-comp¬≤eq : ‚àÄ i j ‚Üí
-- -- -- -- -- -- -- -- -- -- --          isSet
-- -- -- -- -- -- -- -- -- -- --      (‚Çë‚àô‚Çö-comp¬≤eq (involEquiv {f = f} fInvol) (involEquiv {f = g} gInvol) X'
-- -- -- -- -- -- -- -- -- -- --       (equivEq fg-comm) i j)
-- -- -- -- -- -- -- -- -- -- --    isSet-‚Çë‚àô‚Çö-comp¬≤eq i j =
-- -- -- -- -- -- -- -- -- -- --      isOfHLevelRespectEquiv 2
-- -- -- -- -- -- -- -- -- -- --        (invEquiv (unglueEquiv (X' j) (i ‚à® ~ i ‚à® j ‚à® ~ j)
-- -- -- -- -- -- -- -- -- -- --          (‚Çë‚àô‚Çö-comp¬≤eq-sides
-- -- -- -- -- -- -- -- -- -- --           (involEquiv {f = f} fInvol) (involEquiv {f = g} gInvol) X'
-- -- -- -- -- -- -- -- -- -- --       (equivEq fg-comm) i j)))
-- -- -- -- -- -- -- -- -- -- --        (isSetX' j)


-- -- -- -- -- -- -- -- -- -- --    El0 : ‚àÄ i j ‚Üí T i i0 j 1=1 ‚Üí X' j ‚Üí B
-- -- -- -- -- -- -- -- -- -- --    El0 i j = _‚àò' 
-- -- -- -- -- -- -- -- -- -- --                (isSet‚ÜíSquareP {A = Œª i j ‚Üí X' j ‚Üí 
-- -- -- -- -- -- -- -- -- -- --                 ‚Çë‚àô‚Çö-comp¬≤eq
-- -- -- -- -- -- -- -- -- -- --                      (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --                      (involEquiv {f = g} gInvol) X' (equivEq (fg-comm)) i j}
-- -- -- -- -- -- -- -- -- -- --                       (Œª i j ‚Üí
-- -- -- -- -- -- -- -- -- -- --                     isSetŒ† Œª _ ‚Üí isSet-‚Çë‚àô‚Çö-comp¬≤eq i j)
-- -- -- -- -- -- -- -- -- -- --                     (Œª j ‚Üí (fst (glue-invol-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                           (involEquiv {f = g} gInvol) gInvol
-- -- -- -- -- -- -- -- -- -- --                            (involEquiv {f = f} fInvol ‚Çë‚àô‚Çö X') j))
-- -- -- -- -- -- -- -- -- -- --                            ‚àò' (fst (glue-invol-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                           (involEquiv {f = f} fInvol) fInvol X' j)))
-- -- -- -- -- -- -- -- -- -- --                   (Œª j ‚Üí (fst (glue-invol-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                           (involEquiv {f = f} fInvol) fInvol
-- -- -- -- -- -- -- -- -- -- --                            (involEquiv {f = g} gInvol ‚Çë‚àô‚Çö X') j))
-- -- -- -- -- -- -- -- -- -- --                            ‚àò' (fst (glue-invol-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                           (involEquiv {f = g} gInvol) gInvol X' j)))
-- -- -- -- -- -- -- -- -- -- --                   (sym fg-comm)
-- -- -- -- -- -- -- -- -- -- --                   (Œª _ ‚Üí idfun _) i j)

-- -- -- -- -- -- -- -- -- -- --    El1 : ‚àÄ i j ‚Üí T i i1 j 1=1 ‚Üí X j
-- -- -- -- -- -- -- -- -- -- --    El1 i j = unglue (j ‚à® ~ j ‚à® i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- --        {e = Œª o ‚Üí snd (‚Çë‚àô‚Çö-comp¬≤eq-sides
-- -- -- -- -- -- -- -- -- -- --           (preCompInvol.e' {f = f} B fInvol)
-- -- -- -- -- -- -- -- -- -- --           (preCompInvol.e' {f = g} B gInvol) X
-- -- -- -- -- -- -- -- -- -- --        (equivEq
-- -- -- -- -- -- -- -- -- -- --                     (funExt Œª x ‚Üí cong (x ‚àò'_) (sym fg-comm))) i j o)} 


-- -- -- -- -- -- -- -- -- -- --    E : ‚àÄ i l j ‚Üí PartialP (l ‚à® ~ l ‚à® i ‚à® ~ i ‚à® j ‚à® ~ j)
-- -- -- -- -- -- -- -- -- -- --                (Œª o ‚Üí T i l j o ‚Üí P l j)
-- -- -- -- -- -- -- -- -- -- --    E i l j = Œª {
-- -- -- -- -- -- -- -- -- -- --      (i = i0) ‚Üí
-- -- -- -- -- -- -- -- -- -- --        fst (unglue-dom-‚Çë‚àôp f fInvol P l j) ‚àò
-- -- -- -- -- -- -- -- -- -- --                fst (unglue-dom-‚Çë‚àôp g gInvol ((dom-‚Çë‚àôp f fInvol P)) l j)
-- -- -- -- -- -- -- -- -- -- --     ;(i = i1) ‚Üí
-- -- -- -- -- -- -- -- -- -- --        fst (unglue-dom-‚Çë‚àôp g gInvol P l j) ‚àò
-- -- -- -- -- -- -- -- -- -- --                fst (unglue-dom-‚Çë‚àôp f fInvol ((dom-‚Çë‚àôp g gInvol P)) l j)
-- -- -- -- -- -- -- -- -- -- --     ;(l = i0) ‚Üí El0 i j
-- -- -- -- -- -- -- -- -- -- --     ;(l = i1) ‚Üí El1 i j
-- -- -- -- -- -- -- -- -- -- --     ;(j = i0) ‚Üí Œª x ‚Üí x ‚àò (fg-comm (~ i))
-- -- -- -- -- -- -- -- -- -- --     ;(j = i1) ‚Üí idfun _
-- -- -- -- -- -- -- -- -- -- --     }

-- -- -- -- -- -- -- -- -- -- --    isEquivEi0 : ‚àÄ l j ‚Üí isEquiv (E i0 l j 1=1)
-- -- -- -- -- -- -- -- -- -- --    isEquivEi0 l j =
-- -- -- -- -- -- -- -- -- -- --       snd (unglue-dom-‚Çë‚àôp g gInvol (dom-‚Çë‚àôp f fInvol P) l j
-- -- -- -- -- -- -- -- -- -- --           ‚àô‚Çë unglue-dom-‚Çë‚àôp f fInvol P l j)

-- -- -- -- -- -- -- -- -- -- --    isEquivEi1 : ‚àÄ l j ‚Üí isEquiv (E i1 l j 1=1)
-- -- -- -- -- -- -- -- -- -- --    isEquivEi1 l j =
-- -- -- -- -- -- -- -- -- -- --       snd (unglue-dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp g gInvol P) l j
-- -- -- -- -- -- -- -- -- -- --           ‚àô‚Çë unglue-dom-‚Çë‚àôp g gInvol P l j)



-- -- -- -- -- -- -- -- -- -- --    isEquivE : ‚àÄ i l j ‚Üí PartialP (l ‚à® ~ l ‚à® i ‚à® ~ i ‚à® j ‚à® ~ j)
-- -- -- -- -- -- -- -- -- -- --                (Œª o ‚Üí isEquiv (E i l j o))
-- -- -- -- -- -- -- -- -- -- --    isEquivE i l j =
-- -- -- -- -- -- -- -- -- -- --        Œª {
-- -- -- -- -- -- -- -- -- -- --      (i = i0) ‚Üí isEquivEi0 l j
-- -- -- -- -- -- -- -- -- -- --     ;(i = i1) ‚Üí isEquivEi1 l j
-- -- -- -- -- -- -- -- -- -- --     ;(l = i0) ‚Üí isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí isPropIsEquiv (E i l j 1=1))
-- -- -- -- -- -- -- -- -- -- --               (isEquivEi0 l j)
-- -- -- -- -- -- -- -- -- -- --               (isEquivEi1 l j) i
-- -- -- -- -- -- -- -- -- -- --     ;(l = i1) ‚Üí isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí isPropIsEquiv (E i l j 1=1))
-- -- -- -- -- -- -- -- -- -- --               (isEquivEi0 l j)
-- -- -- -- -- -- -- -- -- -- --               (isEquivEi1 l j) i
-- -- -- -- -- -- -- -- -- -- --     ;(j = i0) ‚Üí isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí isPropIsEquiv (E i l j 1=1))
-- -- -- -- -- -- -- -- -- -- --               (isEquivEi0 l j)
-- -- -- -- -- -- -- -- -- -- --               (isEquivEi1 l j) i
-- -- -- -- -- -- -- -- -- -- --     ;(j = i1) ‚Üí isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí isPropIsEquiv (E i l j 1=1))
-- -- -- -- -- -- -- -- -- -- --               (isEquivEi0 l j)
-- -- -- -- -- -- -- -- -- -- --               (isEquivEi1 l j) i
-- -- -- -- -- -- -- -- -- -- --               }

-- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àô‚Çö-comp¬≥eq : ‚àÄ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {B : Type ‚Ñì'} (isSetA : isSet A)
-- -- -- -- -- -- -- -- -- -- --    ‚Üí (f : A ‚Üí A) ‚Üí (fInvol : isInvolution f)
-- -- -- -- -- -- -- -- -- -- --    ‚Üí (g : A ‚Üí A) ‚Üí (gInvol : isInvolution g)
-- -- -- -- -- -- -- -- -- -- --    ‚Üí (fg-braid : (f ‚àò' g ‚àò' f) ‚â° (g ‚àò' f ‚àò' g)) 
-- -- -- -- -- -- -- -- -- -- --    ‚Üí   {X : (A ‚Üí B) ‚â° (A ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- --                 {X' : A ‚â° A}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí (P : (Œª i ‚Üí X' i ‚Üí B) ‚â° X)
-- -- -- -- -- -- -- -- -- -- --               ‚Üí Cube
-- -- -- -- -- -- -- -- -- -- --                    ((dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp g gInvol (dom-‚Çë‚àôp f fInvol P ))))
-- -- -- -- -- -- -- -- -- -- --                    ((dom-‚Çë‚àôp g gInvol (dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp g gInvol P ))))
                   
-- -- -- -- -- -- -- -- -- -- --                   (Œª i j ‚Üí ‚Çë‚àô‚Çö-comp¬≥eq
-- -- -- -- -- -- -- -- -- -- --                      (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --                      (involEquiv {f = g} gInvol) X' (equivEq fg-braid) i j ‚Üí B)
-- -- -- -- -- -- -- -- -- -- --                    (‚Çë‚àô‚Çö-comp¬≥eq _ _ X
-- -- -- -- -- -- -- -- -- -- --                      (equivEq (funExt Œª x ‚Üí cong (x ‚àò'_) (fg-braid))))

-- -- -- -- -- -- -- -- -- -- --                   refl
-- -- -- -- -- -- -- -- -- -- --                   refl
-- -- -- -- -- -- -- -- -- -- -- dom-‚Çë‚àô‚Çö-comp¬≥eq {‚Ñì} {‚Ñì'} {A} {B} isSetA f fInvol g gInvol fg-braid {X} {X'} P = 
-- -- -- -- -- -- -- -- -- -- --      Œª i l j ‚Üí Glue (P l j) Œª o ‚Üí T i l j o , E i l j o 

-- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- --    T : ‚àÄ i l j ‚Üí Partial (l ‚à® ~ l ‚à® i ‚à® ~ i ‚à® j ‚à® ~ j)
-- -- -- -- -- -- -- -- -- -- --                (Type (‚Ñì-max ‚Ñì ‚Ñì'))
-- -- -- -- -- -- -- -- -- -- --    T i l j = Œª {
-- -- -- -- -- -- -- -- -- -- --      (i = i0) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(i = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(l = i0) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(l = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(j = i0) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     ;(j = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --     }

-- -- -- -- -- -- -- -- -- -- --    isSetX' : ‚àÄ j ‚Üí isSet (X' j)
-- -- -- -- -- -- -- -- -- -- --    isSetX' j = isProp‚ÜíPathP (Œª j ‚Üí isPropIsSet {A = X' j})
-- -- -- -- -- -- -- -- -- -- --      isSetA isSetA j

-- -- -- -- -- -- -- -- -- -- --    isSet-‚Çë‚àô‚Çö-comp¬≥eq : ‚àÄ i j ‚Üí
-- -- -- -- -- -- -- -- -- -- --          isSet
-- -- -- -- -- -- -- -- -- -- --      (‚Çë‚àô‚Çö-comp¬≥eq (involEquiv {f = f} fInvol) (involEquiv {f = g} gInvol) X'
-- -- -- -- -- -- -- -- -- -- --       (equivEq fg-braid) i j)
-- -- -- -- -- -- -- -- -- -- --    isSet-‚Çë‚àô‚Çö-comp¬≥eq i j =
-- -- -- -- -- -- -- -- -- -- --      isOfHLevelRespectEquiv 2
-- -- -- -- -- -- -- -- -- -- --        (invEquiv (unglueEquiv (X' j) (i ‚à® ~ i ‚à® j ‚à® ~ j)
-- -- -- -- -- -- -- -- -- -- --          (‚Çë‚àô‚Çö-comp¬≥eq-sides
-- -- -- -- -- -- -- -- -- -- --           (involEquiv {f = f} fInvol) (involEquiv {f = g} gInvol) X'
-- -- -- -- -- -- -- -- -- -- --       (equivEq fg-braid) i j)))
-- -- -- -- -- -- -- -- -- -- --        (isSetX' j)

-- -- -- -- -- -- -- -- -- -- --    f' : (X : A ‚â° A) ‚Üí ‚àÄ j ‚Üí X j ‚âÉ (involEquiv {f = f} fInvol ‚Çë‚àô‚Çö X) j
-- -- -- -- -- -- -- -- -- -- --    f' X j = glue-invol-‚Çë‚àôp (involEquiv {f = f} fInvol) fInvol X j

-- -- -- -- -- -- -- -- -- -- --    g' : (X : A ‚â° A) ‚Üí ‚àÄ j ‚Üí X j ‚âÉ (involEquiv {f = g} gInvol ‚Çë‚àô‚Çö X) j
-- -- -- -- -- -- -- -- -- -- --    g' X j = glue-invol-‚Çë‚àôp (involEquiv {f = g} gInvol) gInvol X j


-- -- -- -- -- -- -- -- -- -- --    Ei0 : ‚àÄ l j ‚Üí T i0 l j 1=1 ‚âÉ P l j
-- -- -- -- -- -- -- -- -- -- --    Ei0 l j =     
-- -- -- -- -- -- -- -- -- -- --         (unglue-dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp g gInvol (dom-‚Çë‚àôp f fInvol P)) l j)
-- -- -- -- -- -- -- -- -- -- --      ‚àô‚Çë (unglue-dom-‚Çë‚àôp g gInvol (dom-‚Çë‚àôp f fInvol P) l j)
-- -- -- -- -- -- -- -- -- -- --      ‚àô‚Çë (unglue-dom-‚Çë‚àôp f fInvol P l j)


-- -- -- -- -- -- -- -- -- -- --    Ei1 : ‚àÄ l j ‚Üí T i1 l j 1=1 ‚âÉ P l j
-- -- -- -- -- -- -- -- -- -- --    Ei1 l j =     
-- -- -- -- -- -- -- -- -- -- --         (unglue-dom-‚Çë‚àôp g gInvol (dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp g gInvol P)) l j)
-- -- -- -- -- -- -- -- -- -- --      ‚àô‚Çë (unglue-dom-‚Çë‚àôp f fInvol (dom-‚Çë‚àôp g gInvol P) l j)
-- -- -- -- -- -- -- -- -- -- --      ‚àô‚Çë (unglue-dom-‚Çë‚àôp g gInvol P l j)

-- -- -- -- -- -- -- -- -- -- --    El0 : ‚àÄ i j ‚Üí T i i0 j 1=1 ‚Üí X' j ‚Üí B
-- -- -- -- -- -- -- -- -- -- --    El0 i j = _‚àò' 
-- -- -- -- -- -- -- -- -- -- --                (isSet‚ÜíSquareP {A = Œª i j ‚Üí X' j ‚Üí 
-- -- -- -- -- -- -- -- -- -- --                 ‚Çë‚àô‚Çö-comp¬≥eq
-- -- -- -- -- -- -- -- -- -- --                      (involEquiv {f = f} fInvol)
-- -- -- -- -- -- -- -- -- -- --                      (involEquiv {f = g} gInvol) X' (equivEq (fg-braid)) i j}
-- -- -- -- -- -- -- -- -- -- --                       (Œª i j ‚Üí
-- -- -- -- -- -- -- -- -- -- --                     isSetŒ† Œª _ ‚Üí isSet-‚Çë‚àô‚Çö-comp¬≥eq i j)
-- -- -- -- -- -- -- -- -- -- --                     (Œª j ‚Üí  fst (f' X' j ‚àô‚Çë g' (Œª j ‚Üí ua (f' X' j) i1) j
-- -- -- -- -- -- -- -- -- -- --                                 ‚àô‚Çë f' (Œª j ‚Üí ua (g' (Œª j ‚Üí ua (f' X' j) i1) j) i1) j) )
-- -- -- -- -- -- -- -- -- -- --                     (Œª j ‚Üí  fst (g' X' j ‚àô‚Çë f' (Œª j ‚Üí ua (g' X' j) i1) j
-- -- -- -- -- -- -- -- -- -- --                                 ‚àô‚Çë g' (Œª j ‚Üí ua (f' (Œª j ‚Üí ua (g' X' j) i1) j) i1) j) )
-- -- -- -- -- -- -- -- -- -- --                   fg-braid
-- -- -- -- -- -- -- -- -- -- --                   (Œª _ ‚Üí idfun _)
-- -- -- -- -- -- -- -- -- -- --                   i j)

-- -- -- -- -- -- -- -- -- -- --    El1 : ‚àÄ i j ‚Üí T i i1 j 1=1 ‚Üí X j
-- -- -- -- -- -- -- -- -- -- --    El1 i j = unglue (j ‚à® ~ j ‚à® i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- --        {e = Œª o ‚Üí snd (‚Çë‚àô‚Çö-comp¬≥eq-sides
-- -- -- -- -- -- -- -- -- -- --           (preCompInvol.e' {f = f} B fInvol)
-- -- -- -- -- -- -- -- -- -- --           (preCompInvol.e' {f = g} B gInvol) X
-- -- -- -- -- -- -- -- -- -- --        (equivEq
-- -- -- -- -- -- -- -- -- -- --                     (funExt Œª x ‚Üí cong (x ‚àò'_) (fg-braid))) i j o)} 


-- -- -- -- -- -- -- -- -- -- --    E : ‚àÄ i l j ‚Üí PartialP (l ‚à® ~ l ‚à® i ‚à® ~ i ‚à® j ‚à® ~ j)
-- -- -- -- -- -- -- -- -- -- --                (Œª o ‚Üí T i l j o ‚âÉ P l j)
-- -- -- -- -- -- -- -- -- -- --    E i l j = Œª {
-- -- -- -- -- -- -- -- -- -- --      (i = i0) ‚Üí Ei0 l j
-- -- -- -- -- -- -- -- -- -- --     ;(i = i1) ‚Üí Ei1 l j
-- -- -- -- -- -- -- -- -- -- --     ;(l = i0) ‚Üí El0 i j ,
-- -- -- -- -- -- -- -- -- -- --          isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí isPropIsEquiv (El0 i j))
-- -- -- -- -- -- -- -- -- -- --               (snd (Ei0 l j))
-- -- -- -- -- -- -- -- -- -- --               (snd (Ei1 l j)) i
-- -- -- -- -- -- -- -- -- -- --     ;(l = i1) ‚Üí El1 i j ,
-- -- -- -- -- -- -- -- -- -- --         isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí isPropIsEquiv (El1 i j))
-- -- -- -- -- -- -- -- -- -- --               (snd (Ei0 l j))
-- -- -- -- -- -- -- -- -- -- --               (snd (Ei1 l j)) i
-- -- -- -- -- -- -- -- -- -- --     ;(j = i0) ‚Üí (_‚àò' (fg-braid i)) ,
-- -- -- -- -- -- -- -- -- -- --        isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí isPropIsEquiv (_‚àò' (fg-braid i)))
-- -- -- -- -- -- -- -- -- -- --               (snd (Ei0 l j))
-- -- -- -- -- -- -- -- -- -- --               (snd (Ei1 l j)) i
-- -- -- -- -- -- -- -- -- -- --     ;(j = i1) ‚Üí idfun _ ,
-- -- -- -- -- -- -- -- -- -- --               isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí isPropIsEquiv (idfun _))
-- -- -- -- -- -- -- -- -- -- --               (snd (Ei0 l j))
-- -- -- -- -- -- -- -- -- -- --               (snd (Ei1 l j)) i
-- -- -- -- -- -- -- -- -- -- --     }





-- -- -- -- -- -- -- -- -- -- -- -- hùîΩin : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí hSet ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- -- hùîΩin n = EMrec.f w
-- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- --   w : EMrec (Symmetric-Group (Fin n) (isSetFin {n})) isGroupoidHSet
-- -- -- -- -- -- -- -- -- -- -- --   EMrec.b w = Fin n , isSetFin {n}
-- -- -- -- -- -- -- -- -- -- -- --   EMrec.bloop w g = TypeOfHLevel‚â° 2 (ua g)
-- -- -- -- -- -- -- -- -- -- -- --   EMrec.bComp w g h =
-- -- -- -- -- -- -- -- -- -- -- --      Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- -- -- --         Œª i j ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --           Glue (ua {!ua !} i)
-- -- -- -- -- -- -- -- -- -- -- --             Œª { (j = i0) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- --               ; (j = i1) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- --               }




-- -- -- -- -- -- -- -- -- -- -- -- ùîΩin : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí Type ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- -- ùîΩin  n = fst ‚àò hùîΩin n


-- -- -- -- -- -- -- -- -- -- -- -- ùîΩh : (A : Type ‚Ñì) ‚Üí ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí Type ‚Ñì
-- -- -- -- -- -- -- -- -- -- -- -- ùîΩh A n em = ùîΩin n em ‚Üí A 





-- -- -- -- -- -- -- -- -- -- -- -- uaDom‚âÉ : ‚àÄ {‚Ñì ‚Ñì'} {A B : Type ‚Ñì} (C : Type ‚Ñì') ‚Üí (e : A ‚âÉ B) ‚Üí  
-- -- -- -- -- -- -- -- -- -- -- --      ua (preCompEquiv {C = C} (invEquiv e))
-- -- -- -- -- -- -- -- -- -- -- --        ‚â° cong (Œª X ‚Üí X ‚Üí C) (ua e)
-- -- -- -- -- -- -- -- -- -- -- -- uaDom‚âÉ C e = {!!}
-- -- -- -- -- -- -- -- -- -- -- --   -- invEq‚â°‚ÜíequivFun‚â° (invEquiv univalence)
-- -- -- -- -- -- -- -- -- -- -- --   --  (equivEq (funExt (Œª x ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --   --    fromPathP (funTypeTransp' (idfun _) C ((ua (isoToEquiv e))) x)
-- -- -- -- -- -- -- -- -- -- -- --   --     ‚àô funExt Œª y ‚Üí cong x (cong (Iso.inv e) (transportRefl y)))))

-- -- -- -- -- -- -- -- -- -- -- -- ùîΩh* : (A : Type ‚Ñì) ‚Üí ‚àÄ n ‚Üí (p : ‚Ñôrm n) ‚Üí singl (ùîΩh A n p )
-- -- -- -- -- -- -- -- -- -- -- -- ùîΩh* A n = EMelim.f w
-- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- --  w : EMelim _ Œª z ‚Üí singl (ùîΩh A n z)
-- -- -- -- -- -- -- -- -- -- -- --  EMelim.isGrpB w = {!!}
-- -- -- -- -- -- -- -- -- -- -- --  EMelim.b w = _ , refl
-- -- -- -- -- -- -- -- -- -- -- --  EMelim.bPathP w g = Œ£PathP
-- -- -- -- -- -- -- -- -- -- -- --    ((ua (preCompEquiv {C = A} (invEquiv g))) ,
-- -- -- -- -- -- -- -- -- -- -- --      flipSquare (sym (uaDom‚âÉ A g)))
-- -- -- -- -- -- -- -- -- -- -- --  EMelim.bSqP w = {!!}
 
-- -- -- -- -- -- -- -- -- -- -- -- ùîΩ-‚â° : (A : Type ‚Ñì) ‚Üí ‚àÄ n (g : Fin n ‚âÉ Fin n) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --       PathP (Œª i ‚Üí singl (ùîΩh A n (emloop g i)))
-- -- -- -- -- -- -- -- -- -- -- --       ((A √ó^ n) , ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí n))))
-- -- -- -- -- -- -- -- -- -- -- --       ((A √ó^ n) , ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí n))))
-- -- -- -- -- -- -- -- -- -- -- -- ùîΩ-‚â° A n g = Œ£PathP
-- -- -- -- -- -- -- -- -- -- -- --     (ua ({!!} ‚àô‚Çë preCompEquiv (invEquiv g) ‚àô‚Çë {!Iso-√ó^-F‚Üí n!})
-- -- -- -- -- -- -- -- -- -- -- --    , flipSquare (symP-fromGoal {!  uaDom‚âÉ A g!}))
-- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- --  s : {!!}
-- -- -- -- -- -- -- -- -- -- -- --  s = (uaDomIso A {!!})

-- -- -- -- -- -- -- -- -- -- -- -- -- ùïç : (A : Type ‚Ñì) ‚Üí ‚àÄ n em ‚Üí singl (ùîΩh A n em)
-- -- -- -- -- -- -- -- -- -- -- -- -- ùïç A n = EMelim.f w
-- -- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- -- --  w : EMelim _
-- -- -- -- -- -- -- -- -- -- -- -- --                      (Œª z ‚Üí singl (ùîΩh A n z))
-- -- -- -- -- -- -- -- -- -- -- -- --  EMelim.isGrpB w _ = isOfHLevelPlus 3 (isContrSingl _)
-- -- -- -- -- -- -- -- -- -- -- -- --  EMelim.b w = (A √ó^ n) , ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí n)))
-- -- -- -- -- -- -- -- -- -- -- -- --  EMelim.bPathP w = ùîΩ-‚â° A n
-- -- -- -- -- -- -- -- -- -- -- -- --  fst (EMelim.bSqP w g h i j) = ùîΩ-sq-fst A n g h i j
-- -- -- -- -- -- -- -- -- -- -- -- --  snd (EMelim.bSqP w g h i j) k = {!!}

-- -- -- -- -- -- -- -- -- -- -- ism : ‚àÄ n ‚Üí Iso (Perm n) (Iso (Fin n) (Fin n))
-- -- -- -- -- -- -- -- -- -- -- ism n = (fst (PermGIsoIso n))

-- -- -- -- -- -- -- -- -- -- -- lookTab‚â° : ‚àÄ n ‚Üí (Fin n ‚Üí A) ‚â° (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- -- lookTab‚â° n = ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí n)))



-- -- -- -- -- -- -- -- -- -- -- permùîΩ‚â° : ‚àÄ n ‚Üí (g : Perm n) ‚Üí
-- -- -- -- -- -- -- -- -- -- --              singl {A = (Fin n ‚Üí A) ‚â° (Fin n ‚Üí A) }
-- -- -- -- -- -- -- -- -- -- --              (Œª i ‚Üí permFin n g i ‚Üí A) 
-- -- -- -- -- -- -- -- -- -- -- permùîΩ‚â° {‚Ñì}  n = Relim.f (w {n})
-- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- --  open Relim

-- -- -- -- -- -- -- -- -- -- --  ‚àòT : ‚àÄ {n} ‚Üí (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --  ‚àòT {n} k = preCompInvol.e' {f = adjT n k} A (isInvolution-adjT n  k) 


-- -- -- -- -- -- -- -- -- -- --  w : ‚àÄ {n} ‚Üí Relim (Œª z ‚Üí singl (Œª i ‚Üí permFin n z i ‚Üí A))
-- -- -- -- -- -- -- -- -- -- --  isSetA w _ = isOfHLevelPlus 2 (isContrSingl _)
-- -- -- -- -- -- -- -- -- -- --  ŒµA w = refl , refl
-- -- -- -- -- -- -- -- -- -- --  fst (‚à∑A (w {n}) k (X , _)) = ‚àòT {n} k ‚Çë‚àô‚Çö X
-- -- -- -- -- -- -- -- -- -- --  snd (‚à∑A (w {n}) k (X , P)) =
-- -- -- -- -- -- -- -- -- -- --    dom-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --      (fst (isoToEquiv (adjTIso' {n = n} k)))
-- -- -- -- -- -- -- -- -- -- --      (isInvolution-adjT n k)
-- -- -- -- -- -- -- -- -- -- --      P  
-- -- -- -- -- -- -- -- -- -- --  invoA (w {n}) k (X , P) = Œ£PathP
-- -- -- -- -- -- -- -- -- -- --     ((invol-‚Çë‚àôp _ _ X) ,
-- -- -- -- -- -- -- -- -- -- --       dom-invol-‚Çë‚àôp (isSetFin {n = n}) _ _ P)

-- -- -- -- -- -- -- -- -- -- --  braidA (w {n}) k k< (X , P) =
-- -- -- -- -- -- -- -- -- -- --    Œ£PathP (‚Çë‚àô‚Çö-comp¬≥eq _ _ _
-- -- -- -- -- -- -- -- -- -- --         (equivEq (funExt Œª x ‚Üí
-- -- -- -- -- -- -- -- -- -- --                 cong (x ‚àò'_) 
-- -- -- -- -- -- -- -- -- -- --                   (cong (Iso.fun ‚àò permuteIso n) (braid k k< Œµ))))
-- -- -- -- -- -- -- -- -- -- --       , dom-‚Çë‚àô‚Çö-comp¬≥eq (isSetFin {n = n}) _ _ _ _
-- -- -- -- -- -- -- -- -- -- --             (cong (Iso.fun ‚àò permuteIso n) (braid k k< Œµ)) P)
 
-- -- -- -- -- -- -- -- -- -- --  commA (w {n}) k l z (X , P) =
-- -- -- -- -- -- -- -- -- -- --     Œ£PathP (
-- -- -- -- -- -- -- -- -- -- --          ‚Çë‚àô‚Çö-comp¬≤eq _ _ _
-- -- -- -- -- -- -- -- -- -- --              (equivEq (funExt Œª x ‚Üí
-- -- -- -- -- -- -- -- -- -- --                 cong (x ‚àò'_) 
-- -- -- -- -- -- -- -- -- -- --                   (sym ((cong (Iso.fun ‚àò permuteIso n) (comm k l z Œµ))))
-- -- -- -- -- -- -- -- -- -- --          ))

-- -- -- -- -- -- -- -- -- -- --       , dom-‚Çë‚àô‚Çö-comp¬≤eq (isSetFin {n = n}) _ _ _ _
-- -- -- -- -- -- -- -- -- -- --             (cong (Iso.fun ‚àò permuteIso n) (comm k l z Œµ)) P)




-- -- -- -- -- -- -- -- -- -- -- permùîΩsq : isGroupoid A ‚Üí ‚àÄ n ‚Üí (g h : Perm n)
-- -- -- -- -- -- -- -- -- -- --              ‚Üí Square
-- -- -- -- -- -- -- -- -- -- --                (fst (permùîΩ‚â°  n g))
-- -- -- -- -- -- -- -- -- -- --                (fst (permùîΩ‚â° n (g ¬∑ h)))
-- -- -- -- -- -- -- -- -- -- --                refl
-- -- -- -- -- -- -- -- -- -- --                (fst (permùîΩ‚â° n h))
-- -- -- -- -- -- -- -- -- -- -- permùîΩsq  isGroupoid-A n g h = Relim.f (w h) g
-- -- -- -- -- -- -- -- -- -- --  module QQQ where
-- -- -- -- -- -- -- -- -- -- --  open Relim

-- -- -- -- -- -- -- -- -- -- --  ‚àòT : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --  ‚àòT k = preCompInvol.e' {f = adjT n k} A (isInvolution-adjT n  k) 

-- -- -- -- -- -- -- -- -- -- --  isGpdFin‚ÜíA : isGroupoid (Fin n ‚Üí A) 
-- -- -- -- -- -- -- -- -- -- --  isGpdFin‚ÜíA = isGroupoidŒ† Œª _ ‚Üí isGroupoid-A

-- -- -- -- -- -- -- -- -- -- --  w : (h : Perm n) ‚Üí Relim (Œª g ‚Üí 
-- -- -- -- -- -- -- -- -- -- --                Square
-- -- -- -- -- -- -- -- -- -- --                (fst (permùîΩ‚â°  n g))
-- -- -- -- -- -- -- -- -- -- --                (fst (permùîΩ‚â° n (g ¬∑ h)))
-- -- -- -- -- -- -- -- -- -- --                refl
-- -- -- -- -- -- -- -- -- -- --                (fst (permùîΩ‚â° n h)))
-- -- -- -- -- -- -- -- -- -- --  isSetA (w h) _ =
-- -- -- -- -- -- -- -- -- -- --    isOfHLevelRetractFromIso 2
-- -- -- -- -- -- -- -- -- -- --      (invIso PathP‚Üícomm-Iso)
-- -- -- -- -- -- -- -- -- -- --      (isOfHLevel‚â° 3 isGpdFin‚ÜíA isGpdFin‚ÜíA _ _)
-- -- -- -- -- -- -- -- -- -- --  ŒµA (w h) j i = (fst (permùîΩ‚â°  n h)) (i ‚àß j)
-- -- -- -- -- -- -- -- -- -- --  ‚à∑A (w h) k X j i = (‚àòT k ‚Çë‚àô‚Çö X j) i 
-- -- -- -- -- -- -- -- -- -- --  invoA (w h) k {xs} X l j i =
-- -- -- -- -- -- -- -- -- -- --     invol-‚Çë‚àôp ((Œª z x ‚Üí z (adjT n k x)) ,
-- -- -- -- -- -- -- -- -- -- --                   involIsEquiv (Œª x i b ‚Üí x (isInvolution-adjT n k b i)))
-- -- -- -- -- -- -- -- -- -- --                   (Œª x i z ‚Üí x (isInvolution-adjT n k z i)) (X j) l i
-- -- -- -- -- -- -- -- -- -- --  braidA (w h) k k< X l j i =
-- -- -- -- -- -- -- -- -- -- --      ‚Çë‚àô‚Çö-comp¬≥eq
-- -- -- -- -- -- -- -- -- -- --         (((Œª z x ‚Üí z (adjT n (k , <-weaken {n = n} k<) x)) ,
-- -- -- -- -- -- -- -- -- -- --                   involIsEquiv
-- -- -- -- -- -- -- -- -- -- --                    (Œª x i b ‚Üí x (isInvolution-adjT n (k , <-weaken {n = n} k<) b i))))
-- -- -- -- -- -- -- -- -- -- --         (((Œª z x ‚Üí z (adjT n (suc k , k<) x)) ,
-- -- -- -- -- -- -- -- -- -- --                   involIsEquiv (Œª x i b ‚Üí x (isInvolution-adjT n (suc k , k<) b i))))
-- -- -- -- -- -- -- -- -- -- --         (X j)
-- -- -- -- -- -- -- -- -- -- --          (equivEq (funExt Œª x ‚Üí
-- -- -- -- -- -- -- -- -- -- --         cong (x ‚àò'_) 
-- -- -- -- -- -- -- -- -- -- --           (cong (Iso.fun ‚àò permuteIso n) (braid k k< Œµ))))
-- -- -- -- -- -- -- -- -- -- --           l i 


-- -- -- -- -- -- -- -- -- -- --  commA (w h) k l' z X l j i =
-- -- -- -- -- -- -- -- -- -- --     ‚Çë‚àô‚Çö-comp¬≤eq
-- -- -- -- -- -- -- -- -- -- --       (((Œª z x ‚Üí z (adjT n l' x)) ,
-- -- -- -- -- -- -- -- -- -- --                   involIsEquiv (Œª x i b ‚Üí x (isInvolution-adjT n l' b i))))
-- -- -- -- -- -- -- -- -- -- --       (((Œª z x ‚Üí z (adjT n k x)) ,
-- -- -- -- -- -- -- -- -- -- --                   involIsEquiv (Œª x i b ‚Üí x (isInvolution-adjT n k b i))))
-- -- -- -- -- -- -- -- -- -- --       (X j)
-- -- -- -- -- -- -- -- -- -- --        (equivEq (funExt (Œª x ‚Üí cong (x ‚àò'_)
-- -- -- -- -- -- -- -- -- -- --         (sym ((cong (Iso.fun ‚àò permuteIso n) (comm k l' z Œµ)))) )))
-- -- -- -- -- -- -- -- -- -- --        l i


-- -- -- -- -- -- -- -- -- -- -- permùîΩsq-Snd : (isGroupoid-A : isGroupoid A) ‚Üí ‚àÄ n ‚Üí (g h : Perm n)
-- -- -- -- -- -- -- -- -- -- --              ‚Üí SquareP
-- -- -- -- -- -- -- -- -- -- --                   (Œª i j ‚Üí (ùîΩin' n (emcomp g h i j) ‚Üí A) ‚â°
-- -- -- -- -- -- -- -- -- -- --                             permùîΩsq isGroupoid-A n g h i j)
-- -- -- -- -- -- -- -- -- -- --                (flipSquare (snd (permùîΩ‚â°  n g)))
-- -- -- -- -- -- -- -- -- -- --                (flipSquare (snd (permùîΩ‚â°  n (g ¬∑ h))))
-- -- -- -- -- -- -- -- -- -- --                refl
-- -- -- -- -- -- -- -- -- -- --                (flipSquare (snd (permùîΩ‚â°  n h)))
-- -- -- -- -- -- -- -- -- -- -- permùîΩsq-Snd  isGroupoid-A n g h = RelimProp.f (w h) g
-- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- --  open RelimProp

-- -- -- -- -- -- -- -- -- -- --  ‚àòT : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --  ‚àòT k = preCompInvol.e' {f = adjT n k} A (isInvolution-adjT n  k) 

-- -- -- -- -- -- -- -- -- -- --  isGpdFin‚ÜíA : isGroupoid (Fin n ‚Üí A) 
-- -- -- -- -- -- -- -- -- -- --  isGpdFin‚ÜíA = isGroupoidŒ† Œª _ ‚Üí isGroupoid-A

-- -- -- -- -- -- -- -- -- -- --  w : (h : Perm n) ‚Üí RelimProp (Œª g ‚Üí 
-- -- -- -- -- -- -- -- -- -- --                SquareP
-- -- -- -- -- -- -- -- -- -- --                   (Œª i j ‚Üí (ùîΩin' n (emcomp g h i j) ‚Üí A) ‚â°
-- -- -- -- -- -- -- -- -- -- --                             permùîΩsq isGroupoid-A n g h i j)
-- -- -- -- -- -- -- -- -- -- --                (flipSquare (snd (permùîΩ‚â°  n g)))
-- -- -- -- -- -- -- -- -- -- --                (flipSquare (snd (permùîΩ‚â°  n (g ¬∑ h))))
-- -- -- -- -- -- -- -- -- -- --                (refl)
-- -- -- -- -- -- -- -- -- -- --                (flipSquare (snd (permùîΩ‚â°  n h))))
-- -- -- -- -- -- -- -- -- -- --  isPropA (w h) x =
-- -- -- -- -- -- -- -- -- -- --    isOfHLevelRespectEquiv 1
-- -- -- -- -- -- -- -- -- -- --     (invEquiv (PathP‚âÉPath _ _ _))
-- -- -- -- -- -- -- -- -- -- --       (isOfHLevelRespectEquiv 2
-- -- -- -- -- -- -- -- -- -- --         (invEquiv (PathP‚âÉPath _ _ _))
-- -- -- -- -- -- -- -- -- -- --          ((isOfHLevelRespectEquiv 3
-- -- -- -- -- -- -- -- -- -- --         (invEquiv (PathP‚âÉPath _ _ _))
-- -- -- -- -- -- -- -- -- -- --          (isOfHLevel‚â° 3 isGpdFin‚ÜíA isGpdFin‚ÜíA ) _ _)) _ _)
-- -- -- -- -- -- -- -- -- -- --  ŒµA (w h) i j l = (snd (permùîΩ‚â°  n h)) l (i ‚àß j)
-- -- -- -- -- -- -- -- -- -- --  ‚à∑A (w h) k {xs} X i j l =    
-- -- -- -- -- -- -- -- -- -- --    Glue (X i j l) {i ‚à® ~ i ‚à® j ‚à® ~ j ‚à® l ‚à® ~ l}
-- -- -- -- -- -- -- -- -- -- --     Œª o ‚Üí T i j l o , (E i j l o) , isEqE i j l o
-- -- -- -- -- -- -- -- -- -- --    where
-- -- -- -- -- -- -- -- -- -- --     T : ‚àÄ i j l ‚Üí Partial (i ‚à® ~ i ‚à® j ‚à® ~ j ‚à® l ‚à® ~ l) (Type _)
-- -- -- -- -- -- -- -- -- -- --     T i j l = Œª {
-- -- -- -- -- -- -- -- -- -- --          (i = i0) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --         ;(i = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --         ;(j = i0) ‚Üí _ 
-- -- -- -- -- -- -- -- -- -- --         ;(j = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --         ;(l = i0) ‚Üí _ 
-- -- -- -- -- -- -- -- -- -- --         ;(l = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --         }
-- -- -- -- -- -- -- -- -- -- --     Ei0 : ‚àÄ l j ‚Üí  T i0 j l 1=1 ‚âÉ X i0 j l
-- -- -- -- -- -- -- -- -- -- --     Ei0 l j = (unglue-dom-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                (fst (isoToEquiv (adjTIso' {n = n} k)))
-- -- -- -- -- -- -- -- -- -- --                (isInvolution-adjT n k)
-- -- -- -- -- -- -- -- -- -- --              (snd (permùîΩ‚â° n xs)) l j)

-- -- -- -- -- -- -- -- -- -- --     Ei1 : ‚àÄ l j ‚Üí  T i1 j l 1=1 ‚âÉ X i1 j l
-- -- -- -- -- -- -- -- -- -- --     Ei1 l j = (unglue-dom-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                (fst (isoToEquiv (adjTIso' {n = n} k)))
-- -- -- -- -- -- -- -- -- -- --                (isInvolution-adjT n k)
-- -- -- -- -- -- -- -- -- -- --              (snd (permùîΩ‚â° n (xs ¬∑ h))) l j)

-- -- -- -- -- -- -- -- -- -- --     li0Sq : SquareP (Œª i j ‚Üí ùîΩin' n (emcomp xs h i j) ‚Üí ùîΩin' n (emcomp (k ‚à∑ xs) h i j))
-- -- -- -- -- -- -- -- -- -- --                 _ _ _ _
-- -- -- -- -- -- -- -- -- -- --     li0Sq =
-- -- -- -- -- -- -- -- -- -- --        isSet‚ÜíSquareP (Œª i j ‚Üí isSet‚Üí (snd (hùîΩin' n (emcomp (k ‚à∑ xs) h i j))))
-- -- -- -- -- -- -- -- -- -- --           (Œª j x‚ÇÅ ‚Üí (fst
-- -- -- -- -- -- -- -- -- -- --                   (glue-invol-‚Çë‚àôp (involEquiv {f = adjT n k} (isInvolution-adjT n k))
-- -- -- -- -- -- -- -- -- -- --                    (isInvolution-adjT n k) (Œª i‚ÇÇ ‚Üí permFin n (xs) i‚ÇÇ) j)
-- -- -- -- -- -- -- -- -- -- --                   x‚ÇÅ))
-- -- -- -- -- -- -- -- -- -- --                 (Œª j x‚ÇÅ ‚Üí (fst
-- -- -- -- -- -- -- -- -- -- --                   (glue-invol-‚Çë‚àôp (involEquiv {f = adjT n k} (isInvolution-adjT n k))
-- -- -- -- -- -- -- -- -- -- --                    (isInvolution-adjT n k) (Œª i‚ÇÇ ‚Üí permFin n (xs ¬∑ h) i‚ÇÇ) j)
-- -- -- -- -- -- -- -- -- -- --                   x‚ÇÅ))
-- -- -- -- -- -- -- -- -- -- --                 (Œª _ ‚Üí adjT n k)
-- -- -- -- -- -- -- -- -- -- --                 Œª _ ‚Üí idfun _

-- -- -- -- -- -- -- -- -- -- --     E : ‚àÄ i j l ‚Üí PartialP (i ‚à® ~ i ‚à® j ‚à® ~ j ‚à® l ‚à® ~ l) (Œª o ‚Üí T i j l o ‚Üí X i j l)
-- -- -- -- -- -- -- -- -- -- --     E i j l = Œª {
-- -- -- -- -- -- -- -- -- -- --          (i = i0) ‚Üí fst (Ei0 l j)
-- -- -- -- -- -- -- -- -- -- --         ;(i = i1) ‚Üí  fst (unglue-dom-‚Çë‚àôp
-- -- -- -- -- -- -- -- -- -- --                (fst (isoToEquiv (adjTIso' {n = n} k)))
-- -- -- -- -- -- -- -- -- -- --                (isInvolution-adjT n k)
-- -- -- -- -- -- -- -- -- -- --              (snd (permùîΩ‚â° n (xs ¬∑ h))) l j)
-- -- -- -- -- -- -- -- -- -- --         ;(j = i0) ‚Üí _‚àò' (adjT n k)
-- -- -- -- -- -- -- -- -- -- --         ;(j = i1) ‚Üí idfun _
-- -- -- -- -- -- -- -- -- -- --         ;(l = i0) ‚Üí _‚àò' (li0Sq i j)  
-- -- -- -- -- -- -- -- -- -- --         ;(l = i1) ‚Üí fst (unglue-‚Çë‚àôp (‚àòT k) (permùîΩsq isGroupoid-A n (xs) h i) j ) 
-- -- -- -- -- -- -- -- -- -- --         }

-- -- -- -- -- -- -- -- -- -- --     isEqE : ‚àÄ i j l ‚Üí PartialP (i ‚à® ~ i ‚à® j ‚à® ~ j ‚à® l ‚à® ~ l) (Œª o ‚Üí
-- -- -- -- -- -- -- -- -- -- --          isEquiv (E i j l o))
-- -- -- -- -- -- -- -- -- -- --     isEqE i j l = Œª {
-- -- -- -- -- -- -- -- -- -- --          (i = i0) ‚Üí snd (Ei0 l j)
-- -- -- -- -- -- -- -- -- -- --         ;(i = i1) ‚Üí snd (Ei1 l j)
-- -- -- -- -- -- -- -- -- -- --         ;(j = i0) ‚Üí isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --             (Œª i ‚Üí isPropIsEquiv (E i j l 1=1))
-- -- -- -- -- -- -- -- -- -- --             (snd (Ei0 l j))
-- -- -- -- -- -- -- -- -- -- --             (snd (Ei1 l j)) i
-- -- -- -- -- -- -- -- -- -- --         ;(j = i1) ‚Üí isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --             (Œª i ‚Üí isPropIsEquiv (E i j l 1=1))
-- -- -- -- -- -- -- -- -- -- --             (snd (Ei0 l j))
-- -- -- -- -- -- -- -- -- -- --             (snd (Ei1 l j)) i
-- -- -- -- -- -- -- -- -- -- --         ;(l = i0) ‚Üí isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --             (Œª i ‚Üí isPropIsEquiv (E i j l 1=1))
-- -- -- -- -- -- -- -- -- -- --             (snd (Ei0 l j))
-- -- -- -- -- -- -- -- -- -- --             (snd (Ei1 l j)) i  
-- -- -- -- -- -- -- -- -- -- --         ;(l = i1) ‚Üí isProp‚ÜíPathP
-- -- -- -- -- -- -- -- -- -- --             (Œª i ‚Üí isPropIsEquiv (E i j l 1=1))
-- -- -- -- -- -- -- -- -- -- --             (snd (Ei0 l j))
-- -- -- -- -- -- -- -- -- -- --             (snd (Ei1 l j)) i 
-- -- -- -- -- -- -- -- -- -- --         }


-- -- -- -- -- -- -- -- -- -- -- permùîΩSi : (isGroupoid A) ‚Üí ‚àÄ n ‚Üí  (em : ‚Ñôrm' n) ‚Üí
-- -- -- -- -- -- -- -- -- -- --              singl (ùîΩin' n em ‚Üí A) 
-- -- -- -- -- -- -- -- -- -- -- permùîΩSi  isGroupoid-A n = EMelim.f w
-- -- -- -- -- -- -- -- -- -- --  where

-- -- -- -- -- -- -- -- -- -- --  w : EMelim (PermG n) (Œª z ‚Üí singl (ùîΩin' n z ‚Üí _))
-- -- -- -- -- -- -- -- -- -- --  EMelim.isGrpB w _ = isOfHLevelPlus 3 (isContrSingl _)
-- -- -- -- -- -- -- -- -- -- --  EMelim.b w = (ùîΩin' n embase ‚Üí A) , refl
-- -- -- -- -- -- -- -- -- -- --  EMelim.bPathP w g =  
-- -- -- -- -- -- -- -- -- -- --   let z = permùîΩ‚â° n g
-- -- -- -- -- -- -- -- -- -- --   in Œ£PathP (fst z , flipSquare (snd z))
-- -- -- -- -- -- -- -- -- -- --  fst (EMelim.bSqP w g h i j) = permùîΩsq   isGroupoid-A n g h i j
-- -- -- -- -- -- -- -- -- -- --  snd (EMelim.bSqP w g h i j) = permùîΩsq-Snd  isGroupoid-A n g h i j



-- -- -- -- -- -- -- -- -- -- -- permùîΩ : {A : Type ‚Ñì} ‚Üí (isGroupoid A) ‚Üí ‚àÄ n ‚Üí (em : ‚Ñôrm' n) ‚Üí Type ‚Ñì 
-- -- -- -- -- -- -- -- -- -- -- permùîΩ isGA n = fst ‚àò permùîΩSi isGA n



-- -- -- -- -- -- -- -- -- -- -- adjT√ó^ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí
-- -- -- -- -- -- -- -- -- -- --              (A √ó^ n) ‚Üí (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- -- adjT√ó^ {n = zero} _ x = x
-- -- -- -- -- -- -- -- -- -- -- adjT√ó^ {n = suc zero} _ x = x
-- -- -- -- -- -- -- -- -- -- -- adjT√ó^ {n = suc (suc n)} zero (x , x' , xs) = (x' , x , xs)
-- -- -- -- -- -- -- -- -- -- -- adjT√ó^ {n = suc (suc n)} (suc k) (x , xs) =
-- -- -- -- -- -- -- -- -- -- --    x , adjT√ó^ k xs

-- -- -- -- -- -- -- -- -- -- -- isInvo-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k ‚Üí isInvolution (adjT√ó^  {n} k) 
-- -- -- -- -- -- -- -- -- -- -- isInvo-adjT√ó^ {n = zero} k x = refl
-- -- -- -- -- -- -- -- -- -- -- isInvo-adjT√ó^ {n = suc zero} k x = refl
-- -- -- -- -- -- -- -- -- -- -- isInvo-adjT√ó^ {n = suc (suc n)} zero x = refl
-- -- -- -- -- -- -- -- -- -- -- isInvo-adjT√ó^ {n = suc (suc n)} (suc k) (x , xs) =
-- -- -- -- -- -- -- -- -- -- --  cong (x ,_) (isInvo-adjT√ó^ k xs)


-- -- -- -- -- -- -- -- -- -- -- braid-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k ‚Üí  suc (suc k) < n ‚Üí ‚àÄ v ‚Üí 
-- -- -- -- -- -- -- -- -- -- --   (adjT√ó^  {n} k ‚àò adjT√ó^  {n} (suc k) ‚àò adjT√ó^  {n} (k)) v
-- -- -- -- -- -- -- -- -- -- --   ‚â° (adjT√ó^  {n} (suc k) ‚àò adjT√ó^  {n} (k) ‚àò adjT√ó^  {n} (suc k)) v
-- -- -- -- -- -- -- -- -- -- -- braid-adjT√ó^ {n = suc (suc (suc n))} zero x _ = refl
-- -- -- -- -- -- -- -- -- -- -- braid-adjT√ó^ {n = suc (suc n)} (suc k) x (v , vs) =
-- -- -- -- -- -- -- -- -- -- --   cong (v ,_) (braid-adjT√ó^ k x vs)

-- -- -- -- -- -- -- -- -- -- -- comm-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k l ‚Üí (k< : (suc k) < n) (l< : (suc l) < n) ‚Üí 
-- -- -- -- -- -- -- -- -- -- --   A.commT k l ‚Üí ‚àÄ v ‚Üí  
-- -- -- -- -- -- -- -- -- -- --   (adjT√ó^  {n} l
-- -- -- -- -- -- -- -- -- -- --     ‚àò adjT√ó^  {n} k ) v
-- -- -- -- -- -- -- -- -- -- --   ‚â° (adjT√ó^  {n} k
-- -- -- -- -- -- -- -- -- -- --     ‚àò adjT√ó^  {n} l ) v
-- -- -- -- -- -- -- -- -- -- -- comm-adjT√ó^ {n = suc (suc (suc n))} zero (suc (suc l)) k< l< x v = refl
-- -- -- -- -- -- -- -- -- -- -- comm-adjT√ó^ {n = suc (suc n)} (suc k) (suc (suc l)) k< l< x (v , vs) =
-- -- -- -- -- -- -- -- -- -- --    cong (v ,_) (comm-adjT√ó^
-- -- -- -- -- -- -- -- -- -- --     {n = suc n} k (suc l) k< l< x vs)


-- -- -- -- -- -- -- -- -- -- -- adjT√ó^ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí
-- -- -- -- -- -- -- -- -- -- --   Iso (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- --       (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- -- adjT√ó^ {n} k =
-- -- -- -- -- -- -- -- -- -- --  involIso {f = adjT√ó^ {n} k} (isInvo-adjT√ó^ {n} k)

-- -- -- -- -- -- -- -- -- -- -- adjT√ó^‚âÉ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí
-- -- -- -- -- -- -- -- -- -- --       (A √ó^ n) ‚âÉ (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- -- adjT√ó^‚âÉ {n} k =
-- -- -- -- -- -- -- -- -- -- --  involEquiv {f = adjT√ó^ {n} k} (isInvo-adjT√ó^ {n} k)


-- -- -- -- -- -- -- -- -- -- -- glue-adjT‚âÉ' : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí ‚àÄ n k
-- -- -- -- -- -- -- -- -- -- --            ‚Üí
-- -- -- -- -- -- -- -- -- -- --            PathP (Œª i ‚Üí (A √ó^ n) ‚Üí (adjT√ó^‚âÉ  {n = n} k ‚Çë‚àô‚Çö refl) i)
-- -- -- -- -- -- -- -- -- -- --              (adjT√ó^ {n = n} k)
-- -- -- -- -- -- -- -- -- -- --              (idfun _)
-- -- -- -- -- -- -- -- -- -- -- glue-adjT‚âÉ'  zero k =
-- -- -- -- -- -- -- -- -- -- --    ua-gluePathExt (adjT√ó^  {n = zero} k ,
-- -- -- -- -- -- -- -- -- -- --      involIsEquiv (isInvo-adjT√ó^  {n = zero} k))
-- -- -- -- -- -- -- -- -- -- -- glue-adjT‚âÉ'  (suc zero) k =
-- -- -- -- -- -- -- -- -- -- --       ua-gluePathExt (adjT√ó^  {n = suc zero} k ,
-- -- -- -- -- -- -- -- -- -- --      involIsEquiv (isInvo-adjT√ó^  {n = suc zero} k))
-- -- -- -- -- -- -- -- -- -- -- -- glue-adjT‚âÉ'  (suc (suc n)) k i x =
-- -- -- -- -- -- -- -- -- -- -- --   glue (Œª { (i = i0) ‚Üí {!!} ;
-- -- -- -- -- -- -- -- -- -- -- --     (i = i1) ‚Üí {!!} }) {!!}
-- -- -- -- -- -- -- -- -- -- -- glue-adjT‚âÉ'  (suc (suc n)) zero i x =
-- -- -- -- -- -- -- -- -- -- --   glue (Œª { (i = i0) ‚Üí fst (snd x) , fst x , snd (snd x) ;
-- -- -- -- -- -- -- -- -- -- --     (i = i1) ‚Üí x }) x
-- -- -- -- -- -- -- -- -- -- -- glue-adjT‚âÉ'  (suc (suc n)) (suc k) i (x , xs) =
-- -- -- -- -- -- -- -- -- -- --   glue (Œª { (i = i0) ‚Üí x , adjT√ó^ k xs ;
-- -- -- -- -- -- -- -- -- -- --     (i = i1) ‚Üí x , xs })
-- -- -- -- -- -- -- -- -- -- --     (x , unglue (i ‚à® ~ i) (glue-adjT‚âÉ'  (suc n) k i xs))


-- -- -- -- -- -- -- -- -- -- -- glue-adjT‚âÉ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} ‚Üí ‚àÄ n k
-- -- -- -- -- -- -- -- -- -- --        ‚Üí (X : (A √ó^ n) ‚â° (A √ó^ n)) ‚Üí
-- -- -- -- -- -- -- -- -- -- --            PathP (Œª i ‚Üí X i ‚âÉ (adjT√ó^‚âÉ k ‚Çë‚àô‚Çö X) i) (adjT√ó^‚âÉ k)
-- -- -- -- -- -- -- -- -- -- --            (idEquiv (X i1))
-- -- -- -- -- -- -- -- -- -- -- glue-adjT‚âÉ  n k = glue-invol-‚Çë‚àôp {B = A √ó^ n} (adjT√ó^‚âÉ  {n} k)
-- -- -- -- -- -- -- -- -- -- --    (isInvo-adjT√ó^ {n = n} k) 

-- -- -- -- -- -- -- -- -- -- -- -- withAdjTlook : ‚àÄ n ‚Üí Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n) ‚Üí  A √ó^ n ‚Üí Fin n ‚Üí A
-- -- -- -- -- -- -- -- -- -- -- -- withAdjTlook n x x‚ÇÅ x‚ÇÇ = {!n!}

-- -- -- -- -- -- -- -- -- -- -- lawAdj : ‚àÄ n k ‚Üí (f : Fin n ‚Üí A) ‚Üí tabulate {n = n}
-- -- -- -- -- -- -- -- -- -- --       (f ‚àò adjT n k)
-- -- -- -- -- -- -- -- -- -- --       ‚â° adjT√ó^ (fst k) (tabulate f)
-- -- -- -- -- -- -- -- -- -- -- lawAdj (suc (suc n)) (zero , snd‚ÇÅ) f = refl
-- -- -- -- -- -- -- -- -- -- -- lawAdj (suc (suc n)) (suc k , k<) f =
-- -- -- -- -- -- -- -- -- -- --   cong ((f (zero , _)) ,_) (lawAdj (suc n) (k , k<) (f ‚àò sucF) )

-- -- -- -- -- -- -- -- -- -- -- lawAdj' : ‚àÄ n k ‚Üí (v : A √ó^ n) ‚Üí
-- -- -- -- -- -- -- -- -- -- --                 lookup v ‚àò (adjT n k)
-- -- -- -- -- -- -- -- -- -- --             ‚â°  lookup (adjT√ó^ {n = n} (fst k) v)
-- -- -- -- -- -- -- -- -- -- -- lawAdj' (suc (suc n)) (zero , k<) v =
-- -- -- -- -- -- -- -- -- -- --   funExt (uncurry (cases (Œª _ ‚Üí refl)
-- -- -- -- -- -- -- -- -- -- --     (cases (Œª _ ‚Üí refl) Œª _ _ ‚Üí refl)))
-- -- -- -- -- -- -- -- -- -- -- lawAdj' (suc (suc (suc n))) (suc k , k<) v =
-- -- -- -- -- -- -- -- -- -- --   funExt (uncurry (cases (Œª _ ‚Üí refl)
-- -- -- -- -- -- -- -- -- -- --      Œª kk y ‚Üí funExt‚Åª (lawAdj' (suc (suc n)) (k , k<) (snd v)) (kk , y)) )


-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq'' : ‚àÄ n k ‚Üí PathP (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- -- --       ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n))) i ‚Üí
-- -- -- -- -- -- -- -- -- -- --       ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n))) i)
-- -- -- -- -- -- -- -- -- -- --         (_‚àò' adjT n k)
-- -- -- -- -- -- -- -- -- -- --         (adjT√ó^ {n = n} (fst k))
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq''  (suc (suc n)) (zero , k<) i x =
-- -- -- -- -- -- -- -- -- -- --  let e = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc n)))))
-- -- -- -- -- -- -- -- -- -- --  in ua-glue e i (Œª { (i = i0) ‚Üí x ‚àò' adjT (suc (suc n)) (zero , k<)  })
-- -- -- -- -- -- -- -- -- -- --        (inS (adjT√ó^ zero (ua-unglue e i x)))
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq''  (suc (suc (suc n))) (suc k , k<) i x =
-- -- -- -- -- -- -- -- -- -- --  let e = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc (suc n))))))
-- -- -- -- -- -- -- -- -- -- --      e' = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc n)))))
-- -- -- -- -- -- -- -- -- -- --      v = ((ua-unglue e i x))
-- -- -- -- -- -- -- -- -- -- --  in ua-glue e i (Œª { (i = i0) ‚Üí x ‚àò' adjT (suc (suc (suc n))) (suc k , k<)  })
-- -- -- -- -- -- -- -- -- -- --        (inS (fst v ,
-- -- -- -- -- -- -- -- -- -- --           ua-unglue e' i (adjT-√ó-sq''  (suc (suc n)) (k , k<) i
-- -- -- -- -- -- -- -- -- -- --            (ua-glue e' i
-- -- -- -- -- -- -- -- -- -- --              (Œª { (i = i0) ‚Üí x ‚àò' sucF}) (inS (snd v))))))

-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq : ‚àÄ n k ‚Üí PathP (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- -- --       ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n))) i ‚âÉ
-- -- -- -- -- -- -- -- -- -- --       ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n))) i)
-- -- -- -- -- -- -- -- -- -- --         (preCompInvol.e' {f = adjT n k} A (isInvolution-adjT n  k) )
-- -- -- -- -- -- -- -- -- -- --         (adjT√ó^‚âÉ {n = n} (fst k))
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq n k = Œ£PathPProp (isPropIsEquiv) (adjT-√ó-sq'' n k)

-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-invo : ‚àÄ n k ‚Üí
-- -- -- -- -- -- -- -- -- -- --  PathP (Œª j ‚Üí isInvolution (fst (adjT-√ó-sq  n k j)))
-- -- -- -- -- -- -- -- -- -- --    (Œª f ‚Üí funExt (cong f ‚àò isInvolution-adjT n k))
-- -- -- -- -- -- -- -- -- -- --    (isInvo-adjT√ó^ {n = n} (fst k) )
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-invo  (suc (suc n)) (zero , k<) =
-- -- -- -- -- -- -- -- -- -- --  let e = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc n)))))     
-- -- -- -- -- -- -- -- -- -- --  in Œª i x j ‚Üí
-- -- -- -- -- -- -- -- -- -- --       ua-glue e i 
-- -- -- -- -- -- -- -- -- -- --         (Œª { ( i = i0) ‚Üí
-- -- -- -- -- -- -- -- -- -- --              x ‚àò (funExt (isInvolution-adjT (suc (suc n)) (zero , k<)) j) })
-- -- -- -- -- -- -- -- -- -- --              (inS (ua-unglue e i x))
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-invo  (suc (suc (suc n))) ((suc k) , k<) =
-- -- -- -- -- -- -- -- -- -- --  let e = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc (suc n))))))
-- -- -- -- -- -- -- -- -- -- --      e' = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc n)))))
     
-- -- -- -- -- -- -- -- -- -- --  in Œª i x j ‚Üí
-- -- -- -- -- -- -- -- -- -- --       let v = ((ua-unglue e i x))
-- -- -- -- -- -- -- -- -- -- --       in ua-glue e i 
-- -- -- -- -- -- -- -- -- -- --         (Œª { ( i = i0) ‚Üí
-- -- -- -- -- -- -- -- -- -- --              x ‚àò (funExt (isInvolution-adjT (suc (suc (suc n))) (suc k , k<)) j) })
-- -- -- -- -- -- -- -- -- -- --              (inS (fst v ,
-- -- -- -- -- -- -- -- -- -- --                 ua-unglue e' i
-- -- -- -- -- -- -- -- -- -- --                  ( adjT-√ó-sq-invo  (suc (suc n)) (k , k<)
-- -- -- -- -- -- -- -- -- -- --                     i (ua-glue e' i (Œª { (i = i0) ‚Üí x ‚àò' sucF }) (inS (snd v))) j)
-- -- -- -- -- -- -- -- -- -- --                   ))

-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-braid : ‚àÄ n k k< ‚Üí
-- -- -- -- -- -- -- -- -- -- --  PathP (Œª j ‚Üí (x : ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n))) j) ‚Üí
-- -- -- -- -- -- -- -- -- -- --          (adjT-√ó-sq'' n (k , <-weaken {n = n} k<) j
-- -- -- -- -- -- -- -- -- -- --       ‚àò' adjT-√ó-sq'' n (suc k , k<) j
-- -- -- -- -- -- -- -- -- -- --       ‚àò' adjT-√ó-sq'' n (k , <-weaken {n = n} k<) j) x ‚â°
-- -- -- -- -- -- -- -- -- -- --       (adjT-√ó-sq'' n (suc k , k<) j
-- -- -- -- -- -- -- -- -- -- --       ‚àò' adjT-√ó-sq'' n (k , <-weaken {n = n} k<) j
-- -- -- -- -- -- -- -- -- -- --       ‚àò' adjT-√ó-sq'' n (suc k , k<) j) x)
-- -- -- -- -- -- -- -- -- -- --    (Œª x ‚Üí cong (x ‚àò'_) 
-- -- -- -- -- -- -- -- -- -- --           (cong (Iso.fun ‚àò permuteIso n) (braid k k< Œµ)))
-- -- -- -- -- -- -- -- -- -- --    (braid-adjT√ó^  {n = n} k k<)
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-braid  (suc (suc (suc n))) zero  k< =
-- -- -- -- -- -- -- -- -- -- --  let e = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc (suc n))))))     
-- -- -- -- -- -- -- -- -- -- --  in Œª i x j ‚Üí
-- -- -- -- -- -- -- -- -- -- --       ua-glue e i 
-- -- -- -- -- -- -- -- -- -- --         (Œª { ( i = i0) ‚Üí x ‚àò adjT-braid (suc (suc (suc n))) zero k< j })
-- -- -- -- -- -- -- -- -- -- --              (inS (braid-adjT√ó^  {n = (suc (suc (suc n)))}
-- -- -- -- -- -- -- -- -- -- --               zero k< (ua-unglue e i x) j))
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-braid  (suc (suc (suc (suc n)))) (suc k)  k< =
-- -- -- -- -- -- -- -- -- -- --  let e = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc (suc (suc n)))))))
-- -- -- -- -- -- -- -- -- -- --      e' = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc (suc n))))))
     
-- -- -- -- -- -- -- -- -- -- --  in Œª i x j ‚Üí
-- -- -- -- -- -- -- -- -- -- --       let v = ((ua-unglue e i x))
-- -- -- -- -- -- -- -- -- -- --       in ua-glue e i 
-- -- -- -- -- -- -- -- -- -- --         (Œª { ( i = i0) ‚Üí x ‚àò adjT-braid (suc (suc (suc (suc n)))) (suc k) k< j})
-- -- -- -- -- -- -- -- -- -- --              (inS (fst v ,
-- -- -- -- -- -- -- -- -- -- --                 ua-unglue e' i
-- -- -- -- -- -- -- -- -- -- --                  ( adjT-√ó-sq-braid  (suc (suc (suc n))) k  k<
-- -- -- -- -- -- -- -- -- -- --                     i (ua-glue e' i (Œª { (i = i0) ‚Üí x ‚àò' sucF }) (inS (snd v))) j)
-- -- -- -- -- -- -- -- -- -- --                   ))

-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-commTy : {A : Type ‚Ñì} ‚Üí ‚Ñï ‚Üí Type ‚Ñì
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-commTy  n = ‚àÄ k l ‚Üí (z : A.commT (fst k) (fst l)) ‚Üí
-- -- -- -- -- -- -- -- -- -- --  PathP (Œª j ‚Üí (x : ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n))) j) ‚Üí
-- -- -- -- -- -- -- -- -- -- --          (adjT-√ó-sq'' n l j ‚àò' adjT-√ó-sq'' n k j) x ‚â°
-- -- -- -- -- -- -- -- -- -- --       (adjT-√ó-sq'' n k j ‚àò' adjT-√ó-sq'' n l j) x)
-- -- -- -- -- -- -- -- -- -- --    (Œª x ‚Üí cong (x ‚àò'_) 
-- -- -- -- -- -- -- -- -- -- --           (cong (Iso.fun ‚àò permuteIso n) (sym (comm k l z Œµ))))
-- -- -- -- -- -- -- -- -- -- --    (comm-adjT√ó^  (fst k) (fst l) (snd k) (snd l) z)

-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-comm : ‚àÄ n ‚Üí adjT-√ó-sq-commTy  n
-- -- -- -- -- -- -- -- -- -- -- adjT-√ó-sq-comm  =
-- -- -- -- -- -- -- -- -- -- --   ‚Ñï.elim (uncurry (Œª _ ()))
-- -- -- -- -- -- -- -- -- -- --    s
-- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- --  s : (n : ‚Ñï) ‚Üí adjT-√ó-sq-commTy n ‚Üí adjT-√ó-sq-commTy (suc n)
-- -- -- -- -- -- -- -- -- -- --  s (suc (suc (suc n))) _ (zero , k<) (suc (suc l) , l<) z =
-- -- -- -- -- -- -- -- -- -- --   let e = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc (suc (suc n)))))))
-- -- -- -- -- -- -- -- -- -- --       e' = (isoToEquiv (invIso (Iso-√ó^-F‚Üí  (suc (suc n)))))
-- -- -- -- -- -- -- -- -- -- --   in Œª i x j ‚Üí
-- -- -- -- -- -- -- -- -- -- --       let (v0 , v1 , v) = ua-unglue e i x
-- -- -- -- -- -- -- -- -- -- --       in glue
-- -- -- -- -- -- -- -- -- -- --            (Œª { (i = i0) ‚Üí 
-- -- -- -- -- -- -- -- -- -- --                   x ‚àò funExt (adjT-comm (suc (suc (suc (suc n))))
-- -- -- -- -- -- -- -- -- -- --                                    (zero , k<) (suc (suc l) , l<) z) ( ~ j)
-- -- -- -- -- -- -- -- -- -- --               ; (i = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --               }) (v1 , v0 ,
-- -- -- -- -- -- -- -- -- -- --                    ua-unglue e' i (adjT-√ó-sq'' (suc (suc n)) ((l , l<))
-- -- -- -- -- -- -- -- -- -- --                             i ( ua-glue e' i
-- -- -- -- -- -- -- -- -- -- --                                  (Œª { (i = i0) ‚Üí x ‚àò sucF ‚àò sucF})
-- -- -- -- -- -- -- -- -- -- --                                   (inS ((snd (snd (ua-unglue e i x))))))))

-- -- -- -- -- -- -- -- -- -- --  s (suc (suc (suc n))) S (suc k , k<) (suc (suc (suc l)) , l<) z =
-- -- -- -- -- -- -- -- -- -- --    Œª i x j ‚Üí
-- -- -- -- -- -- -- -- -- -- --       let v = ((unglue (i ‚à® ~ i) x))
-- -- -- -- -- -- -- -- -- -- --       in glue 
-- -- -- -- -- -- -- -- -- -- --         (Œª { ( i = i0) ‚Üí x ‚àò funExt (adjT-comm (suc (suc (suc (suc n))))
-- -- -- -- -- -- -- -- -- -- --                       (suc k , k<) (suc (suc (suc l)) , l<) z) (~ j)
-- -- -- -- -- -- -- -- -- -- --              ;(i = i1) ‚Üí _
-- -- -- -- -- -- -- -- -- -- --              })
-- -- -- -- -- -- -- -- -- -- --              ((fst v ,
-- -- -- -- -- -- -- -- -- -- --                 unglue (i ‚à® ~ i)
-- -- -- -- -- -- -- -- -- -- --                 (S (k , k<) (suc (suc l) , l<) z i
-- -- -- -- -- -- -- -- -- -- --                      (glue (Œª { (i = i0) ‚Üí x ‚àò' sucF
-- -- -- -- -- -- -- -- -- -- --                                ; (i = i1) ‚Üí _}) ((snd v))) j)))
   
 


-- -- -- -- -- -- -- -- -- -- -- ùïçSi : (isGrpA : isGroupoid A) ‚Üí ‚àÄ n ‚Üí  (em : ‚Ñôrm' n) ‚Üí
-- -- -- -- -- -- -- -- -- -- --              singl (permùîΩ isGrpA n em) 
-- -- -- -- -- -- -- -- -- -- -- ùïçSi  isGrpA n = {!!} --EMelim.f w
-- -- -- -- -- -- -- -- -- -- --  where

-- -- -- -- -- -- -- -- -- -- --  ùïç‚â° : ‚àÄ n ‚Üí (g : Perm n) ‚Üí
-- -- -- -- -- -- -- -- -- -- --               singlP (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- -- --                 ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n))) i
-- -- -- -- -- -- -- -- -- -- --               ‚â° ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n))) i)
-- -- -- -- -- -- -- -- -- -- --               --{A = (A √ó^ n) ‚â° (A √ó^ n) }
-- -- -- -- -- -- -- -- -- -- --               (fst (permùîΩ‚â° n g)) 
-- -- -- -- -- -- -- -- -- -- --  ùïç‚â° n = Relim.f (w)
-- -- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- -- --   open Relim

-- -- -- -- -- -- -- -- -- -- --   w : Relim _
-- -- -- -- -- -- -- -- -- -- --   isSetA w _ = isOfHLevelPlus 2 (isContrSinglP _ _)
-- -- -- -- -- -- -- -- -- -- --   ŒµA w = refl , Œª i ‚Üí refl
-- -- -- -- -- -- -- -- -- -- --   fst (‚à∑A w k (X , _)) = adjT√ó^‚âÉ (fst k) ‚Çë‚àô‚Çö X
-- -- -- -- -- -- -- -- -- -- --   snd (‚à∑A w k {xs} (_ , P)) i =  adjT-√ó-sq n k i ‚Çë‚àô‚Çö P i
      
-- -- -- -- -- -- -- -- -- -- --   fst (invoA w k (X , _) i) =
-- -- -- -- -- -- -- -- -- -- --     invol-‚Çë‚àôp (adjT√ó^‚âÉ (fst k))
-- -- -- -- -- -- -- -- -- -- --      (isInvo-adjT√ó^ {n = n} (fst k)) X i
-- -- -- -- -- -- -- -- -- -- --   snd (invoA w k (_ , P) i) j =
-- -- -- -- -- -- -- -- -- -- --      invol-‚Çë‚àôp (adjT-√ó-sq n k j)
-- -- -- -- -- -- -- -- -- -- --       (adjT-√ó-sq-invo n k j)
-- -- -- -- -- -- -- -- -- -- --       (P j) i 
-- -- -- -- -- -- -- -- -- -- --   fst (braidA w k k< (X , _) i) =
-- -- -- -- -- -- -- -- -- -- --     ‚Çë‚àô‚Çö-comp¬≥eq (adjT√ó^‚âÉ k) (adjT√ó^‚âÉ (suc k)) X
-- -- -- -- -- -- -- -- -- -- --       (equivEq (funExt (braid-adjT√ó^ k k<))) i
-- -- -- -- -- -- -- -- -- -- --   snd (braidA w k k< (_ , P) i) j =
-- -- -- -- -- -- -- -- -- -- --     ‚Çë‚àô‚Çö-comp¬≥eq (adjT-√ó-sq n (k , <-weaken {n = n} k<) j)
-- -- -- -- -- -- -- -- -- -- --                   (adjT-√ó-sq n (suc k , k<) j) (P j)
-- -- -- -- -- -- -- -- -- -- --       (equivEq (funExt (adjT-√ó-sq-braid n k k< j)) ) i
-- -- -- -- -- -- -- -- -- -- --   fst (commA w k l z (X , _) i) =
-- -- -- -- -- -- -- -- -- -- --       ‚Çë‚àô‚Çö-comp¬≤eq (adjT√ó^‚âÉ (fst l)) (adjT√ó^‚âÉ (fst k)) X
-- -- -- -- -- -- -- -- -- -- --         (equivEq (funExt (comm-adjT√ó^ _ _ (snd k) (snd l) z))) i
-- -- -- -- -- -- -- -- -- -- --   snd (commA w k l z (_ , P) i) j =
-- -- -- -- -- -- -- -- -- -- --       ‚Çë‚àô‚Çö-comp¬≤eq (adjT-√ó-sq n l j) (adjT-√ó-sq n k j) (P j)
-- -- -- -- -- -- -- -- -- -- --         (equivEq (funExt (adjT-√ó-sq-comm n k l z j))) i


-- -- -- -- -- -- -- -- -- -- -- --  isGpdA√ó^ : isGroupoid (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- -- --  isGpdA√ó^ = isOfHLevel√ó^ n 3 isGrpA

-- -- -- -- -- -- -- -- -- -- -- --  wSqFst : (h : Perm n) ‚Üí Relim
-- -- -- -- -- -- -- -- -- -- -- --    Œª g ‚Üí Square
-- -- -- -- -- -- -- -- -- -- -- --      (fst (ùïç‚â° n g))
-- -- -- -- -- -- -- -- -- -- -- --      (fst (ùïç‚â° n (g ¬∑ h)))
-- -- -- -- -- -- -- -- -- -- -- --      refl
-- -- -- -- -- -- -- -- -- -- -- --      (fst (ùïç‚â° n h))
-- -- -- -- -- -- -- -- -- -- -- --  Relim.isSetA (wSqFst h) g = isOfHLevelRetractFromIso 2
-- -- -- -- -- -- -- -- -- -- -- --      (invIso PathP‚Üícomm-Iso)
-- -- -- -- -- -- -- -- -- -- -- --      (isOfHLevel‚â° 3 isGpdA√ó^ isGpdA√ó^ _ _)
-- -- -- -- -- -- -- -- -- -- -- --  Relim.ŒµA (wSqFst h) i j = fst (ùïç‚â° n h) (j ‚àß i)
-- -- -- -- -- -- -- -- -- -- -- --  Relim.‚à∑A (wSqFst h) k {xs} X j i = (adjT√ó^‚âÉ (fst k) ‚Çë‚àô‚Çö X j) i 
-- -- -- -- -- -- -- -- -- -- -- --  Relim.invoA (wSqFst h) k X l j i = 
-- -- -- -- -- -- -- -- -- -- -- --     invol-‚Çë‚àôp (adjT√ó^‚âÉ (fst k))
-- -- -- -- -- -- -- -- -- -- -- --                 (isInvo-adjT√ó^ {n = n} (fst k))
-- -- -- -- -- -- -- -- -- -- -- --                 (X j) l i
-- -- -- -- -- -- -- -- -- -- -- --  Relim.braidA (wSqFst h) k k< X l j i =
-- -- -- -- -- -- -- -- -- -- -- --    ‚Çë‚àô‚Çö-comp¬≥eq (adjT√ó^‚âÉ k) (adjT√ó^‚âÉ (suc k)) (X j)
-- -- -- -- -- -- -- -- -- -- -- --      (equivEq (funExt (braid-adjT√ó^ k k<))) l i
-- -- -- -- -- -- -- -- -- -- -- --  Relim.commA (wSqFst h) k l z X l' j i =
-- -- -- -- -- -- -- -- -- -- -- --    ‚Çë‚àô‚Çö-comp¬≤eq (adjT√ó^‚âÉ (fst l)) (adjT√ó^‚âÉ (fst k)) (X j)
-- -- -- -- -- -- -- -- -- -- -- --         (equivEq (funExt (comm-adjT√ó^ _ _ (snd k) (snd l) z))) l' i

-- -- -- -- -- -- -- -- -- -- -- --  wSqSnd : (h : Perm n) ‚Üí RelimProp
-- -- -- -- -- -- -- -- -- -- -- --    Œª g ‚Üí SquareP (Œª i j ‚Üí permùîΩ isGrpA n (emcomp g h i j) ‚â° Relim.f (wSqFst h) g i j)
-- -- -- -- -- -- -- -- -- -- -- --      (flipSquare (snd (ùïç‚â° n g)))
-- -- -- -- -- -- -- -- -- -- -- --      (flipSquare (snd (ùïç‚â° n (g ¬∑ h))))
-- -- -- -- -- -- -- -- -- -- -- --      refl
-- -- -- -- -- -- -- -- -- -- -- --      (flipSquare (snd (ùïç‚â° n h)))

-- -- -- -- -- -- -- -- -- -- -- --  RelimProp.isPropA (wSqSnd h) g =
-- -- -- -- -- -- -- -- -- -- -- --       isOfHLevelRespectEquiv 1
-- -- -- -- -- -- -- -- -- -- -- --     (invEquiv (PathP‚âÉPath _ _ _))
-- -- -- -- -- -- -- -- -- -- -- --       (isOfHLevelRespectEquiv 2
-- -- -- -- -- -- -- -- -- -- -- --         (invEquiv (PathP‚âÉPath _ _ _))
-- -- -- -- -- -- -- -- -- -- -- --          ((isOfHLevelRespectEquiv 3
-- -- -- -- -- -- -- -- -- -- -- --         (invEquiv (PathP‚âÉPath _ _ _))
-- -- -- -- -- -- -- -- -- -- -- --          (isOfHLevel‚â° 3 (isGroupoidŒ† Œª _ ‚Üí isGrpA) isGpdA√ó^ ) _ _)) _ _)
-- -- -- -- -- -- -- -- -- -- -- --  RelimProp.ŒµA (wSqSnd h) j i = flipSquare (snd (ùïç‚â° n h)) (j ‚àß i)
-- -- -- -- -- -- -- -- -- -- -- --  RelimProp.‚à∑A (wSqSnd h) k {xs} X j i l =
-- -- -- -- -- -- -- -- -- -- -- --    (adjT-√ó-sq n k l ‚Çë‚àô‚Çö Œª i ‚Üí X j i l) i
 
-- -- -- -- -- -- -- -- -- -- -- --  w : EMelim (PermG n) (Œª z ‚Üí singl (permùîΩ isGrpA n z))
-- -- -- -- -- -- -- -- -- -- -- --  EMelim.isGrpB w _ = isOfHLevelPlus 3 (isContrSingl _)
-- -- -- -- -- -- -- -- -- -- -- --  EMelim.b w = A √ó^ n , ua (isoToEquiv (invIso (Iso-√ó^-F‚Üí  n)))
-- -- -- -- -- -- -- -- -- -- -- --  EMelim.bPathP w g =
-- -- -- -- -- -- -- -- -- -- -- --    let z = ùïç‚â° n g
-- -- -- -- -- -- -- -- -- -- -- --    in Œ£PathP (fst z , flipSquare (snd z))
-- -- -- -- -- -- -- -- -- -- -- --  fst (EMelim.bSqP w g h i j) = Relim.f (wSqFst h) g i j
-- -- -- -- -- -- -- -- -- -- -- --  snd (EMelim.bSqP w g h i j) = RelimProp.f (wSqSnd h) g i j

-- -- -- -- -- -- -- -- -- -- -- -- module ùïç {A : Type ‚Ñì} (isGrpA : isGroupoid A) where

-- -- -- -- -- -- -- -- -- -- -- --   ùïç : ‚àÄ {n} ‚Üí  (em : ‚Ñôrm' n) ‚Üí Type ‚Ñì
-- -- -- -- -- -- -- -- -- -- -- --   ùïç {n} = fst ‚àò ùïçSi isGrpA n             

-- -- -- -- -- -- -- -- -- -- -- --   isGrpùïç : ‚àÄ {n} ‚Üí  (em : ‚Ñôrm' n) ‚Üí isGroupoid (ùïç em)
-- -- -- -- -- -- -- -- -- -- -- --   isGrpùïç {n} em = subst isGroupoid (snd (permùîΩSi isGrpA n em) ‚àô snd (ùïçSi isGrpA n em))
-- -- -- -- -- -- -- -- -- -- -- --        (isGroupoidŒ† Œª _ ‚Üí isGrpA)             



-- -- -- -- -- -- -- -- -- -- -- -- -- fromùïç : {A : Type ‚Ñì} ‚Üí (isGrpA : isGroupoid A) ‚Üí ‚àÄ n ‚Üí  (em : ‚Ñôrm' n) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- --               ùïç isGrpA n em ‚Üí FMSet2 A
-- -- -- -- -- -- -- -- -- -- -- -- -- fromùïç  isGrpA n' = EMelim.f (w {n'})
-- -- -- -- -- -- -- -- -- -- -- -- --  where
-- -- -- -- -- -- -- -- -- -- -- -- --  open EMelim

-- -- -- -- -- -- -- -- -- -- -- -- --  open Relim

-- -- -- -- -- -- -- -- -- -- -- -- --  wB : ‚àÄ {n} ‚Üí A √ó^ n ‚Üí FMSet2 A
-- -- -- -- -- -- -- -- -- -- -- -- --  wB {zero} _ = []
-- -- -- -- -- -- -- -- -- -- -- -- --  wB {suc n} (x , xs) = x ‚à∑2 (wB xs)


-- -- -- -- -- -- -- -- -- -- -- -- --  w‚â° : ‚àÄ {n} ‚Üí Relim
-- -- -- -- -- -- -- -- -- -- -- -- --       (Œª z ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- --          PathP (Œª i ‚Üí ùïç isGrpA n (emloop z i) ‚Üí FMSet2 A) (wB) (wB))
-- -- -- -- -- -- -- -- -- -- -- -- --  isSetA w‚â° _ = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- --  ŒµA w‚â° = refl
-- -- -- -- -- -- -- -- -- -- -- -- --  ‚à∑A (w‚â° {suc (suc n)}) (k , k<) {xs} X i x =
-- -- -- -- -- -- -- -- -- -- -- -- --    let v = funExt (Œª y ‚Üí {!!}) ‚óÅ congP (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- --              _‚àò' fst (unglue-‚Çë‚àôp (adjT√ó^‚âÉ k)
-- -- -- -- -- -- -- -- -- -- -- -- --              (cong (ùïç isGrpA (suc (suc n))) (emloop xs)) i)) X
-- -- -- -- -- -- -- -- -- -- -- -- --    in v i x
-- -- -- -- -- -- -- -- -- -- -- -- --  -- ‚à∑A (w‚â° {suc (suc n)}) (zero , k<) {xs} X i x =
     
-- -- -- -- -- -- -- -- -- -- -- -- --  --   let v = funExt (Œª _ ‚Üí comm _ _ _) ‚óÅ congP (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- --  --             _‚àò' fst (unglue-‚Çë‚àôp (adjT√ó^‚âÉ zero)
-- -- -- -- -- -- -- -- -- -- -- -- --  --             (cong (ùïç isGrpA (suc (suc n))) (emloop xs)) i)) X
-- -- -- -- -- -- -- -- -- -- -- -- --  --   in v i x
-- -- -- -- -- -- -- -- -- -- -- -- --  -- ‚à∑A (w‚â° {suc (suc (suc n))}) (suc k , k<) {xs} X i x =
-- -- -- -- -- -- -- -- -- -- -- -- --  --   let v = {!!} ‚óÅ congP (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- --  --             _‚àò' fst (unglue-‚Çë‚àôp (adjT√ó^‚âÉ (suc k))
-- -- -- -- -- -- -- -- -- -- -- -- --  --             (cong (ùïç isGrpA (suc (suc (suc n)))) (emloop xs)) i)) X
-- -- -- -- -- -- -- -- -- -- -- -- --  --   in v i x
-- -- -- -- -- -- -- -- -- -- -- -- --  invoA w‚â° = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- --  braidA w‚â° = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- --  commA w‚â° = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- --  w : ‚àÄ {n} ‚Üí EMelim (PermG n) (Œª z ‚Üí ùïç isGrpA n z ‚Üí FMSet2 A)
-- -- -- -- -- -- -- -- -- -- -- -- --  isGrpB w x = isGroupoidŒ† Œª _ ‚Üí trunc
-- -- -- -- -- -- -- -- -- -- -- -- --  b w = wB
-- -- -- -- -- -- -- -- -- -- -- -- --  bPathP (w {n}) = Relim.f (w‚â° {n})
-- -- -- -- -- -- -- -- -- -- -- -- --  bSqP w = {!!}
