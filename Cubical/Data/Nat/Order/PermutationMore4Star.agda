{-# OPTIONS --safe #-}
module Cubical.Data.Nat.Order.PermutationMore4Star where

open import Cubical.Data.Nat.Base as ‚Ñï hiding (_¬∑_)
open import Cubical.Data.Nat.Properties


-- open import Cubical.Data.Fin.Properties as FP
open import Cubical.Data.Empty as ‚ä•

open import Cubical.Functions.Involution

open import Cubical.Foundations.Everything
-- open import Cubical.Data.Empty as ‚ä•
-- open import Cubical.Data.Nat as ‚Ñï hiding (_¬∑_)
-- open import Cubical.Data.Nat.Order
open import Cubical.Data.Sigma
open import Cubical.Data.Maybe
open import Cubical.Data.Unit
open import Cubical.Data.Bool as ùüö
open import Cubical.Data.Sum as ‚äé


open import Cubical.Data.Nat.Order.Recursive
open import Cubical.Data.Nat.Order.RecursiveMoreEquiv

open import Cubical.Relation.Nullary
open import Cubical.Relation.Binary

open import Cubical.Algebra.Group

open import Cubical.Algebra.SymmetricGroup

import Cubical.Functions.Logic as L

open import Cubical.Functions.Embedding

open import Cubical.Data.List as Li

import Cubical.Data.Nat.FinGenAut2 as A

import Cubical.HITs.PropositionalTruncation as Prop

open import Cubical.HITs.GroupoidQuotients as GQ
  renaming ([_] to [_]// ; RelimProp to  RelimProp// ; Rrec to Rrec//)


open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties

-- open import Cubical.Algebra.Group.Generators

open import Cubical.Functions.FunExtEquiv

open import Cubical.HITs.SequentialColimit as SC

open import Cubical.Data.Nat.Order.Permutation
-- open import Cubical.Data.Nat.Order.PermutationMore


-- open import Cubical.Data.FinData.GTrun

open import Cubical.HITs.EilenbergMacLane1 renaming (elim to elimEM)

open import Cubical.HITs.ListedFiniteSet.Base3
import Cubical.HITs.ListedFiniteSet.Base22Star2 as S
import Cubical.HITs.ListedFiniteSet.Base22Star3 as S'

open import Cubical.Relation.Binary

import Cubical.Homotopy.EilenbergMacLane.Properties as EMP

open import Cubical.Foundations.Equiv.HalfAdjoint

private
  variable
    ‚Ñì : Level
    A : Type ‚Ñì


-- Œ£hSetPred : ‚àÄ {‚Ñì} {‚Ñì'}
--         {a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ : Type ‚Ñì} {a‚ÇÄ‚Çã : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÄ‚ÇÅ}
--   {a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ : A} (a‚ÇÅ‚Çã : a‚ÇÅ‚ÇÄ ‚â° a‚ÇÅ‚ÇÅ)
--   (a‚Çã‚ÇÄ : a‚ÇÄ‚ÇÄ ‚â° a‚ÇÅ‚ÇÄ) (a‚Çã‚ÇÅ : a‚ÇÄ‚ÇÅ ‚â° a‚ÇÅ‚ÇÅ)
   
--    {a‚ÇÄ‚ÇÄ : A i0 i0 ‚Üí hProp ‚Ñì'}
--    {a‚ÇÄ‚ÇÅ : A i0 i1  ‚Üí hProp ‚Ñì'}
--    (a‚ÇÄ‚Çã : PathP (Œª j ‚Üí A i0 j ‚Üí hProp ‚Ñì') a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ)
--    {a‚ÇÅ‚ÇÄ : A i1 i0  ‚Üí hProp ‚Ñì'} {a‚ÇÅ‚ÇÅ : A i1 i1  ‚Üí hProp ‚Ñì'}
--    (a‚ÇÅ‚Çã : PathP (Œª j ‚Üí A i1 j  ‚Üí hProp ‚Ñì') a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ)
--    (a‚Çã‚ÇÄ : PathP (Œª i ‚Üí A i i0  ‚Üí hProp ‚Ñì') a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ)
--    (a‚Çã‚ÇÅ : PathP (Œª i ‚Üí A i i1  ‚Üí hProp ‚Ñì') a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ)

--           ‚Üí Square {A = Type (‚Ñì-max ‚Ñì ‚Ñì')}              
--               (Œª j ‚Üí Œ£ (A i0 j) (fst ‚àò a‚ÇÄ‚Çã j)) 
--               (Œª j ‚Üí Œ£ (A i1 j) (fst ‚àò a‚ÇÅ‚Çã j)) 
--               (Œª i ‚Üí Œ£ (A i i0) (fst ‚àò a‚Çã‚ÇÄ i)) 
--               (Œª i ‚Üí Œ£ (A i i1) (fst ‚àò a‚Çã‚ÇÅ i)) 
-- Œ£hSetPred a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ a‚Çã‚ÇÅ = {!!}


-- -- mkCube' : ‚àÄ {‚Ñì} {A A' : Type ‚Ñì}
-- --    {a‚ÇÄ‚ÇÄ‚Çã : A ‚â° A}
-- --    {a‚ÇÄ‚ÇÅ‚Çã : A ‚â° A}
-- --    {a‚ÇÄ‚Çã‚ÇÄ : A ‚â° A} {a‚ÇÄ‚Çã‚ÇÅ : A ‚â° A}
-- --    (a‚ÇÄ‚Çã‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÄ‚ÇÅ‚Çã a‚ÇÄ‚Çã‚ÇÄ a‚ÇÄ‚Çã‚ÇÅ)
-- --    {a‚ÇÅ‚ÇÄ‚Çã : A' ‚â° A'}
-- --    {a‚ÇÅ‚ÇÅ‚Çã : A' ‚â° A'}
-- --    {a‚ÇÅ‚Çã‚ÇÄ : A' ‚â° A'} {a‚ÇÅ‚Çã‚ÇÅ : A' ‚â° A'}
-- --    (a‚ÇÅ‚Çã‚Çã : Square a‚ÇÅ‚ÇÄ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚ÇÅ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÅ)
-- --    {a‚Çã‚ÇÄ‚ÇÄ : A ‚â° A'} {a‚Çã‚ÇÄ‚ÇÅ : A ‚â° A'}
-- --    (a‚Çã‚ÇÄ‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÅ‚ÇÄ‚Çã a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÄ‚ÇÅ)
-- --    {a‚Çã‚ÇÅ‚ÇÄ : A ‚â° A'} {a‚Çã‚ÇÅ‚ÇÅ : A ‚â° A'}
-- --    (a‚Çã‚ÇÅ‚Çã : Square a‚ÇÄ‚ÇÅ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚Çã‚ÇÅ‚ÇÄ a‚Çã‚ÇÅ‚ÇÅ)
-- --    (a‚Çã‚Çã‚ÇÄ : Square a‚ÇÄ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÄ a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÅ‚ÇÄ)
-- --    (a‚Çã‚Çã‚ÇÅ : Square a‚ÇÄ‚Çã‚ÇÅ a‚ÇÅ‚Çã‚ÇÅ a‚Çã‚ÇÄ‚ÇÅ a‚Çã‚ÇÅ‚ÇÅ)
-- --    ‚Üí _
-- --    ‚Üí Cube a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ
-- -- mkCube' a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ x =
-- --  toPathP (invEq (congEquiv (PathP‚âÉPath _ _ _))
-- --     (invEq (congEquiv ((congEquiv (
-- --       (PathP‚âÉPath (Œª i ‚Üí Type _) (a‚Çã‚Çã‚ÇÄ i1 i1) _)
-- --        ‚àô‚Çë univalence))))
-- --      (Œ£SquareSet (isProp‚ÜíisSet ‚àò isPropIsEquiv)
-- --       (comm‚ÜíPathP
-- --        (invEq (congEquiv (invEquiv funExtEquiv))
-- --         (funExt x))))))

-- -- mkCube :
-- --  ‚àÄ {a‚ÇÄ‚ÇÄ‚Çã : A ‚â° A}
-- --    {a‚ÇÄ‚ÇÅ‚Çã : A ‚â° A}
-- --    {a‚ÇÄ‚Çã‚ÇÄ : A ‚â° A} {a‚ÇÄ‚Çã‚ÇÅ : A ‚â° A}
-- --    (a‚ÇÄ‚Çã‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÄ‚ÇÅ‚Çã a‚ÇÄ‚Çã‚ÇÄ a‚ÇÄ‚Çã‚ÇÅ)
-- --    {a‚ÇÅ‚ÇÄ‚Çã : A ‚â° A}
-- --    {a‚ÇÅ‚ÇÅ‚Çã : A ‚â° A}
-- --    {a‚ÇÅ‚Çã‚ÇÄ : A ‚â° A} {a‚ÇÅ‚Çã‚ÇÅ : A ‚â° A}
-- --    (a‚ÇÅ‚Çã‚Çã : Square a‚ÇÅ‚ÇÄ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚ÇÅ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÅ)
-- --    {a‚Çã‚ÇÄ‚ÇÄ : A ‚â° A} {a‚Çã‚ÇÄ‚ÇÅ : A ‚â° A}
-- --    (a‚Çã‚ÇÄ‚Çã : Square a‚ÇÄ‚ÇÄ‚Çã a‚ÇÅ‚ÇÄ‚Çã a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÄ‚ÇÅ)
-- --    {a‚Çã‚ÇÅ‚ÇÄ : A ‚â° A} {a‚Çã‚ÇÅ‚ÇÅ : A ‚â° A}
-- --    (a‚Çã‚ÇÅ‚Çã : Square a‚ÇÄ‚ÇÅ‚Çã a‚ÇÅ‚ÇÅ‚Çã a‚Çã‚ÇÅ‚ÇÄ a‚Çã‚ÇÅ‚ÇÅ)
-- --    (a‚Çã‚Çã‚ÇÄ : Square a‚ÇÄ‚Çã‚ÇÄ a‚ÇÅ‚Çã‚ÇÄ a‚Çã‚ÇÄ‚ÇÄ a‚Çã‚ÇÅ‚ÇÄ)
-- --    (a‚Çã‚Çã‚ÇÅ : Square a‚ÇÄ‚Çã‚ÇÅ a‚ÇÅ‚Çã‚ÇÅ a‚Çã‚ÇÄ‚ÇÅ a‚Çã‚ÇÅ‚ÇÅ)
-- --    ‚Üí SquareP (Œª i j ‚Üí (a‚ÇÄ‚Çã‚Çã i j) ‚Üí (a‚ÇÅ‚Çã‚Çã i j))
-- --        (Œª j ‚Üí transport (flipSquare a‚Çã‚ÇÄ‚Çã j))
-- --        (Œª j ‚Üí transport (flipSquare a‚Çã‚ÇÅ‚Çã j))
-- --        (Œª i ‚Üí transport (flipSquare a‚Çã‚Çã‚ÇÄ i))
-- --        (Œª i ‚Üí transport (flipSquare a‚Çã‚Çã‚ÇÅ i))
-- --    ‚Üí Cube a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ
-- -- mkCube a‚ÇÄ‚Çã‚Çã a‚ÇÅ‚Çã‚Çã a‚Çã‚ÇÄ‚Çã a‚Çã‚ÇÅ‚Çã a‚Çã‚Çã‚ÇÄ a‚Çã‚Çã‚ÇÅ x k i j =
-- --   hcomp
-- --    (Œª l ‚Üí Œª {
-- --      (i = i0) ‚Üí {!!}
-- --     ;(i = i1) ‚Üí {!!}
-- --     ;(j = i0) ‚Üí {!!}
-- --     ;(j = i1) ‚Üí {!!}
-- --     ;(k = i0) ‚Üí a‚ÇÄ‚Çã‚Çã i j
-- --     ;(k = i1) ‚Üí a‚ÇÅ‚Çã‚Çã i j
-- --     })
-- --    (ua (x i j , {!!}) k)

‚Ñôrm' : ‚Ñï ‚Üí Type
‚Ñôrm' n = EM‚ÇÅ (PermG n)



Flooop : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí Fin n ‚â° Fin n
Flooop n k l i =
  Glue (Fin n)
    Œª {(i = i0) ‚Üí _ , adjT'‚âÉ {n = n} k
      ;(i = i1) ‚Üí _ , adjT'‚âÉ {n = n} l
       }

unglueFlooopPathExt : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
  PathP (Œª i ‚Üí Flooop n k l i ‚Üí Fin n)
    (adjT n k) (adjT n l)
unglueFlooopPathExt n k l i x = unglue (i ‚à® ~ i) x

glueFlooopPathExt : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
  PathP (Œª i ‚Üí Fin n ‚Üí Flooop n k l i )
    (adjT n k) (adjT n l)
glueFlooopPathExt n k l i x =
  glue
    (Œª {(i = i0) ‚Üí adjT n k x
      ;(i = i1) ‚Üí adjT n l x
       })
      (isInvolution-adjT n k
      (isInvolution-adjT n l x (~ i)) i)


-- ‚Ñïlooop' : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚â° ‚Ñï
-- ‚Ñïlooop' n k i = 
--   Glue ‚Ñï
--     Œª {(i = i0) ‚Üí _ , {!A.adjTransposition‚âÉ k!}
--       ;(i = i1) ‚Üí _ , {!!}
--        }


Flooop-comp : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
  ‚Üí Square
       (ua (adjT'‚âÉ {n = n} k))
       (ua (adjT'‚âÉ {n = n} l))
       (Flooop n k l)
       refl
Flooop-comp n k l i j =
    Glue (Fin n)
    Œª {(j = i0) (i = i0) ‚Üí _ , adjT'‚âÉ {n = n} k
      ;(j = i0) (i = i1) ‚Üí _ , adjT'‚âÉ {n = n} l
      ;(j = i1) ‚Üí _ , idEquiv _
       }


gluePathAdjT' : ‚àÄ n ‚Üí ‚àÄ k
       ‚Üí  PathP (Œª i ‚Üí Fin n ‚Üí (ua (adjT'‚âÉ {n = n} k) i))
           (adjT n k) (idfun _)
gluePathAdjT' n k i x =
   ua-gluePath (adjT'‚âÉ {n = n} k) (isInvolution-adjT n k x) i


ungluePathAdjT' : ‚àÄ n ‚Üí ‚àÄ k
       ‚Üí  PathP (Œª i ‚Üí  ((ua (adjT'‚âÉ {n = n} k) i)) ‚Üí Fin n)
           (idfun _) (adjT n k)
ungluePathAdjT' n k = (sym (funExt (isInvolution-adjT n k)) ‚óÅ
      congP (Œª _ ‚Üí (adjT n k) ‚àò_) (ua-ungluePathExt (adjT'‚âÉ {n = n} k)))


glueSq-Flooop-comp : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
   ‚Üí SquareP (Œª i j ‚Üí Fin n ‚Üí Flooop-comp n k l i j)
         (gluePathAdjT' n k)
         (gluePathAdjT' n l)
         (glueFlooopPathExt n k l)
         Œª _ ‚Üí idfun _
glueSq-Flooop-comp n k l i j x =
  glue (Œª {
       (j = i0)(i = i0) ‚Üí adjT n k x
      ;(j = i0)(i = i1) ‚Üí adjT n l x
      ;(j = i1) ‚Üí x
       }) (isInvolution-adjT n k
          (isInvolution-adjT n l
             x (~ i ‚à® j)) (i ‚à® j))


Flooop-comm-sqL' : ‚àÄ n k l ‚Üí commT (fst k) (fst l)
  ‚Üí (x : Fin n) ‚Üí
      PathP (Œª z‚ÇÅ ‚Üí ua (adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n}  k) z‚ÇÅ)
        (fst (adjT'‚âÉ {n = n} k) x)
      (fst (adjT'‚âÉ {n = n} l) x)
Flooop-comm-sqL' n k l z x i =
  glue (Œª {(i = i0) ‚Üí (fst (adjT'‚âÉ {n = n} k) x)
         ; (i = i1) ‚Üí (fst (adjT'‚âÉ {n = n} l) x) })           
       (‚â°Fin {n = n}
         {(fst (adjT'‚âÉ {n = n} k ‚àô‚Çë adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n} k) x)}
         {(fst (adjT'‚âÉ {n = n} l) x)}
             (funExt‚Åª (A.adjTranspositionComm' (fst k) (fst l) z) (fst x)) i)

Flooop-comm-sqL : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
   ‚Üí commT (fst k) (fst l)
   ‚Üí PathP (Œª j ‚Üí Fin n ‚âÉ ua (adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n} k) j)
      (adjT'‚âÉ {n = n} k)
      (adjT'‚âÉ {n = n} l)
Flooop-comm-sqL n k l z =
 Œ£PathPProp isPropIsEquiv
   (funExt (Flooop-comm-sqL' n k l z ))  

Flooop-comm-sqR : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
   ‚Üí PathP (Œª j ‚Üí Fin n ‚âÉ ua (adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n} k) j)
      (adjT'‚âÉ {n = n} l)
      (adjT'‚âÉ {n = n} k)
Flooop-comm-sqR n k l =
   Œ£PathPProp isPropIsEquiv
   (Œª i x ‚Üí
       glue (Œª {(i = i0) ‚Üí (fst (adjT'‚âÉ {n = n} l) x)
               ; (i = i1) ‚Üí (fst (adjT'‚âÉ {n = n} k) x) })
           (fst (adjT'‚âÉ {n = n} k)
             (isInvolution-adjT n l x i)))
  


Flooop-comm : ‚àÄ n (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n))
   ‚Üí commT (fst k) (fst l)
   ‚Üí Square (Flooop n k l) (Flooop n l k)  refl refl
Flooop-comm n k l z j i =
    Glue (ua (adjT'‚âÉ {n = n} l ‚àô‚Çë adjT'‚âÉ {n = n} k) j)
    Œª {(i = i0) ‚Üí Fin n , Flooop-comm-sqL n k l z j
      ;(i = i1) ‚Üí Fin n , Flooop-comm-sqR n k l j }


-- floop-braid-0 : ‚àÄ n k k< ‚Üí 
--    PathP (Œª j ‚Üí ua (adjT'‚âÉ {n = n} (suc k , k<)) j ‚âÉ
--         (ua ((adjT'‚âÉ {n = n} (suc k , k<)) ‚àô‚Çë
--                   (adjT'‚âÉ {n = n} ((k , <-weaken {n = n} k<))) ‚àô‚Çë
--                   (adjT'‚âÉ {n = n} (suc k , k<))) (~ j)))
--       (adjT'‚âÉ {n = n} (k , <-weaken {n = n} k<))
--       (adjT'‚âÉ {n = n} (k , <-weaken {n = n} k<))
-- floop-braid-0 n k k< =
--    Œ£PathPProp isPropIsEquiv 
--               ( {!!}
--      ‚óÅ (Œª j ‚Üí
--        ua-gluePathExt (((adjT'‚âÉ {n = n} (suc k , k<)) ‚àô‚Çë
--                   (adjT'‚âÉ {n = n} ((k , <-weaken {n = n} k<))) ‚àô‚Çë
--                   (adjT'‚âÉ {n = n} (suc k , k<)))) (~ j) ‚àò'
--          ua-ungluePathExt ((adjT'‚âÉ {n = n} (suc k , k<))) j) ‚ñ∑
--          {!!})


-- floop-braid-1 : ‚àÄ n k k< ‚Üí 
--    PathP (Œª j ‚Üí ua (adjT'‚âÉ {n = n} (k , <-weaken {n = n} k<)) j ‚âÉ {!!})
--       (adjT'‚âÉ {n = n} (suc k , k<))
--       (adjT'‚âÉ {n = n} (suc k , k<))
-- floop-braid-1 n k k< j = {!!}

Flooop-sq : ‚àÄ n {k‚ÇÄ} {k‚ÇÅ} {k‚ÇÇ} {k‚ÇÉ} ‚Üí
    Square
      (Flooop n k‚ÇÄ k‚ÇÅ)
      (Flooop n k‚ÇÇ k‚ÇÉ)
      (Flooop n k‚ÇÄ k‚ÇÇ)
      (Flooop n k‚ÇÅ k‚ÇÉ)
Flooop-sq n {k‚ÇÄ} {k‚ÇÅ} {k‚ÇÇ} {k‚ÇÉ} i j =
  Glue (Fin n)
   Œª {  (i = i0)(j = i0) ‚Üí _ , adjT'‚âÉ {n = n} k‚ÇÄ
      ; (i = i0)(j = i1) ‚Üí _ , adjT'‚âÉ {n = n} k‚ÇÅ
      ; (i = i1)(j = i0) ‚Üí _ , adjT'‚âÉ {n = n} k‚ÇÇ
      ; (i = i1)(j = i1) ‚Üí _ , adjT'‚âÉ {n = n} k‚ÇÉ
      }

data ‚Ñôrm (n : ‚Ñï) : Type‚ÇÄ where 
  ùï°base : ‚Ñôrm n
  ùï°loop : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ùï°base ‚â° ùï°base  
  ùï°looop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ùï°base ‚â° ùï°base
  -- ùï°comp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
  --    Square
  --      (ùï°loop k)
  --      (ùï°loop l)
  --      refl
  --      (ùï°looop k l)

  ùï°comp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     Square
       (ùï°loop k)
       (ùï°loop l)
       (ùï°looop k l)
       refl
         
  ùï°invol : ‚àÄ k ‚Üí ùï°loop k ‚â° sym (ùï°loop k)
  ùï°comm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
     commT (fst k) (fst l) ‚Üí
       Square
         refl
         refl
       (ùï°looop k l)
       (ùï°looop l k)

  ùï°braid : ‚àÄ k k<  ‚Üí        
         Square
         (ùï°loop (suc k , k<))
         (ùï°loop (k , <-weaken {n = n} k<))
         (ùï°looop (k , <-weaken {n = n} k<) (suc k , k<))
         (ùï°looop (k , <-weaken {n = n} k<) (suc k , k<))


  ùï°squash : isGroupoid (‚Ñôrm n)

-- ùï°comp' : ‚àÄ {n} ‚Üí (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--    Square {A = ‚Ñôrm n}
--      (ùï°loop k)
--      (ùï°loop l)
--      refl
--      (ùï°looop k l)
-- ùï°comp' k l =
--    (ùï°invol k) ‚óÅ
--    (Œª i j ‚Üí (ùï°comp k l i (~ j)))
--    ‚ñ∑ sym (ùï°invol l)

-- ùï°looop-invol : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--     ùï°looop {n = n} k l ‚â° sym (ùï°looop l k)
-- ùï°looop-invol n k l i j =
--    hcomp
--       (Œª l' ‚Üí Œª {
--         (i = i0) ‚Üí ùï°comp k l j (~ l')
--        ;(i = i1) ‚Üí ùï°comp l k (~ j) (~ l')
--        ;(j = i0) ‚Üí ùï°loop k (~ l')
--        ;(j = i1) ‚Üí ùï°loop l (~ l')
--        }) ùï°base

-- record Rùï°rec {n} (A : Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    abase : A
--    aloop : (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase
--    alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase
--    acomp : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--       Square
--         (aloop k)
--         (aloop l)
--         (alooop k l)
--         refl

--    ainvol : ‚àÄ k ‚Üí aloop k ‚â° sym (aloop k)
--    acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--       commT (fst k) (fst l) ‚Üí
--         Square
--           refl
--           refl
--         (alooop k l)
--         (alooop l k)

--    abraid : ‚àÄ k k<  ‚Üí        
--           Square
--           (aloop (suc k , k<))
--           (aloop (k , <-weaken {n = n} k<))
--           (alooop (k , <-weaken {n = n} k<) (suc k , k<))
--           (alooop (k , <-weaken {n = n} k<) (suc k , k<))
--    asquash : isGroupoid A


--  f : ‚Ñôrm n ‚Üí A
--  f ùï°base = abase
--  f (ùï°loop x i) = aloop x i
--  f (ùï°looop k l i) = alooop k l i
--  f (ùï°comp k l i i‚ÇÅ) = acomp k l i i‚ÇÅ
--  -- f (ùï°comp' k l i i‚ÇÅ) = acomp' k l i i‚ÇÅ
--  f (ùï°invol k i i‚ÇÅ) = ainvol k i i‚ÇÅ
--  f (ùï°comm k l x i i‚ÇÅ) = acomm k l x i i‚ÇÅ
--  f (ùï°braid k k< i i‚ÇÅ) = abraid k k< i i‚ÇÅ
--  f (ùï°squash _ _ _ _ r s i‚ÇÄ i‚ÇÅ i‚ÇÇ) =
--    asquash _ _ _ _
--      (Œª i j ‚Üí (f (r i j)))
--      (Œª i j ‚Üí (f (s i j)))
--      i‚ÇÄ i‚ÇÅ i‚ÇÇ

-- record Rùï°elim {n} (A : ‚Ñôrm n ‚Üí Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    isGroupoidA : ‚àÄ x ‚Üí isGroupoid (A x)
--    abase : A ùï°base
--    aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--      PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
--    alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--      PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
--    acomp : ‚àÄ k l ‚Üí
--      SquareP (Œª j i ‚Üí A (ùï°comp k l j i))
--        (aloop k)
--        (aloop l)
--        (alooop k l)
--        refl
--    ainvol : ‚àÄ k ‚Üí
--      SquareP (Œª i j ‚Üí A (ùï°invol k i j))
--        (aloop k)
--        (symP (aloop k))
--        refl refl
--    acomm : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí ‚àÄ x ‚Üí     
--        SquareP (Œª i j ‚Üí A (ùï°comm k l x i j))
--          refl
--          refl
--        (alooop k l)
--        (alooop l k)
--    abraid : ‚àÄ k k<  ‚Üí        
--          SquareP (Œª i j ‚Üí A (ùï°braid k k< i j))
--          (aloop (suc k , k<))
--          (aloop (k , <-weaken {n = n} k<))
--          (alooop (k , <-weaken {n = n} k<) (suc k , k<))
--          (alooop (k , <-weaken {n = n} k<) (suc k , k<))
  


--  f : ‚àÄ x ‚Üí A x
--  f ùï°base = abase
--  f (ùï°loop x i) = aloop x i
--  f (ùï°looop k l i) = alooop k l i
--  f (ùï°comp k l j i) = acomp k l j i
   
--  f (ùï°invol k i j) = ainvol k i j
 
--  f (ùï°comm k l x i j) = acomm k l x i j
    
 
--  f (ùï°braid k k< i j) = abraid k k< i j
--  f (ùï°squash x y p q r s i j k) =
--    isOfHLevel‚ÜíisOfHLevelDep 3 isGroupoidA
--      _ _ _ _
--      (Œª j k ‚Üí f (r j k)) (Œª j k ‚Üí f (s j k))
--      (ùï°squash x y p q r s) i j k


-- record Rùï°elimSet {n} (A : ‚Ñôrm n ‚Üí Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    isSetA : ‚àÄ x ‚Üí isSet (A x)
--    abase : A ùï°base
--    aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--      PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase
--    alooop : (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--      PathP (Œª i ‚Üí A (ùï°looop k l i)) abase abase
--    -- (k l : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí abase ‚â° abase

--  fR : Rùï°elim (Œª z ‚Üí A z)
--  Rùï°elim.isGroupoidA fR = isSet‚ÜíisGroupoid ‚àò isSetA
--  Rùï°elim.abase fR = abase
--  Rùï°elim.aloop fR = aloop
--  Rùï°elim.alooop fR = alooop
--  Rùï°elim.acomp fR k l = 
--    isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°comp k l j i)) _ _ _ _
--  Rùï°elim.ainvol fR k =
--   isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°invol k j i)) _ _ _ _
--  Rùï°elim.acomm fR k l x =
--   isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°comm k l x j i)) _ _ _ _
--  Rùï°elim.abraid fR k k< =
--   isSet‚ÜíSquareP (Œª j i ‚Üí isSetA (ùï°braid k k< j i)) _ _ _ _

--  f : ‚àÄ x ‚Üí A x
--  f = Rùï°elim.f fR

-- record Rùï°elimSet' {n} (A : ‚Ñôrm n ‚Üí Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    isSetA : ‚àÄ x ‚Üí isSet (A x)
--    abase : A ùï°base
--    aloop : (k : Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí
--      PathP (Œª i ‚Üí A (ùï°loop k i)) abase abase

--  fR : Rùï°elimSet (Œª z ‚Üí A z)
--  Rùï°elimSet.isSetA fR = isSetA
--  Rùï°elimSet.abase fR = abase
--  Rùï°elimSet.aloop fR = aloop
--  Rùï°elimSet.alooop fR k l i =
--    comp (Œª j ‚Üí A (ùï°comp k l i (~ j)))
--      (Œª j ‚Üí Œª { (i = i0) ‚Üí aloop k (~ j) ; (i = i1) ‚Üí aloop l (~ j) })
--      abase

--  f : ‚àÄ x ‚Üí A x
--  f = Rùï°elimSet.f fR



-- record Rùï°elimProp {n} (A : ‚Ñôrm n ‚Üí Type ‚Ñì) : Type ‚Ñì where
--  no-eta-equality
--  field
--    isPropA : ‚àÄ x ‚Üí isProp (A x)
--    abase : A ùï°base

--  fR : Rùï°elimSet (Œª z ‚Üí A z)
--  Rùï°elimSet.isSetA fR = isProp‚ÜíisSet ‚àò isPropA
--  Rùï°elimSet.abase fR = abase
--  Rùï°elimSet.aloop fR k = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _
--  Rùï°elimSet.alooop fR k l = isProp‚ÜíPathP (Œª _ ‚Üí isPropA _) _ _

--  f : ‚àÄ x ‚Üí A x
--  f = Rùï°elimSet.f fR



-- to‚ÑôrmR‚â° : ‚àÄ n ‚Üí Rrec {n = n} (Path (‚Ñôrm n) ùï°base ùï°base)
-- Rrec.isSetA (to‚ÑôrmR‚â° n) = ùï°squash _ _
-- Rrec.ŒµA (to‚ÑôrmR‚â° n) = refl
-- Rrec.‚à∑A (to‚ÑôrmR‚â° n) k = ùï°loop k ‚àô_ 
-- Rrec.invoA (to‚ÑôrmR‚â° n) k x i j = 
--   hcomp (Œª l ‚Üí
--        Œª { (i = i1) ‚Üí x (j ‚àß l)
--          ; (j = i0) ‚Üí ùï°base
--          ; (j = i1) ‚Üí (hcomp (Œª l' ‚Üí
--                  Œª { (i = i1) ‚Üí x (l' ‚àß l)
--                    ; (l = i0) ‚Üí ùï°invol k l' i
--                    ; (l = i1) ‚Üí x l'
--                    }) (ùï°loop k (l ‚à® i)))
--          }) (ùï°loop k (~ i ‚àß j))

-- Rrec.braidA (to‚ÑôrmR‚â° n) k k< x i =
--     ùï°comp' (k , <-weaken {n = n} k<) (suc k , k<) i
--   ‚àô ùï°braid k k< i
--   ‚àô ùï°comp (k , <-weaken {n = n} k<) (suc k , k<) i ‚àô x

-- Rrec.commA (to‚ÑôrmR‚â° n) k l z x i =
--     ùï°comp' k l i
--     ‚àô (ùï°comm k l z i ‚àô‚àô ùï°comp l k i ‚àô‚àô x)
  

-- to‚ÑôrmRsq : ‚àÄ n ‚Üí (h : Perm n) ‚Üí RelimProp
--       (Œª z ‚Üí
         
--          Square (Rrec.f (to‚ÑôrmR‚â° n) z)
--          (Rrec.f (to‚ÑôrmR‚â° n) ((snd (PermG n) GroupStr.¬∑ z) h)) refl
--          (Rrec.f (to‚ÑôrmR‚â° n) h))
-- RelimProp.isPropA (to‚ÑôrmRsq n h) _ =
--   isOfHLevelRetractFromIso
--     1 (invIso PathP‚Üícomm-Iso) (ùï°squash _ _ _ _)
-- RelimProp.ŒµA (to‚ÑôrmRsq n h) i j = (Rrec.f (to‚ÑôrmR‚â° n) h) (i ‚àß j)
-- RelimProp.‚à∑A (to‚ÑôrmRsq n h) k x i = ùï°loop k ‚àô x i

-- to‚ÑôrmR : ‚àÄ n ‚Üí EMrec (PermG n) {B = ‚Ñôrm n} ùï°squash
-- EMrec.b (to‚ÑôrmR n) = ùï°base
-- EMrec.bloop (to‚ÑôrmR n) = Rrec.f (to‚ÑôrmR‚â° n)
-- EMrec.bComp (to‚ÑôrmR n) g h = RelimProp.f (to‚ÑôrmRsq n h) g 


-- to‚Ñôrm : ‚àÄ n ‚Üí ‚Ñôrm' n ‚Üí ‚Ñôrm n
-- to‚Ñôrm n = EMrec.f (to‚ÑôrmR n)


-- commSq : ‚àÄ n ‚Üí ‚àÄ k xs ‚Üí Square {A = ‚Ñôrm' n}
--            (emloop (Œ∑ k))
--            (emloop xs)
--            refl
--            (emloop (Œ∑ k ¬∑ xs))
-- commSq n k xs i j =
--   hcomp (Œª l' ‚Üí Œª {
--        (i = i0) ‚Üí emloop (Œ∑ k) j
--       ;(i = i1) ‚Üí emloop (invo k xs l') j
--       ;(j = i0) ‚Üí embase
--       ;(j = i1) ‚Üí emloop (k ‚à∑ xs) i
--       }) (emcomp (Œ∑ k) (Œ∑ k ¬∑ xs) i j)

-- -- commSq' : ‚àÄ n ‚Üí ‚àÄ k l ‚Üí Square {A = ‚Ñôrm' n}
-- --            (emloop (Œ∑ l))
-- --            (emloop (Œ∑ k))
-- --            refl
-- --            (emloop (Œ∑ l ¬∑ Œ∑ k))
           
-- -- commSq' n k l i j = {!!}
-- --   -- hcomp (Œª l' ‚Üí Œª {
-- --   --      (i = i0) ‚Üí emloop (Œ∑ k) j
-- --   --     ;(i = i1) ‚Üí emloop (invo k (Œ∑ l) l') j
-- --   --     ;(j = i0) ‚Üí embase
-- --   --     ;(j = i1) ‚Üí emloop (k ‚à∑ Œ∑ l) i
-- --   --     }) (emcomp (Œ∑ k) (Œ∑ k ¬∑ Œ∑ l) i j)

-- involSq : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
--       emloop (Œ∑ {n = n} k) ‚â° sym (emloop (Œ∑ k))
-- involSq n k i j =
--   hcomp (Œª l ‚Üí Œª {
--        (i = i0) ‚Üí emcomp (Œ∑ k) (Œ∑ k) j l
--       ;(i = i1) ‚Üí emcomp Œµ (Œ∑ k) (~ j) l
--       ;(j = i0) ‚Üí emloop (k ‚à∑ Œµ) l
--       ;(j = i1) ‚Üí emloop {Group = PermG n} ((invo {n = n} k Œµ) i) l
--       }) embase


-- braidSq : ‚àÄ n k l ‚Üí
--    Square {A = ‚Ñôrm' n}
--      (emloop (Œ∑ k))
--      (emloop (Œ∑ k))
--      (emloop (Œ∑ l))
--      (emloop (k  ‚à∑ l ‚à∑ k ‚à∑ Œµ))
-- braidSq n k l =
--     (involSq n k) ‚óÅ
--       emloop-doubleCompFill (PermG n) (Œ∑ k) (Œ∑ l) (Œ∑ k)
-- braidSq' : ‚àÄ n k l ‚Üí
--    Square {A = ‚Ñôrm' n}
--      (sym (emloop (Œ∑ l)))
--      (sym (emloop (Œ∑ l)))
--      (emloop (l ‚à∑ k ‚à∑ l ‚à∑ Œµ))
--      (emloop (Œ∑ k))
-- braidSq' n k l =
--   (sym (involSq n l)) ‚óÅ
--      Œª i j ‚Üí emloop-doubleCompFill (PermG n) (Œ∑ l) (Œ∑ k) (Œ∑ l) i (~ j)


-- braidSqC : ‚àÄ n k k< ‚Üí
--    Square {A = ‚Ñôrm' n}
--      refl
--      refl
--      (emloop ((k , <-weaken {n = n} k<)
--          ‚à∑ (suc k , k<) ‚à∑ (k , <-weaken  {n = n} k<) ‚à∑ Œµ))
--      (emloop ((suc k , k<) ‚à∑ (k , <-weaken  {n = n} k<) ‚à∑ (suc k , k<) ‚à∑ Œµ))
      
-- braidSqC n k k< i j = emloop (braid k k< Œµ j ) i
--   -- (braidSqC0 n k k< j
--   --   ‚àô‚àô (Œª i ‚Üí emloop (braid k k< Œµ i ) j)
--   --   ‚àô‚àô
--   --   braidSqC1 n k k< j) i

-- Rfrom‚Ñôrm : ‚àÄ n ‚Üí Rùï°rec {n = n} (‚Ñôrm' n)
-- Rùï°rec.abase (Rfrom‚Ñôrm n) = embase
-- Rùï°rec.aloop (Rfrom‚Ñôrm n) = emloop ‚àò Œ∑
-- Rùï°rec.alooop (Rfrom‚Ñôrm n) k l i =
--   hcomp (Œª z ‚Üí Œª {(i = i0) ‚Üí emloop (Œ∑ k) (~ z)
--                 ; (i = i1) ‚Üí emloop (Œ∑ l) (~ z)} ) embase

-- Rùï°rec.acomp (Rfrom‚Ñôrm n) k l i j =
--   doubleCompPath-filler (emloop (Œ∑ k)) refl (sym (emloop (Œ∑ l))) (~ j) i
-- Rùï°rec.ainvol (Rfrom‚Ñôrm n) = involSq n
    
-- Rùï°rec.acomm (Rfrom‚Ñôrm n) k l x i j =
--   (commSq n k (Œ∑ l) j ‚àô‚àô
--     (Œª i ‚Üí emloop (comm k l x Œµ i ) j)
--    ‚àô‚àô sym (commSq n l (Œ∑ k) j)) i
-- Rùï°rec.abraid (Rfrom‚Ñôrm n) k k< i j =
--   (braidSq n (k , (<-weaken {n = n} k<) ) (suc k , k<) j ‚àô‚àô
--    (braidSqC n k k< j)
--    ‚àô‚àô braidSq' n (k , (<-weaken {n = n} k<) ) (suc k , k<) j) i

-- Rùï°rec.asquash (Rfrom‚Ñôrm n) = emsquash

-- from‚Ñôrm : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí ‚Ñôrm' n
-- from‚Ñôrm n = Rùï°rec.f (Rfrom‚Ñôrm n)

-- emloop-Œµ : ‚àÄ n ‚Üí refl ‚â° emloop {Group = PermG n} Œµ 
-- emloop-Œµ n i j =
--   hcomp (Œª l ‚Üí
--     primPOr i (~ i ‚à® j ‚à® ~ j)
--       (Œª _ ‚Üí emcomp Œµ Œµ j l)
--        Œª _ ‚Üí emloop Œµ l)
--     embase 

-- RelimProp‚â° : ‚àÄ n ‚Üí RelimProp
--       Œª z ‚Üí
--         Square
--          (Œª j ‚Üí from‚Ñôrm n (Rrec.f (to‚ÑôrmR‚â° n) z j))
--          (emloop z)
--         refl
--         refl
-- RelimProp.isPropA (RelimProp‚â° n) x = emsquash _ _ _ _
-- RelimProp.ŒµA (RelimProp‚â° n) = emloop-Œµ n
-- RelimProp.‚à∑A (RelimProp‚â° n) k {xs} X =
--   (cong-‚àô (from‚Ñôrm n) (ùï°loop k) (cong (to‚Ñôrm n) (emloop xs))
--     ‚àô cong (emloop (Œ∑ k) ‚àô_) X) ‚àô sym (emloop-comp _ (Œ∑ k) xs)
   
-- RfromTo‚Ñôrm : ‚àÄ n ‚Üí EMelimSet (PermG n) (Œª z ‚Üí from‚Ñôrm n (to‚Ñôrm n z) ‚â° z)
-- EMelimSet.isSetB (RfromTo‚Ñôrm n) x = emsquash _ _
-- EMelimSet.b (RfromTo‚Ñôrm n) = refl
-- EMelimSet.bPathP (RfromTo‚Ñôrm n) = flipSquare ‚àò RelimProp.f (RelimProp‚â° n)

-- fromTo‚Ñôrm : ‚àÄ n ‚Üí section (from‚Ñôrm n) (to‚Ñôrm n)
-- fromTo‚Ñôrm n = EMelimSet.f (RfromTo‚Ñôrm n)


-- RtoFrom‚Ñôrm : ‚àÄ n ‚Üí 
--      Rùï°elimSet {n = n} (Œª z ‚Üí to‚Ñôrm n (from‚Ñôrm n z) ‚â° z)
-- Rùï°elimSet.isSetA (RtoFrom‚Ñôrm n) _ = ùï°squash _ _
-- Rùï°elimSet.abase (RtoFrom‚Ñôrm n) = refl
-- Rùï°elimSet.aloop (RtoFrom‚Ñôrm n) k i j =
--    (compPath-filler (ùï°loop k) refl) (~ j) i
-- Rùï°elimSet.alooop (RtoFrom‚Ñôrm n) k l i j = 
  
--    hcomp (Œª l' ‚Üí Œª {
--        (i = i0) ‚Üí compPath-filler (ùï°loop k) refl (~ j) (~ l')
--       ;(i = i1) ‚Üí compPath-filler (ùï°loop l) refl (~ j) (~ l')
--       ;(j = i0) ‚Üí to‚Ñôrm n
--          (doubleCompPath-filler
--             (emloop (Œ∑ k)) refl
--              (sym (emloop (Œ∑ l))) l' i)
--       ;(j = i1) ‚Üí ùï°comp k l i (~ l')
--       }) ùï°base

-- toFrom‚Ñôrm : ‚àÄ n ‚Üí retract (from‚Ñôrm n) (to‚Ñôrm n)
-- toFrom‚Ñôrm n = Rùï°elimSet.f (RtoFrom‚Ñôrm n)

-- IsoEm‚Ñôrm : ‚àÄ n ‚Üí  Iso (‚Ñôrm n) (‚Ñôrm' n)
-- Iso.fun (IsoEm‚Ñôrm n) = from‚Ñôrm n
-- Iso.inv (IsoEm‚Ñôrm n) = to‚Ñôrm n
-- Iso.rightInv (IsoEm‚Ñôrm n) = fromTo‚Ñôrm n
-- Iso.leftInv (IsoEm‚Ñôrm n) = toFrom‚Ñôrm n



-- IsoEm‚ÑôrmŒ© : ‚àÄ n ‚Üí Iso (Path (‚Ñôrm n) ùï°base ùï°base) (Perm n)
-- IsoEm‚ÑôrmŒ© n = compIso
--  (congIso (IsoEm‚Ñôrm n))
--  (EMP.Œ©EM‚ÇÅIso (PermG n))


-- ùï°baseŒ©-elimProp : ‚àÄ {‚Ñì} n ‚Üí (A : Path (‚Ñôrm n) ùï°base ùï°base ‚Üí Type ‚Ñì)
--                   ‚Üí (‚àÄ x ‚Üí isProp (A x))
--                   ‚Üí (A refl)
--                   ‚Üí (‚àÄ p k ‚Üí A p ‚Üí A (ùï°loop k ‚àô p))
--                   ‚Üí ‚àÄ x ‚Üí A x 
-- ùï°baseŒ©-elimProp n A truncA a a‚àô x =
--   subst A (Iso.leftInv (IsoEm‚ÑôrmŒ© n) x) (w (Iso.fun (IsoEm‚ÑôrmŒ© n) x))

--  where
--  wR : RelimProp (Œª z ‚Üí A (Iso.inv (IsoEm‚ÑôrmŒ© n) z))
--  RelimProp.isPropA wR x = truncA _
--  RelimProp.ŒµA wR = subst A compPathRefl a
--  RelimProp.‚à∑A wR k {xs} x =
--    subst A (Œª i ‚Üí (compPath-filler (ùï°loop k) (Rrec.f (to‚ÑôrmR‚â° n) xs) i
--             ‚àô compPath-filler' (Rrec.f (to‚ÑôrmR‚â° n) xs) refl (~ i))) (a‚àô _ k x)
   

--  w : (‚àÄ x ‚Üí A (Iso.inv (IsoEm‚ÑôrmŒ© n) x))
--  w = RelimProp.f wR


module comm-√ó {‚Ñì} (A : Type ‚Ñì) where 

 record Comm-√ó-def : Type (‚Ñì-suc ‚Ñì) where
  constructor comm-√ó-def
  field
   Vecùüö : Type
   isSetVecùüö : isSet Vecùüö
   Fin√ósndProp : Vecùüö ‚Üí hProp ‚Ñì-zero
   VecTy : Type ‚Ñì
  FinTy : Type
  FinTy = Œ£ Vecùüö (fst ‚àò Fin√ósndProp)
  field
   FinVec-tab : (FinTy ‚Üí A) ‚Üí VecTy
   isEquivFinVec-tab : isEquiv FinVec-tab

 open Comm-√ó-def


 -- c-base : ‚Ñï ‚Üí Comm-√ó-def
 -- c-base 

 isGroupoidComm-√ó-def : isGroupoid Comm-√ó-def 
 isGroupoidComm-√ó-def = {!!}

 -- open Rùï°rec

 open Tab√ó‚âÉ {A = A}

 ùëπ : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí Comm-√ó-def
 Vecùüö (ùëπ n ùï°base) = Bool √ó^ n
 isSetVecùüö (ùëπ n ùï°base) = isOfHLevel√ó^ n 2 isSetBool
 Fin√ósndProp (ùëπ n ùï°base) = Fin√óSnd n
 VecTy (ùëπ n ùï°base) = A √ó^ n
 FinVec-tab (ùëπ n ùï°base) = tab√ó n
 isEquivFinVec-tab (ùëπ n ùï°base) = snd (tab√ó‚âÉ n)

 ùëπ (suc n) (ùï°loop (suc k , k<) i) = w
  where

  w : Comm-√ó-def
  Vecùüö w = {!!}
  isSetVecùüö w = {!!}
  Fin√ósndProp w = {!!}
  VecTy w = {!!}
  FinVec-tab w = {!!}
  isEquivFinVec-tab w = {!!}
  
 ùëπ (suc (suc n)) (ùï°loop (zero , k<) i) = {!!}
 
  -- where
  -- w : ‚Ñï ‚Üí (Œ£ ‚Ñï  Œª k ‚Üí (suc k < n)) ‚Üí Comm-√ó-def
  -- w n (k , k<) = {!n!}
 
 -- ùëπ n (ùï°looop k l i) = {!!}
 -- ùëπ n (ùï°comp k l i i‚ÇÅ) = {!!}
 -- ùëπ n (ùï°invol k i i‚ÇÅ) = {!!}
 -- ùëπ n (ùï°comm k l x i i‚ÇÅ) = {!!}
 -- ùëπ n (ùï°braid k k< i i‚ÇÅ) = {!!}
 -- ùëπ n (ùï°squash x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) = {!!}



 -- ùëπ : ‚àÄ n ‚Üí Rùï°rec {n = n} Comm-√ó-def
 -- abase (ùëπ n) = {!!}
 -- aloop (ùëπ (suc n)) (suc k , k<) = {!!}
 -- aloop (ùëπ (suc (suc n))) (zero , k<) = {!!} 
 -- alooop (ùëπ n) = {!!}
 -- acomp (ùëπ n) = {!!}
 -- ainvol (ùëπ n) = {!!}
 -- acomm (ùëπ n) = {!!}
 -- abraid (ùëπ n) = {!!}
 -- asquash (ùëπ n) = {!!}
 
-- R√ó^‚ÇÇ : ‚àÄ {‚Ñì} ‚Üí hSet ‚Ñì ‚Üí ‚àÄ n ‚Üí Rùï°rec {n = n} (hSet ‚Ñì)
-- R√ó^‚ÇÇ (A , isSetA) n = w
--  where
--   open Rùï°rec
--   w : Rùï°rec (hSet _)
--   abase w = A √ó^ n , isOfHLevel√ó^ n 2 isSetA
--   aloop w k =
--     Œ£‚â°Prop (Œª _ ‚Üí isPropIsOfHLevel 2) (adjT√ó^‚â° {n = n} (fst k))
--   alooop w k l =
--     Œ£‚â°Prop (Œª _ ‚Üí isPropIsOfHLevel 2) (biAdjT√ó^‚â° {n = n} k l)
--   acomp w k l =
--     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet  (isPropIsOfHLevel 2))
--      (biAdjT√ó^‚â°-comp k l)
--   ainvol w k =
--     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet  (isPropIsOfHLevel 2))
--      (adjT√ó^‚â°-invol n (fst k))
--   acomm w k l x =
--     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet  (isPropIsOfHLevel 2))
--      (biAdjT√ó^‚â°-comm k l x)
--   abraid w = {!!}
--   asquash w = isGroupoidHSet

-- √ó^‚ÇÇ : ‚àÄ {‚Ñì} ‚Üí hSet ‚Ñì ‚Üí ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí (hSet ‚Ñì)
-- √ó^‚ÇÇ A n = Rùï°rec.f (R√ó^‚ÇÇ A n)

-- RùîΩinSnd : ‚àÄ n 
--    ‚Üí Rùï°elimSet {n = n} Œª p ‚Üí ‚ü® √ó^‚ÇÇ (ùüö.Bool , ùüö.isSetBool) n p ‚ü©  ‚Üí hProp ‚Ñì-zero
-- Rùï°elimSet.isSetA (RùîΩinSnd n) _ = isSet‚Üí isSetHProp
-- Rùï°elimSet.abase (RùîΩinSnd n) = Fin√óSnd n
-- Rùï°elimSet.aloop (RùîΩinSnd n) = F√óadjSnd {n = n} ‚àò fst
-- Rùï°elimSet.alooop (RùîΩinSnd n) k l = cong snd (F√óbiAdjT‚â°' {n} k l)

-- hùîΩin√ó : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí hSet ‚Ñì-zero
-- hùîΩin√ó n p =
--  (Œ£ ‚ü® √ó^‚ÇÇ (ùüö.Bool , ùüö.isSetBool) n p ‚ü©
--    (fst ‚àò Rùï°elimSet.f (RùîΩinSnd n) p) )  ,
--     isSetŒ£ (snd (√ó^‚ÇÇ (ùüö.Bool , ùüö.isSetBool) n p))
--        (isProp‚ÜíisSet ‚àò snd ‚àò Rùï°elimSet.f (RùîΩinSnd n) p) 

-- ùîΩin√ó : ‚àÄ {n} ‚Üí ‚Ñôrm n ‚Üí Type‚ÇÄ
-- ùîΩin√ó {n} = fst ‚àò hùîΩin√ó n

-- module _ (A : hGroupoid ‚Ñì) where
 
--  open Tab√ó

--  R√ó^ : ‚àÄ n ‚Üí
--     Rùï°elim {n = n} Œª p ‚Üí singl (ùîΩin√ó p ‚Üí ‚ü® A ‚ü©)
--  R√ó^ n = w
--   where
--    open Rùï°elim
--    w : Rùï°elim Œª p ‚Üí singl (ùîΩin√ó p ‚Üí ‚ü® A ‚ü©) 
--    isGroupoidA w p = isOfHLevelPlus {zero} 3 (isContrSingl (ùîΩin√ó p ‚Üí ‚ü® A ‚ü©))
--    abase w = ‚ü® A ‚ü© √ó^ n , tab√ó‚â° {A = ‚ü® A ‚ü©} n
--    aloop w k = Œ£PathP (adjT√ó^‚â° {A = ‚ü® A ‚ü© } {n = n} (fst k)
--        , tab√óadjT√ó {A = fst A} n k)
--    alooop w k l = Œ£PathP 
--      (biAdjT√ó^‚â° {A = ‚ü® A ‚ü©} {n = n} k l ,
--       tab√óbiAdjT√ó {A = fst A} n k l)
--    acomp w k l i j =
--      biAdjT√ó^‚â°-comp {A = ‚ü® A ‚ü©} {n = n}  k l i j ,
--        {!tab√óBiadjT√ó!}
--      -- Œ£ (Œª i j X ‚Üí
--      --     {!isOfHLevelPath' 4 !}) _
--      --   _ _ _ (biAdjT√ó^‚â°-comp {A = ‚ü® A ‚ü©} {n = n}  k l)
--      -- biAdjT√ó^‚â°-comp {A = ‚ü® A ‚ü©} {n = n}  k l i j
--      --  , {!!}
--    ainvol w k i j = 
--      adjT√ó^‚â°-invol {A = ‚ü® A ‚ü©} n (fst k) i j ,
--      tab√óadjT√ó-invol n k
--        (Œª n k i j ‚Üí
--          Rùï°elimSet.f (RùîΩinSnd n) (ùï°invol {n} k i j)) i j 
--    acomm w k l x i j = {!!}
--     -- biAdjT√ó^‚â°-comm {A = ‚ü® A ‚ü©} {n = n}  k l x i j ,
--     --  {!!}
--    abraid w =
--     {!!}


-- -- -- RùîΩin√ó : ‚àÄ n ‚Üí Rùï°rec {n = n} (hSet ‚Ñì-zero)
-- -- -- Rùï°rec.abase (RùîΩin√ó n) = (Fin√ó n) , isSetFin√ó n
-- -- -- Rùï°rec.aloop (RùîΩin√ó n) (k , _) = 
-- -- --   Œ£‚â°Prop (Œª _ ‚Üí isPropIsOfHLevel 2) (F√óadjT‚â° {n = n} k)
-- -- -- Rùï°rec.alooop (RùîΩin√ó n) k l =
-- -- --   Œ£‚â°Prop (Œª _ ‚Üí isPropIsOfHLevel 2) (F√óbiAdjT‚â° k l)
-- -- -- Rùï°rec.acomp (RùîΩin√ó n) k l =
-- -- --   Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- --     (congSq {‚Ñì = ‚Ñì-suc ‚Ñì-zero} {‚Ñì' = ‚Ñì-suc ‚Ñì-zero} {A = Œ£ Type Œª X ‚Üí X ‚Üí hProp ‚Ñì-zero}
-- -- --             {B = Type}
-- -- --             {a‚ÇÄ‚ÇÄ = _ , Fin√óSnd n} {_ , Fin√óSnd n}
-- -- --             {a‚ÇÄ‚Çã = Œª i ‚Üí (adjT√ó^‚â° {A = ùüö.Bool} {n = n} (fst k) i)
-- -- --                    , F√óadjSnd {n} (fst k) i}
-- -- --             {a‚ÇÅ‚Çã =  
-- -- --               Œª i ‚Üí (adjT√ó^‚â° {A = ùüö.Bool} {n = n} (fst l) i)
-- -- --                    , Œª x ‚Üí (F√óadjTP {n} (fst l) i) x ,
-- -- --                        isProp‚ÜíPathP {‚Ñì = ‚Ñì-zero} {B = Œª i ‚Üí
-- -- --                          ‚àÄ x ‚Üí isProp (F√óadjTP {n} (fst l) i x)}
-- -- --                        (Œª i ‚Üí isPropŒ† Œª _ ‚Üí isPropIsProp)
-- -- --                         (snd ‚àò (Fin√óSnd n)) (snd ‚àò (Fin√óSnd n)) i x
-- -- --                     -- Œª x ‚Üí (F√óadjTP {n} (fst k) i) x ,
-- -- --                     --   isProp‚ÜíPathP
-- -- --                     --     (Œª i ‚Üí isPropIsProp {A = (F√óadjTP (fst k) i x)})
-- -- --                     --     (snd (Fin√óSnd n {!!})) {!!} i
-- -- --                         }
-- -- --             (Œª A ‚Üí Œ£ (fst A) (fst ‚àò snd A))
-- -- --      (Œ£SquareSet (Œª _ ‚Üí isSet‚Üí isSetHProp)
-- -- --       (biAdjT√ó^‚â°-comp {A = ùüö.Bool} {n = n} k l)))
    
-- -- -- Rùï°rec.ainvol (RùîΩin√ó n) = {!!}
-- -- -- Rùï°rec.acomm (RùîΩin√ó n) = {!!}
-- -- -- Rùï°rec.abraid (RùîΩin√ó n) = {!!}
-- -- -- Rùï°rec.asquash (RùîΩin√ó n) = {!!}


-- -- RùîΩin : ‚àÄ n ‚Üí Rùï°rec {n = n} (hSet ‚Ñì-zero)
-- -- Rùï°rec.abase (RùîΩin n) = Fin n , isSetFin {n = n}
-- -- Rùï°rec.aloop (RùîΩin n) k =
-- --   Œ£‚â°Prop (Œª _ ‚Üí isPropIsOfHLevel 2) (ua (adjT'‚âÉ {n = n} k))
-- -- Rùï°rec.alooop (RùîΩin n) k l =
-- --   Œ£‚â°Prop (Œª _ ‚Üí isPropIsOfHLevel 2) (Flooop n k l)
-- -- Rùï°rec.acomp (RùîΩin n) k l =
-- --       Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- --         (Flooop-comp n k l)

-- -- Rùï°rec.ainvol (RùîΩin n) k =
-- --     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- --         (involPathSym _)

-- -- Rùï°rec.acomm (RùîΩin n) k l x =
-- --       Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- --        (flipSquare (Flooop-comm n k l x))
-- -- Rùï°rec.abraid (RùîΩin n) k k< =
-- --   Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- --     (comm‚ÜíPathP (isInjectiveTransport
-- --       (funExt Œª x ‚Üí ‚â°Fin {n = n}
-- --         (funExt‚Åª (A.adjTranspositionBraid k ) (fst x) ))))
-- -- Rùï°rec.asquash (RùîΩin n) = isGroupoidHSet

-- -- ùîΩinH : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí hSet ‚Ñì-zero
-- -- ùîΩinH n = Rùï°rec.f {n = n} (RùîΩin n)

-- -- ùîΩin : ‚àÄ {n} ‚Üí ‚Ñôrm n ‚Üí Type
-- -- ùîΩin {n} = fst ‚àò' ùîΩinH n



-- -- module _ (A : Type ‚Ñì) where

-- --  ùîΩin‚Üí : ‚Ñï ‚Üí Type ‚Ñì
-- --  ùîΩin‚Üí n = Œ£ (‚Ñôrm n) Œª p ‚Üí ùîΩin p ‚Üí A

-- --  ‚ÜîkP : ‚àÄ n ‚Üí (a : Fin n ‚Üí A) ‚Üí ‚àÄ k
-- --         ‚Üí PathP (Œª i ‚Üí ùîΩin {n = n} (ùï°loop k i) ‚Üí A)
-- --              (a ‚àò fst (adjT'‚âÉ  {n = n} k)) a
-- --  ‚ÜîkP n a k i = a ‚àò' ua-ungluePathExt (adjT'‚âÉ {n = n} k) i

 
-- --  ‚Üîk'P : ‚àÄ n ‚Üí (a : Fin n ‚Üí A) ‚Üí ‚àÄ k
-- --         ‚Üí PathP (Œª i ‚Üí ùîΩin {n = n} (ùï°loop k i) ‚Üí A)
-- --              a (a ‚àò fst (adjT'‚âÉ {n = n} k))
-- --  ‚Üîk'P n a k =
-- --    congP (Œª _ ‚Üí a ‚àò_) (ungluePathAdjT' n k)

-- --  -- ‚Üîk-fill : SquareP
-- --  --             {!Œª i j ‚Üí ‚ÜîkP A n p k!}
-- --  --             {!!} {!!} {!!} {!!}
-- --  -- ‚Üîk-fill = {!!}

-- --  pop‚Üî : ‚àÄ n ‚Üí (a b : Fin n ‚Üí A) ‚Üí ‚àÄ (p : ùï°base ‚â° ùï°base) k
-- --         ‚Üí PathP (Œª i ‚Üí ùîΩin {n = n} ((ùï°loop k ‚àô p) i) ‚Üí A) a b
-- --         ‚Üí PathP (Œª i ‚Üí ùîΩin (p i) ‚Üí A) (a ‚àò fst (adjT'‚âÉ {n} k)) b
-- --  pop‚Üî n a  b p k P i =
-- --    comp  (Œª z ‚Üí ùîΩin (compPath-filler' (ùï°loop k) p (~ z) i) ‚Üí A )
-- --       (Œª z ‚Üí
-- --        Œª {(i = i0) ‚Üí ‚Üîk'P n a k z
-- --          ;(i = i1) ‚Üí b
-- --          }) (P i)


-- --  -- pop‚Üîsq : ‚àÄ n ‚Üí (a b : Fin n ‚Üí A) ‚Üí ‚àÄ (p : ùï°base ‚â° ùï°base) k
-- --  --        ‚Üí (P : PathP (Œª i ‚Üí ùîΩin {n = n} ((ùï°loop k ‚àô p) i) ‚Üí A) a b)
-- --  --        ‚Üí P ‚â°
-- --  --          compPathP' {B = Œª x ‚Üí ùîΩin x ‚Üí A} {p = ùï°loop k} {q = p}
-- --  --            (‚Üîk' n a k) (pop‚Üî n a b p k P) 
-- --  -- pop‚Üîsq = {!!}

-- -- [_]_‚Üî_ : ‚àÄ n ‚Üí (Fin n ‚Üí A) ‚Üí (Fin n ‚Üí A) ‚Üí Type _
-- -- [_]_‚Üî_ {A = A} n x y = Œ£ (Path (‚Ñôrm n) ùï°base ùï°base)
-- --   Œª p ‚Üí PathP (Œª i ‚Üí ùîΩin (p i) ‚Üí A) x y



-- -- isTrans-[]‚Üî : ‚àÄ n ‚Üí BinaryRelation.isTrans ([_]_‚Üî_ {A = A}  n)
-- -- fst (isTrans-[]‚Üî n a b c (p , _) (q , _)) = p ‚àô q
-- -- snd (isTrans-[]‚Üî {A = A} n a b c (p , P) (q , Q)) =
-- --    compPathP' {B = Œª x ‚Üí ùîΩin x ‚Üí A} {p = p} {q = q} P Q

-- -- ‚Üîk : ‚àÄ n k ‚Üí (a : Fin n ‚Üí A) ‚Üí [ n ] a ‚Üî (a ‚àò fst (adjT'‚âÉ {n} k))
-- -- ‚Üîk n k a = (ùï°loop k) , (‚Üîk'P _ n a k)


-- -- -- pop‚Üîtrans-fill : ‚àÄ n (p : ùï°base {n = n} ‚â° ùï°base) k ‚Üí
     
-- -- --         (ùï°loop k ‚àô p) ‚â° (ùï°loop k ‚àô p)
        
-- -- -- pop‚Üîtrans-fill = {!!}

-- -- pop‚Üîtrans : ‚àÄ n ‚Üí (a b : Fin n ‚Üí A) ‚Üí ‚àÄ (p : ùï°base ‚â° ùï°base) k
-- --         ‚Üí (P : PathP (Œª i ‚Üí ùîΩin {n = n} ((ùï°loop k ‚àô p) i) ‚Üí A) a b)
-- --         ‚Üí Path ([ n ] a ‚Üî b) (ùï°loop k ‚àô p , P)
-- --               (isTrans-[]‚Üî n a (a ‚àò fst (adjT'‚âÉ {n} k)) b
-- --                  (‚Üîk n k a) (p , (pop‚Üî _ n a b p k P)))
-- -- pop‚Üîtrans {A = A} n a b p k P =
-- --  Œ£PathP (refl ,
-- --     ppp)

-- --  where
-- --   ppp : PathP (Œª i ‚Üí PathP (Œª i‚ÇÅ ‚Üí ùîΩin ((ùï°loop k ‚àô p) i‚ÇÅ) ‚Üí A) a b)
-- --           P
-- --           (snd
-- --            (isTrans-[]‚Üî n a (a ‚àò fst (adjT'‚âÉ {n = n} k)) b
-- --             (‚Üîk n k a)
-- --             (p , pop‚Üî A n a b p k P)))
-- --   ppp i j = --ùîΩin ((ùï°loop k ‚àô p) j) ‚Üí A
-- --     comp
-- --        (Œª z ‚Üí ùîΩin (filler'‚â°filler (ùï°loop k) p (~ i) z j) ‚Üí A)
-- --         (Œª z ‚Üí
-- --          Œª { (i = i0) ‚Üí 
-- --              fill (Œª z ‚Üí ùîΩin (compPath-filler' (ùï°loop k) p (~ z) j) ‚Üí A)
-- --                 (Œª z ‚Üí Œª {(j = i0) ‚Üí ‚Üîk'P A n a k z
-- --                          ;(j = i1) ‚Üí b
-- --                         }) (inS (P j)) (~ z)
-- --            ; (i = i1) ‚Üí (snd
-- --            (isTrans-[]‚Üî n a (a ‚àò fst (adjT'‚âÉ {n = n} k)) b
-- --             (‚Üîk n k a)
-- --             (p , pop‚Üî A n a b p k P))) (~ z ‚à® j)
-- --            ; (j = i0) ‚Üí
-- --                 fill (Œª i ‚Üí ùîΩin (compPath-filler (ùï°loop k) p i (~ z)) ‚Üí A)
-- --                 (Œª i ‚Üí Œª {(z = i0) ‚Üí pop‚Üî A n a b p k P i
-- --                          ;(z = i1) ‚Üí ‚Üîk'P A n a k (~ z)
-- --                         }) (inS (‚Üîk'P A n a k (~ z))) (i)
             
-- --            ; (j = i1) ‚Üí b
         
-- --            })
-- --        (pop‚Üî A n a b p k P (j ‚à® i))

-- --   pop‚Üífill : ‚àÄ i ‚Üí I ‚Üí (i‚ÇÅ : I) ‚Üí
-- --     ùîΩin (compPath-filler' (ùï°loop k) p (~ i‚ÇÅ) i) ‚Üí A
-- --   pop‚Üífill i j =
-- --     fill (Œª z ‚Üí ùîΩin (compPath-filler' (ùï°loop k) p (~ z) i) ‚Üí A )
-- --       (Œª z ‚Üí
-- --        Œª {(i = i0) ‚Üí ‚Üîk'P A n a k z
-- --          ;(i = i1) ‚Üí b
-- --          }) (inS (P i))


-- -- uncurry-flip : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì'' ‚Ñì'''} ‚Üí {A : Type ‚Ñì} {B : Type ‚Ñì'}
-- --                {C : A ‚Üí A ‚Üí B ‚Üí Type ‚Ñì''} {D : ‚àÄ a a' b ‚Üí C a a' b ‚Üí Type ‚Ñì'''}
-- --                ‚Üí (‚àÄ b ‚Üí ‚àÄ a a' ‚Üí (c : C a a' b) ‚Üí D a a' b c )
-- --                ‚Üí (‚àÄ {a a'} ‚Üí (bc : Œ£ B (C a a')) ‚Üí D a a' (fst bc) (snd bc))
-- -- uncurry-flip x bc = x _ _ _ (snd bc)

-- -- module _ (A : Type ‚Ñì) where

-- --  Fin‚Üí/‚Üî : ‚àÄ n ‚Üí Type ‚Ñì
-- --  Fin‚Üí/‚Üî n = (Fin n ‚Üí A) // isTrans-[]‚Üî n


-- --  sym-/‚Üî : ‚àÄ n p {a b : Fin n ‚Üí A} P ‚Üí
-- --               Path (Path (Fin‚Üí/‚Üî n) [ a ]// [ b ]//)
-- --                 (eq// (sym p , P) )
-- --                 (sym (eq// (p , symP P)))
-- --  sym-/‚Üî n p P i j =
-- --    hcomp
-- --      (Œª z ‚Üí Œª {
-- --        (i = i0) ‚Üí comp// (sym p , P) (p , symP P) (~ z) j
-- --       ;(i = i1) ‚Üí invSides-filler
-- --                     (sym (eq// (refl , refl)))
-- --                 (sym (eq// (p , symP P))) j (~ z)   
-- --       ;(j = i0) ‚Üí refl‚â°Id (isTrans-[]‚Üî n) {P i0} (refl , refl)
-- --            (Œ£PathP ((sym compPathRefl) ,
-- --               symP (compPathP'-filler {B = Œª x ‚Üí ùîΩin {n = n} x ‚Üí A} {P i0}
-- --                 {p = Œª _ ‚Üí ùï°base} {q = refl}
-- --                refl refl))) (~ i) z
-- --       ;(j = i1) ‚Üí eq// (p , symP P) (~ z)
-- --       })
-- --      (eq// {a = P i0} {P i0}
-- --        (lCancel p i , Œª j' ‚Üí
-- --         comp (Œª z ‚Üí ùîΩin {n = n} (rCancel-filler (sym p) z i j') ‚Üí A)
-- --             ((Œª z ‚Üí Œª { (j' = i0) ‚Üí P i0
-- --                 ; (j' = i1) ‚Üí P (~ z ‚àß ~ i)
-- --                 ; (i = i1) ‚Üí P i0
-- --                 }))
-- --             (P (j' ‚àß ~ i))) j)


-- -- module Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî {A : Type ‚Ñì} (isGroupoidA : isGroupoid A) where

-- --  isGroupoidŒ£ùîΩin‚Üí : ‚àÄ n ‚Üí isGroupoid (ùîΩin‚Üí A n)
-- --  isGroupoidŒ£ùîΩin‚Üí _ = isGroupoidŒ£ ùï°squash
-- --      Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí isGroupoidA


-- --  zz-aloop' : ‚àÄ n k ‚Üí 
-- --     SquareP (Œª i‚ÇÅ j ‚Üí ùîΩin {n = n} (ùï°loop k i‚ÇÅ) ‚Üí
-- --                       ùîΩin {n = n} (ùï°loop k j))
-- --     {idfun (Fin n)}
-- --     {!!}
-- --     {{!!}} {idfun _}
-- --     {!!}
-- --     {!!}
-- --     {!!}
-- --  zz-aloop' n k = {!!}

-- --  to-loop' : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- --       PathP (Œª i ‚Üí (ùîΩin {n} (ùï°loop k i) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n) [_]// [_]//
-- --  to-loop' n k i p = eq// 
-- --                 {a = p ‚àò {!!}}
-- --                 {b = p ‚àò {!!} }
-- --                 ((ùï°loop k) , Œª j x ‚Üí p (zz-aloop' n k j i x)) i


-- -- --  zz-aloop : ‚àÄ n k ‚Üí 
-- -- --     SquareP (Œª i‚ÇÅ j ‚Üí ùîΩin {n = n} (ùï°loop k i‚ÇÅ) ‚Üí
-- -- --                       ùîΩin {n = n} (ùï°loop k j))
-- -- --     (ua-gluePathExt (adjT'‚âÉ {n = n} k))
-- -- --     (Œª i x ‚Üí glue
-- -- --         (Œª { (i = i0) ‚Üí adjT n k x
-- -- --            ; (i = i1) ‚Üí x
-- -- --            })
-- -- --         (isInvolution-adjT n k x i))
-- -- --     (funExt (Œª kk ‚Üí sym (isInvolution-adjT n k kk)) ‚óÅ
-- -- --       (Œª i ‚Üí fst (adjT'‚âÉ {n = n} k)
-- -- --          ‚àò' ua-ungluePathExt (adjT'‚âÉ {n = n} k) i))
-- -- --     (ua-ungluePathExt (adjT'‚âÉ {n = n} k))
-- -- --  zz-aloop n k = isSet‚ÜíSquareP (Œª i‚ÇÅ j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°loop k j))))
-- -- --            _ _ _ _

-- -- --  -- zz-aloop-invol : ‚àÄ n k ‚Üí PathP (Œª i ‚Üí
-- -- --  --                        SquareP (Œª i‚ÇÅ j ‚Üí
-- -- --  --                      ùîΩin {n = n} (ùï°invol k i i‚ÇÅ) ‚Üí
-- -- --  --                      ùîΩin {n = n} (ùï°invol k i  j))
-- -- --  --                          {idfun _} {adjT n k}
-- -- --  --                          {!!}
-- -- --  --                          {_} {idfun _}
-- -- --  --                          {!!}
-- -- --  --                          (Œª i‚ÇÅ ‚Üí {!!})
-- -- --  --                          {!!})
-- -- --  --                   (zz-aloop n k)
-- -- --  --                    (congP (Œª _ ‚Üí symP-fromGoal)
-- -- --  --                     (symP-fromGoal (zz-aloop n k)))
-- -- --  -- zz-aloop-invol n k = {!!}
-- -- --  zz-aloop-invol : ‚àÄ n k ‚Üí
-- -- --     SquareP (Œª j' j ‚Üí PathP (Œª i ‚Üí ùîΩin {n = n} (ùï°invol k i j') ‚Üí
-- -- --                       ùîΩin {n = n} (ùï°invol k i  j))
-- -- --           (zz-aloop n k j' j) (zz-aloop n k (~ j') (~ j)))
-- -- --       {refl} {refl}
-- -- --       (isSet‚ÜíSquareP (Œª i‚ÇÅ j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°invol k j i‚ÇÅ))))
-- -- --            _ _ _ _)
-- -- --       {refl} {refl}
-- -- --       (isSet‚ÜíSquareP (Œª i‚ÇÅ j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°invol k j i‚ÇÅ))))
-- -- --            _ _ _ _)
-- -- --       (isSet‚ÜíSquareP (Œª i‚ÇÅ j ‚Üí isSet‚Üí (isSetFin {n = n}))
-- -- --            _ _ _ _)
-- -- --       (isSet‚ÜíSquareP (Œª i‚ÇÅ j ‚Üí isSet‚Üí (isSetFin {n = n}))
-- -- --            _ _ _ _)
                    
-- -- --  zz-aloop-invol n k =
-- -- --    isSet‚ÜíSquareP (Œª i‚ÇÅ j ‚Üí isOfHLevelPathP 2
-- -- --      (isSet‚Üí (snd (ùîΩinH n (ùï°invol k i1  j)))) _ _)
-- -- --            _ _ _ _


-- -- --  to-loop : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- --       PathP (Œª i ‚Üí (ùîΩin {n} (ùï°loop k i) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n) [_]// [_]//
-- -- --  to-loop n k i p = eq// 
-- -- --                 {a = p ‚àò ua-gluePathExt (adjT'‚âÉ {n = n} k) i}
-- -- --                 {b = p ‚àò Œª x ‚Üí
-- -- --                    ua-gluePath (adjT'‚âÉ {n = n} k)
-- -- --                      (isInvolution-adjT n k x) i }
-- -- --                 ((ùï°loop k) , Œª j x ‚Üí p (zz-aloop n k j i x)) i

-- -- -- --  zz-alooop : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n))
-- -- -- --       ‚Üí SquareP (Œª i‚ÇÅ j ‚Üí (fst (ùîΩinH n (ùï°looop k l i‚ÇÅ)))
-- -- -- --               ‚Üí (fst (ùîΩinH n (ùï°looop k l j))))
-- -- -- --                  (Œª i x ‚Üí glue (Œª {(i = i0) ‚Üí x ;(i = i1) ‚Üí _ })
-- -- -- --                       (isInvolution-adjT n l (adjT n k x) (~ i)))
-- -- -- --                  (Œª i x ‚Üí glue (Œª {(i = i0) ‚Üí _ ;(i = i1) ‚Üí x })
-- -- -- --                       (isInvolution-adjT n k (adjT n l x) i))
-- -- -- --                  ((Œª i x ‚Üí isInvolution-adjT n k x (~ i))
-- -- -- --                    ‚óÅ (Œª i ‚Üí adjT n k ‚àò unglue (i ‚à® ~ i)))
-- -- -- --                  ((Œª i ‚Üí adjT n l ‚àò unglue (i ‚à® ~ i)) ‚ñ∑
-- -- -- --                   funExt (isInvolution-adjT n l))
-- -- -- --  zz-alooop n k l = isSet‚ÜíSquareP (Œª i‚ÇÅ j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°looop k l j))))
-- -- -- --              _ _ _ _
 
-- -- -- --  to-looop : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- --       PathP (Œª i ‚Üí (ùîΩin {n} (ùï°looop k l i) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n) [_]// [_]//
-- -- -- --  to-looop n k l =
-- -- -- --     Œª i p ‚Üí eq//
-- -- -- --                  -- {a = p ‚àò Œª x ‚Üí glue (Œª {(i = i0) ‚Üí x ;(i = i1) ‚Üí _ })
-- -- -- --                  --      (isInvolution-adjT n l (adjT n k x) (~ i))}
-- -- -- --                  -- {b = p ‚àò Œª x ‚Üí glue (Œª {(i = i0) ‚Üí _ ;(i = i1) ‚Üí x })
-- -- -- --                  --      (isInvolution-adjT n k (adjT n l x) i)}
-- -- -- --                ((ùï°looop k l) ,
-- -- -- --     Œª j x ‚Üí p (zz-alooop n k l j i x)) i


-- -- -- --  to-invol' : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- --       SquareP (Œª i j ‚Üí (ùîΩin {n = n} (ùï°invol k i j) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n)
-- -- -- --       (to-loop n k)
-- -- -- --       (Œª j p ‚Üí eq// (sym (ùï°loop k) , Œª j' x ‚Üí p (zz-aloop n k (~ j') (~ j) x)) j)
-- -- -- --       refl
-- -- -- --       refl
-- -- -- --  to-invol' n k i j p =
-- -- -- --     eq// (ùï°invol k i , Œª j' ‚Üí p ‚àò zz-aloop-invol n k j' j i ) j 
  

-- -- -- --  to-invol : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- --       SquareP (Œª i j ‚Üí (ùîΩin {n = n} (ùï°invol k i j) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n)
-- -- -- --       (to-loop n k) (symP (to-loop n k)) refl refl
-- -- -- --  to-invol n k  = to-invol' n k ‚ñ∑
-- -- -- --      invEq (congEquiv (invEquiv funExtDepEquiv))      
-- -- -- --       Œª i p j ‚Üí sym-/‚Üî A n (ùï°loop k)
-- -- -- --          (Œª j' ‚Üí p j ‚àò (zz-aloop n k (~ j') (~ j))) i j 




-- -- -- --  -- ss' : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí SquareP (Œª i j ‚Üí
-- -- -- --  --              PathP (Œª j' ‚Üí ùîΩin {n = n} (ùï°looop k l j')
-- -- -- --  --                          ‚Üí ùîΩin {n = n} (ùï°comp k l i j))
-- -- -- --  --                 {!!}
-- -- -- --  --                 {!!})
-- -- -- --  --           (Œª j j' ‚Üí {!!})
-- -- -- --  --           (Œª j j' ‚Üí {!zz-aloop n l j' j!})
-- -- -- --  --           (Œª i j' ‚Üí zz-alooop n k l j' i)
-- -- -- --  --           Œª _ j' ‚Üí unglueFlooopPathExt n k l j'
-- -- -- --  -- ss' = {!!}

-- -- -- --  p* : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- --        SquareP (Œª i j ‚Üí ùîΩin {n = n} ùï°base ‚Üí ùîΩin {n = n} (ùï°comp k l i j))
-- -- -- --           (Œª j ‚Üí gluePathAdjT' n k j ‚àò' adjT n l) --(gluePathAdjT' n k)
-- -- -- --           (ua-gluePathExt (adjT'‚âÉ {n = n} l)) --(gluePathAdjT' n l)
-- -- -- --           (Œª i x ‚Üí glue (Œª { (i = i0) ‚Üí adjT n k (adjT n l x)
-- -- -- --                          ; (i = i1) ‚Üí x
-- -- -- --                          }) (isInvolution-adjT n k (adjT n l x) i))
-- -- -- --           Œª i ‚Üí adjT n l 
-- -- -- --  p* n k l = isSet‚ÜíSquareP (Œª i j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°comp k l i j))))
-- -- -- --              _ _ _ _


-- -- -- --  ss* : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí SquareP (Œª i j' ‚Üí
-- -- -- --            PathP (Œª j ‚Üí ùîΩin {n = n} (ùï°looop k l j')
-- -- -- --                        ‚Üí ùîΩin {n = n} (ùï°comp k l i j))
-- -- -- --                  (zz-alooop n k l j' i)
-- -- -- --                  (unglueFlooopPathExt n k l j'))
-- -- -- --           {ua-gluePathExt (adjT'‚âÉ {n = n} k)}
          
-- -- -- --           (isSet‚ÜíSquareP (Œª j' j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°comp k l i0 j))))
-- -- -- --              _ _ _ _)
-- -- -- --           {Œª j ‚Üí gluePathAdjT' n l j ‚àò' adjT n k} 
-- -- -- --           (isSet‚ÜíSquareP (Œª j' j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°comp k l i1 j))))
-- -- -- --              _ _ _ _)
-- -- -- --           (isSet‚ÜíSquareP (Œª i j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°comp k l i j))))
-- -- -- --              _ _ _ _)
-- -- -- --           (p* n k l)
-- -- -- --  ss* n k l = isSet‚ÜíSquareP (Œª i j' ‚Üí isOfHLevelPathP 2
-- -- -- --      (isSet‚Üí (snd (ùîΩinH n (ùï°comp k l i i1)))) _ _)
-- -- -- --            _ _ _ _


-- -- -- --  ss** : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí SquareP (Œª i j' ‚Üí
-- -- -- --            PathP (Œª j ‚Üí ùîΩin {n = n} (ùï°loop l j')
-- -- -- --                        ‚Üí ùîΩin {n = n} (ùï°comp k l i j))
-- -- -- --                  ((isSet‚ÜíSquareP
-- -- -- --                     (Œª i j' ‚Üí isSet‚Üí {A = ùîΩin {n = n} (ùï°loop l j')}
-- -- -- --                         (snd (ùîΩinH n (ùï°comp k l i i0))))
                    
                    
-- -- -- --                 (Œª z ‚Üí adjT n k ‚àò ua-ungluePathExt (adjT'‚âÉ {n = n} l) z)
-- -- -- --                  (ungluePathAdjT' n l)
-- -- -- --                 ((Œª i x ‚Üí glue (Œª { (i = i0) ‚Üí adjT n k (adjT n l x)
-- -- -- --                          ; (i = i1) ‚Üí x
-- -- -- --                          }) (isInvolution-adjT n k (adjT n l x) i)))
-- -- -- --                          (glueFlooopPathExt n k l)) i j')
-- -- -- --                  (ua-ungluePathExt (adjT'‚âÉ {n = n} l) j'))
-- -- -- --           {Œª j ‚Üí gluePathAdjT' n k j ‚àò adjT n l} {gluePathAdjT' n k}
-- -- -- --           (isSet‚ÜíSquareP (Œª j' j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°comp k l i0 j))))
-- -- -- --             _ _ _ _)
-- -- -- --           (Œª j' j ‚Üí zz-aloop n l j' j)
-- -- -- --           (p* n k l)
-- -- -- --           (isSet‚ÜíSquareP (Œª i j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°comp k l i j))))
-- -- -- --             _ _ _ _)
-- -- -- --  ss** n k l = isSet‚ÜíSquareP (Œª i j' ‚Üí isOfHLevelPathP 2
-- -- -- --      (isSet‚Üí (snd (ùîΩinH n (ùï°comp k l i i1)))) _ _)
-- -- -- --            _ _ _ _

-- -- -- --  zz-comp-eq : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- --                 SquareP (Œª i j ‚Üí
-- -- -- --                        PathP (Œª j' ‚Üí {!!} ‚Üí Fin n)
-- -- -- --                           (adjT n k)
-- -- -- --                           (idfun _))
-- -- -- --                    {!!}
-- -- -- --                    {!!}
-- -- -- --                    {!!}
-- -- -- --                    {!!}
-- -- -- --  zz-comp-eq n k l = {!!}
 
-- -- -- --  to-comp-eq : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- --       Path (PathP (Œª i ‚Üí (ùîΩin {n = n} (ùï°comp k l i i1) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n)
-- -- -- --                ([_]// ‚àò' (_‚àò' adjT n k)) [_]//)
-- -- -- --         (Œª i f ‚Üí eq// {a = f ‚àò' adjT n k} {f}
-- -- -- --           (isTrans-[]‚Üî n (f ‚àò' adjT n k) (f ‚àò' adjT n l)
-- -- -- --                   f
-- -- -- --              (ùï°looop k l , Œª j' ‚Üí f ‚àò' unglueFlooopPathExt n k l j')
-- -- -- --              (ùï°loop l , Œª j' ‚Üí f ‚àò' ua-ungluePathExt (adjT'‚âÉ {n = n} l) j')) i)
-- -- -- --         (Œª i f ‚Üí to-loop n k i (f ‚àò' ua-ungluePathExt (adjT'‚âÉ {n = n} k) i))
-- -- -- --  to-comp-eq n k l j i f =
-- -- -- --    eq// {a = f ‚àò' {!!}}
-- -- -- --         {b = f ‚àò' {!!}}
-- -- -- --         {!!}
-- -- -- --         i

-- -- -- -- -- --  to-comp' : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- --       SquareP (Œª j i ‚Üí (ùîΩin {n = n} (ùï°comp k l i j) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n)
-- -- -- -- -- --         (to-looop n k l)
-- -- -- -- -- --         (Œª i f ‚Üí to-loop n k i (f ‚àò' ua-ungluePathExt (adjT'‚âÉ {n = n} k) i))
-- -- -- -- -- --         -- Œª i f ‚Üí eq// {a = f ‚àò' adjT n k} {f}
-- -- -- -- -- --         --   (isTrans-[]‚Üî n (f ‚àò' adjT n k) (f ‚àò' adjT n l)
-- -- -- -- -- --         --           f
-- -- -- -- -- --         --      (ùï°looop k l , Œª j' ‚Üí f ‚àò' unglueFlooopPathExt n k l j')
-- -- -- -- -- --         --      (ùï°loop l , Œª j' ‚Üí f ‚àò' ua-ungluePathExt (adjT'‚âÉ {n = n} l) j')) i
-- -- -- -- -- --         (Œª j f ‚Üí [ f ‚àò ua-gluePathExt (adjT'‚âÉ {n = n} k) j ]//)
-- -- -- -- -- --         (to-loop n l)
-- -- -- -- -- --  to-comp' n k l = 
-- -- -- -- -- --     (Œª j i f ‚Üí 
-- -- -- -- -- --    comp//
-- -- -- -- -- --     (ùï°looop k l , Œª j' ‚Üí f ‚àò' ss* n k l i j' j)
-- -- -- -- -- --     (ùï°loop l , Œª j' ‚Üí f ‚àò' ss** n k l i j' j) j i)
-- -- -- -- -- --     ‚ñ∑ to-comp-eq n k l


-- -- -- -- -- -- --  ploop‚àß : ‚àÄ n k ‚Üí SquareP (Œª z j ‚Üí (a : ùîΩin {n = n} (ùï°loop k (j ‚àß z))) ‚Üí
-- -- -- -- -- -- --                            ùîΩin {n = n} (ùï°loop k j))
-- -- -- -- -- -- --                   (ua-gluePathExt (adjT'‚âÉ {n = n} k))
-- -- -- -- -- -- --                   (Œª _ ‚Üí idfun _)
-- -- -- -- -- -- --                   refl
-- -- -- -- -- -- --                   (ua-ungluePathExt (adjT'‚âÉ {n = n} k))
-- -- -- -- -- -- --  ploop‚àß n k =
-- -- -- -- -- -- --     (isSet‚ÜíSquareP (Œª z j ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°loop k j))))
-- -- -- -- -- -- --             _ _ _ _)

-- -- -- -- -- -- --  to-comp : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- --       SquareP (Œª j i ‚Üí (ùîΩin {n = n} (ùï°comp k l j i) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n)
-- -- -- -- -- -- --       (to-loop n k)
-- -- -- -- -- -- --       (to-loop n l) (to-looop n k l) refl
-- -- -- -- -- -- --  to-comp n k l i j f =   
-- -- -- -- -- -- --    hcomp
-- -- -- -- -- -- --      (Œª z ‚Üí
-- -- -- -- -- -- --       Œª { (i = i0) ‚Üí to-loop n k (j ‚àß z) (f ‚àò ploop‚àß n k z j)
-- -- -- -- -- -- --         ; (i = i1) ‚Üí to-comp' n k l j i f 
-- -- -- -- -- -- --         ; (j = i0) ‚Üí to-comp' n k l j i f
-- -- -- -- -- -- --         ; (j = i1) ‚Üí {!!} --to-comp' n k l (i ‚à® z) j f
-- -- -- -- -- -- --         })
-- -- -- -- -- -- --      (to-comp' n k l j i f)
 

-- -- -- -- -- -- -- --  zz-to-comm : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) (x' : A.commT (fst k) (fst l))
-- -- -- -- -- -- -- --                   ‚Üí SquareP (Œª i j' ‚Üí
-- -- -- -- -- -- -- --                    PathP (Œª j ‚Üí ùîΩin {n} (ùï°comm k l x' j' j)
-- -- -- -- -- -- -- --                                ‚Üí ùîΩin {n} (ùï°comm k l x' i j))
-- -- -- -- -- -- -- --                      (zz-alooop n k l j' i)
-- -- -- -- -- -- -- --                      (zz-alooop n l k j' i))
-- -- -- -- -- -- -- --                 {refl} {sym (funExt (adjT-comm n k l x'))}
-- -- -- -- -- -- -- --                 (isSet‚ÜíSquareP (Œª i j' ‚Üí (isSet‚Üí (isSetFin {n = n})))
-- -- -- -- -- -- -- --                       _ _ _ _)
-- -- -- -- -- -- -- --                 {funExt (adjT-comm n k l x')}
-- -- -- -- -- -- -- --                 {refl}
-- -- -- -- -- -- -- --                 (isSet‚ÜíSquareP (Œª i j' ‚Üí (isSet‚Üí (isSetFin {n = n})))
-- -- -- -- -- -- -- --                       _ _ _ _)
-- -- -- -- -- -- -- --                 (isSet‚ÜíSquareP (Œª i j ‚Üí
-- -- -- -- -- -- -- --                    isSet‚Üí (snd (ùîΩinH n (ùï°comm k l x' i j))))
-- -- -- -- -- -- -- --                     _ _ _ _)
-- -- -- -- -- -- -- --                 (isSet‚ÜíSquareP (Œª i j ‚Üí
-- -- -- -- -- -- -- --                    isSet‚Üí (snd (ùîΩinH n (ùï°comm k l x' i j))))
-- -- -- -- -- -- -- --                     _ _ _ _)
-- -- -- -- -- -- -- --  zz-to-comm n k l x' = 
-- -- -- -- -- -- -- --   isSet‚ÜíSquareP (Œª i j' ‚Üí isOfHLevelPathP 2
-- -- -- -- -- -- -- --      (isSet‚Üí (snd (ùîΩinH n (ùï°comm k l x' i i1)))) _ _)
-- -- -- -- -- -- -- --            _ _ _ _

-- -- -- -- -- -- -- --  to-comm : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n))
-- -- -- -- -- -- -- --    (x : A.commT (fst k) (fst l)) ‚Üí
-- -- -- -- -- -- -- --    SquareP (Œª i j ‚Üí (ùîΩin {n} (ùï°comm k l x i j) ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n) refl
-- -- -- -- -- -- -- --    refl (to-looop n k l) (to-looop n l k)
-- -- -- -- -- -- -- --  to-comm n k l x' i j f =
-- -- -- -- -- -- -- --    eq// ((Œª i ‚Üí ùï°comm k l x' i j) ,
-- -- -- -- -- -- -- --      Œª j' ‚Üí f ‚àò zz-to-comm n k l x' i j' j) i

-- -- -- -- -- -- -- --  to : ‚àÄ n ‚Üí Rùï°elim {n = n} (Œª z ‚Üí (y : ùîΩin z ‚Üí A) ‚Üí Fin‚Üí/‚Üî A n)
-- -- -- -- -- -- -- --  Rùï°elim.isGroupoidA (to n) _ = isGroupoidŒ† Œª _ ‚Üí squash//
-- -- -- -- -- -- -- --  Rùï°elim.abase (to n) = [_]//
-- -- -- -- -- -- -- --  Rùï°elim.aloop (to n) = to-loop n  


-- -- -- -- -- -- -- --  Rùï°elim.alooop (to n) = to-looop n

-- -- -- -- -- -- -- --  Rùï°elim.acomp (to n) k l =
-- -- -- -- -- -- -- --    {!!}
-- -- -- -- -- -- -- --    -- hcomp (Œª z ‚Üí
-- -- -- -- -- -- -- --    --    Œª { (i = i0) ‚Üí {!to-invol n k (~ z) i!}
-- -- -- -- -- -- -- --    --      ; (i = i1) ‚Üí to-loop n l j p 
-- -- -- -- -- -- -- --    --      ; (j = i0) ‚Üí to-looop n k l i p
-- -- -- -- -- -- -- --    --      ; (j = i1) ‚Üí {!!}
-- -- -- -- -- -- -- --    --      })
-- -- -- -- -- -- -- --    --   (comp// {a = {!!}} {b = {!!}} {c = {!!}}
-- -- -- -- -- -- -- --    --       ((ùï°looop k l) ,
-- -- -- -- -- -- -- --    --         {!!}) {!!} j i)
-- -- -- -- -- -- -- --    -- -- {!comp// {a = ?} {?} {?} ? ? i  !}
-- -- -- -- -- -- -- --  Rùï°elim.ainvol (to n) = to-invol n
-- -- -- -- -- -- -- --  Rùï°elim.acomm (to n) = to-comm n
-- -- -- -- -- -- -- --  Rùï°elim.abraid (to n) = {!!}
 
-- -- -- -- -- -- -- -- --  from : ‚àÄ n ‚Üí Fin‚Üí/‚Üî A n ‚Üí ùîΩin‚Üí A n
-- -- -- -- -- -- -- -- --  from n = GQ.Rrec.f w
-- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- --   w : Rrec// (ùîΩin‚Üí A n)
-- -- -- -- -- -- -- -- --   Rrec//.Bgpd w = isGroupoidŒ£ùîΩin‚Üí n
    
-- -- -- -- -- -- -- -- --   Rrec//.fb w = ùï°base ,_
-- -- -- -- -- -- -- -- --   Rrec//.feq w = Œ£PathP
-- -- -- -- -- -- -- -- --   Rrec//.fsq w (p , P) (q , Q) =
-- -- -- -- -- -- -- -- --     Œ£SquareP ((compPath-filler _ _) ,
-- -- -- -- -- -- -- -- --       compPathP'-filler
-- -- -- -- -- -- -- -- --         {B = Œª x ‚Üí ùîΩin x ‚Üí A} {p = p} {q = q} P Q)


-- -- -- -- -- -- -- -- --  ss''k :  ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- --    (a : Fin n ‚Üí A) ‚Üí
-- -- -- -- -- -- -- -- --         (Œª i ‚Üí to-loop n k i (‚Üîk'P A n a k i))  ‚â° eq// (‚Üîk n k a)

-- -- -- -- -- -- -- -- --  ss''k n k a j i = 
-- -- -- -- -- -- -- -- --     eq// {a = a ‚àò ungluePathAdjT' n k (~ j ‚àß i)
-- -- -- -- -- -- -- -- --            ‚àò ua-gluePathExt (adjT'‚âÉ {n = n} k) (~ j ‚àß i)}
-- -- -- -- -- -- -- -- --          {b = a ‚àò ungluePathAdjT' n k (j ‚à®  i)
-- -- -- -- -- -- -- -- --                  ‚àò Œª x ‚Üí
-- -- -- -- -- -- -- -- --                    ua-gluePath (adjT'‚âÉ {n = n} k)
-- -- -- -- -- -- -- -- --                      (isInvolution-adjT n k x) (j ‚à® i) }
-- -- -- -- -- -- -- -- --           (ùï°loop k , Œª j' x ‚Üí a (ccc i j j' x) ) i 
-- -- -- -- -- -- -- -- --    where

-- -- -- -- -- -- -- -- --      ccc : SquareP (Œª i j ‚Üí PathP
-- -- -- -- -- -- -- -- --                  (Œª j' ‚Üí ùîΩin {n = n} (ùï°loop k j') ‚Üí Fin n)
-- -- -- -- -- -- -- -- --                  (ungluePathAdjT' n k (~ j ‚àß i)
-- -- -- -- -- -- -- -- --                       ‚àò ua-gluePathExt (adjT'‚âÉ {n = n} k) (~ j ‚àß i))
-- -- -- -- -- -- -- -- --                  (ungluePathAdjT' n k (j ‚à®  i)
-- -- -- -- -- -- -- -- --                  ‚àò Œª x ‚Üí
-- -- -- -- -- -- -- -- --                    ua-gluePath (adjT'‚âÉ {n = n} k)
-- -- -- -- -- -- -- -- --                      (isInvolution-adjT n k x) (j ‚à® i) ))
-- -- -- -- -- -- -- -- --                   (isSet‚ÜíSquareP (Œª _ _ ‚Üí isSet‚Üí (isSetFin {n = n})) _ _ _ _)
-- -- -- -- -- -- -- -- --                   (isSet‚ÜíSquareP (Œª _ _ ‚Üí isSet‚Üí (isSetFin {n = n})) _ _ _ _)
-- -- -- -- -- -- -- -- --                   (Œª i j' ‚Üí ungluePathAdjT' n k i ‚àò (zz-aloop n k j' i))
-- -- -- -- -- -- -- -- --                   Œª _ ‚Üí ungluePathAdjT' n k
-- -- -- -- -- -- -- -- --      ccc = isSet‚ÜíSquareP (Œª i j ‚Üí isOfHLevelPathP 2 (isSet‚Üí (isSetFin {n})) _ _)
-- -- -- -- -- -- -- -- --       _ _ _ _

-- -- -- -- -- -- -- -- --  from-to : ‚àÄ n ‚Üí section (uncurry (Rùï°elim.f (to n))) (from n)
-- -- -- -- -- -- -- -- --  from-to n = GQ.RelimSet.f w
-- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- --   w : RelimSet (Œª z ‚Üí uncurry (Rùï°elim.f (to n)) (from n z) ‚â° z)
-- -- -- -- -- -- -- -- --   RelimSet.truncB w _ = squash// _ _
-- -- -- -- -- -- -- -- --   RelimSet.fb w _ = refl
-- -- -- -- -- -- -- -- --   RelimSet.fbEq w = 
-- -- -- -- -- -- -- -- --     uncurry-flip {A = Fin n ‚Üí A}
-- -- -- -- -- -- -- -- --        {C = Œª a a' p ‚Üí PathP (Œª i ‚Üí ùîΩin (p i) ‚Üí A) a a'}
-- -- -- -- -- -- -- -- --        {D = Œª a a' p P ‚Üí
-- -- -- -- -- -- -- -- --         let r : [ n ] a ‚Üî a'
-- -- -- -- -- -- -- -- --             r = (p , P)
-- -- -- -- -- -- -- -- --         in
-- -- -- -- -- -- -- -- --           PathP
-- -- -- -- -- -- -- -- --           (Œª i ‚Üí uncurry (Rùï°elim.f (to n)) (from n (eq// r i)) ‚â° eq// r i)
-- -- -- -- -- -- -- -- --           (Œª _ ‚Üí uncurry (Rùï°elim.f (to n)) (from n [ a ]//))
-- -- -- -- -- -- -- -- --           (Œª _ ‚Üí uncurry (Rùï°elim.f (to n)) (from n [ a' ]//))} 
-- -- -- -- -- -- -- -- --     (ùï°baseŒ©-elimProp n _ (Œª _ ‚Üí isPropŒ†3 Œª _ _ _ ‚Üí
-- -- -- -- -- -- -- -- --           isOfHLevelPathP' 1 (squash// _ _) _ _)
-- -- -- -- -- -- -- -- --       ss' ss'')

-- -- -- -- -- -- -- -- --    where
-- -- -- -- -- -- -- -- --     ss' : (a b : Fin n ‚Üí A) ‚Üí (y : a ‚â° b) ‚Üí
-- -- -- -- -- -- -- -- --           Square {A = (Fin n ‚Üí A) // isTrans-[]‚Üî n}
-- -- -- -- -- -- -- -- --             (Œª j ‚Üí [ a ]//)
-- -- -- -- -- -- -- -- --             (Œª j ‚Üí [ b ]//)
-- -- -- -- -- -- -- -- --             (Œª i ‚Üí [ y i ]//)
-- -- -- -- -- -- -- -- --             (Œª i ‚Üí eq// (refl , y) i)          

-- -- -- -- -- -- -- -- --     ss' a b y i j =
-- -- -- -- -- -- -- -- --               hcomp
-- -- -- -- -- -- -- -- --         (Œª l ‚Üí
-- -- -- -- -- -- -- -- --            Œª { (i = i0) ‚Üí [ a ]//
-- -- -- -- -- -- -- -- --              ; (i = i1) ‚Üí eq// {a = y (l ‚à® j)} {b = b}
-- -- -- -- -- -- -- -- --                         (refl , (Œª j' ‚Üí y (l ‚à® j ‚à® j'))) (~ l)
-- -- -- -- -- -- -- -- --              ; (j = i0) ‚Üí eq// {a = y (i ‚àß l)} {b = b}
-- -- -- -- -- -- -- -- --                                (refl , (Œª j' ‚Üí (y ((i ‚àß l) ‚à®  j')))) (i ‚àß ~ l) 
-- -- -- -- -- -- -- -- --              ; (j = i1) ‚Üí comp// {a = a} {b = b} {c = b}
-- -- -- -- -- -- -- -- --                               (refl , y) (refl , refl) (~ l) i
-- -- -- -- -- -- -- -- --              }) (eq// {a = a} {b = b}
-- -- -- -- -- -- -- -- --                     (compPathRefl j ,  compPathP'-filler 
-- -- -- -- -- -- -- -- --                       {B = Œª x ‚Üí ùîΩin {n = n} x ‚Üí A}
-- -- -- -- -- -- -- -- --                        {p = Œª _ ‚Üí ùï°base {n = n}} {q = refl} y refl
-- -- -- -- -- -- -- -- --                     j) i)
-- -- -- -- -- -- -- -- --     ss'' : (p : Path (‚Ñôrm n) ùï°base ùï°base)
-- -- -- -- -- -- -- -- --       (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- --       ((a a' : Fin n ‚Üí A) (c : PathP (Œª i ‚Üí ùîΩin (p i) ‚Üí A) a a') ‚Üí
-- -- -- -- -- -- -- -- --        PathP
-- -- -- -- -- -- -- -- --        (Œª i ‚Üí
-- -- -- -- -- -- -- -- --           uncurry (Rùï°elim.f (to n)) (from n (eq// (p , c) i)) ‚â°
-- -- -- -- -- -- -- -- --           eq// (p , c) i)
-- -- -- -- -- -- -- -- --        (Œª _ ‚Üí uncurry (Rùï°elim.f (to n)) (from n [ a ]//))
-- -- -- -- -- -- -- -- --        (Œª _ ‚Üí uncurry (Rùï°elim.f (to n)) (from n [ a' ]//))) ‚Üí
-- -- -- -- -- -- -- -- --       (a a' : Fin n ‚Üí A)
-- -- -- -- -- -- -- -- --       (c : PathP (Œª i ‚Üí ùîΩin ((ùï°loop k ‚àô p) i) ‚Üí A) a a') ‚Üí
-- -- -- -- -- -- -- -- --       PathP
-- -- -- -- -- -- -- -- --       (Œª i ‚Üí
-- -- -- -- -- -- -- -- --          uncurry (Rùï°elim.f (to n)) (from n (eq// (ùï°loop k ‚àô p , c) i)) ‚â°
-- -- -- -- -- -- -- -- --          eq// (ùï°loop k ‚àô p , c) i)
-- -- -- -- -- -- -- -- --       (Œª _ ‚Üí uncurry (Rùï°elim.f (to n)) (from n [ a ]//))
-- -- -- -- -- -- -- -- --       (Œª _ ‚Üí uncurry (Rùï°elim.f (to n)) (from n [ a' ]//))


-- -- -- -- -- -- -- -- --     ss'' p k y a b P i j = 
-- -- -- -- -- -- -- -- --        hcomp (Œª z ‚Üí
-- -- -- -- -- -- -- -- --         Œª { (i = i0) ‚Üí [ a ]//
-- -- -- -- -- -- -- -- --           ; (i = i1) ‚Üí (y _ _ (pop‚Üî A n a b p k P)) z j
-- -- -- -- -- -- -- -- --           ; (j = i0) ‚Üí
-- -- -- -- -- -- -- -- --             (_‚ñ∑_ {A = Œª z ‚Üí [ a ]// ‚â°
-- -- -- -- -- -- -- -- --               uncurry (Rùï°elim.f (to n)) (from n
-- -- -- -- -- -- -- -- --                  (eq// (p , (pop‚Üî A n a b p k P)) z))}
-- -- -- -- -- -- -- -- --                (Œª z i ‚Üí
-- -- -- -- -- -- -- -- --                  uncurry (Rùï°elim.f (to n)) (from n
-- -- -- -- -- -- -- -- --                   (comp// (‚Üîk n k a)
-- -- -- -- -- -- -- -- --                     (p , pop‚Üî A n a b p k P) z i)) )
-- -- -- -- -- -- -- -- --                (cong
-- -- -- -- -- -- -- -- --                 (cong‚Ä≤ ((uncurry (Rùï°elim.f (to n))) ‚àò (from n)) ‚àò eq//)
-- -- -- -- -- -- -- -- --                 (sym (pop‚Üîtrans n a b p k P))) ) z i
-- -- -- -- -- -- -- -- --           ; (j = i1) ‚Üí
-- -- -- -- -- -- -- -- --             (comp// (‚Üîk n k a)
-- -- -- -- -- -- -- -- --                     (p , pop‚Üî A n a b p k P)
-- -- -- -- -- -- -- -- --               ‚ñ∑ cong eq// (sym (pop‚Üîtrans n a b p k P)) ) z i
-- -- -- -- -- -- -- -- --           }) (ss''k n k a j i)

-- -- -- -- -- -- -- -- --  to-from : ‚àÄ n ‚Üí retract (uncurry (Rùï°elim.f (to n))) (from n)
-- -- -- -- -- -- -- -- --  to-from n = uncurry (Rùï°elimSet.f w)
-- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- --   w : Rùï°elimSet
-- -- -- -- -- -- -- -- --         (Œª z ‚Üí
-- -- -- -- -- -- -- -- --            (y : ùîΩin z ‚Üí A) ‚Üí
-- -- -- -- -- -- -- -- --            from n (uncurry (Rùï°elim.f (to n)) (z , y)) ‚â° (z , y))
-- -- -- -- -- -- -- -- --   Rùï°elimSet.isSetA w _ = isSetŒ† Œª _ ‚Üí isGroupoidŒ£ùîΩin‚Üí _ _ _
-- -- -- -- -- -- -- -- --   Rùï°elimSet.abase w _ = refl
-- -- -- -- -- -- -- -- --   Rùï°elimSet.aloop w k =
-- -- -- -- -- -- -- -- --     funExtDep Œª p ‚Üí Œ£SquareP ((Œª i j ‚Üí ùï°loop k i) ,
-- -- -- -- -- -- -- -- --          S.congSqP (Œª i j ‚Üí p i ‚àò'_)
-- -- -- -- -- -- -- -- --             (isSet‚ÜíSquareP (Œª i _ ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°loop k i))))
-- -- -- -- -- -- -- -- --               _ _ _ _) )
  
-- -- -- -- -- -- -- -- --   Rùï°elimSet.alooop w k l =
-- -- -- -- -- -- -- -- --      funExtDep Œª p ‚Üí Œ£SquareP ((Œª i j ‚Üí ùï°looop k l i) ,
-- -- -- -- -- -- -- -- --          S.congSqP (Œª i j ‚Üí p i ‚àò'_)
-- -- -- -- -- -- -- -- --             (isSet‚ÜíSquareP (Œª i _ ‚Üí isSet‚Üí (snd (ùîΩinH n (ùï°looop k l i))))
-- -- -- -- -- -- -- -- --               _ _ _ _))

-- -- -- -- -- -- -- -- --  Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî : ‚àÄ n ‚Üí Iso (ùîΩin‚Üí A n) (Fin‚Üí/‚Üî A n)
-- -- -- -- -- -- -- -- --  Iso.fun (Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî n) = uncurry (Rùï°elim.f (to n))
-- -- -- -- -- -- -- -- --  Iso.inv (Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî n) = from n
-- -- -- -- -- -- -- -- --  Iso.rightInv (Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî n) = from-to n
-- -- -- -- -- -- -- -- --  Iso.leftInv (Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî n) = to-from n

-- -- -- -- -- -- -- -- --  -- Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî : Iso (Œ£ _ (ùîΩin‚Üí A)) (Œ£ _ (Fin‚Üí/‚Üî A))
-- -- -- -- -- -- -- -- --  -- Iso.fun Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî = {!!}
-- -- -- -- -- -- -- -- --  -- Iso.inv Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî = {!!}
-- -- -- -- -- -- -- -- --  -- Iso.rightInv Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî = {!!}
-- -- -- -- -- -- -- -- --  -- Iso.leftInv Iso-ùîΩin‚Üí-Fin‚Üí/‚Üî = {!!}




-- -- -- -- -- -- -- -- -- -- Rsuc‚Ñôrm : ‚àÄ n ‚Üí Rùï°rec {n = n} (‚Ñôrm (suc n))
-- -- -- -- -- -- -- -- -- -- Rùï°rec.abase (Rsuc‚Ñôrm n) = ùï°base
-- -- -- -- -- -- -- -- -- -- Rùï°rec.aloop (Rsuc‚Ñôrm n) k = ùï°loop (suc (fst k) , (snd k))
-- -- -- -- -- -- -- -- -- -- Rùï°rec.alooop (Rsuc‚Ñôrm n) k l =
-- -- -- -- -- -- -- -- -- --   ùï°looop _ _
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomp (Rsuc‚Ñôrm n) k l =
-- -- -- -- -- -- -- -- -- --   ùï°comp _ _
-- -- -- -- -- -- -- -- -- -- Rùï°rec.ainvol (Rsuc‚Ñôrm n) k =
-- -- -- -- -- -- -- -- -- --   ùï°invol _
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomm (Rsuc‚Ñôrm n) k l x =
-- -- -- -- -- -- -- -- -- --   ùï°comm _ _ (A.suc-commT (fst k) (fst l) x)
-- -- -- -- -- -- -- -- -- -- Rùï°rec.abraid (Rsuc‚Ñôrm n) k k< =
-- -- -- -- -- -- -- -- -- --   ùï°braid _ _
-- -- -- -- -- -- -- -- -- -- Rùï°rec.asquash (Rsuc‚Ñôrm n) = ùï°squash

-- -- -- -- -- -- -- -- -- -- suc‚Ñôrm : ‚àÄ n ‚Üí ‚Ñôrm n ‚Üí ‚Ñôrm (suc n)
-- -- -- -- -- -- -- -- -- -- suc‚Ñôrm n = Rùï°rec.f {n = n} (Rsuc‚Ñôrm n)

-- -- -- -- -- -- -- -- -- -- fm2base : ‚Ñï ‚Üí FMSet2 Unit
-- -- -- -- -- -- -- -- -- -- fm2base zero = []
-- -- -- -- -- -- -- -- -- -- fm2base (suc x) = _ ‚à∑2 (fm2base x)

-- -- -- -- -- -- -- -- -- -- fm2loop : ‚àÄ n ‚Üí ‚Ñï ‚Üí fm2base n ‚â° fm2base n
-- -- -- -- -- -- -- -- -- -- fm2loop (suc n) (suc x) = cong (tt ‚à∑2_) (fm2loop n x)
-- -- -- -- -- -- -- -- -- -- fm2loop zero x = refl
-- -- -- -- -- -- -- -- -- -- fm2loop (suc zero) zero = refl
-- -- -- -- -- -- -- -- -- -- fm2loop (suc (suc n)) zero = comm _ _ _

-- -- -- -- -- -- -- -- -- -- RtoFM2‚ä§ : ‚àÄ n ‚Üí Rùï°rec {n = n} (FMSet2 Unit)
-- -- -- -- -- -- -- -- -- -- Rùï°rec.abase (RtoFM2‚ä§ n) = fm2base n
-- -- -- -- -- -- -- -- -- -- Rùï°rec.aloop (RtoFM2‚ä§ n) (k , _) = fm2loop n k
-- -- -- -- -- -- -- -- -- -- --   cong (tt ‚à∑2_) (Rùï°rec.aloop (RtoFM2‚ä§ n) (k , k<) )
-- -- -- -- -- -- -- -- -- -- -- Rùï°rec.aloop (RtoFM2‚ä§ (suc (suc n))) (zero , k<) = comm _ _ _

-- -- -- -- -- -- -- -- -- -- Rùï°rec.alooop (RtoFM2‚ä§ n) (zero , k<) (zero , l<) = refl
-- -- -- -- -- -- -- -- -- -- Rùï°rec.alooop (RtoFM2‚ä§ (suc n)) (suc k , k<) (suc l , l<) =
-- -- -- -- -- -- -- -- -- --     cong (tt ‚à∑2_) (Rùï°rec.alooop (RtoFM2‚ä§ n) (k , k<) (l , l<))
-- -- -- -- -- -- -- -- -- -- Rùï°rec.alooop (RtoFM2‚ä§ (suc (suc n))) (zero , k<) (suc (suc l) , l<) i =
-- -- -- -- -- -- -- -- -- --   comm _ _ (Rùï°rec.aloop (RtoFM2‚ä§ n) (l , l<) (~ i)) (i)
-- -- -- -- -- -- -- -- -- -- Rùï°rec.alooop (RtoFM2‚ä§ (suc (suc n))) (suc (suc k) , k<) (zero , l<) i =
-- -- -- -- -- -- -- -- -- --   comm _ _ (Rùï°rec.aloop (RtoFM2‚ä§ n) (k , k<) i) (~ i)
  
-- -- -- -- -- -- -- -- -- -- Rùï°rec.alooop (RtoFM2‚ä§ (suc (suc (suc n)))) (zero , k<) (suc zero , l<) =
-- -- -- -- -- -- -- -- -- --   sym (commmR _ _ _ _)  
-- -- -- -- -- -- -- -- -- -- Rùï°rec.alooop (RtoFM2‚ä§ (suc (suc (suc n)))) (suc zero , k<) (zero , l<) =
-- -- -- -- -- -- -- -- -- --   commmL _ _ _ _
  
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomp (RtoFM2‚ä§ (suc n)) (zero , k<) (zero , l<) i j =
-- -- -- -- -- -- -- -- -- --   Rùï°rec.aloop (RtoFM2‚ä§ (suc n)) (0 , isProp‚â§ {m = 1} {n = n} k< l< i) j
 
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomp (RtoFM2‚ä§ (suc (suc (suc n)))) (zero , k<) (suc zero , l<) =
-- -- -- -- -- -- -- -- -- --    symP (commpR tt tt tt (fm2base n))
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomp (RtoFM2‚ä§ (suc (suc (suc n)))) (zero , k<) (suc (suc l) , l<) i j =
-- -- -- -- -- -- -- -- -- --   comm _ _ ((Rùï°rec.aloop (RtoFM2‚ä§ (suc n)) (l , l<) (~ i ‚à® j))) (i ‚à® j)
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomp (RtoFM2‚ä§ (suc (suc (suc n)))) (suc zero , k<) (zero , l<) =
-- -- -- -- -- -- -- -- -- --    (Œª j i ‚Üí tt ‚à∑2 comm-inv tt tt (fm2base n) j i)
-- -- -- -- -- -- -- -- -- --     ‚óÅ congP (Œª _ ‚Üí symP-fromGoal) (commpL tt tt tt (fm2base n)) ‚ñ∑
-- -- -- -- -- -- -- -- -- --      Œª j i ‚Üí comm-inv tt tt (tt ‚à∑2 fm2base n) (~ j) i
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomp (RtoFM2‚ä§ (suc (suc (suc n)))) (suc (suc k) , k<) (zero , l<) i j =
-- -- -- -- -- -- -- -- -- --     comm _ _ (Rùï°rec.aloop (RtoFM2‚ä§ (suc n)) (k , k<) (i ‚à® j)) (~ i ‚à®  j)

-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomp (RtoFM2‚ä§ (suc n)) (suc k , k<) (suc l , l<) i j = 
-- -- -- -- -- -- -- -- -- --  tt ‚à∑2 Rùï°rec.acomp (RtoFM2‚ä§ n) (k , k<) (l , l<) i j
 
-- -- -- -- -- -- -- -- -- -- Rùï°rec.ainvol (RtoFM2‚ä§ (suc (suc n))) (zero , k<) = comm-inv _ _ _
-- -- -- -- -- -- -- -- -- -- Rùï°rec.ainvol (RtoFM2‚ä§ (suc (suc (suc n)))) (suc k , k<) =
-- -- -- -- -- -- -- -- -- --   cong (cong (tt  ‚à∑2_)) (Rùï°rec.ainvol (RtoFM2‚ä§ (suc (suc n))) (k , k<))
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomm (RtoFM2‚ä§ (suc (suc (suc n)))) (zero , k<) (suc (suc l) , l<) x i j =
-- -- -- -- -- -- -- -- -- --   comm-inv tt tt
-- -- -- -- -- -- -- -- -- --     (Rùï°rec.ainvol (RtoFM2‚ä§ (suc n)) (l , l<) (~ j) i) (~ j) (~ i)
-- -- -- -- -- -- -- -- -- -- Rùï°rec.acomm (RtoFM2‚ä§ (suc n)) (suc k , k<) (suc l , l<) x i j = 
-- -- -- -- -- -- -- -- -- --   tt ‚à∑2 Rùï°rec.acomm (RtoFM2‚ä§ (n)) (k , k<) (l , l<)
-- -- -- -- -- -- -- -- -- --     (A.pred-commT k l x) i j

-- -- -- -- -- -- -- -- -- -- Rùï°rec.abraid (RtoFM2‚ä§ (suc (suc (suc n)))) zero k< =
-- -- -- -- -- -- -- -- -- --   flipSquare
-- -- -- -- -- -- -- -- -- --     ( (Œª i j ‚Üí commmL‚â°R tt tt tt (fm2base n) (~ i)  (~ j))
-- -- -- -- -- -- -- -- -- --       ‚óÅ ((flipSquare (symP-fromGoal (hex tt tt tt (fm2base n))))))

-- -- -- -- -- -- -- -- -- -- Rùï°rec.abraid (RtoFM2‚ä§ (suc (suc (suc (suc n))))) (suc k) k< i j =
-- -- -- -- -- -- -- -- -- --  tt ‚à∑2 Rùï°rec.abraid (RtoFM2‚ä§ (suc (suc (suc n)))) k k< i j
-- -- -- -- -- -- -- -- -- -- Rùï°rec.asquash (RtoFM2‚ä§ n) = trunc


-- -- -- -- -- -- -- -- -- -- toFM2‚ä§ : Œ£ _ ‚Ñôrm ‚Üí FMSet2 Unit
-- -- -- -- -- -- -- -- -- -- toFM2‚ä§ x = Rùï°rec.f {n = (fst x)} (RtoFM2‚ä§ (fst x)) (snd x)


-- -- -- -- -- -- -- -- -- -- comp0 : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- -- --      Square
-- -- -- -- -- -- -- -- -- --        (ùï°looop {n = suc (suc n)}(zero , tt) (suc (suc (fst k)) , snd k))
-- -- -- -- -- -- -- -- -- --        (ùï°loop (zero , tt))
-- -- -- -- -- -- -- -- -- --        (sym (ùï°loop (suc (suc (fst k)) , snd k)))
-- -- -- -- -- -- -- -- -- --        refl
-- -- -- -- -- -- -- -- -- -- comp0 n k i j =
-- -- -- -- -- -- -- -- -- --   hcomp
-- -- -- -- -- -- -- -- -- --     (Œª l ‚Üí Œª {
-- -- -- -- -- -- -- -- -- --        (i = i0) ‚Üí ùï°comm (zero , tt) (suc (suc (fst k)) , snd k) _ j (~ l)
-- -- -- -- -- -- -- -- -- --      ; (i = i1) ‚Üí ùï°loop (zero , tt) (j ‚àß l)
-- -- -- -- -- -- -- -- -- --      ; (j = i0) ‚Üí ùï°invol (suc (suc (fst k)) , snd k) l i
-- -- -- -- -- -- -- -- -- --      ; (j = i1) ‚Üí ùï°loop (0 , tt) (~ i ‚à® l)
-- -- -- -- -- -- -- -- -- --      }) ((ùï°comp (suc (suc (fst k)) , snd k) (zero , tt) ‚ñ∑ ùï°invol (zero , tt)) j i)

-- -- -- -- -- -- -- -- -- -- comp1 : ‚àÄ n ‚Üí (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- -- --      Square
-- -- -- -- -- -- -- -- -- --        (ùï°looop {n = n} k l)
-- -- -- -- -- -- -- -- -- --        (ùï°loop k)
-- -- -- -- -- -- -- -- -- --        refl
-- -- -- -- -- -- -- -- -- --        (ùï°loop l)
-- -- -- -- -- -- -- -- -- -- comp1 n k l i j =
-- -- -- -- -- -- -- -- -- --   hcomp
-- -- -- -- -- -- -- -- -- --     (Œª l' ‚Üí Œª {
-- -- -- -- -- -- -- -- -- --        (i = i0) ‚Üí (ùï°looop {n = n} k l) j
-- -- -- -- -- -- -- -- -- --      ; (i = i1) ‚Üí (ùï°loop k) (j ‚à® ~ l')
-- -- -- -- -- -- -- -- -- --      ; (j = i0) ‚Üí ùï°loop k (~ l' ‚àß i)
-- -- -- -- -- -- -- -- -- --      ; (j = i1) ‚Üí (ùï°loop l) i
-- -- -- -- -- -- -- -- -- --      }) ((ùï°comp {n = n} k l) j i)


-- -- -- -- -- -- -- -- -- -- aloopcommm : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- -- --       PathP
-- -- -- -- -- -- -- -- -- --       (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- --          suc‚Ñôrm (suc n) (suc‚Ñôrm n (ùï°loop k i)) ‚â°
-- -- -- -- -- -- -- -- -- --          suc‚Ñôrm (suc n) (suc‚Ñôrm n (ùï°loop k i)))
-- -- -- -- -- -- -- -- -- --       (ùï°loop (zero , tt)) (ùï°loop (zero , tt)) 
-- -- -- -- -- -- -- -- -- -- aloopcommm n (k , k<) i j =
-- -- -- -- -- -- -- -- -- --      hcomp (Œª l ‚Üí Œª {
-- -- -- -- -- -- -- -- -- --     (i = i0) ‚Üí comp0 n (k , k<) l j
-- -- -- -- -- -- -- -- -- --    ;(i = i1) ‚Üí comp1 (suc (suc n)) (zero , _) (suc (suc k) , k<) l j
-- -- -- -- -- -- -- -- -- --    ;(j = i0) ‚Üí ùï°loop (suc (suc k) , k<) (i ‚à® ~ l)
-- -- -- -- -- -- -- -- -- --    ;(j = i1) ‚Üí ùï°loop (suc (suc k) , k<) (i ‚àß l)
-- -- -- -- -- -- -- -- -- --    }) (ùï°looop (zero , _) (suc (suc k) , k<) j)

-- -- -- -- -- -- -- -- -- -- fromFM2comm-diag : ‚àÄ n ‚Üí ‚àÄ l l< ‚Üí Square {A = ‚Ñôrm (2 + n)}
-- -- -- -- -- -- -- -- -- --        (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- --          aloopcommm n (l , l<) (~ i) i)
-- -- -- -- -- -- -- -- -- --       (ùï°looop (zero , _) (suc (suc l) , l<))
-- -- -- -- -- -- -- -- -- --       refl
-- -- -- -- -- -- -- -- -- --       refl
-- -- -- -- -- -- -- -- -- -- fromFM2comm-diag n l l< =
-- -- -- -- -- -- -- -- -- --   symP-fromGoal (compPath-filler (ùï°looop (zero , _) (suc (suc l) , l<)) refl)

-- -- -- -- -- -- -- -- -- -- fromFM2comm-diag' : ‚àÄ n ‚Üí ‚àÄ l l< ‚Üí Square {A = ‚Ñôrm (2 + n)}
-- -- -- -- -- -- -- -- -- --        (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- --          aloopcommm n (l , l<) (i) (~ i))
-- -- -- -- -- -- -- -- -- --       (ùï°looop (suc (suc l) , l<) (zero , _))
-- -- -- -- -- -- -- -- -- --       refl
-- -- -- -- -- -- -- -- -- --       refl
-- -- -- -- -- -- -- -- -- -- fromFM2comm-diag' n k k< =
-- -- -- -- -- -- -- -- -- --   congP (Œª _ ‚Üí sym) (fromFM2comm-diag n k k<) ‚àô
-- -- -- -- -- -- -- -- -- --    sym (ùï°looop-invol _ _ _)





-- -- -- -- -- -- -- -- -- -- fromFM2comm : (n : ‚Ñï) ‚Üí Rùï°elimSet {n = n} (Œª (y : ‚Ñôrm n) ‚Üí
-- -- -- -- -- -- -- -- -- --       (suc‚Ñôrm (suc n) (suc‚Ñôrm n y)) ‚â°
-- -- -- -- -- -- -- -- -- --       (suc‚Ñôrm (suc n) (suc‚Ñôrm n y)))
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.isSetA (fromFM2comm n) _ = ùï°squash _ _
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.abase (fromFM2comm n) = ùï°loop (zero , _)
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.aloop (fromFM2comm n) = aloopcommm n
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (fromFM2comm n) k l i j =
-- -- -- -- -- -- -- -- -- --  hcomp
-- -- -- -- -- -- -- -- -- --    (Œª l' ‚Üí Œª {
-- -- -- -- -- -- -- -- -- --      (i = i0) ‚Üí aloopcommm n k (~ l') j
-- -- -- -- -- -- -- -- -- --     ;(i = i1) ‚Üí aloopcommm n l (~ l') j
-- -- -- -- -- -- -- -- -- --     ;(j = i0) ‚Üí suc‚Ñôrm (suc n) (suc‚Ñôrm n (ùï°comp k l i (~ l')))
-- -- -- -- -- -- -- -- -- --     ;(j = i1) ‚Üí suc‚Ñôrm (suc n) (suc‚Ñôrm n (ùï°comp k l i (~ l')))
-- -- -- -- -- -- -- -- -- --      }) (ùï°loop (zero , tt) j)


-- -- -- -- -- -- -- -- -- -- fromFM2comm-inv : (n : ‚Ñï) ‚Üí Rùï°elimProp {n = n}
-- -- -- -- -- -- -- -- -- --   (Œª (p : ‚Ñôrm n) ‚Üí
-- -- -- -- -- -- -- -- -- --      Rùï°elimSet.f (fromFM2comm n) p
-- -- -- -- -- -- -- -- -- --   ‚â° sym (Rùï°elimSet.f (fromFM2comm n) p))
-- -- -- -- -- -- -- -- -- -- Rùï°elimProp.isPropA (fromFM2comm-inv n) _ = ùï°squash _ _ _ _
-- -- -- -- -- -- -- -- -- -- Rùï°elimProp.abase (fromFM2comm-inv n) = ùï°invol _

-- -- -- -- -- -- -- -- -- -- -- fromFM2commmL : (n : ‚Ñï) ‚Üí Rùï°elimSet {n = n} (Œª (y : ‚Ñôrm n) ‚Üí
-- -- -- -- -- -- -- -- -- -- --       (suc‚Ñôrm (suc (suc n)) (suc‚Ñôrm (suc n) (suc‚Ñôrm n y))) ‚â°
-- -- -- -- -- -- -- -- -- -- --       (suc‚Ñôrm (suc (suc n)) (suc‚Ñôrm (suc n) (suc‚Ñôrm n y))))
-- -- -- -- -- -- -- -- -- -- -- Rùï°elimSet.isSetA (fromFM2commmL n) _ = ùï°squash _ _
-- -- -- -- -- -- -- -- -- -- -- Rùï°elimSet.abase (fromFM2commmL n) = sym (ùï°looop (suc zero , _) (zero , _))
-- -- -- -- -- -- -- -- -- -- -- Rùï°elimSet.aloop (fromFM2commmL n) = {!!}
-- -- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (fromFM2commmL n) = {!!}

-- -- -- -- -- -- -- -- -- -- RfromFM2‚ä§' : RElim {A = Unit} Œª xs ‚Üí ‚Ñôrm (len2 xs)
-- -- -- -- -- -- -- -- -- -- RElim.[]* RfromFM2‚ä§' = ùï°base
-- -- -- -- -- -- -- -- -- -- RElim._‚à∑*_ RfromFM2‚ä§' _ = suc‚Ñôrm _
-- -- -- -- -- -- -- -- -- -- RElim.comm* RfromFM2‚ä§' _ _ = (Rùï°elimSet.f (fromFM2comm _))
-- -- -- -- -- -- -- -- -- -- RElim.comm-inv* RfromFM2‚ä§' _ _ = Rùï°elimProp.f (fromFM2comm-inv _)
-- -- -- -- -- -- -- -- -- -- RElim.commmL* RfromFM2‚ä§' _ _ _ p =
-- -- -- -- -- -- -- -- -- --     (sym (cong‚Ä≤ (suc‚Ñôrm _) ((Rùï°elimSet.f (fromFM2comm _)) p)))
-- -- -- -- -- -- -- -- -- --     ‚àô‚àô refl ‚àô‚àô
-- -- -- -- -- -- -- -- -- --     (((Rùï°elimSet.f (fromFM2comm _)) (suc‚Ñôrm _ p)))

-- -- -- -- -- -- -- -- -- -- RElim.commmR* RfromFM2‚ä§' _ _ _ p =
-- -- -- -- -- -- -- -- -- --      cong‚Ä≤ (suc‚Ñôrm _) ((Rùï°elimSet.f (fromFM2comm _)) p)
-- -- -- -- -- -- -- -- -- --     ‚àô‚àô refl ‚àô‚àô
-- -- -- -- -- -- -- -- -- --      (sym ((Rùï°elimSet.f (fromFM2comm _)) (suc‚Ñôrm _ p)))
    
-- -- -- -- -- -- -- -- -- -- RElim.commpL* RfromFM2‚ä§' _ _ _ p =
-- -- -- -- -- -- -- -- -- --   flipSquare (doubleCompPath-filler
-- -- -- -- -- -- -- -- -- --     (sym (cong‚Ä≤ (suc‚Ñôrm _) ((Rùï°elimSet.f (fromFM2comm _)) p))) _ _)
-- -- -- -- -- -- -- -- -- -- RElim.commpR* RfromFM2‚ä§' _ _ _ p =
-- -- -- -- -- -- -- -- -- --   flipSquare (symP-fromGoal (doubleCompPath-filler
-- -- -- -- -- -- -- -- -- --     (cong‚Ä≤ (suc‚Ñôrm _) ((Rùï°elimSet.f (fromFM2comm _)) p)) _ _))
-- -- -- -- -- -- -- -- -- -- RElim.hex* RfromFM2‚ä§' _ _ _ p =
-- -- -- -- -- -- -- -- -- --   {!ùï°braid!}
  
-- -- -- -- -- -- -- -- -- -- -- RElim.hexDiag* RfromFM2‚ä§' _ _ _ p =
-- -- -- -- -- -- -- -- -- -- --       (cong‚Ä≤ (suc‚Ñôrm _) (((Rùï°elimSet.f (fromFM2comm _)) p))
-- -- -- -- -- -- -- -- -- -- --       ‚àô‚àô ((Rùï°elimSet.f (fromFM2comm _)) (suc‚Ñôrm _ p))
-- -- -- -- -- -- -- -- -- -- --       ‚àô‚àô cong‚Ä≤ (suc‚Ñôrm _) (sym ((Rùï°elimSet.f (fromFM2comm _)) p)) )
-- -- -- -- -- -- -- -- -- -- -- RElim.hexU* RfromFM2‚ä§' _ _ _ =
-- -- -- -- -- -- -- -- -- -- --   Rùï°elimProp.f (record { isPropA =
-- -- -- -- -- -- -- -- -- -- --     Œª _ ‚Üí isOfHLevelRetractFromIso 1 (invIso PathP‚Üícomm-Iso)
-- -- -- -- -- -- -- -- -- -- --       (ùï°squash _ _ _ _) ;
-- -- -- -- -- -- -- -- -- -- --     abase = Œª i j ‚Üí
-- -- -- -- -- -- -- -- -- -- --       hcomp (Œª l ‚Üí
-- -- -- -- -- -- -- -- -- -- --         primPOr (~ i) (j ‚à® ~ j) (Œª _ ‚Üí ùï°loop (1 , tt) j)
-- -- -- -- -- -- -- -- -- -- --           Œª _ ‚Üí hcomp
-- -- -- -- -- -- -- -- -- -- --               (Œª l' ‚Üí Œª {
-- -- -- -- -- -- -- -- -- -- --                   (i = i0) ‚Üí ùï°loop (zero , tt) (~ l' ‚àß l)
-- -- -- -- -- -- -- -- -- -- --                  ;(i = i1) ‚Üí ùï°invol (1 , tt) l' l
-- -- -- -- -- -- -- -- -- -- --                  ;(l = i0) ‚Üí ùï°looop (zero , tt) (1 , tt) i
-- -- -- -- -- -- -- -- -- -- --                  ;(l = i1) ‚Üí ùï°loop (zero , tt) (i ‚à® (~ l'))
-- -- -- -- -- -- -- -- -- -- --                  }) (ùï°comp (zero , tt) (1 , tt) i l))
-- -- -- -- -- -- -- -- -- -- --        (ùï°braid zero tt i j) })
  
-- -- -- -- -- -- -- -- -- -- -- RElim.hexL* RfromFM2‚ä§' _ _ _ p =
-- -- -- -- -- -- -- -- -- -- --   symP-fromGoal (doubleCompPath-filler _ _ _)
-- -- -- -- -- -- -- -- -- -- RElim.trunc* RfromFM2‚ä§' _ = ùï°squash

-- -- -- -- -- -- -- -- -- -- fromFM2‚ä§ : FMSet2 Unit ‚Üí Œ£ ‚Ñï ‚Ñôrm
-- -- -- -- -- -- -- -- -- -- fromFM2‚ä§ xs = (len2 xs) , (RElim.f RfromFM2‚ä§' xs )


-- -- -- -- -- -- -- -- -- -- Rsuc‚Ñôrm-lem : ‚àÄ n ‚Üí Rùï°elimSet {n = n}
-- -- -- -- -- -- -- -- -- --   Œª p ‚Üí toFM2‚ä§ (suc n , suc‚Ñôrm n p) ‚â° tt ‚à∑2 toFM2‚ä§ (n , p)
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.isSetA (Rsuc‚Ñôrm-lem n) _ = trunc _ _
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.abase (Rsuc‚Ñôrm-lem n) = refl
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.aloop (Rsuc‚Ñôrm-lem n) k _ = refl
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (Rsuc‚Ñôrm-lem n) k l _ = refl

-- -- -- -- -- -- -- -- -- -- suc‚Ñôrm-lem : ‚àÄ n p ‚Üí toFM2‚ä§ (suc n , suc‚Ñôrm n p) ‚â° tt ‚à∑2 toFM2‚ä§ (n , p)
-- -- -- -- -- -- -- -- -- -- suc‚Ñôrm-lem n = Rùï°elimSet.f (Rsuc‚Ñôrm-lem n)

-- -- -- -- -- -- -- -- -- -- comm*-lem : ‚àÄ n ‚Üí Rùï°elimProp {n = n}
-- -- -- -- -- -- -- -- -- --                (Œª p ‚Üí Square {A = FMSet2 Unit}
-- -- -- -- -- -- -- -- -- --         (suc‚Ñôrm-lem (suc n) (suc‚Ñôrm n p) ‚àô cong‚Ä≤ (tt ‚à∑2_) (suc‚Ñôrm-lem n p))
-- -- -- -- -- -- -- -- -- --         (suc‚Ñôrm-lem (suc n) (suc‚Ñôrm n p) ‚àô cong‚Ä≤ (tt ‚à∑2_) (suc‚Ñôrm-lem n p))
-- -- -- -- -- -- -- -- -- --         (Œª i ‚Üí toFM2‚ä§ (suc (suc n) , (Rùï°elimSet.f {n = n} (fromFM2comm n)) p i))
-- -- -- -- -- -- -- -- -- --         (comm tt tt (toFM2‚ä§ (n , p))))
-- -- -- -- -- -- -- -- -- -- Rùï°elimProp.isPropA (comm*-lem n) _ =
-- -- -- -- -- -- -- -- -- --    isOfHLevelRetractFromIso 1 (invIso PathP‚Üícomm-Iso) (trunc _ _ _ _)
-- -- -- -- -- -- -- -- -- -- Rùï°elimProp.abase (comm*-lem n) i = refl ‚àô‚àô refl ‚àô‚àô refl

-- -- -- -- -- -- -- -- -- -- RfromToFM2‚ä§ : RElimSet' (Œª z ‚Üí toFM2‚ä§ (fromFM2‚ä§ z) ‚â° z) 
-- -- -- -- -- -- -- -- -- -- RElimSet'.[]* RfromToFM2‚ä§ = refl
-- -- -- -- -- -- -- -- -- -- (RfromToFM2‚ä§ RElimSet'.‚à∑* tt) {xs} X =
-- -- -- -- -- -- -- -- -- --   uncurry suc‚Ñôrm-lem (fromFM2‚ä§ xs) ‚àô cong (tt ‚à∑2_) X
  
-- -- -- -- -- -- -- -- -- -- RElimSet'.comm* RfromToFM2‚ä§ tt tt {xs} X i j =
-- -- -- -- -- -- -- -- -- --  hcomp
-- -- -- -- -- -- -- -- -- --    (Œª l ‚Üí primPOr (j ‚à® ~ j) ((i ‚à® ~ i))
-- -- -- -- -- -- -- -- -- --       (primPOr j (~ j) (Œª _ ‚Üí comm tt tt (X l) i)
-- -- -- -- -- -- -- -- -- --         Œª _ ‚Üí toFM2‚ä§ (fromFM2‚ä§ (comm tt tt xs i)))
-- -- -- -- -- -- -- -- -- --       Œª _ ‚Üí (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (tt ‚à∑2 xs)) ‚àô
-- -- -- -- -- -- -- -- -- --          cong‚Ä≤ (tt ‚à∑2_) (compPath-filler (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ xs))
-- -- -- -- -- -- -- -- -- --                     (cong‚Ä≤ (tt ‚à∑2_) X) l)) j)

-- -- -- -- -- -- -- -- -- --   (Rùï°elimProp.f {n = (fst (fromFM2‚ä§ xs))}
-- -- -- -- -- -- -- -- -- --     (comm*-lem (fst (fromFM2‚ä§ xs))) (snd (fromFM2‚ä§ xs)) i j)

-- -- -- -- -- -- -- -- -- -- -- RElimSet.hexDiag* RfromToFM2‚ä§ _ _ _ b i j = 
-- -- -- -- -- -- -- -- -- -- --   hcomp
-- -- -- -- -- -- -- -- -- -- --     (Œª l ‚Üí Œª {
-- -- -- -- -- -- -- -- -- -- --       (i = i0) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- --      ;(i = i1) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- --      ;(j = i0) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- --      ;(j = i1) ‚Üí hexDiag _ _ _ (b l) i
-- -- -- -- -- -- -- -- -- -- --        })
-- -- -- -- -- -- -- -- -- -- --     {!!}

-- -- -- -- -- -- -- -- -- -- -- i = i0 ‚ä¢ (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (y ‚à∑2 z ‚à∑2 xs)) ‚àô
-- -- -- -- -- -- -- -- -- -- --           (Œª i‚ÇÅ ‚Üí
-- -- -- -- -- -- -- -- -- -- --              tt ‚à∑2
-- -- -- -- -- -- -- -- -- -- --              (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (z ‚à∑2 xs)) ‚àô
-- -- -- -- -- -- -- -- -- -- --               (Œª i‚ÇÇ ‚Üí
-- -- -- -- -- -- -- -- -- -- --                  tt ‚à∑2 (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ xs) ‚àô (Œª i‚ÇÉ ‚Üí tt ‚à∑2 b i‚ÇÉ)) i‚ÇÇ))
-- -- -- -- -- -- -- -- -- -- --              i‚ÇÅ))
-- -- -- -- -- -- -- -- -- -- --          j
-- -- -- -- -- -- -- -- -- -- -- i = i1 ‚ä¢ (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (y ‚à∑2 x ‚à∑2 xs)) ‚àô
-- -- -- -- -- -- -- -- -- -- --           (Œª i‚ÇÅ ‚Üí
-- -- -- -- -- -- -- -- -- -- --              tt ‚à∑2
-- -- -- -- -- -- -- -- -- -- --              (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ (x ‚à∑2 xs)) ‚àô
-- -- -- -- -- -- -- -- -- -- --               (Œª i‚ÇÇ ‚Üí
-- -- -- -- -- -- -- -- -- -- --                  tt ‚à∑2 (uncurry suc‚Ñôrm-lem (fromFM2‚ä§ xs) ‚àô (Œª i‚ÇÉ ‚Üí tt ‚à∑2 b i‚ÇÉ)) i‚ÇÇ))
-- -- -- -- -- -- -- -- -- -- --              i‚ÇÅ))
-- -- -- -- -- -- -- -- -- -- --          j
-- -- -- -- -- -- -- -- -- -- -- j = i0 ‚ä¢ toFM2‚ä§ (fromFM2‚ä§ (hexDiag x y z xs i))
-- -- -- -- -- -- -- -- -- -- -- j = i1 ‚ä¢ hexDiag x y z xs i
-- -- -- -- -- -- -- -- -- -- -- b  : toFM2‚ä§ (fromFM2‚ä§ xs) ‚â° xs

-- -- -- -- -- -- -- -- -- -- RElimSet'.trunc* RfromToFM2‚ä§ _ = trunc _ _

-- -- -- -- -- -- -- -- -- -- fromToFM2‚ä§ : retract fromFM2‚ä§ toFM2‚ä§
-- -- -- -- -- -- -- -- -- -- fromToFM2‚ä§ = RElimSet'.f RfromToFM2‚ä§

-- -- -- -- -- -- -- -- -- -- dccf-lem : ‚àÄ {a a' : A} ‚Üí (p : a ‚â° a') ‚Üí
-- -- -- -- -- -- -- -- -- --              Square p p (refl ‚àô‚àô refl ‚àô‚àô refl) refl
-- -- -- -- -- -- -- -- -- -- dccf-lem {a = a} {a'} p i j = 
-- -- -- -- -- -- -- -- -- --    hcomp
-- -- -- -- -- -- -- -- -- --      (Œª l ‚Üí Œª {
-- -- -- -- -- -- -- -- -- --        (i = i0) ‚Üí p j
-- -- -- -- -- -- -- -- -- --       ;(i = i1) ‚Üí p j
-- -- -- -- -- -- -- -- -- --       ;(j = i1) ‚Üí a'
-- -- -- -- -- -- -- -- -- --        })
-- -- -- -- -- -- -- -- -- --      (p j)



-- -- -- -- -- -- -- -- -- -- RtoFromFM2‚ä§-fst : ‚àÄ n ‚Üí Rùï°elimSet {n = n} (Œª z ‚Üí len2 (toFM2‚ä§ (n , z)) ‚â° n)
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.isSetA (RtoFromFM2‚ä§-fst n) _ = isProp‚ÜíisSet (isSet‚Ñï _ _)
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.abase (RtoFromFM2‚ä§-fst zero) = refl
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.abase (RtoFromFM2‚ä§-fst (suc n)) =
-- -- -- -- -- -- -- -- -- --   cong suc (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n))
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (suc n)) (suc k , k<) i j =
-- -- -- -- -- -- -- -- -- --   suc (Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (n)) (k , k<) i j)
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (suc (suc n))) (zero , k<) = refl

-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc n)) (suc k , k<) (suc l , l<) i j =
-- -- -- -- -- -- -- -- -- --   suc (Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst n) (k , k<) (l , l<) i j)
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc n)) (zero , k<) (zero , l<) = refl
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc (suc (suc n)))) (zero , k<) (suc zero , l<) = refl
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc (suc (suc (suc n))))) (zero , k<) (suc (suc l) , l<) i j = suc (suc (Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (suc (suc n))) (l , l<) (~ i) j))
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc (suc (suc n)))) (suc zero , k<) (zero , l<) = refl
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (RtoFromFM2‚ä§-fst (suc (suc (suc (suc n))))) (suc (suc k) , k<) (zero , l<) i j = suc (suc ((Rùï°elimSet.aloop (RtoFromFM2‚ä§-fst (suc (suc n))) (k , k<) i j)))


-- -- -- -- -- -- -- -- -- -- -- -- ‚à∑2-lem-fst : ‚àÄ xs ‚Üí (fromFM2‚ä§ (tt ‚à∑2 xs)) ‚â°
-- -- -- -- -- -- -- -- -- -- -- --    (suc (fst (fromFM2‚ä§ xs)) , uncurry suc‚Ñôrm (fromFM2‚ä§ xs))

-- -- -- -- -- -- -- -- -- -- base‚â° : ‚àÄ n ‚Üí PathP (Œª i ‚Üí ‚Ñôrm (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) i))
-- -- -- -- -- -- -- -- -- --       (RElim.f RfromFM2‚ä§' (fm2base n)) ùï°base
-- -- -- -- -- -- -- -- -- -- base‚â° zero _ = ùï°base
-- -- -- -- -- -- -- -- -- -- base‚â° (suc n) = congP (Œª _ ‚Üí suc‚Ñôrm _) (base‚â° n)



-- -- -- -- -- -- -- -- -- -- loop‚â° : ‚àÄ n ‚Üí (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- -- --       PathP
-- -- -- -- -- -- -- -- -- --       (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- --          PathP (Œª i‚ÇÅ ‚Üí ‚Ñôrm (Rùï°elimSet.f (RtoFromFM2‚ä§-fst n) (ùï°loop k i) i‚ÇÅ))
-- -- -- -- -- -- -- -- -- --          (snd (fromFM2‚ä§ (toFM2‚ä§ (n , ùï°loop k i)))) (ùï°loop k i))
-- -- -- -- -- -- -- -- -- --       (base‚â° n) (base‚â° n)
-- -- -- -- -- -- -- -- -- -- loop‚â° (suc n) (suc k , k<) i j = suc‚Ñôrm _ (loop‚â° n (k , k<) i j) 
-- -- -- -- -- -- -- -- -- -- loop‚â° (suc (suc n)) (zero , k<) i j =
-- -- -- -- -- -- -- -- -- --         (Rùï°elim.f
-- -- -- -- -- -- -- -- -- --           (Rùï°elimSet.fR (fromFM2comm (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j)))
-- -- -- -- -- -- -- -- -- --          ((base‚â° n) j ) i)

-- -- -- -- -- -- -- -- -- -- looop‚â° : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- -- --       PathP
-- -- -- -- -- -- -- -- -- --       (Œª i ‚Üí
-- -- -- -- -- -- -- -- -- --          PathP
-- -- -- -- -- -- -- -- -- --          (Œª i‚ÇÅ ‚Üí ‚Ñôrm (Rùï°elimSet.f (RtoFromFM2‚ä§-fst n) (ùï°looop k l i) i‚ÇÅ))
-- -- -- -- -- -- -- -- -- --                            (snd (fromFM2‚ä§ (toFM2‚ä§ (n , ùï°looop k l i))))
-- -- -- -- -- -- -- -- -- --          (ùï°looop k l i))
-- -- -- -- -- -- -- -- -- --       (base‚â° n) (base‚â° n)
-- -- -- -- -- -- -- -- -- -- looop‚â° (suc n) (suc k , k<) (suc l , l<) i j =
-- -- -- -- -- -- -- -- -- --    suc‚Ñôrm _ (looop‚â° n (k , k<) (l , l<) i j)      
-- -- -- -- -- -- -- -- -- -- looop‚â° (suc (suc n)) (zero , k<) (zero , l<) i j =
-- -- -- -- -- -- -- -- -- --   hcomp (Œª l' ‚Üí primPOr j (i ‚à® ~ i ‚à® ~ j)
-- -- -- -- -- -- -- -- -- --              (Œª _ ‚Üí ùï°comp (zero , _) (zero , _) i (~ l'))
-- -- -- -- -- -- -- -- -- --              Œª _ ‚Üí loop‚â° (suc (suc n)) (zero , _) (~ l') j)
-- -- -- -- -- -- -- -- -- --         (suc‚Ñôrm _ (suc‚Ñôrm _ (base‚â° n j)))
-- -- -- -- -- -- -- -- -- -- looop‚â° (suc (suc (suc n))) (zero , k<) (suc zero , l<) = {!!}
-- -- -- -- -- -- -- -- -- --    -- hcomp (Œª l' ‚Üí {!!}
-- -- -- -- -- -- -- -- -- --    --          )
-- -- -- -- -- -- -- -- -- --    --      (suc‚Ñôrm _ (suc‚Ñôrm _ (suc‚Ñôrm _ (base‚â° n j))))
-- -- -- -- -- -- -- -- -- --   -- comp (Œª l' ‚Üí  ‚Ñôrm (3 +
-- -- -- -- -- -- -- -- -- --   --          hfill
-- -- -- -- -- -- -- -- -- --   --         (Œª { l (i = i0) ‚Üí Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j
-- -- -- -- -- -- -- -- -- --   --            ; l (i = i1) ‚Üí Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j
-- -- -- -- -- -- -- -- -- --   --            ; l (j = i1) ‚Üí n
-- -- -- -- -- -- -- -- -- --   --            }) (inS (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j)) l'))
-- -- -- -- -- -- -- -- -- --   --    (Œª l' ‚Üí Œª {
-- -- -- -- -- -- -- -- -- --   --        (i = i0) ‚Üí loop‚â° (suc (suc (suc n))) (zero , _) (~ l') j
-- -- -- -- -- -- -- -- -- --   --       ;(i = i1) ‚Üí loop‚â° (suc (suc (suc n))) (1 , _) (~ l') j
-- -- -- -- -- -- -- -- -- --   --       ;(j = i1) ‚Üí ùï°comp (zero , _) (1 , _) i (~ l')
-- -- -- -- -- -- -- -- -- --   --       })
-- -- -- -- -- -- -- -- -- --   --       ((suc‚Ñôrm _ (suc‚Ñôrm _ (suc‚Ñôrm _ (base‚â° n j)))))

-- -- -- -- -- -- -- -- -- -- looop‚â° (suc (suc (suc (suc n)))) kk@(zero , k<) ll@(suc (suc l) , l<) =
-- -- -- -- -- -- -- -- -- --   flipSquareP ((Œª j i ‚Üí
-- -- -- -- -- -- -- -- -- --       (((Rùï°elim.f
-- -- -- -- -- -- -- -- -- --             (Rùï°elimSet.fR (fromFM2comm _))
-- -- -- -- -- -- -- -- -- --             (loop‚â° (suc (suc n)) (l , l<) (~ i) j) i))) ) ‚ñ∑
-- -- -- -- -- -- -- -- -- --              fromFM2comm-diag (suc (suc n)) l l<)
   
-- -- -- -- -- -- -- -- -- -- looop‚â° (suc (suc (suc n))) (suc zero , k<) (zero , l<) i j =
-- -- -- -- -- -- -- -- -- --   {!!}
-- -- -- -- -- -- -- -- -- --      -- comp (Œª l' ‚Üí  ‚Ñôrm (3 +
-- -- -- -- -- -- -- -- -- --      --       hfill
-- -- -- -- -- -- -- -- -- --      --      (Œª { l (i = i1) ‚Üí Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j
-- -- -- -- -- -- -- -- -- --      --         ; l (i = i0) ‚Üí Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j
-- -- -- -- -- -- -- -- -- --      --         ; l (j = i1) ‚Üí n
-- -- -- -- -- -- -- -- -- --      --         }) (inS (Rùï°elimSet.abase (RtoFromFM2‚ä§-fst n) j)) l'))
-- -- -- -- -- -- -- -- -- --      -- (Œª l' ‚Üí Œª {
-- -- -- -- -- -- -- -- -- --      --     (i = i1) ‚Üí loop‚â° (suc (suc (suc n))) (zero , _) (~ l') j
-- -- -- -- -- -- -- -- -- --      --    ;(i = i0) ‚Üí loop‚â° (suc (suc (suc n))) (1 , _) (~ l') j
-- -- -- -- -- -- -- -- -- --      --    ;(j = i1) ‚Üí ùï°comp (1 , _) (zero , _) i (~ l')
-- -- -- -- -- -- -- -- -- --      --    })
-- -- -- -- -- -- -- -- -- --      --    ((suc‚Ñôrm _ (suc‚Ñôrm _ (suc‚Ñôrm _ (base‚â° n j)))))

-- -- -- -- -- -- -- -- -- -- looop‚â° (suc (suc (suc (suc n)))) (suc (suc k) , k<) (zero , l<) =
-- -- -- -- -- -- -- -- -- --     flipSquareP ((Œª j i ‚Üí
-- -- -- -- -- -- -- -- -- --       (((Rùï°elim.f
-- -- -- -- -- -- -- -- -- --             (Rùï°elimSet.fR (fromFM2comm _))
-- -- -- -- -- -- -- -- -- --             (loop‚â° (suc (suc n)) (k , k<) (i) j) (~ i)))) ) ‚ñ∑
-- -- -- -- -- -- -- -- -- --              fromFM2comm-diag' (suc (suc n)) k k<)


-- -- -- -- -- -- -- -- -- -- RtoFromFM2‚ä§ : ‚àÄ n ‚Üí Rùï°elimSet {n = n} (Œª z ‚Üí
-- -- -- -- -- -- -- -- -- --        PathP (Œª i ‚Üí ‚Ñôrm ((Rùï°elimSet.f (RtoFromFM2‚ä§-fst n) z i)))
-- -- -- -- -- -- -- -- -- --            (snd (fromFM2‚ä§ (toFM2‚ä§ (n , z)))) z)
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.isSetA (RtoFromFM2‚ä§ n) _ =
-- -- -- -- -- -- -- -- -- --  isOfHLevelRetractFromIso 2 (PathPIsoPath _ _ _) (ùï°squash _ _)
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.abase (RtoFromFM2‚ä§ n) = base‚â° n
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.aloop (RtoFromFM2‚ä§ n) = loop‚â° n
-- -- -- -- -- -- -- -- -- -- Rùï°elimSet.alooop (RtoFromFM2‚ä§ n) = looop‚â° n

-- -- -- -- -- -- -- -- -- -- toFromFM2‚ä§ : section fromFM2‚ä§ toFM2‚ä§
-- -- -- -- -- -- -- -- -- -- toFromFM2‚ä§ (n , p) = Œ£PathP (_  , Rùï°elimSet.f {n = n} (RtoFromFM2‚ä§ n) p)

-- -- -- -- -- -- -- -- -- -- Iso-FM2‚ä§-Œ£‚Ñôrm : Iso (FMSet2 Unit) (Œ£ _ ‚Ñôrm)
-- -- -- -- -- -- -- -- -- -- Iso.fun Iso-FM2‚ä§-Œ£‚Ñôrm = fromFM2‚ä§
-- -- -- -- -- -- -- -- -- -- Iso.inv Iso-FM2‚ä§-Œ£‚Ñôrm = toFM2‚ä§
-- -- -- -- -- -- -- -- -- -- Iso.rightInv Iso-FM2‚ä§-Œ£‚Ñôrm = toFromFM2‚ä§
-- -- -- -- -- -- -- -- -- -- Iso.leftInv Iso-FM2‚ä§-Œ£‚Ñôrm = fromToFM2‚ä§

-- -- -- -- -- -- -- -- -- -- Iso-FM2‚ä§-EMP : Iso (FMSet2 Unit) (Œ£ _ ‚Ñôrm')
-- -- -- -- -- -- -- -- -- -- Iso-FM2‚ä§-EMP = compIso Iso-FM2‚ä§-Œ£‚Ñôrm (Œ£-cong-iso-snd IsoEm‚Ñôrm)

-- -- -- -- -- -- -- -- -- -- fmbase‚ä§ : ‚Ñï ‚Üí FMSet2 Unit
-- -- -- -- -- -- -- -- -- -- fmbase‚ä§ zero = []
-- -- -- -- -- -- -- -- -- -- fmbase‚ä§ (suc n) = tt ‚à∑2 fmbase‚ä§ n

-- -- -- -- -- -- -- -- -- -- Iso-ùîΩin-SùîΩin : ‚àÄ n ‚Üí Iso (ùîΩin (ùï°base {n})) (S.ùîΩin (fmbase‚ä§ n))
-- -- -- -- -- -- -- -- -- -- Iso-ùîΩin-SùîΩin zero = w
-- -- -- -- -- -- -- -- -- --   where
-- -- -- -- -- -- -- -- -- --    open Iso

-- -- -- -- -- -- -- -- -- --    w : Iso _ _
-- -- -- -- -- -- -- -- -- --    fun w = snd
-- -- -- -- -- -- -- -- -- --    Iso.inv w ()
-- -- -- -- -- -- -- -- -- --    rightInv w ()
-- -- -- -- -- -- -- -- -- --    leftInv w (_ , ())
-- -- -- -- -- -- -- -- -- -- Iso.fun (Iso-ùîΩin-SùîΩin (suc n)) (zero , snd‚ÇÅ) = nothing
-- -- -- -- -- -- -- -- -- -- Iso.fun (Iso-ùîΩin-SùîΩin (suc n)) (suc fst‚ÇÅ , snd‚ÇÅ) =
-- -- -- -- -- -- -- -- -- --   just (Iso.fun (Iso-ùîΩin-SùîΩin n) (fst‚ÇÅ , snd‚ÇÅ))
-- -- -- -- -- -- -- -- -- -- Iso.inv (Iso-ùîΩin-SùîΩin (suc n)) nothing = zero , _
-- -- -- -- -- -- -- -- -- -- Iso.inv (Iso-ùîΩin-SùîΩin (suc n)) (just x) =
-- -- -- -- -- -- -- -- -- --  sucF (Iso.inv (Iso-ùîΩin-SùîΩin n) x)
-- -- -- -- -- -- -- -- -- -- Iso.rightInv (Iso-ùîΩin-SùîΩin (suc n)) nothing = refl
-- -- -- -- -- -- -- -- -- -- Iso.rightInv (Iso-ùîΩin-SùîΩin (suc n)) (just x) =
-- -- -- -- -- -- -- -- -- --   cong just (Iso.rightInv (Iso-ùîΩin-SùîΩin n) x)
-- -- -- -- -- -- -- -- -- -- Iso.leftInv (Iso-ùîΩin-SùîΩin (suc n)) (zero , snd‚ÇÅ) = refl
-- -- -- -- -- -- -- -- -- -- Iso.leftInv (Iso-ùîΩin-SùîΩin (suc n)) (suc k , snd‚ÇÅ) =
-- -- -- -- -- -- -- -- -- --   ‚â°Fin {n = suc n} (cong (suc ‚àò fst)
-- -- -- -- -- -- -- -- -- --    (Iso.leftInv (Iso-ùîΩin-SùîΩin (n)) (k , snd‚ÇÅ)))


      


-- -- -- -- -- -- -- -- -- -- -- -- module _ {A : Type ‚Ñì} where


-- -- -- -- -- -- -- -- -- -- -- -- --  -- pci = preCompInvol.e' {f = f} (B j i) fInvol
-- -- -- -- -- -- -- -- -- -- -- --  ‚ÜíadjT : ‚àÄ n (k : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n))  ‚Üí (Fin n ‚Üí A) ‚âÉ (Fin n ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --  ‚ÜíadjT n k = preCompInvol.e' {f = adjT n k} A (isInvolution-adjT n  k)
 
-- -- -- -- -- -- -- -- -- -- -- --  ùîΩ‚Üílooop : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n))  ‚Üí (Fin n ‚Üí A) ‚â° (Fin n ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --  ùîΩ‚Üílooop n k l i =
-- -- -- -- -- -- -- -- -- -- -- --    Glue (Fin n ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --      Œª { (i = i0) ‚Üí (Fin n ‚Üí A) , ‚ÜíadjT n k
-- -- -- -- -- -- -- -- -- -- -- --        ; (i = i1) ‚Üí (Fin n ‚Üí A) , ‚ÜíadjT n l } 

-- -- -- -- -- -- -- -- -- -- -- --  ùîΩ‚Üílooop-comp-si : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --       Square
-- -- -- -- -- -- -- -- -- -- -- --          (Œª i ‚Üí Flooop n k l i ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --          (ùîΩ‚Üílooop n k l)
-- -- -- -- -- -- -- -- -- -- -- --          refl
-- -- -- -- -- -- -- -- -- -- -- --          refl
-- -- -- -- -- -- -- -- -- -- -- --  ùîΩ‚Üílooop-comp-si n k l j i =
-- -- -- -- -- -- -- -- -- -- -- --    Glue (Flooop n k l (i ‚à® j) ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --      Œª { (i = i0) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- --        ; (i = i1) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- --        ; (j = i0) ‚Üí _ , idEquiv _
-- -- -- -- -- -- -- -- -- -- -- --        }

-- -- -- -- -- -- -- -- -- -- -- --  ùîΩ‚Üílooop-comp : ‚àÄ n (k l : Œ£ ‚Ñï (Œª k‚ÇÅ ‚Üí suc k‚ÇÅ < n)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- --      Square
-- -- -- -- -- -- -- -- -- -- -- --        (ua (‚ÜíadjT n k))
-- -- -- -- -- -- -- -- -- -- -- --        (ua (‚ÜíadjT n l))
-- -- -- -- -- -- -- -- -- -- -- --        (ùîΩ‚Üílooop n k l)
-- -- -- -- -- -- -- -- -- -- -- --        refl
-- -- -- -- -- -- -- -- -- -- -- --  ùîΩ‚Üílooop-comp = {!!}

-- -- -- -- -- -- -- -- -- -- -- --  RùîΩ‚Üí : ‚àÄ n ‚Üí Rùï°elim {n = n} Œª p ‚Üí singl (ùîΩin p ‚Üí A)
-- -- -- -- -- -- -- -- -- -- -- --  Rùï°elim.isGroupoidA (RùîΩ‚Üí n) _ = isOfHLevelPlus 3 (isContrSingl _)
-- -- -- -- -- -- -- -- -- -- -- --  Rùï°elim.abase (RùîΩ‚Üí n) = _ , refl
-- -- -- -- -- -- -- -- -- -- -- --  Rùï°elim.aloop (RùîΩ‚Üí n) k i = _ ,
-- -- -- -- -- -- -- -- -- -- -- --    Œª j ‚Üí preCompInvol.eq {f = adjT n k} A (isInvolution-adjT n  k) j i   
-- -- -- -- -- -- -- -- -- -- -- --  fst (Rùï°elim.alooop (RùîΩ‚Üí n) k l i) = ùîΩ‚Üílooop n k l i
-- -- -- -- -- -- -- -- -- -- -- --  snd (Rùï°elim.alooop (RùîΩ‚Üí n) k l i) j = ùîΩ‚Üílooop-comp-si n k l j i
-- -- -- -- -- -- -- -- -- -- -- --  Rùï°elim.acomp (RùîΩ‚Üí n) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --  Rùï°elim.ainvol (RùîΩ‚Üí n) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --  Rùï°elim.acomm (RùîΩ‚Üí n) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --  Rùï°elim.abraid (RùîΩ‚Üí n) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --  -- Rùï°elim.isGroupoidA (Rùïç n) p =
-- -- -- -- -- -- -- -- -- -- -- --  --    isOfHLevelPlus 3 (isContrSingl _)
-- -- -- -- -- -- -- -- -- -- -- --  -- Rùï°elim.abase (RùîΩ‚Üí n) = (ùîΩin p ‚Üí A) , ua (tabEquiv n)
-- -- -- -- -- -- -- -- -- -- -- --  -- Rùï°elim.aloop (Rùïç n) k = Œ£PathP (ua (adjT√ó^‚âÉ (fst k)) , ua-adj-law n k)
-- -- -- -- -- -- -- -- -- -- -- --  -- Rùï°elim.alooop (Rùïç n) k l = Œ£PathP (ùïçlooop n (fst k) (fst l) , ùïçloopSi n k l )
-- -- -- -- -- -- -- -- -- -- -- --  -- fst (Rùï°elim.acomp (Rùïç n) (k , _) (l , _) i j) = ùïçcomp n k l i j

-- -- -- -- -- -- -- -- -- -- -- --  -- snd (Rùï°elim.acomp (Rùïç n) k l i j) m = ùïçcompSi n k l m i j
-- -- -- -- -- -- -- -- -- -- -- --  -- fst (Rùï°elim.ainvol (Rùïç n) k i j) = ùïçinvol n (fst k) i j
-- -- -- -- -- -- -- -- -- -- -- --  -- snd (Rùï°elim.ainvol (Rùïç n) k i j) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --  -- Rùï°elim.acomm (Rùïç n) = {!!}
-- -- -- -- -- -- -- -- -- -- -- --  -- Rùï°elim.abraid (Rùïç n) = {!!}


-- -- -- -- -- -- -- -- -- -- -- sucF'-fst : ‚àÄ n k k< ‚Üí PathP (Œª i ‚Üí ua (adjT'‚âÉ {n = n} (k , k<)) i ‚Üí ‚Ñï)
-- -- -- -- -- -- -- -- -- -- --                   (fst ‚àò fst (adjT'‚âÉ {suc n} (suc k , k<)) ‚àò sucF)
-- -- -- -- -- -- -- -- -- -- --                   (suc ‚àò fst)
-- -- -- -- -- -- -- -- -- -- -- sucF'-fst n k k< i x = suc (fst (unglue (i ‚à® ~ i) x))

-- -- -- -- -- -- -- -- -- -- -- sucF'-snd : ‚àÄ n k k< ‚Üí PathP (Œª i ‚Üí (x : ua (adjT'‚âÉ {n = n} (k , k<)) i) ‚Üí
-- -- -- -- -- -- -- -- -- -- --                                 (sucF'-fst n k k< i x) ‚â§ n)
-- -- -- -- -- -- -- -- -- -- --                  (Œª x ‚Üí adjT< (suc n) (suc k) (fst (sucF {n = n} x))
-- -- -- -- -- -- -- -- -- -- --                          k< (snd (sucF {n = n} x)))
-- -- -- -- -- -- -- -- -- -- --                  Œª x ‚Üí snd x
-- -- -- -- -- -- -- -- -- -- -- sucF'-snd n k k< =
-- -- -- -- -- -- -- -- -- -- --   isProp‚ÜíPathP (Œª i ‚Üí isPropŒ† Œª x ‚Üí isProp‚â§ {m = sucF'-fst n k k< i x} {n = n})
-- -- -- -- -- -- -- -- -- -- --     (Œª x ‚Üí adjT< (suc n) (suc k) (suc (fst x)) k< (snd x)) snd

-- -- -- -- -- -- -- -- -- -- -- sucF' : ‚àÄ n k k< ‚Üí PathP (Œª i ‚Üí ua (adjT'‚âÉ {n = n} (k , k<)) i ‚Üí Fin (suc n))
-- -- -- -- -- -- -- -- -- -- --                   (fst (adjT'‚âÉ {suc n} (suc k , k<)) ‚àò sucF)
-- -- -- -- -- -- -- -- -- -- --                   sucF
-- -- -- -- -- -- -- -- -- -- -- sucF' n k k< i x =
-- -- -- -- -- -- -- -- -- -- --   sucF'-fst n k k< i x ,
-- -- -- -- -- -- -- -- -- -- --    sucF'-snd n k k< i x


-- -- -- -- -- -- -- -- -- -- -- module _ {A : Type ‚Ñì} where

 
-- -- -- -- -- -- -- -- -- -- --  swap-01-√ó : ‚àÄ {n} ‚Üí (A √ó^ n) ‚Üí (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- --  swap-01-√ó {zero} = idfun _
-- -- -- -- -- -- -- -- -- -- --  swap-01-√ó {suc zero} = idfun _
-- -- -- -- -- -- -- -- -- -- --  swap-01-√ó {suc (suc n)} = swap-01

-- -- -- -- -- -- -- -- -- -- --  invo-swap-01-√ó : ‚àÄ n ‚Üí isInvolution (swap-01-√ó {n})
-- -- -- -- -- -- -- -- -- -- --  invo-swap-01-√ó zero x = refl
-- -- -- -- -- -- -- -- -- -- --  invo-swap-01-√ó (suc zero) x = refl
-- -- -- -- -- -- -- -- -- -- --  invo-swap-01-√ó (suc (suc n)) x = refl

-- -- -- -- -- -- -- -- -- -- --  adjT√ó^ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí
-- -- -- -- -- -- -- -- -- -- --               (A √ó^ n) ‚Üí (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- --  adjT√ó^ zero = swap-01-√ó
-- -- -- -- -- -- -- -- -- -- --  adjT√ó^ {suc n} (suc k) (x , xs) = x , (adjT√ó^ k xs)
-- -- -- -- -- -- -- -- -- -- --  adjT√ó^ {zero} (suc k) = idfun _
 
-- -- -- -- -- -- -- -- -- -- --  isEquiv-adjT√ó^ : ‚àÄ n k ‚Üí isEquiv (adjT√ó^ {n} k)
-- -- -- -- -- -- -- -- -- -- --  isEquiv-adjT√ó^ (suc n) (suc k) =
-- -- -- -- -- -- -- -- -- -- --    snd (‚âÉ-√ó (_ , idIsEquiv _) (_ , isEquiv-adjT√ó^ n k))
-- -- -- -- -- -- -- -- -- -- --  isEquiv-adjT√ó^ zero zero = idIsEquiv _
-- -- -- -- -- -- -- -- -- -- --  isEquiv-adjT√ó^ (suc zero) zero = idIsEquiv _
-- -- -- -- -- -- -- -- -- -- --  isEquiv-adjT√ó^ (suc (suc n)) zero = snd Œ£-swap-01-‚âÉ
-- -- -- -- -- -- -- -- -- -- --  isEquiv-adjT√ó^ zero (suc k) = idIsEquiv _

-- -- -- -- -- -- -- -- -- -- --  adjT√ó^‚âÉ : ‚àÄ {n} ‚Üí ‚Ñï ‚Üí (A √ó^ n) ‚âÉ (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- --  adjT√ó^‚âÉ k = adjT√ó^ k , isEquiv-adjT√ó^ _ k

-- -- -- -- -- -- -- -- -- -- --  isInvo-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k ‚Üí isInvolution (adjT√ó^ {n} k)
-- -- -- -- -- -- -- -- -- -- --  isInvo-adjT√ó^ zero = invo-swap-01-√ó _
-- -- -- -- -- -- -- -- -- -- --  isInvo-adjT√ó^ {zero} (suc k) _ = refl
-- -- -- -- -- -- -- -- -- -- --  isInvo-adjT√ó^ {suc n} (suc k) (x , xs) =
-- -- -- -- -- -- -- -- -- -- --    cong‚Ä≤ (x ,_) (isInvo-adjT√ó^ {n} k xs)

-- -- -- -- -- -- -- -- -- -- --  braid-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k ‚Üí  suc (suc k) < n ‚Üí ‚àÄ v ‚Üí 
-- -- -- -- -- -- -- -- -- -- --    (adjT√ó^  {n} k ‚àò adjT√ó^  {n} (suc k) ‚àò adjT√ó^  {n} (k)) v
-- -- -- -- -- -- -- -- -- -- --    ‚â° (adjT√ó^  {n} (suc k) ‚àò adjT√ó^  {n} (k) ‚àò adjT√ó^  {n} (suc k)) v
-- -- -- -- -- -- -- -- -- -- --  braid-adjT√ó^ {suc n} (suc k) x (v , vs) = cong‚Ä≤ (v ,_) (braid-adjT√ó^ {n} k x vs)
-- -- -- -- -- -- -- -- -- -- --  braid-adjT√ó^ {suc (suc (suc n))} zero x v = refl
 

-- -- -- -- -- -- -- -- -- -- --  comm-adjT√ó^ : ‚àÄ {n} ‚Üí ‚àÄ k l ‚Üí (k< : (suc k) < n) (l< : (suc l) < n) ‚Üí 
-- -- -- -- -- -- -- -- -- -- --    A.commT k l ‚Üí ‚àÄ v ‚Üí  
-- -- -- -- -- -- -- -- -- -- --    (adjT√ó^  {n} l
-- -- -- -- -- -- -- -- -- -- --      ‚àò adjT√ó^  {n} k ) v
-- -- -- -- -- -- -- -- -- -- --    ‚â° (adjT√ó^  {n} k
-- -- -- -- -- -- -- -- -- -- --      ‚àò adjT√ó^  {n} l ) v
-- -- -- -- -- -- -- -- -- -- --  comm-adjT√ó^ {n = suc n} (suc k) (suc l) k< l< x (v , vs) =
-- -- -- -- -- -- -- -- -- -- --     cong (v ,_) (comm-adjT√ó^ {n = n} k l k< l< (A.pred-commT k l x) vs)
-- -- -- -- -- -- -- -- -- -- --  comm-adjT√ó^ {n = suc (suc n)} zero (suc (suc l)) k< l< x v = refl



-- -- -- -- -- -- -- -- -- -- --  tabEquiv : ‚àÄ n ‚Üí (Fin n ‚Üí A) ‚âÉ (A √ó^ n)
-- -- -- -- -- -- -- -- -- -- --  tabEquiv n = isoToEquiv (invIso (Iso-√ó^-F‚Üí n))

    
-- -- -- -- -- -- -- -- -- -- --  zz : ‚àÄ n k ‚Üí PathP (Œª i ‚Üí (ua (adjT'‚âÉ {n} k) i ‚Üí A) ‚Üí (A √ó^ n))
-- -- -- -- -- -- -- -- -- -- --         (adjT√ó^ (fst k) ‚àò tabulate)
-- -- -- -- -- -- -- -- -- -- --         (tabulate)           

-- -- -- -- -- -- -- -- -- -- --  zz (suc n) (suc k , k<) i x =
-- -- -- -- -- -- -- -- -- -- --    x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí zero , tt }) (0 , tt)) ,
-- -- -- -- -- -- -- -- -- -- --    zz n (k , k<) i
-- -- -- -- -- -- -- -- -- -- --        (x ‚àò (Œª y ‚Üí glue (Œª { (i = i0) ‚Üí sucF y ; (i = i1) ‚Üí sucF y })
-- -- -- -- -- -- -- -- -- -- --          (sucF' n k k< i y)))   
-- -- -- -- -- -- -- -- -- -- --  zz (suc (suc n)) (zero , k<) i x =
-- -- -- -- -- -- -- -- -- -- --    (x (glue (Œª { (i = i0) ‚Üí suc zero , tt ; (i = i1) ‚Üí zero , tt }) (0 , tt)) ,
-- -- -- -- -- -- -- -- -- -- --     x (glue (Œª { (i = i0) ‚Üí zero , tt ; (i = i1) ‚Üí suc zero , tt }) (1 , tt)) ,
-- -- -- -- -- -- -- -- -- -- --    tabulate Œª y ‚Üí x (glue (Œª { (i = i0) ‚Üí sucF (sucF y)
-- -- -- -- -- -- -- -- -- -- --                              ; (i = i1) ‚Üí sucF (sucF y) })
-- -- -- -- -- -- -- -- -- -- --                (sucF (sucF y))))

-- -- -- -- -- -- -- -- -- -- --  ua-adj-lawP : ‚àÄ n k ‚Üí
-- -- -- -- -- -- -- -- -- -- --        PathP (Œª i ‚Üí (ua (adjT'‚âÉ {n = n} k) i ‚Üí A) ‚âÉ ua (adjT√ó^‚âÉ {n = n} (fst k)) i)
-- -- -- -- -- -- -- -- -- -- --                  (tabEquiv n)
-- -- -- -- -- -- -- -- -- -- --                  (tabEquiv n)
-- -- -- -- -- -- -- -- -- -- --  ua-adj-lawP n k = Œ£PathPProp isPropIsEquiv
-- -- -- -- -- -- -- -- -- -- --    Œª i x ‚Üí glue (Œª { (i = i0) ‚Üí tabulate x
-- -- -- -- -- -- -- -- -- -- --                    ; (i = i1) ‚Üí tabulate x }) (zz n k i x) 

-- -- -- -- -- -- -- -- -- -- --  ua-adj-law : ‚àÄ n k ‚Üí
-- -- -- -- -- -- -- -- -- -- --    Square
-- -- -- -- -- -- -- -- -- -- --        (ua (tabEquiv n))
-- -- -- -- -- -- -- -- -- -- --        (ua (tabEquiv n))
-- -- -- -- -- -- -- -- -- -- --        (Œª i ‚Üí ua (adjT'‚âÉ {n = n} k) i ‚Üí A)
-- -- -- -- -- -- -- -- -- -- --        (ua (adjT√ó^‚âÉ {n = n} (fst k)))
       
-- -- -- -- -- -- -- -- -- -- --  ua-adj-law n k i j =
-- -- -- -- -- -- -- -- -- -- --    Glue (ua (adjT√ó^‚âÉ {n = n} (fst k)) i)
-- -- -- -- -- -- -- -- -- -- --         Œª {  (j = i0) ‚Üí (ua (adjT'‚âÉ {n = n} k) i ‚Üí A) , ua-adj-lawP n k i
-- -- -- -- -- -- -- -- -- -- --            ; (j = i1) ‚Üí ua (adjT√ó^‚âÉ {n = n} (fst k)) i , idEquiv _
-- -- -- -- -- -- -- -- -- -- --            }
