{-# OPTIONS --safe  --experimental-lossy-unification #-} 
module Cubical.Data.FinData.GTrun3 where

open import Cubical.Foundations.HLevels
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Structure
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Equiv.Properties
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Transport
open import Cubical.Foundations.GroupoidLaws as GL

open import Cubical.Foundations.Path

open import Cubical.HITs.Pushout
open import Cubical.HITs.Sn
open import Cubical.HITs.SetQuotients renaming ([_] to [_]/ ; rec to rec/ ; elimProp to elimProp/ ; elim to elim/)

open import Cubical.HITs.GroupoidQuotients renaming ([_] to [_]//)

import Cubical.HITs.PropositionalTruncation as PT

open import Cubical.HITs.SetTruncation renaming (map to map‚ÇÇ)



open import Cubical.Data.Bool
open import Cubical.Data.Sigma
open import Cubical.Data.Nat hiding (_¬∑_)
open import Cubical.Data.List
import Cubical.Data.Vec as V
open import Cubical.Data.FinData


open import Cubical.Foundations.Function
open import Cubical.Functions.Logic


open import Cubical.Algebra.Group
open import Cubical.Algebra.Group.Morphisms
open import Cubical.Algebra.Group.MorphismProperties
open import Cubical.Algebra.Group.Instances.Bool
open import Cubical.Algebra.SymmetricGroup
open import Cubical.Algebra.Group.Generators

-- open import Cubical.HITs.FreeGroup
-- open import Cubical.HITs.FreeGroup.IPresentation

open import Cubical.HITs.EilenbergMacLane1 renaming (elim to elimEM)

open import Cubical.Foundations.Equiv.BiInvertible
open import Cubical.Foundations.Powerset
open import Cubical.Foundations.Univalence

open import Cubical.Relation.Binary

open import Cubical.Functions.FunExtEquiv



module EMŒ£ {‚Ñì} {A : Type ‚Ñì}  (isSetA : isSet A)
             -- {‚Ñì} {G : Group ‚Ñì'} (m' : GroupHom G (Symmetric-Group _ isSetA))             
              where

 -- m = fst m'
 -- mGH = snd m'

 -- open GroupStr (snd G)
 -- module M = IsGroupHom mGH


 sg = Symmetric-Group _ isSetA

 ùîπG = EM‚ÇÅ sg 

  -- EM‚ÇÅHFam : EMG ‚Üí hSet ‚Ñì
  -- EM‚ÇÅHFam = EMrec.f w
  --   where
  --    w : EMrec lg isGroupoidHSet
  --    EMrec.b w = A , isSetA
  --    EMrec.bloop w = TypeOfHLevel‚â° 2
  --    EMrec.bComp w f g =
  --      Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
  --        (compPath-filler _ _)

 -- isGroupoidSinglA : isGroupoid (Œ£[ T ‚àà Type ‚Ñì ] T ‚âÉ A)
 -- isGroupoidSinglA = 

 rA* : EMrec sg isGroupoidHSet 
 EMrec.b rA* = A , isSetA
 EMrec.bloop rA* g = Œ£‚â°Prop (Œª _ ‚Üí isPropIsSet) (ua g)
 EMrec.bComp rA* g h =
   Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
    (ua-CompFill‚àô‚Çë _ _)

 A*h : EM‚ÇÅ sg ‚Üí hSet ‚Ñì  
 A*h = EMrec.f rA*

 A* = fst ‚àò A*h

module _ {‚Ñì ‚Ñìb} {A : Type ‚Ñì} (isSetA : isSet A)
                {B : Type ‚Ñìb} (isGroupoidB : isGroupoid B)
             where
             
 open EMŒ£ isSetA

 -- rB* : EMelim sg Œª g ‚Üí Œ£[ T ‚àà Type (‚Ñì-max ‚Ñì ‚Ñìb) ] T ‚âÉ (fst (A* g) ‚Üí B) 
 -- EMelim.isGrpB rB* g =
 --   isOfHLevelPlus 3 (EquivContr (fst (A* g) ‚Üí B))
 -- EMelim.b rB* = _ , idEquiv _
 -- EMelim.bPathP rB* g =
 --   Œ£PathP (ua (preCompEquiv g) ,
 --     Œ£PathPProp (Œª _ ‚Üí isPropIsEquiv _)
 --       {!!})
 -- EMelim.bSqP rB* = {!!}

 B* : EM‚ÇÅ sg ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñìb)
 B* em = A* em ‚Üí B

 record _‚Üî‚Çõ_ (x y : A ‚Üí B) : Type (‚Ñì-max ‚Ñì ‚Ñìb) where
   constructor ‚Üîs
   field
     F‚âÉ : (A ‚âÉ A)
     l‚â° : x ‚àò invEq F‚âÉ  ‚â° y  

 isTrans‚Üî‚Çõ : BinaryRelation.isTrans _‚Üî‚Çõ_
 isTrans‚Üî‚Çõ a b c (‚Üîs e p) (‚Üîs f q) = 
   ‚Üîs (e ‚àô‚Çë f) (cong (_‚àò (invEq f)) p ‚àô q)
   

 A‚Üí// : Type (‚Ñì-max ‚Ñì ‚Ñìb)
 A‚Üí// = (A ‚Üí B) // isTrans‚Üî‚Çõ

-- -- -- [_] : (a : A) ‚Üí A // Rt
-- -- --   eq// : {a b : A} ‚Üí (r : R a b) ‚Üí [ a ] ‚â° [ b ]
-- -- --   comp// : {a b c : A} ‚Üí (r : R a b) ‚Üí (s : R b c)
-- -- --           ‚Üí PathP (Œª j ‚Üí [ a ] ‚â° eq// s j) (eq// r) (eq// (Rt a b c r s))
-- -- --   squash// : ‚àÄ (x y : A // Rt) (p q : x ‚â° y) (r s : p ‚â° q) ‚Üí r ‚â° s


 data ZZ : Type (‚Ñì-max ‚Ñì ‚Ñìb) where
  [_]z : (A ‚Üí B) ‚Üí ZZ
  loopz : (e : A ‚âÉ A) ‚Üí ‚àÄ {x y} ‚Üí (x ‚àò invEq e ‚â° y) ‚Üí
    [ x ]z ‚â° [ y ]z
  compz : (e f : A ‚âÉ A) ‚Üí ‚àÄ {x y z} ‚Üí ‚àÄ p q ‚Üí Square 
                             (loopz e {x} {y} p)
                             (loopz (e ‚àô‚Çë f) (cong (_‚àò invEq f) p ‚àô q))
                             refl
                             (loopz f {y} {z} q)
  squashz : isGroupoid ZZ

 rZZfrom// : Rrec {Rt = isTrans‚Üî‚Çõ} ZZ
 Rrec.Bgpd rZZfrom// = squashz
 Rrec.fb rZZfrom// = [_]z
 Rrec.feq rZZfrom// {a = a} {b = b} (‚Üîs F‚âÉ l‚â°) =
    loopz F‚âÉ l‚â°
    -- funExtDep‚Åª (loopz F‚âÉ)
    --   let z = ((congP (Œª i z ‚Üí l‚â° i ‚àò z) (ua-ungluePathExt F‚âÉ)))
    --   in {!z!}
   -- sym (cong [_]z (cong (a ‚àò_) (funExt (retEq F‚âÉ))))
   --    ‚àô‚àô (Œª i ‚Üí loopz F‚âÉ i (l‚â° i ‚àò invEq F‚âÉ ‚àò ua-ungluePathExt F‚âÉ i))
   --      ‚àô‚àô cong [_]z (cong (b ‚àò_) (funExt (secEq F‚âÉ)) )

 Rrec.fsq rZZfrom// (‚Üîs F‚âÉ l‚â°) (‚Üîs F‚âÉ‚ÇÅ l‚â°‚ÇÅ) i j =
   {!!}

-- -- -- --  ZZfrom// : A‚Üí// ‚Üí ZZ
-- -- -- --  ZZfrom// = Rrec.f rZZfrom//

-- -- -- --  ZZto// : ZZ ‚Üí A‚Üí//
-- -- -- --  ZZto// [ x ]z = [ x ]//
-- -- -- --  ZZto// (loopz e i x) =
-- -- -- --       -- hcomp (Œª k ‚Üí Œª { (i = i0) ‚Üí [ x ‚àò funExt (retEq e) k ]// 
-- -- -- --       --             ; (i = i1) ‚Üí [  x ‚àò funExt (secEq e) k  ]//
-- -- -- --       --         }) (eq// {a = x ‚àò ua-gluePathExt e i ‚àò funExt (retEq e) (i)}
-- -- -- --       --                  {b = x ‚àò ua-gluePathExt e i ‚àò invEq e}
-- -- -- --       --             (‚Üîs e
-- -- -- --       --               Œª j ‚Üí ( x ‚àò ua-gluePathExt e i
-- -- -- --       --                   ‚àò funExt (retEq e) (~ j ‚àß i))) i)

-- -- -- --    hcomp (Œª k ‚Üí Œª { (i = i0) ‚Üí [ x ]// 
-- -- -- --                   ; (i = i1) ‚Üí [ x ‚àò funExt (secEq e) k ]//
-- -- -- --               }) (eq// {a = x ‚àò ua-gluePathExt e i}
-- -- -- --                        {b = x ‚àò ua-gluePathExt e i ‚àò invEq e}
-- -- -- --                   (‚Üîs e
-- -- -- --                     Œª j ‚Üí ( x ‚àò ua-gluePathExt e i
-- -- -- --                         ‚àò funExt (retEq e) (~ j))) i)
-- -- -- --  ZZto// (compz e f i j x) =
-- -- -- --    hcomp (Œª k ‚Üí Œª {
-- -- -- --       (i = i0) ‚Üí {!!}
-- -- -- --      ;(i = i1) ‚Üí {!!}
-- -- -- --      ;(j = i0) ‚Üí {!!}
-- -- -- --      ;(j = i1) ‚Üí {!!}
-- -- -- --         })
-- -- -- --         {!!}
-- -- -- --   -- let b : A ‚Üí B
-- -- -- --   --     b = Œª a ‚Üí x (glue {œÜ = j ‚à® ~ j}
-- -- -- --   --                       (Œª { (j = i0) ‚Üí ? 
-- -- -- --   --                          ; (j = i1) ‚Üí ? })
-- -- -- --   --                          (outS ?)) 
-- -- -- --   -- in hcomp (Œª k ‚Üí Œª {
-- -- -- --   --     (i = i0) ‚Üí {!!}
-- -- -- --   --    ;(i = i1) ‚Üí {!!}
-- -- -- --   --    ;(j = i0) ‚Üí [ x ]//
-- -- -- --   --    ;(j = i1) ‚Üí {!!}
-- -- -- --   --       })
-- -- -- --   --        (comp// (‚Üîs {x = {!!}} e {!!}) (‚Üîs f {!!}) i j)
         
-- -- -- --  ZZto// (squashz x x‚ÇÅ x‚ÇÇ y x‚ÇÉ y‚ÇÅ i i‚ÇÅ x‚ÇÑ) = {!!}

-- -- -- --  toZZ·µ£ : EMelim sg Œª em ‚Üí B* em ‚Üí ZZ
-- -- -- --  EMelim.isGrpB toZZ·µ£ em = isGroupoidŒ† Œª _ ‚Üí squashz 
-- -- -- --  EMelim.b toZZ·µ£ = [_]z
-- -- -- --  EMelim.bPathP toZZ·µ£ g i x = loopz g i x
-- -- -- --  EMelim.bSqP toZZ·µ£ g h = compz g h 

-- -- -- --  from// : ZZ ‚Üí Œ£ _ B*
-- -- -- --  from// [ x ]z = embase , x
-- -- -- --  from// (loopz e i x) = emloop e i , x  
-- -- -- --  from// (compz e f i j x) = emcomp e f i j , x
-- -- -- --  from// (squashz _ _ _ _ r s i j k) =
-- -- -- --    isOfHLevelŒ£ 3 emsquash
-- -- -- --      (Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí isGroupoidB) _ _ _ _
-- -- -- --       (Œª i j ‚Üí from// (r i j))
-- -- -- --       (Œª i j ‚Üí from// (s i j)) i j k

-- -- -- -- --  -- A//‚â°' : (g : A ‚âÉ A) ‚Üí PathP (Œª i ‚Üí (ua g i ‚Üí B) ‚Üí A‚Üí//)
-- -- -- -- --  --             [_]// [_]//
-- -- -- -- --  -- A//‚â°' g = {!!}
-- -- -- -- --  --      ‚óÅ (Œª i x ‚Üí eq// {a = {!x ‚àò (ua-gluePathExt g i)!}}
-- -- -- -- --  --                    {b = x ‚àò (ua-gluePathExt g i)}
-- -- -- -- --  --                (‚Üîs g
-- -- -- -- --  --         Œª j ‚Üí x ‚àò ua-gluePathExt g (i ‚àß j) ) i) 
-- -- -- -- --  --         ‚ñ∑ {!!}
-- -- -- -- --  A//‚â° : (g : A ‚âÉ A) ‚Üí
-- -- -- -- --       PathP (Œª i ‚Üí (ua g i ‚Üí B) ‚Üí A‚Üí//)
-- -- -- -- --       {!!}
-- -- -- -- --       {!!} --([_]// ‚àò (_‚àò fst g))
-- -- -- -- --  A//‚â° g i x =
-- -- -- -- --   let p : PathP (Œª j ‚Üí ?)
-- -- -- -- --                (x ‚àò (ua-gluePathExt g i))
-- -- -- -- --              {!!}
-- -- -- -- --       p = Œª j ‚Üí x ‚àò ua-gluePathExt g (i ‚àß j)

-- -- -- -- --       pP : PathP (Œª i ‚Üí ua g i ‚Üí B)
-- -- -- -- --             (Œª x‚ÇÅ ‚Üí x (ua-gluePathExt g i (fst g x‚ÇÅ)))
-- -- -- -- --             (Œª x‚ÇÅ ‚Üí x (ua-gluePathExt g i x‚ÇÅ))
-- -- -- -- --       pP = Œª j ‚Üí x ‚àò ua-gluePathExt g i ‚àò ua-ungluePathExt g j

-- -- -- -- --       p// : [ {!!} ]// ‚â° [ {!!} ]//
-- -- -- -- --       p// = eq// (‚Üîs g {!p!})


-- -- -- -- --       -- z : PathP (Œª j ‚Üí ((a : A) ‚Üí B) // _) {![_]// ‚àò ?!} {!!}
-- -- -- -- --       -- z = Œª j ‚Üí 
-- -- -- -- --       --  eq// 
-- -- -- -- --       --    {Rt = {!!}}
-- -- -- -- --       --      {a = x ‚àò ua-gluePathExt g i ‚àò ua-ungluePathExt g i0}
-- -- -- -- --       --      {b = x ‚àò ua-gluePathExt g i ‚àò ua-ungluePathExt g i1}
-- -- -- -- --       --     (‚Üîs g Œª j ‚Üí x ‚àò ua-gluePathExt g i ‚àò ua-ungluePathExt g j) j
-- -- -- -- --   in {!z!}


-- -- -- -- --  data ZZ : Type (‚Ñì-max ‚Ñì ‚Ñìb) where

-- -- -- -- --  to//·µ£ : EMelim sg Œª em ‚Üí B* em ‚Üí A‚Üí//
-- -- -- -- --  EMelim.isGrpB to//·µ£ em = isGroupoidŒ† Œª _ ‚Üí squash// 
-- -- -- -- --  EMelim.b to//·µ£ = [_]//
-- -- -- -- --  EMelim.bPathP to//·µ£ g i x =
-- -- -- -- --    ua-unglue {A = (ua g i ‚Üí B) // {!!}}
-- -- -- -- --     {!!} i {!!}
-- -- -- -- --    -- ua-ungluePath {!!} {!!} i
-- -- -- -- --    -- eq// {a = x ‚àò ua-gluePathExt g i }
-- -- -- -- --    --      {b = Œª v ‚Üí {!x ?!}}
-- -- -- -- --    --   (‚Üîs g (Œª j ‚Üí  x ‚àò ua-gluePathExt g i ‚àò ua-ungluePathExt g j)) i

-- -- -- -- --  EMelim.bSqP to//·µ£ = {!!}

-- -- -- -- --  to// : ‚àÄ em ‚Üí B* em ‚Üí A‚Üí//
-- -- -- -- --  to// = EMelim.f to//·µ£

-- -- -- -- --  -- iso-em-// : Iso ? A‚Üí//
-- -- -- -- --  -- Iso.fun iso-em-// = uncurry to//
-- -- -- -- --  -- Iso.inv iso-em-// = from//
-- -- -- -- --  -- Iso.rightInv iso-em-// =
-- -- -- -- --  --   elimSet// _ (Œª _ ‚Üí squash// _ _)
-- -- -- -- --  --    (Œª _ ‚Üí refl) Œª {a} {b} r ‚Üí {!!}
-- -- -- -- --  -- Iso.leftInv iso-em-// =
-- -- -- -- --  --    uncurry (elimSet _ (Œª _ ‚Üí isSetŒ† Œª _ ‚Üí isGroupoidEmŒ£ _ _)
-- -- -- -- --  --     (Œª _ ‚Üí refl) {!!})


-- -- -- -- -- -- --   -- record _‚Üî‚Çõ_ (x y : A ‚Üí B) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- --   --   constructor ‚Üîs
-- -- -- -- -- -- --   --   field
-- -- -- -- -- -- --   --     F‚âÉ : (A ‚âÉ A)
-- -- -- -- -- -- --   --     l‚â° : PathP (Œª i ‚Üí ua F‚âÉ i ‚Üí B) x y

-- -- -- -- -- -- --   -- isTrans‚Üî‚Çõ : BinaryRelation.isTrans _‚Üî‚Çõ_
-- -- -- -- -- -- --   -- isTrans‚Üî‚Çõ a b c (‚Üîs e p) (‚Üîs f q) =
-- -- -- -- -- -- --   --   ‚Üîs (e ‚àô‚Çë f) ({!!} ‚óÅ {!!} ‚ñ∑ {!!})


 




-- -- -- -- -- -- -- module _ {‚Ñì} (A B : Type ‚Ñì) (AG : isGroupoid A) (BG : isGroupoid B)
-- -- -- -- -- -- --            (f : A ‚Üí B)
-- -- -- -- -- -- --            (g‚ÇÇ : ‚à• B ‚à•‚ÇÇ ‚Üí ‚à• A ‚à•‚ÇÇ)
-- -- -- -- -- -- --            -- (iso‚ÇÉ : ‚àÄ x x' ‚Üí Iso.fun iso‚ÇÇ ‚à£ x ‚à£‚ÇÇ ‚â° ‚à£ x' ‚à£‚ÇÇ ‚Üí Iso (x ‚â° x) (x' ‚â° x'))
-- -- -- -- -- -- --               where

-- -- -- -- -- -- --   AtoB : (a : A) ‚Üí singl {A = B} {!!}
-- -- -- -- -- -- --   AtoB x = {!!}

-- -- -- -- -- -- --   combienHIsos : Iso A B
-- -- -- -- -- -- --   combienHIsos = {!!}

-- -- -- -- -- -- -- funExtDepSq : ‚àÄ {‚Ñì ‚Ñì'} ‚Üí {A : I ‚Üí I ‚Üí Type ‚Ñì} {B : (i j : I) ‚Üí A i j ‚Üí Type ‚Ñì'}
-- -- -- -- -- -- --   {f00 : (x : A i0 i0) ‚Üí B i0 i0 x}
-- -- -- -- -- -- --   {f01 : (x : A i0 i1) ‚Üí B i0 i1 x}
-- -- -- -- -- -- --   {f10 : (x : A i1 i0) ‚Üí B i1 i0 x}
-- -- -- -- -- -- --   {f11 : (x : A i1 i1) ‚Üí B i1 i1 x}
-- -- -- -- -- -- --   (f0- : PathP (Œª i ‚Üí (a : A i0 i) ‚Üí B i0 i a) f00 f01)
-- -- -- -- -- -- --   (f1- : PathP (Œª i ‚Üí (a : A i1 i) ‚Üí B i1 i a) f10 f11)
-- -- -- -- -- -- --   (f-0 : PathP (Œª i ‚Üí (a : A i i0) ‚Üí B i i0 a) f00 f10)
-- -- -- -- -- -- --   (f-1 : PathP (Œª i ‚Üí (a : A i i1) ‚Üí B i i1 a) f01 f11)
-- -- -- -- -- -- --    ‚Üí (‚àÄ
-- -- -- -- -- -- --   {a‚ÇÄ‚ÇÄ : A i0 i0} {a‚ÇÄ‚ÇÅ : A i0 i1} {a‚ÇÄ‚Çã : PathP (Œª j ‚Üí A i0 j) a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ}
-- -- -- -- -- -- --   {a‚ÇÅ‚ÇÄ : A i1 i0} {a‚ÇÅ‚ÇÅ : A i1 i1} {a‚ÇÅ‚Çã : PathP (Œª j ‚Üí A i1 j) a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ}
-- -- -- -- -- -- --   {a‚Çã‚ÇÄ : PathP (Œª i ‚Üí A i i0) a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ} {a‚Çã‚ÇÅ : PathP (Œª i ‚Üí A i i1) a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ}
-- -- -- -- -- -- --       ‚Üí (sqA : SquareP A a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ a‚Çã‚ÇÅ)
-- -- -- -- -- -- --      ‚Üí SquareP (Œª i j ‚Üí B i j (sqA i j))
-- -- -- -- -- -- --         (Œª i ‚Üí f0- i (a‚ÇÄ‚Çã i))
-- -- -- -- -- -- --         (Œª i ‚Üí f1- i (a‚ÇÅ‚Çã i))
-- -- -- -- -- -- --         (Œª i ‚Üí f-0 i (a‚Çã‚ÇÄ i))
-- -- -- -- -- -- --         (Œª i ‚Üí f-1 i (a‚Çã‚ÇÅ i)))
-- -- -- -- -- -- --    ‚Üí SquareP (Œª i j ‚Üí (a : A i j) ‚Üí B i j a)
-- -- -- -- -- -- --         f0-
-- -- -- -- -- -- --         f1-
-- -- -- -- -- -- --         f-0
-- -- -- -- -- -- --         f-1



-- -- -- -- -- -- -- funExtDepSq = {!!}
-- -- -- -- -- -- -- -- {A = A} {B = B} f0- f1- f-0 f-1 h i j x =
-- -- -- -- -- -- -- --   comp
-- -- -- -- -- -- -- --     (Œª k ‚Üí B i j x)
-- -- -- -- -- -- -- --      (Œª k ‚Üí Œª
-- -- -- -- -- -- -- --       { (i = i0) ‚Üí {!!}
-- -- -- -- -- -- -- --       ; (i = i1) ‚Üí {!!}
-- -- -- -- -- -- -- --       ; (j = i0) ‚Üí {!!}
-- -- -- -- -- -- -- --       ; (j = i1) ‚Üí {!!}
-- -- -- -- -- -- -- --       })
-- -- -- -- -- -- -- --     (h {!!} i j)


-- -- -- -- -- -- doubleCompPathP‚Üí : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''} ‚Üí {A : Type ‚Ñì} ‚Üí (A' : A ‚Üí Type ‚Ñì'')
-- -- -- -- -- --                       ‚Üí ‚àÄ {W X Y Z : A} {B : Type ‚Ñì'}
-- -- -- -- -- --              {W' : A' W ‚Üí B} {X' : A' X ‚Üí B} {Y' : A' Y ‚Üí B} {Z' : A' Z ‚Üí B}
-- -- -- -- -- --              {p : W ‚â° X} {q : X ‚â° Y} {r : Y ‚â° Z}
-- -- -- -- -- --              (P : PathP (Œª i ‚Üí A' (p i) ‚Üí B) W' X')
-- -- -- -- -- --              (Q : PathP (Œª i ‚Üí A' (q i) ‚Üí B) X' Y')
-- -- -- -- -- --              (R : PathP (Œª i ‚Üí A' (r i) ‚Üí B) Y' Z')
-- -- -- -- -- --           ‚Üí PathP (Œª i ‚Üí A' ((p ‚àô‚àô q ‚àô‚àô r) i) ‚Üí B) W' Z'
-- -- -- -- -- -- doubleCompPathP‚Üí A' {B = B} {Y' = Y'} {p = p*} {q = q*} {r = r*}  P Q R i =
-- -- -- -- -- --   let p = cong A' p*
-- -- -- -- -- --       q = cong A' q*
-- -- -- -- -- --       r = cong A' r*
 
-- -- -- -- -- --       p' : PathP (Œª k ‚Üí p i0 ‚Üí p (~ k)) (transport p) (idfun _)
-- -- -- -- -- --       p' = Œª j x ‚Üí transp (Œª j‚ÇÅ ‚Üí p (~ j ‚àß j‚ÇÅ)) j x

-- -- -- -- -- --       q' : PathP (Œª i ‚Üí A' ((p* ‚àô‚àô q* ‚àô‚àô r*) i) ‚Üí q i) (transport p) (transport (sym r))
-- -- -- -- -- --       q' i = transport (Œª i‚ÇÅ ‚Üí A' (doubleCompPath-filler p* q* r* (~ i‚ÇÅ) i ))  
      
-- -- -- -- -- --       r' : PathP (Œª k ‚Üí r i1 ‚Üí r k) (transport (sym r)) (idfun _)
-- -- -- -- -- --       r' = Œª j x ‚Üí transp (Œª j‚ÇÅ ‚Üí r (j ‚à® ~ j‚ÇÅ)) j x

-- -- -- -- -- --   in hcomp (Œª k ‚Üí Œª {(i = i0) ‚Üí transp (Œª i‚ÇÇ ‚Üí B) k ‚àò (P (~ k) ‚àò (p' k))
-- -- -- -- -- --                     ;(i = i1) ‚Üí transp (Œª i‚ÇÇ ‚Üí B) k ‚àò (R k ‚àò (r' k)) })
-- -- -- -- -- --         (transport refl ‚àò (Q i ‚àò ((q' i))))

-- -- -- -- -- -- doubleCompPathP‚Üí-filler : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''} ‚Üí {A : Type ‚Ñì} ‚Üí (A' : A ‚Üí Type ‚Ñì'')
-- -- -- -- -- --                       ‚Üí ‚àÄ {W X Y Z : A} {B : Type ‚Ñì'}
-- -- -- -- -- --              {W' : A' W ‚Üí B} {X' : A' X ‚Üí B} {Y' : A' Y ‚Üí B} {Z' : A' Z ‚Üí B}
-- -- -- -- -- --              {p : W ‚â° X} {q : X ‚â° Y} {r : Y ‚â° Z}
-- -- -- -- -- --              (P : PathP (Œª i ‚Üí A' (p i) ‚Üí B) W' X')
-- -- -- -- -- --              (Q : PathP (Œª i ‚Üí A' (q i) ‚Üí B) X' Y')
-- -- -- -- -- --              (R : PathP (Œª i ‚Üí A' (r i) ‚Üí B) Y' Z')
-- -- -- -- -- --           ‚Üí SquareP (Œª i j ‚Üí A' (doubleCompPath-filler p q r i j) ‚Üí B)
-- -- -- -- -- --                Q
-- -- -- -- -- --                (doubleCompPathP‚Üí A' P Q R)
-- -- -- -- -- --                (symP P)
-- -- -- -- -- --                R
-- -- -- -- -- -- doubleCompPathP‚Üí-filler A' {B = B} {Y' = Y'} {p = p*} {q = q*} {r = r*}  P Q R j i =
-- -- -- -- -- --   fill (Œª k ‚Üí A' (doubleCompPath-filler p* q* r* k i) ‚Üí B) 
-- -- -- -- -- --       ((Œª k ‚Üí Œª {(i = i0) ‚Üí P (~ k)
-- -- -- -- -- --                 ;(i = i1) ‚Üí R k }))
-- -- -- -- -- --       (inS (Q i)) j






-- -- -- -- -- -- compPathP‚Üí : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''} ‚Üí {A : Type ‚Ñì} ‚Üí (A' : A ‚Üí Type ‚Ñì'')
-- -- -- -- -- --                       ‚Üí ‚àÄ {X Y Z : A} {B : Type ‚Ñì'}
-- -- -- -- -- --              {X' : A' X ‚Üí B} {Y' : A' Y ‚Üí B} {Z' : A' Z ‚Üí B}
-- -- -- -- -- --              {q : X ‚â° Y} {r : Y ‚â° Z}             
-- -- -- -- -- --              (Q : PathP (Œª i ‚Üí A' (q i) ‚Üí B) X' Y')
-- -- -- -- -- --              (R : PathP (Œª i ‚Üí A' (r i) ‚Üí B) Y' Z')
-- -- -- -- -- --           ‚Üí PathP (Œª i ‚Üí A' ((q ‚àô r) i) ‚Üí B) X' Z'
-- -- -- -- -- -- compPathP‚Üí A {X = X} {X' = X'} =
-- -- -- -- -- --   doubleCompPathP‚Üí A {p = Œª _ ‚Üí X} (Œª _ ‚Üí X')


-- -- -- -- -- -- compPathP‚Üífiller : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''} ‚Üí {A : Type ‚Ñì} ‚Üí (A' : A ‚Üí Type ‚Ñì'')
-- -- -- -- -- --                       ‚Üí ‚àÄ {X Y Z : A} {B : Type ‚Ñì'}
-- -- -- -- -- --              {X' : A' X ‚Üí B} {Y' : A' Y ‚Üí B} {Z' : A' Z ‚Üí B}
-- -- -- -- -- --              {q : X ‚â° Y} {r : Y ‚â° Z}             
-- -- -- -- -- --              (Q : PathP (Œª i ‚Üí A' (q i) ‚Üí B) X' Y')
-- -- -- -- -- --              (R : PathP (Œª i ‚Üí A' (r i) ‚Üí B) Y' Z')
-- -- -- -- -- --           ‚Üí SquareP (Œª i j ‚Üí A' ((compPath-filler q r i) j) ‚Üí B)
-- -- -- -- -- --                Q
-- -- -- -- -- --                (compPathP‚Üí A' Q R)
-- -- -- -- -- --                refl
-- -- -- -- -- --                R
-- -- -- -- -- -- compPathP‚Üífiller A' {X = X} {X' = X'} Q R =
-- -- -- -- -- --   doubleCompPathP‚Üí-filler A' refl Q R

-- -- -- -- -- -- _‚àô‚àôP_‚àô‚àôP_ : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {w x y z : A}
-- -- -- -- -- --              (p : w ‚â° x)
-- -- -- -- -- --              (q : x¬†‚â° y)
-- -- -- -- -- --              (r : y ‚â° z)
-- -- -- -- -- --              ‚Üí w ‚â° z
              
-- -- -- -- -- -- _‚àô‚àôP_‚àô‚àôP_ {A = A} p q r i =
-- -- -- -- -- --   comp (Œª _ ‚Üí A) (doubleComp-faces p r i) (q i)
   

-- -- -- -- -- -- fixComp : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {w x y z : A}
-- -- -- -- -- --              (p : w ‚â° x)
-- -- -- -- -- --              (q : x¬†‚â° y)
-- -- -- -- -- --              (r : y ‚â° z)
-- -- -- -- -- --              ‚Üí (p ‚àô‚àô q ‚àô‚àô r) ‚â° p ‚àô‚àôP q ‚àô‚àôP r 
-- -- -- -- -- -- fixComp {A = A} p q r j i =
-- -- -- -- -- --        hcomp
-- -- -- -- -- --        (doubleComp-faces (Œª i‚ÇÅ ‚Üí transp (Œª _ ‚Üí A) (~ j ‚à® ~ i‚ÇÅ) (p i‚ÇÅ))
-- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí transp (Œª _ ‚Üí A) (~ j ‚à® i‚ÇÅ) (r i‚ÇÅ)) i)
-- -- -- -- -- --        (transp (Œª _ ‚Üí A) (~ j) (q i))


-- -- -- -- -- -- -- module _ {‚Ñì} {A : Type ‚Ñì} where
-- -- -- -- -- -- --   Œ£singlP‚âÉA : (g : A ‚â° A) ‚Üí
-- -- -- -- -- -- --                  Œ£ _ (uncurry (PathP Œª i ‚Üí g i))
-- -- -- -- -- -- --                 ‚âÉ A
-- -- -- -- -- -- --   Œ£singlP‚âÉA g = Œ£-assoc-‚âÉ ‚àô‚Çë Œ£-contractSnd (isContrSinglP Œª i ‚Üí g i )


-- -- -- -- -- -- -- module R' {‚Ñì} where
 
-- -- -- -- -- -- --   ‚Üî : {A B : Type ‚Ñì} (a : A) (b : B) ‚Üí Type (‚Ñì-suc ‚Ñì)
-- -- -- -- -- -- --   ‚Üî {A} {B} a b = Œ£ (A ‚â° B) Œª p ‚Üí PathP (Œª i ‚Üí p i) a b 


-- -- -- -- -- -- --   ‚Üî‚â° : ‚àÄ {A} {B} (T : Type ‚Ñì) ‚Üí (p : A ‚â° B)
-- -- -- -- -- -- --         ‚Üí (f : A ‚Üí T) (g : B ‚Üí T)
-- -- -- -- -- -- --         ‚Üí {!!}
-- -- -- -- -- -- --         -- (‚àÄ a b ‚Üí (r : R a b) ‚Üí [ a ] ‚â° [ b ])
-- -- -- -- -- -- --          ‚Üí PathP (Œª i ‚Üí p i ‚Üí T) f g
-- -- -- -- -- -- --   ‚Üî‚â° g =  {!!}

-- -- -- -- -- -- --   -- isTrans‚Üîp : BinaryRelation.isTrans _‚Üîp_
-- -- -- -- -- -- --   -- fst (isTrans‚Üîp a b c (p , _) (q , _)) = p ‚àô q
-- -- -- -- -- -- --   -- snd (isTrans‚Üîp a b c (p , P) (q , Q)) = compPathP P Q

-- -- -- -- -- -- --   -- A// = A // isTrans‚Üîp

-- -- -- -- -- -- -- module AutR {‚Ñì} {A : Type ‚Ñì} where
 
-- -- -- -- -- -- --   _‚Üîp_ : (x y : A) ‚Üí Type (‚Ñì-suc ‚Ñì)
-- -- -- -- -- -- --   x ‚Üîp y = Œ£ (A ‚â° A) Œª p ‚Üí PathP (Œª i ‚Üí p i) x y 

-- -- -- -- -- -- --   isTrans‚Üîp : BinaryRelation.isTrans _‚Üîp_
-- -- -- -- -- -- --   fst (isTrans‚Üîp a b c (p , _) (q , _)) = p ‚àô q
-- -- -- -- -- -- --   snd (isTrans‚Üîp a b c (p , P) (q , Q)) = compPathP P Q

-- -- -- -- -- -- --   A// = A // isTrans‚Üîp

-- -- -- -- -- -- --   -- [_]/‚Üî : ?
  
-- -- -- -- -- -- --   [_]/‚Üî = [_]// {Rt = isTrans‚Üîp}
  




-- -- -- -- -- -- -- module EMFam‚â° {‚Ñì ‚Ñì'} {A : Type ‚Ñì} (isSetA : isSet A)
-- -- -- -- -- -- --                 (B : Type ‚Ñì')
-- -- -- -- -- -- --               where

-- -- -- -- -- -- --   open GroupStr (snd (hSetLoop-Group _ isSetA))

-- -- -- -- -- -- --   open AutR {A = A}

-- -- -- -- -- -- --   -- AhSet‚â° : A ‚âÉ A ‚Üí Path (hSet ‚Ñì) (A , isSetA) (A , isSetA)
-- -- -- -- -- -- --   -- AhSet‚â° = TypeOfHLevel‚â° 2 ‚àò ua

-- -- -- -- -- -- --   lg = hSetLoop-Group _ isSetA

-- -- -- -- -- -- --   EMG = EM‚ÇÅ lg 

-- -- -- -- -- -- --   EM‚ÇÅHFam : EMG ‚Üí hSet ‚Ñì
-- -- -- -- -- -- --   EM‚ÇÅHFam = EMrec.f w
-- -- -- -- -- -- --     where
-- -- -- -- -- -- --      w : EMrec lg isGroupoidHSet
-- -- -- -- -- -- --      EMrec.b w = A , isSetA
-- -- -- -- -- -- --      EMrec.bloop w = TypeOfHLevel‚â° 2
-- -- -- -- -- -- --      EMrec.bComp w f g =
-- -- -- -- -- -- --        Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- --          (compPath-filler _ _)

-- -- -- -- -- -- --   -- elimEM lg
-- -- -- -- -- -- --   --  ( Œª _ ‚Üí isGroupoidHSet) (A , isSetA)
-- -- -- -- -- -- --   --       (TypeOfHLevel‚â° 2)
-- -- -- -- -- -- --   --       Œª g h ‚Üí Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- --   --    (compPath-filler _ _) 

-- -- -- -- -- -- --   EM‚ÇÅfam = fst ‚àò EM‚ÇÅHFam



-- -- -- -- -- -- --   -- sqH : (g : A ‚â° A) ‚Üí
-- -- -- -- -- -- --   --           ((a : A) ‚Üí [ a ]/‚Üî ‚â° [ a ]/‚Üî)
-- -- -- -- -- -- --   --           ‚â°
-- -- -- -- -- -- --   --           PathP (Œª i ‚Üí g i ‚Üí A//) [_]// [_]//
-- -- -- -- -- -- --   -- sqH g =
-- -- -- -- -- -- --   --    (Œª i ‚Üí (a : A) ‚Üí
-- -- -- -- -- -- --   --       Path A// [ a ]//
-- -- -- -- -- -- --   --              (eq// {a = a} {b = transport (Œª j ‚Üí g j) a}
-- -- -- -- -- -- --   --                (g , toPathP refl) i ) )
-- -- -- -- -- -- --   --    ‚àô‚àô (Œª i ‚Üí (a : ua isoH i) ‚Üí
-- -- -- -- -- -- --   --    Path A// [ fst (pFst i a) ]//
-- -- -- -- -- -- --   --             [ snd (pFst i a) ]//)
-- -- -- -- -- -- --   --    ‚àô‚àô ua zz
-- -- -- -- -- -- --   --  where
-- -- -- -- -- -- --   --   isoH : _
-- -- -- -- -- -- --   --   isoH = invEquiv (Œ£singlP‚âÉA g)

-- -- -- -- -- -- --   --   pFst : PathP (Œª i ‚Üí ua isoH i ‚Üí A √ó A)
-- -- -- -- -- -- --   --      (Œª x ‚Üí x , transport g x)
-- -- -- -- -- -- --   --      fst
-- -- -- -- -- -- --   --   pFst i z = fst (ua-unglue isoH i z)

-- -- -- -- -- -- --   --   -- qq : {!!}
-- -- -- -- -- -- --   --   --       ‚â° ((((a , a') , _) :
-- -- -- -- -- -- --   --   --         Œ£ (A √ó A) (Œª (a , a') ‚Üí PathP (Œª z ‚Üí g z) a a')) ‚Üí
-- -- -- -- -- -- --   --   --            [ a ]// ‚â° [ a' ]//)
-- -- -- -- -- -- --   --   -- qq = {!!}

-- -- -- -- -- -- --   --   zz : ((((a , a') , _)
-- -- -- -- -- -- --   --           : Œ£ (A √ó A) (Œª (a , a') ‚Üí PathP (Œª z ‚Üí g z) a a')) ‚Üí
-- -- -- -- -- -- --   --          [ a ]// ‚â° [ a' ]//)
-- -- -- -- -- -- --   --          ‚âÉ PathP (Œª i ‚Üí (x : g i) ‚Üí A//) [_]// [_]//
-- -- -- -- -- -- --   --   zz = curryEquiv'  ‚àô‚Çë funExtDepEquiv {A = Œª z ‚Üí g z}
-- -- -- -- -- -- --   --                       {B = Œª _ _ ‚Üí A//}
-- -- -- -- -- -- --   --                       {[_]//} {[_]//}
-- -- -- -- -- -- --   -- sqH' : (Œª x ‚Üí (a : A) ‚Üí [ a ]// ‚â° [ a ]//) ‚â°
-- -- -- -- -- -- --   --        (Œª x ‚Üí PathP (Œª i ‚Üí x i ‚Üí A//) [_]// [_]//)
-- -- -- -- -- -- --   -- sqH' = funExt sqH

-- -- -- -- -- -- --   -- sqHŒ† : (A ‚â° A ‚Üí (a : A) ‚Üí Path A// ([ a ]//) ([ a ]//)) ‚â°
-- -- -- -- -- -- --   --        ((x : A ‚â° A) ‚Üí PathP (Œª i ‚Üí x i ‚Üí A//) [_]// [_]//)
-- -- -- -- -- -- --   -- sqHŒ† i = (x : A ‚â° A) ‚Üí sqH x i

-- -- -- -- -- -- --   -- A//‚â° : (g : A ‚â° A) ‚Üí
-- -- -- -- -- -- --   --     PathP (Œª i ‚Üí g i ‚Üí A// {A = A})
-- -- -- -- -- -- --   --      (Œª x ‚Üí [ x ]//)
-- -- -- -- -- -- --   --      (Œª x ‚Üí [ x ]//)
-- -- -- -- -- -- --   -- A//‚â° g = {!!}

  

  

-- -- -- -- -- -- --   A//‚â° : (g : A ‚â° A) ‚Üí
-- -- -- -- -- -- --       PathP (Œª i ‚Üí g i ‚Üí A//)
-- -- -- -- -- -- --        ([_]/‚Üî)
-- -- -- -- -- -- --        ([_]/‚Üî)
-- -- -- -- -- -- --   A//‚â° g = funExt (Œª x ‚Üí eq//
-- -- -- -- -- -- --       (g , (transport-filler g x))) 
-- -- -- -- -- -- --      ‚óÅ congP (Œª _ ‚Üí [_]/‚Üî ‚àò_) (transport-fillerExt‚Åª g)
  
-- -- -- -- -- -- --   to : Œ£ _ EM‚ÇÅfam ‚Üí A//
-- -- -- -- -- -- --   to = uncurry (EMelim.f w)
-- -- -- -- -- -- --    where
-- -- -- -- -- -- --    --  w : (x : EMG) (y : EM‚ÇÅfam x) ‚Üí A//
-- -- -- -- -- -- --    --  w embase y = [ y ]//
-- -- -- -- -- -- --    --  w (emloop x i) y =
-- -- -- -- -- -- --    --    eq// (x , Œª i‚ÇÅ ‚Üí {!y!}) i
-- -- -- -- -- -- --    --  w (emcomp g h j i) y = {!!}
-- -- -- -- -- -- --    --  w (emsquash x x‚ÇÅ p q r s i i‚ÇÅ i‚ÇÇ) y = {!!}
    
-- -- -- -- -- -- --     w : EMelim lg (Œª z ‚Üí (y : EM‚ÇÅfam z) ‚Üí A//)
    
-- -- -- -- -- -- --     EMelim.isGrpB w _ = isGroupoidŒ† Œª _ ‚Üí squash//
-- -- -- -- -- -- --     EMelim.b w x = [ x ]//
-- -- -- -- -- -- --     EMelim.bPathP w = A//‚â°

-- -- -- -- -- -- --     EMelim.bSqP w g h =
-- -- -- -- -- -- --      let z : SquareP (Œª i j ‚Üí EM‚ÇÅfam (emcomp g h i j) ‚Üí A//)
-- -- -- -- -- -- --                (A//‚â° g)
-- -- -- -- -- -- --                (A//‚â° (g ‚àô h))
-- -- -- -- -- -- --                refl
-- -- -- -- -- -- --                (A//‚â° h)
-- -- -- -- -- -- --          z i j = 
-- -- -- -- -- -- --           hcomp
-- -- -- -- -- -- --             (Œª k ‚Üí
-- -- -- -- -- -- --             Œª { (i = i0) ‚Üí {!!}
-- -- -- -- -- -- --               ; (i = i1) ‚Üí {!!}
-- -- -- -- -- -- --               ; (j = i0) ‚Üí {!!}
-- -- -- -- -- -- --               ; (j = i1) ‚Üí {!!}
-- -- -- -- -- -- --               })
-- -- -- -- -- -- --             {!!}

-- -- -- -- -- -- --      in  z
    
-- -- -- -- -- -- --       -- let
-- -- -- -- -- -- --       --     z : Square
-- -- -- -- -- -- --       --           (emloop {Group = lg} g)
-- -- -- -- -- -- --       --           (emloop _)
-- -- -- -- -- -- --       --           (Œª i ‚Üí embase)
-- -- -- -- -- -- --       --           Œª i ‚Üí emloop h i
-- -- -- -- -- -- --       --     z = emcomp g h

-- -- -- -- -- -- --       --     zz : {x y z : A} (P : PathP (Œª i ‚Üí g i) x y)
-- -- -- -- -- -- --       --        ‚Üí (Q : PathP (Œª i ‚Üí h i) y z) ‚Üí Square
-- -- -- -- -- -- --       --              (eq// (g , P))
-- -- -- -- -- -- --       --              (eq// (isTrans‚Üîp x y z (g , P) (h , Q)))
-- -- -- -- -- -- --       --              (Œª i ‚Üí [ x ]//)
-- -- -- -- -- -- --       --              Œª i ‚Üí eq// (h , Q) i
-- -- -- -- -- -- --       --     zz P Q = comp// {Rt = isTrans‚Üîp}
-- -- -- -- -- -- --       --            (g , P) (h , Q)

-- -- -- -- -- -- --       --     zz' : SquareP (Œª i j ‚Üí EM‚ÇÅfam (emcomp g h i j) ‚Üí A//)
-- -- -- -- -- -- --       --             (funExtDep (Œª P ‚Üí eq// (g , P)))
-- -- -- -- -- -- --       --             (compPathP‚Üí (Œª x ‚Üí x) (funExtDep (Œª P ‚Üí eq// (g , P)))
-- -- -- -- -- -- --       --               (funExtDep (Œª P ‚Üí eq// (h , P))))
-- -- -- -- -- -- --       --             (Œª i ‚Üí [_]//)
-- -- -- -- -- -- --       --             Œª i ‚Üí funExtDep (Œª P ‚Üí eq// (h , P)) i
-- -- -- -- -- -- --       --     zz' = compPathP‚Üífiller (Œª x ‚Üí x) {q = g} {r = h}
-- -- -- -- -- -- --       --             (funExtDep (Œª P ‚Üí eq// (g , P)))
-- -- -- -- -- -- --       --             (funExtDep (Œª P ‚Üí eq// (h , P)))

-- -- -- -- -- -- --       --     sss : Square {A = (x : A) ‚Üí ‚àÄ P Q ‚Üí  A//}
-- -- -- -- -- -- --       --             (Œª j a P Q ‚Üí eq// (g , P) j)
-- -- -- -- -- -- --       --             (Œª j a P Q ‚Üí
-- -- -- -- -- -- --       --                 eq// ((g ‚àô h)
-- -- -- -- -- -- --       --                        , compPathP P Q) j)
-- -- -- -- -- -- --       --             (Œª i a P Q ‚Üí [ a ]//)
-- -- -- -- -- -- --       --             Œª i a P Q ‚Üí eq// (h , Q) i
-- -- -- -- -- -- --       --     sss i j a P Q = zz {a} {a} {a}
-- -- -- -- -- -- --       --       P Q i j


-- -- -- -- -- -- --       --     -- sss' : Square {A = (x : A) ‚Üí  A//}
-- -- -- -- -- -- --       --     --         {!!}
-- -- -- -- -- -- --       --     --         {!!}
-- -- -- -- -- -- --       --     --         {!!}
-- -- -- -- -- -- --       --     --         {!!}
-- -- -- -- -- -- --       --     -- sss' i j a = zz {a} 
-- -- -- -- -- -- --       --     --   (toPathP refl) (toPathP refl) i j

-- -- -- -- -- -- --       --     zzE : (g : A ‚â° A) ‚Üí Œ£
-- -- -- -- -- -- --       --             (({x‚ÇÄ : g i0} {x‚ÇÅ : g i1} (p : PathP (Œª z‚ÇÅ ‚Üí g z‚ÇÅ) x‚ÇÄ x‚ÇÅ) ‚Üí
-- -- -- -- -- -- --       --               [ x‚ÇÄ ]// ‚â° [ x‚ÇÅ ]//) ‚Üí
-- -- -- -- -- -- --       --              PathP (Œª i ‚Üí (x : g i) ‚Üí A//) [_]// [_]//)
-- -- -- -- -- -- --       --             isEquiv
-- -- -- -- -- -- --       --     zzE g = ((funExtDepEquiv
-- -- -- -- -- -- --       --              {A = Œª z ‚Üí g z}
-- -- -- -- -- -- --       --                             {B = Œª _ _ ‚Üí A//}) {[_]//} {[_]//})


-- -- -- -- -- -- --       --     zzEsq : ‚àÄ g ‚Üí (b : PathP (Œª i ‚Üí g i ‚Üí A//) [_]// [_]//) ‚Üí
-- -- -- -- -- -- --       --               funExtDep (Œª p i ‚Üí b i (p i)) ‚â° b
-- -- -- -- -- -- --       --     zzEsq g = secEq (zzE g)


-- -- -- -- -- -- --       --     zzEsq' : (g : A ‚â° A) ‚Üí ‚àÄ a ‚Üí
-- -- -- -- -- -- --       --                      (Œª p i ‚Üí (funExtDep a) i (p i)) ‚â° a
-- -- -- -- -- -- --       --     zzEsq' g = retEq (zzE g)

-- -- -- -- -- -- --       --     ZZZ : Square
-- -- -- -- -- -- --       --             (Œª j ‚Üí EM‚ÇÅfam (emloop g j) ‚Üí A)
-- -- -- -- -- -- --       --             (Œª j ‚Üí EM‚ÇÅfam (emloop (g ‚àô h) j) ‚Üí A)
-- -- -- -- -- -- --       --             refl
-- -- -- -- -- -- --       --             (Œª i ‚Üí EM‚ÇÅfam (emloop h i) ‚Üí A)
-- -- -- -- -- -- --       --     ZZZ i j =
-- -- -- -- -- -- --       --        hcomp (Œª k ‚Üí
-- -- -- -- -- -- --       --           Œª { (i = i0) ‚Üí g j ‚Üí A
-- -- -- -- -- -- --       --             ; (i = i1) ‚Üí EM‚ÇÅfam (z k j) ‚Üí A
-- -- -- -- -- -- --       --             ; (j = i0) ‚Üí A ‚Üí A
-- -- -- -- -- -- --       --             ; (j = i1) ‚Üí h (i ‚àß k) ‚Üí A
-- -- -- -- -- -- --       --             })
-- -- -- -- -- -- --       --          (g j ‚Üí A)

-- -- -- -- -- -- --       --     -- zzzB : SquareP (Œª j i ‚Üí EM‚ÇÅfam (emcomp g h i j) ‚Üí A//)
-- -- -- -- -- -- --       --     --          (Œª i ‚Üí Œª a ‚Üí eq//
-- -- -- -- -- -- --       --     --                {a = transport (Œª i‚ÇÇ ‚Üí h i‚ÇÇ) a}
-- -- -- -- -- -- --       --     --                 (h , toPathP refl) )
-- -- -- -- -- -- --       --     --           {!!}
-- -- -- -- -- -- --       --     --           {!!}
-- -- -- -- -- -- --       --     --          {!!}
-- -- -- -- -- -- --       --     -- zzzB = toPathP refl

-- -- -- -- -- -- --       --     sqG : ‚àÄ g ‚Üí SquareP (Œª j _ ‚Üí g j ‚Üí A//)
-- -- -- -- -- -- --       --                (Œª i a ‚Üí (eq// {a = a} (g , toPathP refl)) (~ i))
-- -- -- -- -- -- --       --                (Œª _ ‚Üí [_]//)                     
-- -- -- -- -- -- --       --                (funExtDep
-- -- -- -- -- -- --       --                    {A = Œª z‚ÇÅ ‚Üí g z‚ÇÅ}
-- -- -- -- -- -- --       --                    {B = Œª i _ ‚Üí A//}
-- -- -- -- -- -- --       --                   {f = Œª x ‚Üí [ transport (Œª z‚ÇÅ ‚Üí g z‚ÇÅ) x ]//}
-- -- -- -- -- -- --       --                   {g = [_]//}
-- -- -- -- -- -- --       --                  (cong [_]// ‚àò fromPathP
-- -- -- -- -- -- --       --                   {A = Œª z‚ÇÅ ‚Üí g z‚ÇÅ}))
-- -- -- -- -- -- --       --                (funExtDep
-- -- -- -- -- -- --       --                   {A = Œª z‚ÇÅ ‚Üí g z‚ÇÅ}
-- -- -- -- -- -- --       --                    {B = Œª i _ ‚Üí A//}
-- -- -- -- -- -- --       --                   {f = [_]//}
-- -- -- -- -- -- --       --                   {g = [_]//}
-- -- -- -- -- -- --       --                   (Œª P ‚Üí eq// (g , P)))

-- -- -- -- -- -- --       --     sqG g j i =
-- -- -- -- -- -- --       --        funExtDep {A = Œª z‚ÇÅ ‚Üí g z‚ÇÅ} {B = Œª i _ ‚Üí A//}
-- -- -- -- -- -- --       --         {f = Œª a ‚Üí (eq// {a = a} (g , toPathP refl)) (~ i) }
-- -- -- -- -- -- --       --         {g = [_]//}
-- -- -- -- -- -- --       --           (Œª {x‚ÇÄ} {x‚ÇÅ} p ‚Üí {!!}) j
-- -- -- -- -- -- --       --       -- (Œª i j a ‚Üí (zzEsq' g (Œª P ‚Üí eq// (g , P))) (~ i)
-- -- -- -- -- -- --       --       --      {a} {transport g a}
-- -- -- -- -- -- --       --       --           (toPathP refl) (~ j))
-- -- -- -- -- -- --       --       -- ‚óÅ {!!}

-- -- -- -- -- -- --       --     sqD : SquareP (Œª i j ‚Üí EM‚ÇÅfam (emcomp g h i j) ‚Üí A//)
              
-- -- -- -- -- -- --       --         ((funExtDep (cong [_]// ‚àò fromPathP {A =
-- -- -- -- -- -- --       --                    Œª z‚ÇÅ ‚Üí g z‚ÇÅ})))
-- -- -- -- -- -- --       --         (cong (([_]// {Rt = isTrans‚Üîp}) ‚àò_)
-- -- -- -- -- -- --       --           (sym (funExt (transportComposite g h)))
-- -- -- -- -- -- --       --           ‚óÅ ((funExtDep (cong [_]// ‚àò fromPathP {A =
-- -- -- -- -- -- --       --                    Œª z‚ÇÅ ‚Üí (g ‚àô h) z‚ÇÅ}))))
              
              
-- -- -- -- -- -- --       --         (Œª i a ‚Üí eq// (h ,
-- -- -- -- -- -- --       --                     (toPathP (Œª _ ‚Üí 
-- -- -- -- -- -- --       --                      transport h
-- -- -- -- -- -- --       --                       (transport g a)))) i)
-- -- -- -- -- -- --       --         (funExtDep (Œª P ‚Üí eq// (h , P)))
-- -- -- -- -- -- --       --     sqD i j = {!!}

-- -- -- -- -- -- --       --     zzz : SquareP (Œª i j ‚Üí EM‚ÇÅfam (emcomp g h i j) ‚Üí A//)
-- -- -- -- -- -- --       --             (funExtDep (Œª P ‚Üí eq// (g , P)))
-- -- -- -- -- -- --       --             (funExtDep (Œª P ‚Üí eq// (g ‚àô h , P)))
-- -- -- -- -- -- --       --             refl
-- -- -- -- -- -- --       --             (funExtDep (Œª P ‚Üí eq// (h , P)))
-- -- -- -- -- -- --       --     zzz i j = hcomp (Œª k ‚Üí
-- -- -- -- -- -- --       --           Œª { (i = i0) ‚Üí sqG g j k
-- -- -- -- -- -- --       --             ; (i = i1) ‚Üí {!!}
-- -- -- -- -- -- --       --             ; (j = i0) ‚Üí Œª a ‚Üí
-- -- -- -- -- -- --       --                 zz {a} {transport (Œª i‚ÇÇ ‚Üí g i‚ÇÇ) a}
-- -- -- -- -- -- --       --                   (toPathP refl)
-- -- -- -- -- -- --       --                     (toPathP (refl {x =
-- -- -- -- -- -- --       --                      transport (Œª i‚ÇÅ ‚Üí h i‚ÇÅ)
-- -- -- -- -- -- --       --                       (transport (Œª i‚ÇÇ ‚Üí g i‚ÇÇ) a)})) i (~ k) 
-- -- -- -- -- -- --       --             ; (j = i1) ‚Üí funExtDep (Œª P ‚Üí eq// (h , P)) i
-- -- -- -- -- -- --       --             })
-- -- -- -- -- -- --       --          (sqD i j)

-- -- -- -- -- -- --       -- in zzz
-- -- -- -- -- -- --       --     -- zz' ‚ñ∑
-- -- -- -- -- -- --       --     --  (sym (fromPathP (compPathP‚Üífiller
-- -- -- -- -- -- --       --     --              (Œª x ‚Üí x)
-- -- -- -- -- -- --       --     --         (funExtDep (Œª P ‚Üí eq// (g , P)))
-- -- -- -- -- -- --       --     --         (funExtDep (Œª P ‚Üí eq// (h , P))))) ‚àô
-- -- -- -- -- -- --       --     --          {!!})
       
-- -- -- -- -- -- --       --      -- (
-- -- -- -- -- -- --       --      --  (sym (invEq‚â°‚ÜíequivFun‚â° funExtDepEquiv
-- -- -- -- -- -- --       --      --       {a = (Œª P ‚Üí eq// ((snd lg GroupStr.¬∑ g) h , P))}
-- -- -- -- -- -- --       --      --      ( (Œª P i ‚Üí compPathP‚Üí
-- -- -- -- -- -- --       --      --       (Œª x ‚Üí x)
-- -- -- -- -- -- --       --      --        (funExtDep (Œª P ‚Üí eq// (g , P)))
-- -- -- -- -- -- --       --      --        (funExtDep (Œª P ‚Üí eq// (h , P))) i (P i))
-- -- -- -- -- -- --       --      --        ‚â°‚ü® {! !} ‚ü© {!!}
-- -- -- -- -- -- --       --      --        ‚â°‚ü® {!!} ‚ü© 
-- -- -- -- -- -- --       --      --        (Œª P ‚Üí eq// ((snd lg GroupStr.¬∑ g) h , P)) ‚àé))))

-- -- -- -- -- -- --   isGroupoidŒ£Em‚ÇÅfam : isGroupoid (Œ£ EMG (fst ‚àò EM‚ÇÅHFam))
-- -- -- -- -- -- --   isGroupoidŒ£Em‚ÇÅfam = isOfHLevelŒ£ 3 emsquash
-- -- -- -- -- -- --                     (isSet‚ÜíisGroupoid ‚àò snd ‚àò EM‚ÇÅHFam)

-- -- -- -- -- -- --   from : A// ‚Üí Œ£ _ EM‚ÇÅfam
-- -- -- -- -- -- --   from = Rrec.f w
-- -- -- -- -- -- --    where
-- -- -- -- -- -- --     w : Rrec (Œ£ EMG EM‚ÇÅfam)
-- -- -- -- -- -- --     Rrec.Bgpd w = isOfHLevelŒ£ 3 emsquash
-- -- -- -- -- -- --                     (isSet‚ÜíisGroupoid ‚àò snd ‚àò EM‚ÇÅHFam)
-- -- -- -- -- -- --     Rrec.fb w x = embase , x
-- -- -- -- -- -- --     Rrec.feq w (p , P) = Œ£PathP ((emloop p) , P)
-- -- -- -- -- -- --     fst (Rrec.fsq w (r , _) (s , _) i i‚ÇÅ) = emcomp r s i i‚ÇÅ
-- -- -- -- -- -- --     snd (Rrec.fsq w (r , R) (s , S) i i‚ÇÅ) = compPathP-filler R S i i‚ÇÅ


-- -- -- -- -- -- -- --   fromTo : section from to
-- -- -- -- -- -- -- --   fromTo = uncurry (EMelimSet.f w)
-- -- -- -- -- -- -- --     where
-- -- -- -- -- -- -- --      w : EMelimSet lg (Œª z ‚Üí
-- -- -- -- -- -- -- --            (y : EM‚ÇÅfam z) ‚Üí from (to (z , y)) ‚â° (z , y))
-- -- -- -- -- -- -- --      EMelimSet.isSetB w - = isSetŒ† Œª _ ‚Üí isGroupoidŒ£Em‚ÇÅfam _ _
-- -- -- -- -- -- -- --      EMelimSet.b w _ = refl
-- -- -- -- -- -- -- --      EMelimSet.bPathP w g =
-- -- -- -- -- -- -- --       let z' = retEq (funExtDepEquiv)
-- -- -- -- -- -- -- --                 Œª P ‚Üí eq// {Rt = isTrans‚Üîp} (g , P)

-- -- -- -- -- -- -- --       in funExtDep Œª {x‚ÇÄ} {x‚ÇÅ} P ‚Üí
-- -- -- -- -- -- -- --            flipSquare Œª i ‚Üí cong (from) (z' i P)                 
               
-- -- -- -- -- -- -- -- --   toFrom : retract from to
-- -- -- -- -- -- -- -- --   toFrom = RelimSet.f w
-- -- -- -- -- -- -- -- --    where
-- -- -- -- -- -- -- -- --     w : RelimSet (Œª z ‚Üí to (from z) ‚â° z)
-- -- -- -- -- -- -- -- --     RelimSet.truncB w _ = squash// _ _
-- -- -- -- -- -- -- -- --     RelimSet.fb w _ = refl
-- -- -- -- -- -- -- -- --     RelimSet.fbEq w = uncurry Œª g ‚Üí 
-- -- -- -- -- -- -- -- --      funExt‚Åª Œª i P j ‚Üí
-- -- -- -- -- -- -- -- --        (retEq funExtDepEquiv) (Œª p ‚Üí eq// (g , p)) j P i 
     
-- -- -- -- -- -- -- -- -- -- module EMFam {‚Ñì} {A : Type ‚Ñì} (isSetA : isSet A)
            
-- -- -- -- -- -- -- -- -- --               where

-- -- -- -- -- -- -- -- -- --   open GroupStr (snd (Symmetric-Group _ isSetA))
-- -- -- -- -- -- -- -- -- --   -- module M = IsGroupHom (snd m)

  

-- -- -- -- -- -- -- -- -- --   -- actR : A ‚Üí A ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
-- -- -- -- -- -- -- -- -- --   -- actR x y = Œ£ ‚ü® G ‚ü© Œª g ‚Üí y ‚â° fst (fst m g) x 

-- -- -- -- -- -- -- -- -- --   -- actRTrans : ‚àÄ x y z ‚Üí actR x y ‚Üí actR y z ‚Üí actR x z 
-- -- -- -- -- -- -- -- -- --   -- actRTrans x y z (g , p) (h , q) = (g ¬∑ h) ,
-- -- -- -- -- -- -- -- -- --   --   q ‚àô‚àô cong (fst (fst m h)) p ‚àô‚àô sym (funExt‚Åª (cong fst (M.pres¬∑ g h)) x)



-- -- -- -- -- -- -- -- -- -- -- TypeOfHLevel‚â° : (n : HLevel) {X Y : TypeOfHLevel ‚Ñì n} ‚Üí ‚ü® X ‚ü© ‚â° ‚ü® Y ‚ü© ‚Üí X ‚â° Y

  
-- -- -- -- -- -- -- -- -- --   TypeOfHLevel‚àô : (n : HLevel) {X Y Z : TypeOfHLevel ‚Ñì n} ‚Üí (p : ‚ü® X ‚ü© ‚â° ‚ü® Y ‚ü©) ‚Üí (q : ‚ü® Y ‚ü© ‚â° ‚ü® Z ‚ü©) 
-- -- -- -- -- -- -- -- -- --                    ‚Üí  TypeOfHLevel‚â° n {X = X} {Y = Y}  p
-- -- -- -- -- -- -- -- -- --                        ‚àô TypeOfHLevel‚â° n {X = Y} {Y = Z}  q ‚â° TypeOfHLevel‚â° n ( p ‚àô q)
-- -- -- -- -- -- -- -- -- --   fst (TypeOfHLevel‚àô n p q i i‚ÇÅ) = (p ‚àô q) i‚ÇÅ
-- -- -- -- -- -- -- -- -- --   snd (TypeOfHLevel‚àô n {_ , X} {_ , Y} {_ , Z} p q i i‚ÇÅ) =
-- -- -- -- -- -- -- -- -- --      isSet‚ÜíSquareP (Œª i i‚ÇÅ ‚Üí isProp‚ÜíisSet (isPropIsOfHLevel {A = (p ‚àô q) i‚ÇÅ} n))
-- -- -- -- -- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí snd ((TypeOfHLevel‚â° n {X = _ , X} {Y = _ , Y} p
-- -- -- -- -- -- -- -- -- --            ‚àô TypeOfHLevel‚â° n {X = _ , Y} {Y = _ , Z} q) i‚ÇÅ))
-- -- -- -- -- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí snd (TypeOfHLevel‚â° n {X = _ , X} {Y = _ , Z} (p ‚àô q) i‚ÇÅ)) refl refl i i‚ÇÅ

-- -- -- -- -- -- -- -- -- --   TypeOfHLevel‚àô' : (n : HLevel) {X : TypeOfHLevel ‚Ñì n} ‚Üí (p : ‚ü® X ‚ü© ‚â° ‚ü® X ‚ü©) ‚Üí (q : ‚ü® X ‚ü© ‚â° ‚ü® X ‚ü©) 
-- -- -- -- -- -- -- -- -- --                    ‚Üí  TypeOfHLevel‚â° n {X = X} {Y = X}  p
-- -- -- -- -- -- -- -- -- --                        ‚àô TypeOfHLevel‚â° n {X = X} {Y = X}  q ‚â° TypeOfHLevel‚â° n ( p ‚àô q)
-- -- -- -- -- -- -- -- -- --   fst (TypeOfHLevel‚àô' n p q i i‚ÇÅ) = (p ‚àô q) i‚ÇÅ
-- -- -- -- -- -- -- -- -- --   snd (TypeOfHLevel‚àô' n {_ , X} p q i i‚ÇÅ) =
-- -- -- -- -- -- -- -- -- --      isSet‚ÜíSquareP (Œª i i‚ÇÅ ‚Üí isProp‚ÜíisSet (isPropIsOfHLevel {A = (p ‚àô q) i‚ÇÅ} n))
-- -- -- -- -- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí snd ((TypeOfHLevel‚â° n {X = _ , X} {Y = _ , X} p
-- -- -- -- -- -- -- -- -- --            ‚àô TypeOfHLevel‚â° n {X = _ , X} {Y = _ , X} q) i‚ÇÅ))
-- -- -- -- -- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí snd (TypeOfHLevel‚â° n {X = _ , X} {Y = _ , X} (p ‚àô q) i‚ÇÅ)) refl refl i i‚ÇÅ



-- -- -- -- -- -- -- -- -- --   -- AhSet‚â° : ‚ü® G ‚ü© ‚Üí Path (hSet ‚Ñì) (A , isSetA) (A , isSetA)  
-- -- -- -- -- -- -- -- -- --   -- AhSet‚â° = {!!}

-- -- -- -- -- -- -- -- -- --   AhSet‚â° : A ‚âÉ A ‚Üí Path (hSet ‚Ñì) (A , isSetA) (A , isSetA)
-- -- -- -- -- -- -- -- -- --   AhSet‚â° = TypeOfHLevel‚â° 2 ‚àò ua


-- -- -- -- -- -- -- -- -- --   G‚â° : (A ‚âÉ A) ‚Üí Path (hSet ‚Ñì) (A , isSetA) (A , isSetA)  
-- -- -- -- -- -- -- -- -- --   G‚â° = AhSet‚â°

-- -- -- -- -- -- -- -- -- --   GSq : (g h : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- --       Square
-- -- -- -- -- -- -- -- -- --         (G‚â° g)
-- -- -- -- -- -- -- -- -- --         (G‚â° (g ¬∑ h))
-- -- -- -- -- -- -- -- -- --         (Œª j ‚Üí A , isSetA)
-- -- -- -- -- -- -- -- -- --         (G‚â° h)
-- -- -- -- -- -- -- -- -- --   GSq g h =
-- -- -- -- -- -- -- -- -- --     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- --       ( (compPath-filler (ua (g)) (ua (h))) ‚ñ∑
-- -- -- -- -- -- -- -- -- --         (sym (uaCompEquiv _ _)))

-- -- -- -- -- -- -- -- -- -- --   GSq-filler : (g h : fst G) ‚Üí 
-- -- -- -- -- -- -- -- -- -- --          PathP (Œª k ‚Üí Square 
-- -- -- -- -- -- -- -- -- -- --                          (ua (fst m g))
-- -- -- -- -- -- -- -- -- -- --                          (((Œª i ‚Üí uaCompEquiv (fst m g) (fst m h) (~ i)) ‚àô
-- -- -- -- -- -- -- -- -- -- --                             (Œª i ‚Üí ua (snd m .IsGroupHom.pres¬∑ g h (~ i))))
-- -- -- -- -- -- -- -- -- -- --                            k)
-- -- -- -- -- -- -- -- -- -- --                          refl
-- -- -- -- -- -- -- -- -- -- --                          Œª i ‚Üí ua (fst m h) i)
-- -- -- -- -- -- -- -- -- -- --            ((compPath-filler (ua (fst m g)) (ua (fst m h))))
-- -- -- -- -- -- -- -- -- -- --            (Œª i j ‚Üí fst ((GSq g h) i j))
-- -- -- -- -- -- -- -- -- -- --   GSq-filler g h =
-- -- -- -- -- -- -- -- -- -- --    doubleWhiskFiller refl
-- -- -- -- -- -- -- -- -- -- --      (compPath-filler (ua (fst m g)) (ua (fst m h)))
-- -- -- -- -- -- -- -- -- -- --       ((sym (uaCompEquiv _ _) ‚àô cong ua (sym ((snd m) .IsGroupHom.pres¬∑ g h))))

-- -- -- -- -- -- -- -- -- -- --   paP : (g : fst G) ‚Üí PathP (Œª j ‚Üí fst (G‚â° g j) ‚Üí A) (idfun A) (invEq (fst m g))
-- -- -- -- -- -- -- -- -- -- --   paP g = sym (funExt (retEq (fst m g)))
-- -- -- -- -- -- -- -- -- -- --                    ‚óÅ (Œª j x ‚Üí (invEq (fst m g)) (ua-unglue ((fst m) g) j x))

-- -- -- -- -- -- -- -- -- -- --   paP' : (g : fst G) ‚Üí PathP (Œª j ‚Üí fst (G‚â° g j) ‚Üí A) (equivFun (fst m g)) (idfun _)
-- -- -- -- -- -- -- -- -- -- --   paP' g i = ua-unglue (fst m g) i

-- -- -- -- -- -- -- -- -- -- --   -- paP¬∑ : (g h : fst G) ‚Üí
-- -- -- -- -- -- -- -- -- -- --   --            PathP (Œª j ‚Üí fst (G‚â° (g ¬∑ h) j) ‚Üí A)
-- -- -- -- -- -- -- -- -- -- --   --             (equivFun (fst m h) ‚àò equivFun (fst m g)) (idfun A)
-- -- -- -- -- -- -- -- -- -- --   -- paP¬∑ g h = {!M.pres¬∑ g h!}

-- -- -- -- -- -- -- -- -- -- --   -- unglueEMfam : (g h : fst G) ‚Üí SquareP (Œª i j ‚Üí fst (GSq g h i j) ‚Üí A)
-- -- -- -- -- -- -- -- -- -- --   --                 {idfun _} {invEq (fst m g)}
-- -- -- -- -- -- -- -- -- -- --   --                 (paP g)
-- -- -- -- -- -- -- -- -- -- --   --                 {idfun _} {invEq (fst m g) ‚àò invEq (fst m h)}
-- -- -- -- -- -- -- -- -- -- --   --                 (paP (g ¬∑ h) ‚ñ∑ cong invEq (M.pres¬∑ g h))
-- -- -- -- -- -- -- -- -- -- --   --                 refl
-- -- -- -- -- -- -- -- -- -- --   --                 (congP (Œª _ ‚Üí invEq (fst m g) ‚àò_) (paP h))
                  
-- -- -- -- -- -- -- -- -- -- --   -- unglueEMfam = {!!}

-- -- -- -- -- -- -- -- -- -- --   -- unglueEMfam' : (g h : fst G) ‚Üí SquareP (Œª i j ‚Üí fst (GSq g h i j) ‚Üí A)
-- -- -- -- -- -- -- -- -- -- --   --                 {equivFun (fst m h) ‚àò equivFun (fst m g)} {equivFun (fst m h)}
-- -- -- -- -- -- -- -- -- -- --   --                 (Œª i ‚Üí equivFun (fst m h) ‚àò ua-unglue (fst m g) i)
-- -- -- -- -- -- -- -- -- -- --   --                 {equivFun (fst m h) ‚àò equivFun (fst m g)} {idfun _}
-- -- -- -- -- -- -- -- -- -- --   --                 -- ({!(Œª i ‚Üí ua-unglue ( fst m h ‚àô) i)!} ‚ñ∑ {!!})
-- -- -- -- -- -- -- -- -- -- --   --                 (cong fst (sym (M.pres¬∑ g h))
-- -- -- -- -- -- -- -- -- -- --   --                   ‚óÅ (Œª i ‚Üí ua-unglue (fst m (g ¬∑ h)) i))
-- -- -- -- -- -- -- -- -- -- --   --                 refl
-- -- -- -- -- -- -- -- -- -- --   --                 Œª i ‚Üí ua-unglue (fst m h) i
                  
-- -- -- -- -- -- -- -- -- -- --   -- unglueEMfam' = {!!}

-- -- -- -- -- -- -- -- -- -- --   glueP : ‚àÄ g ‚Üí PathP (Œª j ‚Üí A ‚Üí fst (G‚â° g j)) (idfun A) (fst (fst m g))
-- -- -- -- -- -- -- -- -- -- --   glueP g = (Œª i a ‚Üí ua-glue (fst m g) i
-- -- -- -- -- -- -- -- -- -- --       (Œª { (i = i0) ‚Üí a }) (inS (fst (fst m g) a)))
      
-- -- -- -- -- -- -- -- -- -- --   -- glueEMfam : (g h : fst G) ‚Üí SquareP (Œª i j ‚Üí A ‚Üí fst (GSq g h i j))
-- -- -- -- -- -- -- -- -- -- --   --                 {idfun _} {fst (fst m g)}
-- -- -- -- -- -- -- -- -- -- --   --                 (glueP g)
-- -- -- -- -- -- -- -- -- -- --   --                 {idfun _} {fst (fst m h) ‚àò fst (fst m g)}
-- -- -- -- -- -- -- -- -- -- --   --                 (glueP (g ¬∑ h) ‚ñ∑ cong fst (M.pres¬∑ g h))
-- -- -- -- -- -- -- -- -- -- --   --                 refl
-- -- -- -- -- -- -- -- -- -- --   --                 (congP (Œª _ ‚Üí _‚àò fst (fst m g)) (glueP h))
                  
-- -- -- -- -- -- -- -- -- -- --   -- glueEMfam g h = {!!}



-- -- -- -- -- -- -- -- -- --   EMG = EM‚ÇÅ (Symmetric-Group _ isSetA)

-- -- -- -- -- -- -- -- -- --   EM‚ÇÅHFam : EMG ‚Üí hSet ‚Ñì
-- -- -- -- -- -- -- -- -- --   EM‚ÇÅHFam = elimEM (Symmetric-Group _ isSetA)
-- -- -- -- -- -- -- -- -- --    ( Œª _ ‚Üí isGroupoidHSet) (A , isSetA)
-- -- -- -- -- -- -- -- -- --         G‚â° GSq


-- -- -- -- -- -- -- -- -- -- module EMŒ£ {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {G : Group ‚Ñì'} (isSetA : isSet A)
-- -- -- -- -- -- -- -- -- --              (m : GroupHom G (Symmetric-Group _ isSetA))
-- -- -- -- -- -- -- -- -- --               where

-- -- -- -- -- -- -- -- -- --   open GroupStr (snd G)
-- -- -- -- -- -- -- -- -- --   module M = IsGroupHom (snd m)

  

-- -- -- -- -- -- -- -- -- --   actR : A ‚Üí A ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
-- -- -- -- -- -- -- -- -- --   actR x y = Œ£ ‚ü® G ‚ü© Œª g ‚Üí y ‚â° fst (fst m g) x 

-- -- -- -- -- -- -- -- -- --   actRTrans : ‚àÄ x y z ‚Üí actR x y ‚Üí actR y z ‚Üí actR x z 
-- -- -- -- -- -- -- -- -- --   actRTrans x y z (g , p) (h , q) = (g ¬∑ h) ,
-- -- -- -- -- -- -- -- -- --     q ‚àô‚àô cong (fst (fst m h)) p ‚àô‚àô sym (funExt‚Åª (cong fst (M.pres¬∑ g h)) x)



-- -- -- -- -- -- -- -- -- -- -- TypeOfHLevel‚â° : (n : HLevel) {X Y : TypeOfHLevel ‚Ñì n} ‚Üí ‚ü® X ‚ü© ‚â° ‚ü® Y ‚ü© ‚Üí X ‚â° Y

  
-- -- -- -- -- -- -- -- -- --   TypeOfHLevel‚àô : (n : HLevel) {X Y Z : TypeOfHLevel ‚Ñì n} ‚Üí (p : ‚ü® X ‚ü© ‚â° ‚ü® Y ‚ü©) ‚Üí (q : ‚ü® Y ‚ü© ‚â° ‚ü® Z ‚ü©) 
-- -- -- -- -- -- -- -- -- --                    ‚Üí  TypeOfHLevel‚â° n {X = X} {Y = Y}  p
-- -- -- -- -- -- -- -- -- --                        ‚àô TypeOfHLevel‚â° n {X = Y} {Y = Z}  q ‚â° TypeOfHLevel‚â° n ( p ‚àô q)
-- -- -- -- -- -- -- -- -- --   fst (TypeOfHLevel‚àô n p q i i‚ÇÅ) = (p ‚àô q) i‚ÇÅ
-- -- -- -- -- -- -- -- -- --   snd (TypeOfHLevel‚àô n {_ , X} {_ , Y} {_ , Z} p q i i‚ÇÅ) =
-- -- -- -- -- -- -- -- -- --      isSet‚ÜíSquareP (Œª i i‚ÇÅ ‚Üí isProp‚ÜíisSet (isPropIsOfHLevel {A = (p ‚àô q) i‚ÇÅ} n))
-- -- -- -- -- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí snd ((TypeOfHLevel‚â° n {X = _ , X} {Y = _ , Y} p
-- -- -- -- -- -- -- -- -- --            ‚àô TypeOfHLevel‚â° n {X = _ , Y} {Y = _ , Z} q) i‚ÇÅ))
-- -- -- -- -- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí snd (TypeOfHLevel‚â° n {X = _ , X} {Y = _ , Z} (p ‚àô q) i‚ÇÅ)) refl refl i i‚ÇÅ

-- -- -- -- -- -- -- -- -- --   TypeOfHLevel‚àô' : (n : HLevel) {X : TypeOfHLevel ‚Ñì n} ‚Üí (p : ‚ü® X ‚ü© ‚â° ‚ü® X ‚ü©) ‚Üí (q : ‚ü® X ‚ü© ‚â° ‚ü® X ‚ü©) 
-- -- -- -- -- -- -- -- -- --                    ‚Üí  TypeOfHLevel‚â° n {X = X} {Y = X}  p
-- -- -- -- -- -- -- -- -- --                        ‚àô TypeOfHLevel‚â° n {X = X} {Y = X}  q ‚â° TypeOfHLevel‚â° n ( p ‚àô q)
-- -- -- -- -- -- -- -- -- --   fst (TypeOfHLevel‚àô' n p q i i‚ÇÅ) = (p ‚àô q) i‚ÇÅ
-- -- -- -- -- -- -- -- -- --   snd (TypeOfHLevel‚àô' n {_ , X} p q i i‚ÇÅ) =
-- -- -- -- -- -- -- -- -- --      isSet‚ÜíSquareP (Œª i i‚ÇÅ ‚Üí isProp‚ÜíisSet (isPropIsOfHLevel {A = (p ‚àô q) i‚ÇÅ} n))
-- -- -- -- -- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí snd ((TypeOfHLevel‚â° n {X = _ , X} {Y = _ , X} p
-- -- -- -- -- -- -- -- -- --            ‚àô TypeOfHLevel‚â° n {X = _ , X} {Y = _ , X} q) i‚ÇÅ))
-- -- -- -- -- -- -- -- -- --         (Œª i‚ÇÅ ‚Üí snd (TypeOfHLevel‚â° n {X = _ , X} {Y = _ , X} (p ‚àô q) i‚ÇÅ)) refl refl i i‚ÇÅ



-- -- -- -- -- -- -- -- -- --   -- AhSet‚â° : ‚ü® G ‚ü© ‚Üí Path (hSet ‚Ñì) (A , isSetA) (A , isSetA)  
-- -- -- -- -- -- -- -- -- --   -- AhSet‚â° = {!!}

-- -- -- -- -- -- -- -- -- --   AhSet‚â° : A ‚âÉ A ‚Üí Path (hSet ‚Ñì) (A , isSetA) (A , isSetA)
-- -- -- -- -- -- -- -- -- --   AhSet‚â° = TypeOfHLevel‚â° 2 ‚àò ua


-- -- -- -- -- -- -- -- -- --   G‚â° : ‚ü® G ‚ü© ‚Üí Path (hSet ‚Ñì) (A , isSetA) (A , isSetA)  
-- -- -- -- -- -- -- -- -- --   G‚â° = AhSet‚â° ‚àò (fst m)

-- -- -- -- -- -- -- -- -- --   GSq : (g h : fst G) ‚Üí
-- -- -- -- -- -- -- -- -- --       Square
-- -- -- -- -- -- -- -- -- --         (G‚â° g)
-- -- -- -- -- -- -- -- -- --         (G‚â° (g ¬∑ h))
-- -- -- -- -- -- -- -- -- --         (Œª j ‚Üí A , isSetA)
-- -- -- -- -- -- -- -- -- --         (G‚â° h)
-- -- -- -- -- -- -- -- -- --   GSq g h =
-- -- -- -- -- -- -- -- -- --     Œ£SquareSet (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsSet))
-- -- -- -- -- -- -- -- -- --       ( (compPath-filler (ua (fst m g)) (ua (fst m h))) ‚ñ∑
-- -- -- -- -- -- -- -- -- --         (sym (uaCompEquiv _ _) ‚àô cong ua (sym ((snd m) .IsGroupHom.pres¬∑ g h))))

-- -- -- -- -- -- -- -- -- --   GSq-filler : (g h : fst G) ‚Üí 
-- -- -- -- -- -- -- -- -- --          PathP (Œª k ‚Üí Square 
-- -- -- -- -- -- -- -- -- --                          (ua (fst m g))
-- -- -- -- -- -- -- -- -- --                          (((Œª i ‚Üí uaCompEquiv (fst m g) (fst m h) (~ i)) ‚àô
-- -- -- -- -- -- -- -- -- --                             (Œª i ‚Üí ua (snd m .IsGroupHom.pres¬∑ g h (~ i))))
-- -- -- -- -- -- -- -- -- --                            k)
-- -- -- -- -- -- -- -- -- --                          refl
-- -- -- -- -- -- -- -- -- --                          Œª i ‚Üí ua (fst m h) i)
-- -- -- -- -- -- -- -- -- --            ((compPath-filler (ua (fst m g)) (ua (fst m h))))
-- -- -- -- -- -- -- -- -- --            (Œª i j ‚Üí fst ((GSq g h) i j))
-- -- -- -- -- -- -- -- -- --   GSq-filler g h =
-- -- -- -- -- -- -- -- -- --    doubleWhiskFiller refl
-- -- -- -- -- -- -- -- -- --      (compPath-filler (ua (fst m g)) (ua (fst m h)))
-- -- -- -- -- -- -- -- -- --       ((sym (uaCompEquiv _ _) ‚àô cong ua (sym ((snd m) .IsGroupHom.pres¬∑ g h))))

-- -- -- -- -- -- -- -- -- --   paP : (g : fst G) ‚Üí PathP (Œª j ‚Üí fst (G‚â° g j) ‚Üí A) (idfun A) (invEq (fst m g))
-- -- -- -- -- -- -- -- -- --   paP g = sym (funExt (retEq (fst m g)))
-- -- -- -- -- -- -- -- -- --                    ‚óÅ (Œª j x ‚Üí (invEq (fst m g)) (ua-unglue ((fst m) g) j x))

-- -- -- -- -- -- -- -- -- --   paP' : (g : fst G) ‚Üí PathP (Œª j ‚Üí fst (G‚â° g j) ‚Üí A) (equivFun (fst m g)) (idfun _)
-- -- -- -- -- -- -- -- -- --   paP' g i = ua-unglue (fst m g) i

-- -- -- -- -- -- -- -- -- --   -- paP¬∑ : (g h : fst G) ‚Üí
-- -- -- -- -- -- -- -- -- --   --            PathP (Œª j ‚Üí fst (G‚â° (g ¬∑ h) j) ‚Üí A)
-- -- -- -- -- -- -- -- -- --   --             (equivFun (fst m h) ‚àò equivFun (fst m g)) (idfun A)
-- -- -- -- -- -- -- -- -- --   -- paP¬∑ g h = {!M.pres¬∑ g h!}

-- -- -- -- -- -- -- -- -- --   -- unglueEMfam : (g h : fst G) ‚Üí SquareP (Œª i j ‚Üí fst (GSq g h i j) ‚Üí A)
-- -- -- -- -- -- -- -- -- --   --                 {idfun _} {invEq (fst m g)}
-- -- -- -- -- -- -- -- -- --   --                 (paP g)
-- -- -- -- -- -- -- -- -- --   --                 {idfun _} {invEq (fst m g) ‚àò invEq (fst m h)}
-- -- -- -- -- -- -- -- -- --   --                 (paP (g ¬∑ h) ‚ñ∑ cong invEq (M.pres¬∑ g h))
-- -- -- -- -- -- -- -- -- --   --                 refl
-- -- -- -- -- -- -- -- -- --   --                 (congP (Œª _ ‚Üí invEq (fst m g) ‚àò_) (paP h))
                  
-- -- -- -- -- -- -- -- -- --   -- unglueEMfam = {!!}

-- -- -- -- -- -- -- -- -- --   -- unglueEMfam' : (g h : fst G) ‚Üí SquareP (Œª i j ‚Üí fst (GSq g h i j) ‚Üí A)
-- -- -- -- -- -- -- -- -- --   --                 {equivFun (fst m h) ‚àò equivFun (fst m g)} {equivFun (fst m h)}
-- -- -- -- -- -- -- -- -- --   --                 (Œª i ‚Üí equivFun (fst m h) ‚àò ua-unglue (fst m g) i)
-- -- -- -- -- -- -- -- -- --   --                 {equivFun (fst m h) ‚àò equivFun (fst m g)} {idfun _}
-- -- -- -- -- -- -- -- -- --   --                 -- ({!(Œª i ‚Üí ua-unglue ( fst m h ‚àô) i)!} ‚ñ∑ {!!})
-- -- -- -- -- -- -- -- -- --   --                 (cong fst (sym (M.pres¬∑ g h))
-- -- -- -- -- -- -- -- -- --   --                   ‚óÅ (Œª i ‚Üí ua-unglue (fst m (g ¬∑ h)) i))
-- -- -- -- -- -- -- -- -- --   --                 refl
-- -- -- -- -- -- -- -- -- --   --                 Œª i ‚Üí ua-unglue (fst m h) i
                  
-- -- -- -- -- -- -- -- -- --   -- unglueEMfam' = {!!}

-- -- -- -- -- -- -- -- -- --   glueP : ‚àÄ g ‚Üí PathP (Œª j ‚Üí A ‚Üí fst (G‚â° g j)) (idfun A) (fst (fst m g))
-- -- -- -- -- -- -- -- -- --   glueP g = (Œª i a ‚Üí ua-glue (fst m g) i
-- -- -- -- -- -- -- -- -- --       (Œª { (i = i0) ‚Üí a }) (inS (fst (fst m g) a)))
      
-- -- -- -- -- -- -- -- -- --   -- glueEMfam : (g h : fst G) ‚Üí SquareP (Œª i j ‚Üí A ‚Üí fst (GSq g h i j))
-- -- -- -- -- -- -- -- -- --   --                 {idfun _} {fst (fst m g)}
-- -- -- -- -- -- -- -- -- --   --                 (glueP g)
-- -- -- -- -- -- -- -- -- --   --                 {idfun _} {fst (fst m h) ‚àò fst (fst m g)}
-- -- -- -- -- -- -- -- -- --   --                 (glueP (g ¬∑ h) ‚ñ∑ cong fst (M.pres¬∑ g h))
-- -- -- -- -- -- -- -- -- --   --                 refl
-- -- -- -- -- -- -- -- -- --   --                 (congP (Œª _ ‚Üí _‚àò fst (fst m g)) (glueP h))
                  
-- -- -- -- -- -- -- -- -- --   -- glueEMfam g h = {!!}



-- -- -- -- -- -- -- -- -- --   EMG = EM‚ÇÅ G

-- -- -- -- -- -- -- -- -- --   EM‚ÇÅHFam : EMG ‚Üí hSet ‚Ñì
-- -- -- -- -- -- -- -- -- --   EM‚ÇÅHFam = EMrec.f w
-- -- -- -- -- -- -- -- -- --     where
-- -- -- -- -- -- -- -- -- --      w : EMrec G isGroupoidHSet
-- -- -- -- -- -- -- -- -- --      EMrec.b w = A , isSetA
-- -- -- -- -- -- -- -- -- --      EMrec.bloop w = G‚â° 
-- -- -- -- -- -- -- -- -- --      EMrec.bComp w = GSq


-- -- -- -- -- -- -- -- -- -- -- -- --   EM‚ÇÅHFam : EMG ‚Üí hSet ‚Ñì
-- -- -- -- -- -- -- -- -- -- -- -- --   EM‚ÇÅHFam = elimEM G
-- -- -- -- -- -- -- -- -- -- -- -- --    ( Œª _ ‚Üí isGroupoidHSet) (A , isSetA)
-- -- -- -- -- -- -- -- -- -- -- -- --         (TypeOfHLevel‚â° 2 ‚àò ua ‚àò fst m )
-- -- -- -- -- -- -- -- -- -- -- -- --            Œª g h ‚Üí compPath-filler _ _
-- -- -- -- -- -- -- -- -- -- -- -- --              ‚ñ∑
-- -- -- -- -- -- -- -- -- -- -- -- --                 (TypeOfHLevel‚àô' 2 {X = A , isSetA} (ua (fst m g)) (ua (fst m h)))
-- -- -- -- -- -- -- -- -- -- -- -- --               ‚àô cong (TypeOfHLevel‚â° 2) (sym (uaCompEquiv _ _)
-- -- -- -- -- -- -- -- -- -- -- -- --              ‚àô cong ua ( sym ((snd m) .IsGroupHom.pres¬∑ g h)))

-- -- -- -- -- -- -- -- -- --   EM‚ÇÅFam : EMG ‚Üí Type ‚Ñì
-- -- -- -- -- -- -- -- -- --   EM‚ÇÅFam = fst ‚àò EM‚ÇÅHFam


-- -- -- -- -- -- -- -- -- -- -- -- --   -- record EMTrunc : Type {!‚Ñì!} where
-- -- -- -- -- -- -- -- -- -- -- -- --   --   field
-- -- -- -- -- -- -- -- -- -- -- -- --   --     loop : EMG
-- -- -- -- -- -- -- -- -- -- -- -- --   --     val : ‚ü® EM‚ÇÅFam loop ‚ü© 

-- -- -- -- -- -- -- -- -- --   EMtrunc = Œ£ EMG EM‚ÇÅFam

-- -- -- -- -- -- -- -- -- --   vanTrunc : Type (‚Ñì-max ‚Ñì ‚Ñì')
-- -- -- -- -- -- -- -- -- --   vanTrunc = A // actRTrans

-- -- -- -- -- -- -- -- -- --   -- module recEMtrunc2 {‚Ñì'} {B : Type ‚Ñì'} (truncB : isGroupoid B)
-- -- -- -- -- -- -- -- -- --   --                   (b : A ‚Üí B)
-- -- -- -- -- -- -- -- -- --   --                   (p‚ÇÄ : (g : ‚ü® G ‚ü©) ‚Üí (a : A) ‚Üí singl (b a))
-- -- -- -- -- -- -- -- -- --   --                   (bIds : GroupHom G (idEquivsG B))
-- -- -- -- -- -- -- -- -- --   --                   where

-- -- -- -- -- -- -- -- -- --   --   fp : (g : fst G) ‚Üí (a : A) ‚Üí Path (singl (b a)) (_ , refl) (_ , refl) 
-- -- -- -- -- -- -- -- -- --   --   fp g a = Œ£PathP ({!!} , {!!})

-- -- -- -- -- -- -- -- -- --   --   f : EMG ‚Üí (a : A) ‚Üí singl (b a)
-- -- -- -- -- -- -- -- -- --   --   f = elimSet G
-- -- -- -- -- -- -- -- -- --   --    (Œª _ ‚Üí isSetŒ† Œª _ ‚Üí isProp‚ÜíisSet isPropSingl)
-- -- -- -- -- -- -- -- -- --   --    (Œª _ ‚Üí _ , refl)
-- -- -- -- -- -- -- -- -- --   --    (funExt ‚àò fp)
-- -- -- -- -- -- -- -- -- --   --    -- Œª g ‚Üí funExt Œª a ‚Üí Œ£PathP ({!cong fst (snd ((fst bIds) g)) !} , {!!}) 


-- -- -- -- -- -- -- -- -- -- -- funExtDepSq : ‚àÄ {‚Ñì ‚Ñì' ‚Ñì''} {A : Type ‚Ñì} (B : A ‚Üí Type ‚Ñì') (C : Type ‚Ñì'')
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí (aSq : I ‚Üí I ‚Üí A)
-- -- -- -- -- -- -- -- -- -- --          {a‚ÇÄ‚ÇÄ : B (aSq i0 i0) ‚Üí C} {a‚ÇÄ‚ÇÅ : B (aSq i0 i1) ‚Üí C}
-- -- -- -- -- -- -- -- -- -- --           (a‚ÇÄ‚Çã : PathP (Œª j ‚Üí B (aSq i0 j) ‚Üí C) a‚ÇÄ‚ÇÄ a‚ÇÄ‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- --          {a‚ÇÅ‚ÇÄ : B (aSq i1 i0) ‚Üí C} {a‚ÇÅ‚ÇÅ : B (aSq i1 i1) ‚Üí C}
-- -- -- -- -- -- -- -- -- -- --          (a‚ÇÅ‚Çã : PathP (Œª j ‚Üí B (aSq i1 j) ‚Üí C) a‚ÇÅ‚ÇÄ a‚ÇÅ‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- --          (a‚Çã‚ÇÄ : PathP (Œª i ‚Üí B (aSq i i0) ‚Üí C) a‚ÇÄ‚ÇÄ a‚ÇÅ‚ÇÄ)
-- -- -- -- -- -- -- -- -- -- --          (a‚Çã‚ÇÅ : PathP (Œª i ‚Üí B (aSq i i1) ‚Üí C) a‚ÇÄ‚ÇÅ a‚ÇÅ‚ÇÅ) 
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí (

-- -- -- -- -- -- -- -- -- -- --                 SquareP (Œª i j ‚Üí B (aSq i j))
-- -- -- -- -- -- -- -- -- -- --                      {!!} {!!} {!!} {!!}
                     
-- -- -- -- -- -- -- -- -- -- --                      -- a‚ÇÄ‚Çã
-- -- -- -- -- -- -- -- -- -- --                      -- a‚ÇÅ‚Çã
-- -- -- -- -- -- -- -- -- -- --                      -- a‚Çã‚ÇÄ
-- -- -- -- -- -- -- -- -- -- --                      -- a‚Çã‚ÇÅ
-- -- -- -- -- -- -- -- -- -- --                   ‚Üí Square {A = C}
-- -- -- -- -- -- -- -- -- -- --                       {!!}
-- -- -- -- -- -- -- -- -- -- --                       {!!}
-- -- -- -- -- -- -- -- -- -- --                       {!!}
-- -- -- -- -- -- -- -- -- -- --                       {!!})
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí SquareP (Œª i j ‚Üí B (aSq i j) ‚Üí C)
-- -- -- -- -- -- -- -- -- -- --                    a‚ÇÄ‚Çã a‚ÇÅ‚Çã a‚Çã‚ÇÄ a‚Çã‚ÇÅ                     
-- -- -- -- -- -- -- -- -- -- -- funExtDepSq = {!!}




-- -- -- -- -- -- -- -- -- -- -- module recEMtrunc‚Üí {‚Ñì ‚Ñì'} {A : Type ‚Ñì} (isSetA : isSet A)
-- -- -- -- -- -- -- -- -- -- --                           {B : Type ‚Ñì'} (isGrpB : isGroupoid B)
-- -- -- -- -- -- -- -- -- -- --              -- (m : GroupHom G (idEquivsG A))
-- -- -- -- -- -- -- -- -- -- --              -- (C : Type ‚Ñìc) (isSetC : isSet C)
-- -- -- -- -- -- -- -- -- -- --              -- {‚Ñì''} {B : Type ‚Ñì''} (truncB : isGroupoid B)
-- -- -- -- -- -- -- -- -- -- --              where
             
-- -- -- -- -- -- -- -- -- -- --   module EMa = EMŒ£ isSetA idGroupHom

-- -- -- -- -- -- -- -- -- -- --   EMG = EMa.EMG

-- -- -- -- -- -- -- -- -- -- --   EM‚ÇÅFam : EMG ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
-- -- -- -- -- -- -- -- -- -- --   EM‚ÇÅFam x = EMa.EM‚ÇÅFam x ‚Üí B

-- -- -- -- -- -- -- -- -- -- --   emŒ£ = Œ£ EMG EM‚ÇÅFam

-- -- -- -- -- -- -- -- -- -- --   isGroupoidEmŒ£ : isGroupoid emŒ£
-- -- -- -- -- -- -- -- -- -- --   isGroupoidEmŒ£ = isGroupoidŒ£ emsquash Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí isGrpB

-- -- -- -- -- -- -- -- -- -- --   record _‚Üî‚Çõ_ (x y : A ‚Üí B) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- -- -- -- -- --     constructor ‚Üîs
-- -- -- -- -- -- -- -- -- -- --     field
-- -- -- -- -- -- -- -- -- -- --       F‚âÉ : (A ‚âÉ A)
-- -- -- -- -- -- -- -- -- -- --       l‚â° : x  ‚â° y ‚àò fst F‚âÉ

-- -- -- -- -- -- -- -- -- -- --   isTrans‚Üî‚Çõ : BinaryRelation.isTrans _‚Üî‚Çõ_
-- -- -- -- -- -- -- -- -- -- --   isTrans‚Üî‚Çõ a b c (‚Üîs e p) (‚Üîs f q) = 
-- -- -- -- -- -- -- -- -- -- --     ‚Üîs (e ‚àô‚Çë f) (p ‚àô cong (_‚àò (fst e)) q)

-- -- -- -- -- -- -- -- -- -- -- --   -- record _‚Üî‚Çõ_ (x y : A ‚Üí B) : Type (‚Ñì-max ‚Ñì ‚Ñì') where
-- -- -- -- -- -- -- -- -- -- -- --   --   constructor ‚Üîs
-- -- -- -- -- -- -- -- -- -- -- --   --   field
-- -- -- -- -- -- -- -- -- -- -- --   --     F‚âÉ : (A ‚âÉ A)
-- -- -- -- -- -- -- -- -- -- -- --   --     l‚â° : PathP (Œª i ‚Üí ua F‚âÉ i ‚Üí B) x y

-- -- -- -- -- -- -- -- -- -- -- --   -- isTrans‚Üî‚Çõ : BinaryRelation.isTrans _‚Üî‚Çõ_
-- -- -- -- -- -- -- -- -- -- -- --   -- isTrans‚Üî‚Çõ a b c (‚Üîs e p) (‚Üîs f q) =
-- -- -- -- -- -- -- -- -- -- -- --   --   ‚Üîs (e ‚àô‚Çë f) ({!!} ‚óÅ {!!} ‚ñ∑ {!!})


-- -- -- -- -- -- -- -- -- -- --   A‚Üí// : Type (‚Ñì-max ‚Ñì ‚Ñì')
-- -- -- -- -- -- -- -- -- -- --   A‚Üí// = (A ‚Üí B) // isTrans‚Üî‚Çõ

-- -- -- -- -- -- -- -- -- -- --   fromPathP‚Üí : (g : A ‚âÉ A) {x‚ÇÄ x‚ÇÅ : A ‚Üí B} ‚Üí
-- -- -- -- -- -- -- -- -- -- --                 PathP (Œª z ‚Üí ua g z ‚Üí B) x‚ÇÄ x‚ÇÅ
-- -- -- -- -- -- -- -- -- -- --                 ‚Üí x‚ÇÄ ‚â° (x‚ÇÅ ‚àò (fst g))
-- -- -- -- -- -- -- -- -- -- --   fromPathP‚Üí g p i a = p i (ua-gluePath g (refl {x = (fst g) a}) i) 
    
-- -- -- -- -- -- -- -- -- -- --   loopP : ‚àÄ g ‚Üí PathP (Œª i ‚Üí (ua g i ‚Üí B) ‚Üí A‚Üí//) [_]// [_]//
-- -- -- -- -- -- -- -- -- -- --   loopP g =     
-- -- -- -- -- -- -- -- -- -- --     (Œª i f  ‚Üí [ f ‚àò EMa.glueP g i ]// ) ‚ñ∑
-- -- -- -- -- -- -- -- -- -- --     funExt Œª x ‚Üí eq// {a = x ‚àò fst g} {x} (‚Üîs g refl)
    
-- -- -- -- -- -- -- -- -- -- --     -- Œª i f ‚Üí 
-- -- -- -- -- -- -- -- -- -- --     --  eq// {a = {!f ‚àò fst g!}}
-- -- -- -- -- -- -- -- -- -- --     --       {b = {!!}} (‚Üîs g {!!}) i


  

-- -- -- -- -- -- -- -- -- -- --   to// : (x : EMG) (y : EMa.EM‚ÇÅFam x ‚Üí B) ‚Üí A‚Üí//
-- -- -- -- -- -- -- -- -- -- --   to// = elimEM _ (Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí squash//)
-- -- -- -- -- -- -- -- -- -- --     [_]//
-- -- -- -- -- -- -- -- -- -- --     loopP
-- -- -- -- -- -- -- -- -- -- --      zz  
-- -- -- -- -- -- -- -- -- -- --       where
-- -- -- -- -- -- -- -- -- -- --       -- zzR :
-- -- -- -- -- -- -- -- -- -- --       --    SquareP (Œª i j ‚Üí EM‚ÇÅFam (emcomp (idEquiv A) (idEquiv A) i j) ‚Üí A‚Üí//)
-- -- -- -- -- -- -- -- -- -- --       --      (loopP (idEquiv A))
-- -- -- -- -- -- -- -- -- -- --       --    (loopP ((Symmetric-Group A isSetA .snd GroupStr.¬∑ (idEquiv A)) (idEquiv A)))
-- -- -- -- -- -- -- -- -- -- --       --    (Œª j ‚Üí [_]//) (loopP (idEquiv A))
-- -- -- -- -- -- -- -- -- -- --       -- zzR = {!!}


-- -- -- -- -- -- -- -- -- -- --       zz' : (g h : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- --          SquareP (Œª i j ‚Üí (EMa.EM‚ÇÅFam (emcomp g h i j) ‚Üí B) ‚Üí A‚Üí//)
-- -- -- -- -- -- -- -- -- -- --           ((Œª i f ‚Üí  [ f ‚àò EMa.glueP g i ]//))
-- -- -- -- -- -- -- -- -- -- --           (Œª i f ‚Üí [ f ‚àò (EMa.glueP (g ‚àô‚Çë h)) i ]// )
-- -- -- -- -- -- -- -- -- -- --            refl
           
-- -- -- -- -- -- -- -- -- -- --             Œª i f ‚Üí  [ f ‚àò EMa.glueP h i ‚àò fst g ]// 
-- -- -- -- -- -- -- -- -- -- --            -- (congP (Œª _ z ‚Üí _‚àò {!(z ‚àò g)!}) (EMa.glueP h))
-- -- -- -- -- -- -- -- -- -- --       zz' g h = {!!}
-- -- -- -- -- -- -- -- -- -- --         -- [ f ‚àò (EMa.glueEMfam g h i j) ]//
-- -- -- -- -- -- -- -- -- -- --         -- -- {!!} ‚àò {!(_‚àò (EMa.glueEMfam g h i j))!}

-- -- -- -- -- -- -- -- -- -- --       zz : (g h : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- --          SquareP (Œª i j ‚Üí EM‚ÇÅFam (emcomp g h i j) ‚Üí A‚Üí//) (loopP g)
-- -- -- -- -- -- -- -- -- -- --          (loopP ((Symmetric-Group A isSetA .snd GroupStr.¬∑ g) h))
-- -- -- -- -- -- -- -- -- -- --          (Œª j ‚Üí [_]//) (loopP h)
-- -- -- -- -- -- -- -- -- -- --       zz g h i j f = {!!}
-- -- -- -- -- -- -- -- -- -- --         -- {!!} ‚àò {!(_‚àò (EMa.glueEMfam g h i j))!}
-- -- -- -- -- -- -- -- -- -- --       -- funExtDepSq _ _ _ _
-- -- -- -- -- -- -- -- -- -- --       --   Œª {_} {_} {a‚ÇÄ‚Çã} {_} {_} {_} {_} {a‚Çã‚ÇÅ}
-- -- -- -- -- -- -- -- -- -- --       --     sqA ‚Üí {!!} ‚ñ∑
-- -- -- -- -- -- -- -- -- -- --       --       Œª j ‚Üí {!(Œª i ‚Üí
-- -- -- -- -- -- -- -- -- -- --       --    loopP ((Symmetric-Group A isSetA .snd GroupStr.¬∑ g) h) i (a‚ÇÅ‚Çã i))!}
          
-- -- -- -- -- -- -- -- -- -- --         --{!compPath-filler ? ?!} ‚ñ∑ {!!}
-- -- -- -- -- -- -- -- -- -- --         -- (hcomp
-- -- -- -- -- -- -- -- -- -- --         --     (Œª k ‚Üí
-- -- -- -- -- -- -- -- -- -- --         --        Œª {
-- -- -- -- -- -- -- -- -- -- --         --          (i = i0) ‚Üí {!!}               
-- -- -- -- -- -- -- -- -- -- --         --        ; (i = i1) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- --         --        ; (j = i0) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- --         --        ; (j = i1) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- --         --        }) {!!}) ‚àò 
-- -- -- -- -- -- -- -- -- -- --         -- {!EMa.unglueEMfam g h i j!}



-- -- -- -- -- -- -- -- -- -- --   loopP‚Åª : (g : A ‚âÉ A) {x‚ÇÄ x‚ÇÅ : A ‚Üí B}
-- -- -- -- -- -- -- -- -- -- --               ‚Üí x‚ÇÄ ‚â° x‚ÇÅ ‚àò fst g
-- -- -- -- -- -- -- -- -- -- --               ‚Üí PathP (Œª i ‚Üí ua g i ‚Üí B)
-- -- -- -- -- -- -- -- -- -- --                   x‚ÇÄ x‚ÇÅ               
-- -- -- -- -- -- -- -- -- -- --   loopP‚Åª g {x‚ÇÄ} {x‚ÇÅ} p =
-- -- -- -- -- -- -- -- -- -- --     sym (cong (x‚ÇÄ ‚àò_) (funExt (retEq g)))
-- -- -- -- -- -- -- -- -- -- --     ‚óÅ (Œª i ‚Üí p i ‚àò invEq g ‚àò ua-unglue g i) ‚ñ∑
-- -- -- -- -- -- -- -- -- -- --      cong (x‚ÇÅ ‚àò_) (funExt (secEq g))


-- -- -- -- -- -- -- -- -- -- -- -- isGroupoidEmŒ£
-- -- -- -- -- -- -- -- -- -- --   from// : A‚Üí// ‚Üí emŒ£
-- -- -- -- -- -- -- -- -- -- --   from// = rec// _ isGroupoidEmŒ£
-- -- -- -- -- -- -- -- -- -- --     (embase ,_) p//
-- -- -- -- -- -- -- -- -- -- --      Œª r s ‚Üí compPath-filler _ _ ‚ñ∑ p//‚àô r s

-- -- -- -- -- -- -- -- -- -- --     where
-- -- -- -- -- -- -- -- -- -- --       p// : {a b : A ‚Üí B} ‚Üí a ‚Üî‚Çõ b ‚Üí (embase , a) ‚â° (embase , b)
-- -- -- -- -- -- -- -- -- -- --       p// (‚Üîs e p) = Œ£PathP ((emloop e) , loopP‚Åª e p)

-- -- -- -- -- -- -- -- -- -- --       p//‚àô : {a b c : A ‚Üí B} (r : a ‚Üî‚Çõ b) (s : b ‚Üî‚Çõ c) ‚Üí
-- -- -- -- -- -- -- -- -- -- --                 p// r ‚àô p// s
-- -- -- -- -- -- -- -- -- -- --                 ‚â°
-- -- -- -- -- -- -- -- -- -- --                 (p// (isTrans‚Üî‚Çõ _ _ _ r s)) 
-- -- -- -- -- -- -- -- -- -- --       p//‚àô {a} {b} {c} (‚Üîs e p) (‚Üîs f q) = Œ£PathP‚àô _ _ _ _
-- -- -- -- -- -- -- -- -- -- --         ‚àô cong Œ£PathP w
-- -- -- -- -- -- -- -- -- -- --         where
 
-- -- -- -- -- -- -- -- -- -- --           ww : SquareP
-- -- -- -- -- -- -- -- -- -- --                   (Œª i j ‚Üí EMa.EM‚ÇÅFam
-- -- -- -- -- -- -- -- -- -- --              (emloop-comp (Symmetric-Group A isSetA) e
-- -- -- -- -- -- -- -- -- -- --               f (~ i) j) ‚Üí
-- -- -- -- -- -- -- -- -- -- --              B)
-- -- -- -- -- -- -- -- -- -- --              (compPathP‚Üí (EMa.EM‚ÇÅFam) (loopP‚Åª e p) (loopP‚Åª f q))
-- -- -- -- -- -- -- -- -- -- --              (loopP‚Åª (e ‚àô‚Çë f) (p ‚àô cong (_‚àò fst e) q))
-- -- -- -- -- -- -- -- -- -- --              refl refl
-- -- -- -- -- -- -- -- -- -- --           ww i j = {!!}

-- -- -- -- -- -- -- -- -- -- --           w : ((emloop e) ‚àô (emloop f) , compPathP‚Üí (EMa.EM‚ÇÅFam) (loopP‚Åª e p)
-- -- -- -- -- -- -- -- -- -- --                  (loopP‚Åª f q))
-- -- -- -- -- -- -- -- -- -- --                 ‚â°
-- -- -- -- -- -- -- -- -- -- --                 ((emloop ( e ‚àô‚Çë f)) ,
-- -- -- -- -- -- -- -- -- -- --                  (loopP‚Åª (e ‚àô‚Çë f) (p ‚àô cong (_‚àò (fst e)) q)))
-- -- -- -- -- -- -- -- -- -- --           fst (w i) = (emloop-comp _ e f) (~ i)
-- -- -- -- -- -- -- -- -- -- --           snd (w i) j = ww i j
          
-- -- -- -- -- -- -- -- -- -- -- --   iso-em-// : Iso emŒ£ A‚Üí//
-- -- -- -- -- -- -- -- -- -- -- --   Iso.fun iso-em-// = uncurry to//
-- -- -- -- -- -- -- -- -- -- -- --   Iso.inv iso-em-// = from//
-- -- -- -- -- -- -- -- -- -- -- --   Iso.rightInv iso-em-// =
-- -- -- -- -- -- -- -- -- -- -- --     elimSet// _ (Œª _ ‚Üí squash// _ _)
-- -- -- -- -- -- -- -- -- -- -- --      (Œª _ ‚Üí refl) Œª {a} {b} r ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- --   Iso.leftInv iso-em-// =
-- -- -- -- -- -- -- -- -- -- -- --      uncurry (elimSet _ (Œª _ ‚Üí isSetŒ† Œª _ ‚Üí isGroupoidEmŒ£ _ _)
-- -- -- -- -- -- -- -- -- -- -- --       (Œª _ ‚Üí refl) {!!})
 
-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- open GroupStr (snd G)  
-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- module M = IsGroupHom (snd m)

-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- relIdEq : A ‚Üí A ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- relIdEq x y = Œ£ ‚ü® G ‚ü©  Œª g ‚Üí fst (fst ((fst m) g)) x ‚â°  y 

-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- -- relIdEq' : A ‚Üí A ‚Üí Type (‚Ñì-max ‚Ñì ‚Ñì')
-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- -- relIdEq' x y = ‚ü® G ‚ü© √ó (x ‚â° y) 


-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- relIdEqTrans : BinaryRelation.isTrans relIdEq
-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- relIdEqTrans a b c (g , p) (h , q) =
-- -- -- -- -- -- -- -- -- -- -- -- -- --   --   (g ¬∑ h) , ( (funExt‚Åª (cong (fst ‚àò fst) (M.pres¬∑ g h)) a) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- --   --     cong (fst (fst (fst m h))) p ) ‚àô q

-- -- -- -- -- -- -- -- -- -- -- -- -- --   -- RelId// =  (_//_ A {R = relIdEq} relIdEqTrans)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module recEMtrunc‚ÜíMore {‚Ñì ‚Ñì'} {A : Type ‚Ñì} {G : Group ‚Ñì'} (isGrpA : isGroupoid A)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (m : GroupHom G (idEquivsG A))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --             where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   open GroupStr (snd G)  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   module M = IsGroupHom (snd m)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   module M/ = recEMtrunc‚Üí isGrpA m

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mr : GroupHom G (idEquivsG A)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   fst mr _ = _ , refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   IsGroupHom.pres¬∑ (snd mr) = Œª _ _ ‚Üí isPropSingl _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   IsGroupHom.pres1 (snd mr) = isPropSingl _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   IsGroupHom.presinv (snd mr) = Œª _ ‚Üí isPropSingl _ _

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mr=m : mr ‚â° m
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mr=m = GroupHom‚â° (funExt Œª _ ‚Üí isPropSingl _ _)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   module M/r = recEMtrunc‚Üí isGrpA mr

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚â°r// : Iso (EM‚ÇÅ G √ó A) M/r.RelId//
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Iso.fun ‚â°r// (_ , a) = [ a ]//
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Iso.inv ‚â°r// =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --     rec// _ {!!} (embase ,_) (Œª (g , p) ‚Üí cong‚ÇÇ _,_ (emloop g) p)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --       Œª gp hq ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --         let (g , p) = gp
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (h , q) = hq
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --         in (Œª i j ‚Üí (emcomp  g h i j  , compPath-filler p q i j)) ‚ñ∑
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --           cong (cong‚ÇÇ _,_ (emloop (g ¬∑ h)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (( GL.lUnit _ ‚àô cong (_‚àô (p ‚àô q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (compPathRefl ‚àô {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --             )) ‚àô GL.assoc _ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --           -- Œª i ‚Üí cong‚ÇÇ _,_ (emloop (g ¬∑ h)) {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Iso.rightInv ‚â°r// = elimSet//
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --    _ (Œª _ ‚Üí squash// _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (Œª a ‚Üí refl) Œª (g , p) ‚Üí Œª i i‚ÇÅ ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Iso.leftInv ‚â°r// = uncurry (flip (Œª x ‚Üí elimSet _ (Œª _ ‚Üí {!!}) (refl)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --      Œª g ‚Üí toPathP Œª i i‚ÇÅ ‚Üí {!!} , x))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- -- relIdEqTrans' : BinaryRelation.isTrans relIdEq'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- -- relIdEqTrans' a b c (g , p) (h , q) = (g ¬∑ h) , ((refl ‚àô p) ‚àô q)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- --   -- (g ¬∑ h) , ( (funExt‚Åª (cong (fst ‚àò fst) (M.pres¬∑ g h)) a) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- --   --   cong (fst (fst (fst m h))) p ) ‚àô q

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- -- zz : A // relIdEqTrans ‚Üí A
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- -- zz = rec// _ isGrpA (idfun _) (Œª (g , p) ‚Üí funExt‚Åª (cong fst (snd (fst m g))) _ ‚àô p)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- --   {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Eq‚â°Eq' : (_//_ A {R = relIdEq} relIdEqTrans) ‚â° (_//_ A {R = relIdEq'} relIdEqTrans')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Eq‚â°Eq' i = _//_ A {R = Œª x y ‚Üí Œ£ ‚ü® G ‚ü© Œª g ‚Üí cong fst (snd ((fst m) g)) (~ i) x ‚â° y }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --   Œª a b c (g , p) (h , q) ‚Üí (g ¬∑ h) , Œª i‚ÇÅ ‚Üí {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- iso// : Iso (EM‚ÇÅ G √ó A) (_//_ A {R = relIdEq} relIdEqTrans)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.fun iso// = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.inv iso// = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.rightInv iso// = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.leftInv iso// = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module recEMtrunc‚Üí {‚Ñì ‚Ñì' ‚Ñìc} {A : Type ‚Ñì} {G : Group ‚Ñì'} (isSetA : isSet A)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (m : GroupHom G (Symmetric-Group _ isSetA))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (C : Type ‚Ñìc) (isSetC : isSet C)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              {‚Ñì''} {B : Type ‚Ñì''} (truncB : isGroupoid B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   open EMŒ£ _ (SymmetricGroup‚ÜíHom {A = A} {isSetA = isSetA} isSetC )

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   module recEMŒ£ (b : (y : A ‚Üí C) ‚Üí B) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     bP : (g : A ‚âÉ A) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            PathP (Œª i ‚Üí (y : ua (preCompEquiv {C = C} (invEquiv g)) i) ‚Üí B) b b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     bP g i x = {!b (ua-unglue (preCompEquiv {C = C} (invEquiv g)) i x)!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- {!funTypeTransp ? ? ? ?!} ‚ñ∑ {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- toPathP ({!funTypeTransp   !} ‚àô {!!})

    

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- f : EMtrunc ‚Üí B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- f = uncurry
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     --      (elimEM _ (Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí truncB)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     --        b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     --        bP
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     --        {!!})


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     f : EMtrunc ‚Üí B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     f = uncurry
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (elimEM _ (Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí truncB)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            bP
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            {!!})

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- module recEMtruncSingl {‚Ñì'} {B : Type ‚Ñì'} (truncB : isGroupoid B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                   (b : A ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                   -- (p : (g : ‚ü® G ‚ü©) ‚Üí PathP (Œª i ‚Üí ua (fst m g ) i ‚Üí B) b b)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                   -- (p‚ÇÄ : (g : ‚ü® G ‚ü©) ‚Üí (a : A) ‚Üí b a ‚â° b (fst m g .fst a))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                   -- (bIds : GroupHom G (idEquivsG B))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                       where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     f : (x : EMG) (y : EM‚ÇÅFam x) ‚Üí singl {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     f = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   module recEMtrunc {‚Ñì'} {B : Type ‚Ñì'} (truncB : isGroupoid B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     (b : A ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     -- (p : (g : ‚ü® G ‚ü©) ‚Üí PathP (Œª i ‚Üí ua (fst m g ) i ‚Üí B) b b)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     (p‚ÇÄ : (g : ‚ü® G ‚ü©) ‚Üí (a : A) ‚Üí b a ‚â° b (fst m g .fst a))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     (bIds : GroupHom G (idEquivsG B))
                    
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     -- (s‚ÇÄ : (g h : ‚ü® G ‚ü©)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     --   ‚Üí PathP (Œª k ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     --    PathP (Œª j ‚Üí ua (snd m .IsGroupHom.pres¬∑ g h k) j ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     --      b b )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     --  (ua‚Üí (p‚ÇÄ (g ¬∑ h)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                     --  (ua‚Üí Œª a ‚Üí p‚ÇÄ g a ‚àô p‚ÇÄ h (fst m g .fst a)))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     module BID = IsGroupHom (snd bIds)
  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     bE : (g : ‚ü® G ‚ü©) ‚Üí B ‚Üí B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     bE = fst ‚àò fst ‚àò fst bIds
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     p* : (g : ‚ü® G ‚ü©) ‚Üí (x : B) ‚Üí x ‚â° bE g x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     p* = funExt‚Åª ‚àò cong fst ‚àò snd ‚àò fst bIds

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     p*¬∑ : (g h : ‚ü® G ‚ü©) ‚Üí (a : A) ‚Üí PathP
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       (Œª i ‚Üí  b a ‚â° fst (fst (BID.pres¬∑ g h i)) (b a))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       (Œª i ‚Üí fst (snd (fst bIds (g ¬∑ h)) i) (b a))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                       Œª i ‚Üí snd (fst bIds h) i .fst (snd (fst bIds g) i .fst (b a))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     p*¬∑ g h a i = funExt‚Åª (cong fst (snd (BID.pres¬∑ g h i))) (b a)



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- p : ‚àÄ g ‚Üí (a : A) ‚Üí b a ‚â° b (fst m g .fst a)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- p = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- p : (g : ‚ü® G ‚ü©) ‚Üí PathP (Œª i ‚Üí ua (fst m g ) i ‚Üí B) b b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- p g = ua‚Üí (p‚ÇÄ g)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- bSA : (g : ‚ü® G ‚ü©) ‚Üí singl b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- bSA g = b ‚àò fst m g .fst , funExt (p‚ÇÄ g)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     bSB : (g : ‚ü® G ‚ü©) ‚Üí singl b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     bSB g = bE g ‚àò b , cong (_‚àò b) ((cong fst ‚àò snd ‚àò fst bIds) g)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- p2 : (g : ‚ü® G ‚ü©) ‚Üí PathP (Œª i ‚Üí ua (fst m g ) i ‚Üí B) b b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- p2 g = snd (bSA g) ‚óÅ (Œª i ‚Üí b ‚àò (ua-unglue (fst m g) i) )



   

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     module Rec 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (p‚ÇÄ* : (g : ‚ü® G ‚ü©) ‚Üí (a : A) ‚Üí b (fst m g .fst a) ‚â° bE g (b a))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (s‚ÇÄ : (g : ‚ü® G ‚ü©) ‚Üí (a : A) ‚Üí p* g (b a) ‚àô sym (p‚ÇÄ* g a) ‚â° p‚ÇÄ g a)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       p : (g : ‚ü® G ‚ü©) ‚Üí PathP (Œª i ‚Üí ua (fst m g ) i ‚Üí B) b b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       p g = (snd (bSB g) ‚àô sym (funExt (p‚ÇÄ* g))) ‚óÅ (Œª i ‚Üí b ‚àò (ua-unglue (fst m g) i) )

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       p2S : (g : ‚ü® G ‚ü©) ‚Üí ‚àÄ a ‚Üí Path (singl (b a)) (_ , refl)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (bE g (b a) , funExt‚Åª ((cong fst ‚àò snd ‚àò fst bIds) g) ( b a))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       p2S g a i = {!!} , {!!}



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       f' : (x : EMG) (y : EM‚ÇÅFam x) ‚Üí B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       f' = elimEM G (Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí truncB)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           p
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           s


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           bdS : (g h : ‚ü® G ‚ü©) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                Square {A = Type (‚Ñì-max ‚Ñì ‚Ñì')}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  (Œª i ‚Üí (a : ua (fst m g ) i) ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  (Œª i ‚Üí (a : ua (fst m (g ¬∑ h) ) i) ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  (Œª i ‚Üí (a : ua (fst m h ) i) ‚Üí B)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           bdS g h = Œª i j ‚Üí ( (compPath-filler _ _) ‚ñ∑
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (sym (uaCompEquiv (fst m g) (fst m h))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   ‚àô cong ua (sym ((snd m) .IsGroupHom.pres¬∑ g h)))) i j ‚Üí B

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           s : (g h : ‚ü® G ‚ü©) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              SquareP (Œª i j ‚Üí ( (compPath-filler _ _) ‚ñ∑
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                (sym (uaCompEquiv _ _) ‚àô cong ua (sym ((snd m) .IsGroupHom.pres¬∑ g h)))) i j ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   (p g)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   (p (g ¬∑ h))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   (p h)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           s g h i j =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             comp (Œª k ‚Üí doubleWhiskFiller refl (compPath-filler _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               ((sym (uaCompEquiv _ _) ‚àô cong ua (sym ((snd m) .IsGroupHom.pres¬∑ g h)))) k i j
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                 ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (Œª k ‚Üí Œª { (i = i0) ‚Üí (p g) j
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        ; (i = i1) ‚Üí sR k j 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        ; (j = i0) ‚Üí b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        ; (j = i1) ‚Üí (p h) i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        })
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               (compPathP‚Üífiller (Œª x ‚Üí x) (p g) (p h) i j)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              where



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                pp : PathP (Œª j‚ÇÅ ‚Üí (ua (fst m g) ‚àô ua (fst m h)) j‚ÇÅ ‚Üí B) b b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                pp = (compPathP‚Üí (Œª x ‚Üí x) (p g) (p h))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                ppMid : PathP (Œª j ‚Üí ua ((fst m g) ‚àô‚Çë (fst m h)) j ‚Üí B) b b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                ppMid = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- ua‚Üí Œª a ‚Üí p‚ÇÄ g a ‚àô p‚ÇÄ h (fst m g .fst a)  



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                sRl : SquareP (Œª k j ‚Üí uaCompEquiv (fst m g) (fst m h) k j ‚Üí B )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        ppMid      
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        pp
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        (Œª _ ‚Üí b)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        Œª _ ‚Üí b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                sRl = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- postS : (a : A) ‚Üí Square {A = singl (b a)}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --     (p2S g a)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --     (p2S (g ¬∑ h) a)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --     refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --     (isPropSingl _ _  ‚àô‚àô (p2S h a) ‚àô‚àô isPropSingl _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- postS i j  = {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                postS' : (a : A) ‚Üí Square {A = singl (b a)}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    (p2S g a ‚àô (isPropSingl _ _  ‚àô‚àô (p2S h a) ‚àô‚àô isPropSingl _ _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    (p2S (g ¬∑ h) a)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                postS' i j  = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- unglueGH : ‚àÄ k j ‚Üí ua (snd m .IsGroupHom.pres¬∑ g h k) j ‚Üí A
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- unglueGH k j = ua-unglue (snd m .IsGroupHom.pres¬∑ g h k) j



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                sRrJ0 : Square {A = (A ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                            (cong (b ‚àò_) (cong fst (snd m .IsGroupHom.pres¬∑ g h)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                            refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                            (funExt (p‚ÇÄ* (g ¬∑ h)) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                               cong (_‚àò b) (sym ((cong fst ‚àò snd ‚àò fst bIds) (g ¬∑ h)))) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                            (funExt Œª a ‚Üí sym (p‚ÇÄ h (fst m g .fst a)) ‚àô sym (p‚ÇÄ g a))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                sRrJ0 = {!s‚ÇÄ (g ¬∑ h)!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- sRrJ1 : Square {A = (A ‚Üí B)}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --             refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --             refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --             (cong (_‚àò b) (sym (funExt (p* (g ¬∑ h)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --             (cong (_‚àò b) (sym (funExt (p* (g ¬∑ h)))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- sRrJ1 l _ = (cong (_‚àò b) (sym (funExt (p* (g ¬∑ h))))) l


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                sRr : PathP (Œª k ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                          PathP (Œª j ‚Üí ua (snd m .IsGroupHom.pres¬∑ g h k) j ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                            b b )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        (p (g ¬∑ h))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        ppMid

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                sRr k j = comp (Œª l ‚Üí ua (snd m .IsGroupHom.pres¬∑ g h k) j  ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  {œÜ = k ‚à® j ‚à® ~ k ‚à® ~ j}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  (Œª l ‚Üí Œª { (k = i0) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                           ; (k = i1) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                           ; (j = i0) ‚Üí sRrJ0 l k
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                           ; (j = i1) ‚Üí (cong (_‚àò b) (sym (funExt (p* (g ¬∑ h))))) l
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                           }) (( Œª a ‚Üí fst (postS' a k j) ) ‚àò
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                              (ua-unglue (snd m .IsGroupHom.pres¬∑ g h k) j)) 
               


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                sR : SquareP (Œª k j ‚Üí ((Œª i‚ÇÅ ‚Üí uaCompEquiv (fst m g) (fst m h) (~ i‚ÇÅ)) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                                      (Œª i‚ÇÅ ‚Üí ua (snd m .IsGroupHom.pres¬∑ g h (~ i‚ÇÅ))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                               k j ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                               B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        pp 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        (p (g ¬∑ h))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        (Œª _ ‚Üí b)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                        Œª _ ‚Üí b
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                sR = compPathP'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    {B = Œª x ‚Üí PathP (Œª j ‚Üí x j ‚Üí B) b b}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      {p = sym (uaCompEquiv (fst m g) (fst m h))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      {q = sym (cong ua ((snd m .IsGroupHom.pres¬∑ g h)))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      (symP sRl)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                      (symP sRr)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- sL : SquareP (Œª i j ‚Üí compPath-filler (ua (fst m g)) (ua (fst m h)) i j ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --        (p g)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --        pp
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --        (Œª _ ‚Üí b)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                --        (p h)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                -- sL = compPathP‚Üífiller (Œª x ‚Üí x) (p g) (p h) 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- compPath-filler (ua (fst m g)) (ua (fst m h)) i j ‚Üí B


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- (ua (fst m g)) (ua (fst m h))

    
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     f : EMtrunc ‚Üí B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     f = uncurry f'



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- constFunHLev : ‚àÄ {‚Ñì'} (B : Type ‚Ñì') ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --                 Iso (Œ£ (B ‚Üí B) Œª f ‚Üí ‚àÄ x ‚Üí f x ‚â° x) (‚àÄ (x : B) ‚Üí singl x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.fun (constFunHLev B) x x‚ÇÅ = (fst x x‚ÇÅ) , (sym (snd x x‚ÇÅ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.inv (constFunHLev B) x = (fst ‚àò x) , (sym ‚àò snd ‚àò x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.rightInv (constFunHLev B) b = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.leftInv (constFunHLev B) a = refl

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- recEMtrunc : ‚àÄ {‚Ñì'} (B : Type ‚Ñì') ‚Üí (isGroupoid B) ‚Üí (A ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --             ‚Üí (m' : GroupHom G (Symmetric-Group _ isSetA)) ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- recEMtrunc = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- to : A // actRTrans ‚Üí Œ£ (EM‚ÇÅ G) (fst ‚àò EM‚ÇÅFam)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- to = rec// actRTrans
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --   {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    (Œª x ‚Üí embase , x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    (Œª r ‚Üí Œ£PathP ((emloop (fst r)) , toPathP (transportRefl _ ‚àô sym (snd r))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- from : (e : EM‚ÇÅ G) ‚Üí (fst (EM‚ÇÅFam e)) ‚Üí A // actRTrans
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- from = elimEM
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --   G (Œª _ ‚Üí isGroupoidŒ† Œª _ ‚Üí squash//)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    [_]//
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    (Œª g ‚Üí ua‚Üí Œª a ‚Üí eq// (g , refl))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- isoGQŒ£ : Iso (A // actRTrans) (Œ£ _ (fst ‚àò EM‚ÇÅFam))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.fun isoGQŒ£ = to
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.inv isoGQŒ£ = uncurry from
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.rightInv isoGQŒ£ = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- Iso.leftInv isoGQŒ£ =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --   elimSet// actRTrans (Œª _ ‚Üí squash// _ _) (Œª _ ‚Üí refl)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     Œª {a} {b} (r , p)  ‚Üí {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --         -- {!!} ‚ñ∑ (Œª _ ‚Üí eq// {a = a} {b} (r , p))
  


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module _ {‚Ñì} {A B : Type ‚Ñì} (f : A ‚Üí B) where 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG : FreeGroup A ‚Üí FreeGroup B
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (Œ∑ x) = Œ∑ (f x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (x ¬∑ x‚ÇÅ) = mapFG x ¬∑ mapFG x‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG Œµ = Œµ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (inv x) = inv (mapFG x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (assoc x x‚ÇÅ x‚ÇÇ i) = (assoc (mapFG x) (mapFG x‚ÇÅ) (mapFG x‚ÇÇ) i) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (idr x i) = idr (mapFG x) i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (idl x i) = idl (mapFG x) i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (invr x i) = invr (mapFG x) i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (invl x i) = invl (mapFG x) i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   mapFG (trunc x y p q i i‚ÇÅ) = (trunc _ _ (cong mapFG p) (cong mapFG q) i i‚ÇÅ)
  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- data PermR : ‚Ñï ‚Üí Type‚ÇÄ where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   invo : ‚àÄ {n} ‚Üí PermR (suc n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   braid : ‚àÄ {n} ‚Üí PermR (suc (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   comm : ‚àÄ {n} ‚Üí Fin n ‚Üí PermR (suc (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   suc : ‚àÄ {n} ‚Üí PermR n ‚Üí PermR (suc n)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- permRel : ‚àÄ n ‚Üí PermR n ‚Üí FreeGroup (Fin n) √ó FreeGroup (Fin n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- permRel .(suc _) invo = Œ∑ zero , (inv (Œ∑ zero))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- permRel .(suc (suc _)) braid = (Œ∑ zero ¬∑ Œ∑ one) ¬∑ Œ∑ zero , (Œ∑ one ¬∑ Œ∑ zero) ¬∑ Œ∑ one
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- permRel .(suc (suc _)) (comm x) = (Œ∑ zero ¬∑ Œ∑ (suc (suc x))) , (Œ∑ (suc (suc x)) ¬∑ Œ∑ zero)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- permRel .(suc _) (suc x) = map-√ó (mapFG suc) (mapFG suc) (permRel _ x) 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Perm : ‚Ñï ‚Üí Group ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Perm n = Presented (permRel (pred‚Ñï n))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators : ‚àÄ {n} ‚Üí ‚ü® Perm (suc n) ‚ü©  ‚Üí PT.‚à• List (Fin n) ‚à•‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (Œ∑ x) = PT.‚à£ [ x ] ‚à£‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (x ¬∑ x‚ÇÅ) = PT.map2 _++_ (toGenerators x) (toGenerators x‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators Œµ = PT.‚à£ [] ‚à£‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (inv x) = PT.map rev (toGenerators x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (assoc x x‚ÇÅ x‚ÇÇ i) = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   PT.squash‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (PT.map2 _++_ (toGenerators x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (PT.map2 _++_ (toGenerators x‚ÇÅ) (toGenerators x‚ÇÇ)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (PT.map2 _++_
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (PT.map2 _++_ (toGenerators x) (toGenerators x‚ÇÅ)) (toGenerators x‚ÇÇ))  i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (idr x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (idl x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (invr x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (invl x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (rel i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toGenerators (trunc x x‚ÇÅ x‚ÇÇ y i i‚ÇÅ) = {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- sucPermFDMorphism : ‚àÄ n ‚Üí GroupHom (SymData n) (SymData (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (sucPermFDMorphism n) = sucPerm
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (sucPermFDMorphism n)) x y =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc (y .fst (x .fst k)) }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (sucPermFDMorphism n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc k }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (sucPermFDMorphism n)) x =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc (snd x .equiv-proof k .fst .fst) }

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- punchHeadInOutL : ‚àÄ {n} (k : Fin (suc n)) ‚Üí Œ£ (List (Fin n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Œª l ‚Üí concatG (SymData _) (map adjTransposition l) ‚â° PunchHeadInOut‚âÉ k 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- punchHeadInOutL {n} zero = [] , refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (punchHeadInOutL {suc n} (suc k)) = zero ‚à∑ map suc (fst (punchHeadInOutL k))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- snd (punchHeadInOutL {suc n} (suc k)) = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   cong ( swap0and1‚âÉ ‚àô‚Çë_)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ({!!} ‚àô cong sucPerm (snd (punchHeadInOutL k)))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- generatedSym : ‚àÄ n ‚Üí ‚ü® GeneratedBy (SymData (suc n)) adjTransposition ‚ü© 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- generatedSym zero = Œª _ ‚Üí PT.‚à£ [] , equivEq (funExt Œª x ‚Üí isContr‚ÜíisProp isContrFin1 _ _) ‚à£‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- generatedSym (suc n) e = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   let (e' , p) = unwindPermHead e
      
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   in PT.map (Œª (l , p') ‚Üí map suc l ++ fst (punchHeadInOutL (equivFun e zero))   ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          (cong {x = (map adjTransposition
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (map suc l ++
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         fst (punchHeadInOutL (equivFun e zero))))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          {y = map adjTransposition (map suc l)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ++ map adjTransposition (fst (punchHeadInOutL (fst e zero)))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --             (concatG (SymData (suc (suc n))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           ‚àô sym (concatG¬∑ {G = (SymData (suc (suc n)))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (map adjTransposition (map suc l))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              (map adjTransposition (fst (punchHeadInOutL (equivFun e zero)))))
           
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ‚àô cong‚ÇÇ _‚àô‚Çë_ ({!!} ‚àô cong sucPerm p') (snd (punchHeadInOutL (equivFun e zero)))) ‚àô sym p)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            (generatedSym n e')


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators : ‚àÄ n ‚Üí ‚ü® GeneratedBy (Perm n) Œ∑ ‚ü©
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators = {!!}





-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (Œ∑ x) = PT.‚à£ [ x ] , sym (idr (Œ∑ x)) ‚à£‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (x ¬∑ x‚ÇÅ) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   PT.map2 (Œª (x , p) (y , q) ‚Üí (x ++ y) ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ({!!} ‚àô cong‚ÇÇ _¬∑_ p q))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (PermGenerators n x) (PermGenerators n x‚ÇÅ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n Œµ =  PT.‚à£ [] , refl ‚à£‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (inv x) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    PT.map (Œª (x , p) ‚Üí rev x ,
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (PermGenerators n x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (assoc x x‚ÇÅ x‚ÇÇ i) = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    isProp‚ÜíPathP {!!} {!!} {!!} i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- i = i0 ‚ä¢ PermGenerators n (x ¬∑ (x‚ÇÅ ¬∑ x‚ÇÇ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- i = i1 ‚ä¢ PermGenerators n ((x ¬∑ x‚ÇÅ) ¬∑ x‚ÇÇ)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (idr x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (idl x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (invr x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (invl x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (rel i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermGenerators n (trunc x x‚ÇÅ x‚ÇÇ y i i‚ÇÅ) = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ : ‚àÄ {n} ‚Üí ‚ü® Perm (suc n) ‚ü©  ‚Üí Fin (suc n) ‚âÉ Fin (suc n) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (Œ∑ x) = adjTransposition x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (x ¬∑ y) = to‚âÉ x ‚àô‚Çë to‚âÉ y
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ Œµ = idEquiv _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (inv x) = invEquiv (to‚âÉ x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (assoc x x‚ÇÅ x‚ÇÇ i) = (compEquiv-assoc (to‚âÉ x) (to‚âÉ x‚ÇÅ) (to‚âÉ x‚ÇÇ)) i 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (idr x i) = compEquivEquivId (to‚âÉ x) (~ i)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (idl x i) = compEquivIdEquiv (to‚âÉ x) (~ i)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (invr x i) = invEquiv-is-rinv (to‚âÉ x) i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (invl x i) = invEquiv-is-linv (to‚âÉ x) i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (rel invo i) = swap0and1‚âÉ=invEquivSwap0and1 i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (rel braid i) = swap0and1Braid i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (rel (comm x) i) = commTranspositions x i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (to‚âÉ (rel (suc {suc n} ix) i)) zero = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (to‚âÉ (rel (suc {suc n} ix) i)) (suc x) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- snd (to‚âÉ (rel (suc {suc n} ix) i)) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    -- ({!!} ‚àô‚àô (Œª i ‚Üí sucPerm (to‚âÉ (rel ix i))) ‚àô‚àô equivEq {!!}) i
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- to‚âÉ (trunc x x‚ÇÅ x‚ÇÇ y i i‚ÇÅ) = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL : ‚àÄ {‚Ñì} {A : Type ‚Ñì} {n} ‚Üí V.Vec A n ‚Üí ‚ü® Perm n ‚ü© ‚Üí V.Vec A n
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL (x‚ÇÅ V.‚à∑ x‚ÇÇ V.‚à∑ l) (Œ∑ zero) = (x‚ÇÇ V.‚à∑ x‚ÇÅ V.‚à∑ l)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL (x‚ÇÅ V.‚à∑ x‚ÇÇ V.‚à∑ l) (Œ∑ (suc x)) = (x‚ÇÅ V.‚à∑ (onL (x‚ÇÇ V.‚à∑ l) (Œ∑ x)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (x ¬∑ x‚ÇÅ) = onL (onL l x) x‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l Œµ = l
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (inv x) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (assoc x x‚ÇÅ x‚ÇÇ i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (idr x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (idl x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (invr x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (invl x i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (rel ix i) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- onL l (trunc x x‚ÇÅ x‚ÇÇ y i i‚ÇÅ) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- i = i0 ‚ä¢ to‚âÉ (fromFree (mapFG suc (fst (permRel (suc n) ix))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- i = i1 ‚ä¢ to‚âÉ (fromFree (mapFG suc (snd (permRel (suc n) ix))))





-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- GeneratedBy : ‚àÄ {‚Ñì ‚Ñìg} ‚Üí (G : Group ‚Ñì) ‚Üí (A : Type ‚Ñìg) ‚Üí (A ‚Üí fst G) ‚Üí hProp (‚Ñì-max ‚Ñì ‚Ñìg)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (GeneratedBy G A f) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (x : fst G) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    ‚àÉ (List A) (Œª l ‚Üí x ‚â° foldr (GroupStr._¬∑_ (snd G) ‚àò f) (GroupStr.1g (snd G)) l )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- snd (GeneratedBy G A f) = isPropŒ† Œª _ ‚Üí PT.squash‚ÇÅ

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- GeneratedBy' : ‚àÄ {‚Ñì ‚Ñìg} ‚Üí (G : Group ‚Ñì) ‚Üí (A : Type ‚Ñìg) ‚Üí (A ‚Üí fst G) ‚Üí hProp (‚Ñì-max ‚Ñì ‚Ñìg)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (GeneratedBy' G A f) = PT.‚à• (  (x : fst G) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    Œ£ (List A) (Œª l ‚Üí x ‚â° foldr (GroupStr._¬∑_ (snd G) ‚àò f) (GroupStr.1g (snd G)) l )) ‚à•‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- snd (GeneratedBy' G A f) = PT.squash‚ÇÅ

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- hasS‚Üí‚âÉ : ‚àÄ {‚Ñì} ‚Üí {A B : Type ‚Ñì} ‚Üí (f : A ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚Üí PT.‚à• Œ£ (B ‚Üí A) (Œª g ‚Üí section f g √ó retract f g ) ‚à•‚ÇÅ ‚Üí isEquiv f
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- hasS‚Üí‚âÉ f = PT.rec (isPropIsEquiv _) Œª x ‚Üí isoToIsEquiv (iso f (fst x) (fst (snd x)) (snd (snd x)))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- hasSR‚Üí‚âÉ : ‚àÄ {‚Ñì} ‚Üí {A B : Type ‚Ñì} ‚Üí (f : A ‚Üí B)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚Üí PT.‚à• hasSection f ‚à•‚ÇÅ ‚Üí PT.‚à• hasRetract f ‚à•‚ÇÅ ‚Üí isEquiv f
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- hasSR‚Üí‚âÉ f = PT.rec2 (isPropIsEquiv _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  Œª x x‚ÇÅ ‚Üí isoToIsEquiv (biInvEquiv‚ÜíIso-right (biInvEquiv _ (fst x) (snd x) (fst x‚ÇÅ) (snd x‚ÇÅ))) 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- module _ {‚Ñì} (G H : Group ‚Ñì) (A : Type ‚Ñì) (g : _ )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (genG : ‚ü® GeneratedBy' G A g ‚ü© ) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (m : GroupHom G H)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (genH : ‚ü® GeneratedBy' H A (fst m ‚àò g) ‚ü© )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (f : H .fst ‚Üí G .fst)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           (pp : ‚àÄ a ‚Üí f (fst m (g a)) ‚â° g a )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           -- (m' : GroupHom H G)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           where

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   open GroupStr (snd G)  

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   isEquivM : isEquiv (fst m)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   isEquivM = hasS‚Üí‚âÉ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (PT.map2
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (Œª gH gG ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           let s = Œª b ‚Üí cong (fst m ‚àò f) (snd (gH b)) ‚àô‚àô {!!} ‚àô‚àô sym (snd (gH b))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --           in
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              f
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              , (s
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --               , Œª a ‚Üí cong (f ‚àò (fst m)) ((snd (gG a)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   ‚àô‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                   ‚àô‚àô sym (snd (gG a))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         genH genG)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    -- (PT.map
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --   (Œª gH ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --      let f' = (Œª x ‚Üí foldr (GroupStr._¬∑_ (snd G) ‚àò g) (GroupStr.1g (snd G)) (fst (gH x)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --      in f' , (Œª b ‚Üí {!!} ‚àô sym (snd (gH b)) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --                ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --   genH ) 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    -- (PT.map2
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --   (Œª gH gG ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --      let f'' : H .fst ‚Üí G .fst 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --          f'' = (Œª x ‚Üí foldr (GroupStr._¬∑_ (snd G) ‚àò g) (GroupStr.1g (snd G)) (fst (gH x)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --          -- f' = Œª x ‚Üí foldr (GroupStr._¬∑_ (snd G) ‚àò g) (GroupStr.1g (snd G))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --          --   (fst (gG (f'' x)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --      in f'' , Œª a ‚Üí {!sym (snd (gH (fst m a)))!}  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --                )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    --   genH genG ) 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- genH' : ‚ü® GeneratedBy H A (fst m ‚àò g) ‚ü©
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- genH' = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- foldM : ‚àÄ xs ‚Üí fst m (foldr (Œª x‚ÇÇ ‚Üí snd G GroupStr.¬∑ g x‚ÇÇ) 1g xs) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      foldr (Œª x‚ÇÇ ‚Üí snd H GroupStr.¬∑ h x‚ÇÇ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     (GroupStr.1g (snd H)) xs
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- foldM = {!!} 

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- foldM' : ‚àÄ xs ‚Üí fst m' (foldr (Œª x‚ÇÇ ‚Üí snd H GroupStr.¬∑ h x‚ÇÇ) (GroupStr.1g (snd H)) xs) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      foldr (Œª x‚ÇÇ ‚Üí snd G GroupStr.¬∑ g x‚ÇÇ)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     (GroupStr.1g (snd G)) xs
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- foldM' = {!!} 




-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- sec : section (fst m) (fst m')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- sec x = PT.rec2 {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --    (Œª (xs , p) (ys , q) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      let z = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --      in cong (fst m ‚àò fst m') p ‚àô {!!} ‚àô sym p ) (genH x) (genH (fst m (fst m' x)))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   sec : section (fst m) (fst m')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   sec x = PT.rec2 {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      (Œª (x , p) (y , q) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        let z = sym q ‚àô cong (fst m') p

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        in {!!} ‚àô (foldM x) ‚àô sym p ) (genH x) (genG (fst m' x))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- isInjectiveGen : isInjective m
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   -- isInjectiveGen x =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --   PT.rec2 (isPropŒ† Œª _ ‚Üí is-set _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     (Œª x‚ÇÇ x‚ÇÉ p ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --       let pp = sym p ‚àô snd x‚ÇÉ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --       in snd x‚ÇÇ ‚àô {!pp!})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   --     (genG x) (genH (fst m x))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- sucPermFDMorphism : ‚àÄ n ‚Üí GroupHom (SymData n) (SymData (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (sucPermFDMorphism n) = sucPerm
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (sucPermFDMorphism n)) x y =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc (y .fst (x .fst k)) }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (sucPermFDMorphism n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc k }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (sucPermFDMorphism n)) x =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc (snd x .equiv-proof k .fst .fst) }

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- data PLaws  : {n : ‚Ñï} ‚Üí List (Fin n) ‚Üí List (Fin n) ‚Üí Type where
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pInvo : ‚àÄ {n} ‚Üí PLaws {suc n} (zero ‚à∑ zero ‚à∑ []) []
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pComm : ‚àÄ {n} ‚Üí ‚àÄ k ‚Üí PLaws {suc (suc n)} (zero ‚à∑ suc (suc k) ‚à∑ []) (suc (suc k) ‚à∑ zero ‚à∑ [])
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   pBraid : ‚àÄ {n} ‚Üí PLaws {suc (suc n)} (zero ‚à∑ one ‚à∑ zero ‚à∑ []) (one ‚à∑ zero ‚à∑ one ‚à∑ [])
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   p‚Üë : ‚àÄ {n k k'} ‚Üí PLaws {n} k k' ‚Üí PLaws {suc n} (map suc k) (map suc k')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   p‚Üê : ‚àÄ {n k k' x} ‚Üí PLaws {n} k k' ‚Üí PLaws {n} (x ‚à∑ k) (x ‚à∑ k')
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   p‚Üí : ‚àÄ {n k k' x} ‚Üí PLaws {n} k k' ‚Üí PLaws {n} (k ‚à∑ ≥ x) (k' ‚à∑ ≥ x)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- sucPL : ‚àÄ {n} ‚Üí (_ / PLaws {n}) ‚Üí (_ / PLaws {suc n}) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- sucPL =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   rec/ squash/ ([_]/ ‚àò map suc) (Œª _ _ ‚Üí eq/ _ _ ‚àò p‚Üë)
  

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚à∑ ≥PL : ‚àÄ {n} ‚Üí ‚àÄ x ‚Üí (_ / PLaws {n}) ‚Üí (_ / PLaws {n}) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚à∑ ≥PL x = rec/ squash/ ([_]/ ‚àò (_‚à∑ ≥ x)) (Œª _ _ ‚Üí eq/ _ _ ‚àò p‚Üí)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚à∑PL : ‚àÄ {n} ‚Üí ‚àÄ x ‚Üí (_ / PLaws {n}) ‚Üí (_ / PLaws {n}) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- ‚à∑PL x = rec/ squash/ ([_]/ ‚àò (x ‚à∑_)) (Œª _ _ ‚Üí eq/ _ _ ‚àò p‚Üê)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- map-++ : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} (f : A ‚Üí B) ‚Üí ‚àÄ xs ys ‚Üí map f (xs ++ ys) ‚â° (map f xs) ++ (map f ys) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- map-++ f [] ys = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- map-++ f (x ‚à∑ xs) ys = cong (_ ‚à∑_) (map-++ f xs ys)



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- rev-map : ‚àÄ {‚Ñì} {A B : Type ‚Ñì} (f : A ‚Üí B) ‚Üí ‚àÄ xs ‚Üí map f (rev xs) ‚â° rev (map f xs)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- rev-map f = ind refl Œª {a} {l} p ‚Üí map-++ f (rev l) [ a ] ‚àô cong (_‚à∑ ≥ f a) p

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- w : ‚àÄ n ‚Üí (a b : List (Fin n)) ‚Üí PLaws {n} a b ‚Üí Path (_ / PLaws {n}) [ rev a ]/ [ rev b ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- w _ _ _ pInvo = eq/ _ _ pInvo
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- w _ _ _ (pComm k) = sym (eq/ _ _ (pComm k))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- w _ _ _ pBraid = eq/ _ _ pBraid
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- w _ _ _ (p‚Üë {n} {a} {b} p) = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  let w' = w _ _ _ p
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      p' = cong sucPL w'
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  in cong [_]/ (sym (rev-map _ a)) ‚àô‚àô p' ‚àô‚àô cong [_]/ (rev-map _ b)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- w _ _ _ (p‚Üê {x = x} p) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  let w' = w _ _ _ p
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  in cong (‚à∑ ≥PL x) w'

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- w _ _ _ (p‚Üí {k = k} {k' = k'} {x = x} p) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  let w' = w _ _ _ p
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   in cong [_]/ (rev-snoc k _) ‚àô‚àô cong (‚à∑PL x) w' ‚àô‚àô  sym (cong [_]/ (rev-snoc k' _))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- www : ‚àÄ n ‚Üí (a b c : List (Fin n)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       PLaws b c ‚Üí Path (_ / PLaws {n}) [ a ++ b ]/ [ a ++ c ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- www n [] b c x = eq/ _ _ x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- www n (x‚ÇÅ ‚à∑ a) b c x = cong (‚à∑PL x‚ÇÅ) (www n a b c x)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- www2 : ‚àÄ n ‚Üí (a b c : List (Fin n)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       PLaws a b ‚Üí Path (_ / PLaws {n}) [ a ++ c ]/ [ b ++ c ]/

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- www2 n a b [] x = cong [_]/ (++-unit-r _) ‚àô‚àô eq/ _ _ x ‚àô‚àô cong [_]/ (sym (++-unit-r _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- www2 n a b (x‚ÇÅ ‚à∑ c) x = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    cong [_]/ (sym (++-assoc a [ x‚ÇÅ ] c)) ‚àô‚àô www2 _ _ _ c (p‚Üí {x = x‚ÇÅ} x) ‚àô‚àô cong [_]/ (++-assoc b [ x‚ÇÅ ] c)  

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- _‚àôPerm_ : ‚àÄ {n} ‚Üí _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- _‚àôPerm_ {n} = rec2 squash/ (Œª x y ‚Üí [ x ++ y ]/) (www2 n) (www n)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- cyclePerm : ‚àÄ {n} ‚Üí (k : Fin (suc n)) ‚Üí  (_ / PLaws {n})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- cyclePerm {n} zero = [ [] ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- cyclePerm {suc n} (suc k) = [  [ zero ]  ]/ ‚àôPerm sucPL (cyclePerm k)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- assocPerm : ‚àÄ {n} ‚Üí (x y z : List (Fin n) / PLaws) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (x ‚àôPerm (y ‚àôPerm z)) ‚â° ((x ‚àôPerm y) ‚àôPerm z)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- assocPerm = elimProp3 (Œª _ _ _ ‚Üí squash/ _ _) Œª a b c ‚Üí cong [_]/ (sym (++-assoc a b c))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- permInvo : ‚àÄ {n} ‚Üí ‚àÄ a ‚Üí PLaws {n} (a ‚à∑ a ‚à∑ []) []
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- permInvo zero = pInvo
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- permInvo (suc a) = p‚Üë (permInvo a)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Perm' : ‚Ñï ‚Üí Group ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (Perm' n) = _ / PLaws {n}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- GroupStr.1g (snd (Perm' n)) = [ [] ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- GroupStr._¬∑_ (snd (Perm' n)) = _‚àôPerm_ {n}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- GroupStr.inv (snd (Perm' n)) = rec/ squash/ ([_]/ ‚àò rev) (Œª a b p ‚Üí w n a b p)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- GroupStr.isGroup (snd (Perm' n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   makeIsGroup
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     squash/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     assocPerm
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (elimProp/ (Œª _ ‚Üí squash/ _ _) Œª _ ‚Üí cong ([_]/) (++-unit-r _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     ((elimProp/ (Œª _ ‚Üí squash/ _ _) Œª _ ‚Üí refl))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (elimProp/ (Œª _ ‚Üí squash/ _ _) (ind refl Œª {a = a} {l}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       p ‚Üí sym (assocPerm [ [ a ] ]/ [ l ]/ [ rev ([ a ] ++ l) ]/)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            ‚àô cong ([ [ a ] ]/ ‚àôPerm_) ( assocPerm [ l ]/ [ rev l ]/ [ _ ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              ‚àô cong (_‚àôPerm [ [ a ] ]/) p) ‚àô eq/ _ _ (permInvo a)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     (elimProp/ (Œª _ ‚Üí squash/ _ _) (ind refl Œª {a = a} {l}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       p ‚Üí sym (assocPerm [ rev l ]/ [ [ a ] ]/ [ _ ]/)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            ‚àô cong ([ rev l ]/ ‚àôPerm_) ( assocPerm [ [ a ] ]/ [ [ a ] ]/ [ _ ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --              ‚àô cong (_‚àôPerm [ l ]/) (eq/ _ _ (permInvo a))) ‚àô p))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- evenTest : ‚Ñï ‚Üí Bool
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- evenTest zero = true
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- evenTest (suc x) = not (evenTest x)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Perm : ‚Ñï ‚Üí Group ‚Ñì-zero
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- Perm = Perm' ‚àò pred‚Ñï

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- sucPermMorphism : ‚àÄ n ‚Üí GroupHom (Perm n) (Perm (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- sucPermMorphism zero = idGroupHom
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (sucPermMorphism (suc n)) = sucPL
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (sucPermMorphism (suc n))) =  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  elimProp2 (Œª _ _ ‚Üí squash/ _ _ )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    Œª a b ‚Üí cong [_]/ (map-++ suc a b)  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (sucPermMorphism (suc n))) = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (sucPermMorphism (suc n))) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  elimProp/ (Œª _ ‚Üí squash/ _ _) Œª a ‚Üí cong [_]/ (rev-map suc a)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isInjectiveSucPermMorphism : ‚àÄ n ‚Üí isInjective (sucPermMorphism n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isInjectiveSucPermMorphism zero = Œª _ ‚Üí idfun _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isInjectiveSucPermMorphism (suc n) = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   elimProp/ (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí squash/ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    {!!} --(ind (Œª _ ‚Üí refl) Œª x x‚ÇÅ ‚Üí {!!})

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isInjectiveSucPermFDMorphism : ‚àÄ n ‚Üí isInjective (sucPermFDMorphism n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isInjectiveSucPermFDMorphism = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- generatedPerm : ‚àÄ n ‚Üí ‚ü® GeneratedBy (Perm' n) (Fin n) ([_]/ ‚àò [_]) ‚ü© 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- generatedPerm n = elimProp/ (Œª _ ‚Üí PT.squash‚ÇÅ )
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  (ind PT.‚à£ [] , refl ‚à£‚ÇÅ (Œª {a} ‚Üí PT.map Œª x ‚Üí a ‚à∑ fst x , cong ([ [ a ] ]/ ‚àôPerm_) (snd x)))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- generatedSym : ‚àÄ n ‚Üí ‚ü® GeneratedBy (SymData (suc n)) (Fin n) adjTransposition ‚ü© 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- generatedSym zero = Œª _ ‚Üí PT.‚à£ [] , equivEq (funExt Œª x ‚Üí isContr‚ÜíisProp isContrFin1 _ _) ‚à£‚ÇÅ
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- generatedSym (suc n) e =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   let (e' , p) = unwindPermHead e
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   in PT.map (Œª (l , p') ‚Üí map suc l ++ {!!}  , p ‚àô {!!}) (generatedSym n e')

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHomH : ‚àÄ n ‚Üí (a b : List (Fin n)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       PLaws a b ‚Üí ‚àÄ k ‚Üí  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       fst (foldr (Œª k y ‚Üí adjTransposition k ‚àô‚Çë y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (idEquiv (Fin (suc n))) a) k
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       fst (foldr (Œª k y ‚Üí adjTransposition k ‚àô‚Çë y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       (idEquiv (Fin (suc n))) b) k
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHomH _ _ _ pInvo = Œª { zero ‚Üí refl ; one ‚Üí refl ; (suc (suc k)) ‚Üí refl }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHomH _ _ _ (pComm k') = Œª { zero ‚Üí refl ; one ‚Üí refl ; (suc (suc k)) ‚Üí refl }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHomH _ _ _ pBraid = Œª { zero ‚Üí refl ; one ‚Üí refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --       ; (suc (suc zero)) ‚Üí refl ; (suc (suc (suc k))) ‚Üí refl}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHomH _ _ _ (p‚Üë {k = k} {k'} x) zero = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHomH _ _ _ (p‚Üë {k = k} {k'} x) (suc j) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   {!!} ‚àô‚àô cong suc (PermHomH _ k k' x j) ‚àô‚àô {!!} 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHomH _ _ _ (p‚Üê x) k = {!PermHomH _ _ _ (x) k!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHomH _ _ _ (p‚Üí x) k = {!PermHomH _ _ _ (x) k!}



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toPerm : ‚àÄ n ‚Üí fst (SymData (suc n)) ‚Üí fst (Perm' n) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toPerm zero x = [ [] ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- toPerm (suc n) e =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   let (e' , p) = unwindPermHead e
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   in  sucPL (toPerm n e') ‚àôPerm cyclePerm (equivFun e zero) 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fold-rev : ‚àÄ {‚Ñì} (G : Group ‚Ñì) ‚Üí (xs : List (fst G)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   foldr (GroupStr._¬∑_ (snd G)) (GroupStr.1g (snd G)) (rev xs) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     GroupStr.inv (snd G) (foldr ((GroupStr._¬∑_ (snd G))) ((GroupStr.1g (snd G))) xs)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fold-rev = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fold-rev' : ‚àÄ {‚Ñì ‚Ñìg} (G : Group ‚Ñì) (A : Type ‚Ñìg) (f : A ‚Üí fst G) ‚Üí (xs : List A) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   foldr (GroupStr._¬∑_ (snd G) ‚àò f) (GroupStr.1g (snd G)) (rev xs) ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     GroupStr.inv (snd G) (foldr ((GroupStr._¬∑_ (snd G)) ‚àò f) ((GroupStr.1g (snd G))) xs)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fold-rev' G A f [] = sym (GroupTheory.inv1g G)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fold-rev' G A f (x ‚à∑ xs) = {!!} ‚àô sym ((GroupTheory.invDistr G) _ _)


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHom : ‚àÄ n ‚Üí GroupHom (Perm' n) (SymData (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (PermHom n) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   rec/ (isSetŒ£ (isSet‚Üí isSetFin) (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsEquiv _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (foldr (Œª k y ‚Üí adjTransposition k ‚àô‚Çë y ) (idEquiv _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (Œª a b x ‚Üí equivEq (funExt (PermHomH n a b x)))



-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (PermHom n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   elimProp2 (Œª _ _ ‚Üí isSetŒ£ (isSet‚Üí isSetFin) (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsEquiv _)) _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    (ind (Œª _ ‚Üí sym (compEquivIdEquiv _))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        Œª {a} p b ‚Üí cong (compEquiv (adjTransposition a)) (p b) ‚àô compEquiv-assoc _ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (PermHom n)) = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (PermHom n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  elimProp/ (Œª _ ‚Üí isSetŒ£ (isSet‚Üí isSetFin) (Œª _ ‚Üí isProp‚ÜíisSet (isPropIsEquiv _)) _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   Œª l ‚Üí fold-rev' (SymData (suc n)) (Fin n) adjTransposition l


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHL : ‚àÄ n ‚Üí ‚àÄ e ‚Üí PermHom (suc n) .fst (sucPL (toPerm _ e)) ‚â° sucPerm e 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHL = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHRRR : ‚àÄ n ‚Üí ‚àÄ k ‚Üí [ [ k ] ]/ ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                             (toPerm n (fst (PermHom _) [ [ k ] ]/))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHRRR (suc n) k = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHRRR (suc n) (suc k) = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHRR : ‚àÄ n ‚Üí ‚àÄ k ‚Üí cyclePerm (suc k) ‚â° (toPerm n (fst (PermHom _) (cyclePerm (suc k))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHRR .(suc _) zero = isSurPermHomHRRR _ _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHRR .(suc (suc n)) (suc {suc n} k) = {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- cong (Œª x ‚Üí ([ [ zero ] ]/ ‚àôPerm sucPL x)) (isSurPermHomHRR _ k) ‚àô
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --  {!!} ‚àô cong (toPerm _) (sym (IsGroupHom.pres¬∑ (snd (PermHom (suc _)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --   [ [ zero ] ]/ (sucPL (cyclePerm (fst {!!} {!!})))))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHR : ‚àÄ n ‚Üí ‚àÄ k ‚Üí fst (PermHom n) (cyclePerm k) ‚â° (PunchHeadInOut‚âÉ {suc n} k)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHR n zero = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHR .(suc _) one = equivEq refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomHR .(suc _) (suc (suc k)) = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   IsGroupHom.pres¬∑ (snd (PermHom (suc _))) [ [ zero ] ]/ (sucPL (cyclePerm (suc k) ))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    ‚àô cong‚ÇÇ _‚àô‚Çë_ (compEquivEquivId _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        ((cong {x = (cyclePerm (suc k) )} {y = (toPerm _ (fst (PermHom _) (cyclePerm (suc k))))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         ((fst (PermHom _)) ‚àò sucPL) (isSurPermHomHRR _ k) ‚àô isSurPermHomHL _ (fst (PermHom _) (cyclePerm (suc k))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         ‚àô (cong sucPerm (isSurPermHomHR _ (suc k))))

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomH : ‚àÄ n ‚Üí ‚àÄ x ‚Üí PermHom n .fst (toPerm n x) ‚â° x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomH zero x = equivEq (funExt Œª x ‚Üí isContr‚ÜíisProp isContrFin1 _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHomH (suc n) e =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  let (e' , p) = unwindPermHead e
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  in  (IsGroupHom.pres¬∑ (snd (PermHom (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (sucPL (toPerm _ e')) (cyclePerm (equivFun e zero))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    ‚àô cong‚ÇÇ {x = PermHom _ .fst (sucPL (toPerm _ e'))}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --            {y = sucPerm e'}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      _‚àô‚Çë_ {!!} {!!}) ‚àô sym p
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      -- (isSurPermHomHL _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --      -- (isSurPermHomHR _ (equivFun e zero))) ‚àô sym p

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHom : ‚àÄ n ‚Üí isSurjective (PermHom n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isSurPermHom n x =  PT.‚à£ (toPerm _ x) , isSurPermHomH n x ‚à£‚ÇÅ

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isInjPermHom : ‚àÄ n ‚Üí isInjective (PermHom n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- isInjPermHom n =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  elimProp/ (Œª _ ‚Üí isPropŒ† Œª _ ‚Üí squash/ _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   (ind (Œª _ ‚Üí refl) Œª {a} _ p ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     {!!})
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --     -- ‚àô eq/ _ _ (permInvo a))


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- unwindPerm : ‚àÄ n ‚Üí (a : (_ / PLaws {suc n})) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  Œ£ (Fin (suc (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    Œª k ‚Üí Œ£ ((_ / PLaws {n})) Œª e' ‚Üí sucPL e' ‚àôPerm cyclePerm k ‚â° a 


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHom : ‚àÄ n ‚Üí GroupHom (Perm (suc n)) (SymData (suc n))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (PermHom zero) _ = idEquiv _
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (PermHom zero)) _ _ = equivEq refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (PermHom zero)) = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (PermHom zero)) _ = equivEq refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (PermHom (suc n)) e =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   let (k , e' , p) = unwindPerm _ e
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   in sucPerm ((fst (PermHom n)) e') ‚àô‚Çë PunchHeadInOut‚âÉ k 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (PermHom (suc n))) = {!!}
  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (PermHom (suc n))) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (PermHom (suc n))) = {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermHom‚Åª : ‚àÄ n ‚Üí GroupHom (SymData (suc n)) (Perm (suc n)) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (PermHom‚Åª zero) _ = [ [] ]/
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (PermHom‚Åª zero)) _ _ = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (PermHom‚Åª zero)) = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (PermHom‚Åª zero)) _ = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (PermHom‚Åª (suc n)) e =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   let (e' , p) = unwindPermHead e
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   in  sucPL ((fst (PermHom‚Åª n)) e') ‚àôPerm cyclePerm (equivFun e zero) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (PermHom‚Åª (suc n))) x y =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (PermHom‚Åª (suc n))) = 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  (GroupStr.¬∑IdR (snd (Perm (suc (suc n)))) (sucPL
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --        (fst (PermHom‚Åª n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --         (isoToEquiv
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --          _ ))))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  ‚àô {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- cong sucPL (GroupStr.¬∑IdR (snd (Perm (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --   {!(fst (PermHom‚Åª n) _)!}) ‚àô {!!} 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (PermHom‚Åª (suc n))) e =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   let (e' , p) = unwindPermHead e
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   in {!!}  

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- unwindPerm = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- cyclePermAgree : ‚àÄ n ‚Üí ‚àÄ k ‚Üí (PunchHeadInOut‚âÉ k) ‚â° fst (PermHom (suc n)) (cyclePerm k)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- cyclePermAgree = {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- wPP : ‚àÄ n ‚Üí (a b : List (Fin n)) ‚Üí PLaws a b ‚Üí evenTest (length a) ‚â° evenTest (length b)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- wPP .(suc _) .(zero ‚à∑ zero ‚à∑ []) .[] pInvo = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- wPP .(suc (suc _)) .(zero ‚à∑ suc (suc k) ‚à∑ []) .(suc (suc k) ‚à∑ zero ‚à∑ []) (pComm k) = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- wPP .(suc (suc _)) .(zero ‚à∑ one ‚à∑ zero ‚à∑ []) .(one ‚à∑ zero ‚à∑ one ‚à∑ []) pBraid = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- wPP .(suc _) .(map suc _) .(map suc _) (p‚Üë {k = k} {k'} x) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  cong evenTest (length-map suc k) ‚àô‚àô wPP _ _ _ x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   ‚àô‚àô sym (cong evenTest (length-map suc k'))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- wPP n .(_ ‚à∑ _) .(_ ‚à∑ _) (p‚Üê x) = cong not (wPP _ _ _ x)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- wPP n .(_ ‚à∑ ≥ _) .(_ ‚à∑ ≥ _) (p‚Üí x) = {!!} ‚àô‚àô cong not (wPP _ _ _ x) ‚àô‚àô {!!}

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- parity : ‚àÄ {n} ‚Üí (_ / PLaws {n}) ‚Üí Bool
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- parity {n} = rec/ isSetBool (evenTest ‚àò length ) (wPP n)

-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- unwindPerm : ‚àÄ n ‚Üí (a : (_ / PLaws {suc n})) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                  Œ£ (Fin (suc (suc n)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --                    Œª k ‚Üí Œ£ ((_ / PLaws {n})) Œª e' ‚Üí sucPL e' ‚àôPerm cyclePerm k ‚â° a 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- unwindPerm zero x =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   if parity x
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   then zero , [ [] ]/ , {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   else one , [ [] ]/ , {!!}
  
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- unwindPerm (suc n) a = {!!}


-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (sucPermFDMorphism n) = sucPerm
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (sucPermFDMorphism n)) x y =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc (y .fst (x .fst k)) }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (sucPermFDMorphism n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc k }
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (sucPermFDMorphism n)) x =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   equivEq Œª { i zero ‚Üí zero ; i (suc k) ‚Üí suc (snd x .equiv-proof k .fst .fst) }




-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- PermParity : ‚àÄ n ‚Üí GroupHom (Perm' n) BoolGroup
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- fst (PermParity n) = rec/ isSetBool (evenTest ‚àò length ) (wPP n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres¬∑ (snd (PermParity n)) =
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --   elimProp2 (Œª _  _ ‚Üí isSetBool _ _)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --    {!!}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  -- elimProp/ {!!} (ind (elimProp/ (Œª _ ‚Üí isSetBool _ _) (Œª _ ‚Üí refl))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --   Œª {a} {l} ‚Üí ind {B = Œª l ‚Üí ((y : List (Fin n) / PLaws) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --       rec/ isSetBool (Œª x ‚Üí evenTest (length x)) (wPP n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --       ((Perm n .snd GroupStr.¬∑ [ l ]/) y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --       ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --       (BoolGroup .snd GroupStr.¬∑ evenTest (length l))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --       (rec/ isSetBool (Œª x ‚Üí evenTest (length x)) (wPP n) y)) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      (y : List (Fin n) / PLaws) ‚Üí
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      rec/ isSetBool (Œª x ‚Üí evenTest (length x)) (wPP n)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      ((Perm n .snd GroupStr.¬∑ [ a ‚à∑ l ]/) y)
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      ‚â°
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      (BoolGroup .snd GroupStr.¬∑ not (evenTest (length l)))
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --      (rec/ isSetBool (Œª x ‚Üí evenTest (length x)) (wPP n) y)}
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --  --       (Œª p ‚Üí elimProp/ {!!} {!!}) (Œª p p' ‚Üí elimProp/ {!!} {!!}) l) 
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.pres1 (snd (PermParity n)) = refl
-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- IsGroupHom.presinv (snd (PermParity n)) = elimProp/ (Œª _ ‚Üí isSetBool _ _) {!!}
